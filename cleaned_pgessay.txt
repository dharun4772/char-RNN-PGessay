<sot>how to do great work.july 2023
if you collected lists of techniques for doing great work in a lot.of different fields, what would the intersection look like? i decided.to find out by making it.partly my goal was to create a guide that could be used by someone.working in any field. but i was also curious about the shape of the.intersection. and one thing this exercise shows is that it does.have a definite shape; it's not just a point labelled "work hard."the following recipe assumes you're very ambitious..the first step is to decide what to work on. the work you choose.needs to have three qualities: it has to be something you have a.natural aptitude for, that you have a deep interest in, and that.offers scope to do great work.in practice you don't have to worry much about the third criterion..ambitious people are if anything already too conservative about it..so all you need to do is find something you have an aptitude for.and great interest in..[1]that sounds straightforward, but it's often quite difficult. when.you're young you don't know what you're good at or what different.kinds of work are like. some kinds of work you end up doing may not.even exist yet. so while some people know what they want to do at.14, most have to figure it out.the way to figure out what to work on is by working. if you're not.sure what to work on, guess. but pick something and get going..you'll probably guess wrong some of the time, but that's fine. it's.good to know about multiple things; some of the biggest discoveries.come from noticing connections between different fields.develop a habit of working on your own projects. don't let "work".mean something other people tell you to do. if you do manage to do.great work one day, it will probably be on a project of your own..it may be within some bigger project, but you'll be driving your.part of it.what should your projects be? whatever seems to you excitingly.ambitious. as you grow older and your taste in projects evolves,.exciting and important will converge. at 7 it may seem excitingly.ambitious to build huge things out of lego, then at 14 to teach.yourself calculus, till at 21 you're starting to explore unanswered.questions in physics. but always preserve excitingness.there's a kind of excited curiosity that's both the engine and the.rudder of great work. it will not only drive you, but if you let.it have its way, will also show you what to work on.what are you excessively curious about — curious to a degree that.would bore most other people? that's what you're looking for.once you've found something you're excessively interested in, the.next step is to learn enough about it to get you to one of the.frontiers of knowledge. knowledge expands fractally, and from a.distance its edges look smooth, but once you learn enough to get.close to one, they turn out to be full of gaps.the next step is to notice them. this takes some skill, because.your brain wants to ignore such gaps in order to make a simpler.model of the world. many discoveries have come from asking questions.about things that everyone else took for granted..[2]if the answers seem strange, so much the better. great work often.has a tincture of strangeness. you see this from painting to math..it would be affected to try to manufacture it, but if it appears,.embrace it.boldly chase outlier ideas, even if other people aren't interested.in them — in fact, especially if they aren't. if you're excited.about some possibility that everyone else ignores, and you have.enough expertise to say precisely what they're all overlooking,.that's as good a bet as you'll find..[3]four steps: choose a field, learn enough to get to the frontier,.notice gaps, explore promising ones. this is how practically everyone.who's done great work has done it, from painters to physicists.steps two and four will require hard work. it may not be possible.to prove that you have to work hard to do great things, but the.empirical evidence is on the scale of the evidence for mortality..that's why it's essential to work on something you're deeply.interested in. interest will drive you to work harder than mere.diligence ever could.the three most powerful motives are curiosity, delight, and the.desire to do something impressive. sometimes they converge, and.that combination is the most powerful of all.the big prize is to discover a new fractal bud. you notice a crack.in the surface of knowledge, pry it open, and there's a whole world.inside.let's talk a little more about the complicated business of figuring.out what to work on. the main reason it's hard is that you can't.tell what most kinds of work are like except by doing them. which.means the four steps overlap: you may have to work at something for.years before you know how much you like it or how good you are at.it. and in the meantime you're not doing, and thus not learning.about, most other kinds of work. so in the worst case you choose.late based on very incomplete information..[4]the nature of ambition exacerbates this problem. ambition comes in.two forms, one that precedes interest in the subject and one that.grows out of it. most people who do great work have a mix, and the.more you have of the former, the harder it will be to decide what.to do.the educational systems in most countries pretend it's easy. they.expect you to commit to a field long before you could know what.it's really like. and as a result an ambitious person on an optimal.trajectory will often read to the system as an instance of breakage.it would be better if they at least admitted it — if they admitted.that the system not only can't do much to help you figure out what.to work on, but is designed on the assumption that you'll somehow.magically guess as a teenager. they don't tell you, but i will:.when it comes to figuring out what to work on, you're on your own..some people get lucky and do guess correctly, but the rest will.find themselves scrambling diagonally across tracks laid down on.the assumption that everyone does.what should you do if you're young and ambitious but don't know.what to work on? what you should not do is drift along passively,.assuming the problem will solve itself. you need to take action..but there is no systematic procedure you can follow. when you read.biographies of people who've done great work, it's remarkable how.much luck is involved. they discover what to work on as a result.of a chance meeting, or by reading a book they happen to pick up..so you need to make yourself a big target for luck, and the way to.do that is to be curious. try lots of things, meet lots of people,.read lots of books, ask lots of questions..[5]when in doubt, optimize for interestingness. fields change as you.learn more about them. what mathematicians do, for example, is very.different from what you do in high school math classes. so you need.to give different types of work a chance to show you what they're.like. but a field should become increasingly interesting as you.learn more about it. if it doesn't, it's probably not for you.don't worry if you find you're interested in different things than.other people. the stranger your tastes in interestingness, the.better. strange tastes are often strong ones, and a strong taste.for work means you'll be productive. and you're more likely to find.new things if you're looking where few have looked before.one sign that you're suited for some kind of work is when you like.even the parts that other people find tedious or frightening.but fields aren't people; you don't owe them any loyalty. if in the.course of working on one thing you discover another that's more.exciting, don't be afraid to switch.if you're making something for people, make sure it's something.they actually want. the best way to do this is to make something.you yourself want. write the story you want to read; build the tool.you want to use. since your friends probably have similar interests,.this will also get you your initial audience.this should follow from the excitingness rule. obviously the most.exciting story to write will be the one you want to read. the reason.i mention this case explicitly is that so many people get it wrong..instead of making what they want, they try to make what some.imaginary, more sophisticated audience wants. and once you go down.that route, you're lost..[6]there are a lot of forces that will lead you astray when you're.trying to figure out what to work on. pretentiousness, fashion,.fear, money, politics, other people's wishes, eminent frauds. but.if you stick to what you find genuinely interesting, you'll be proof.against all of them. if you're interested, you're not astray..following your interests may sound like a rather passive strategy,.but in practice it usually means following them past all sorts of.obstacles. you usually have to risk rejection and failure. so it.does take a good deal of boldness.but while you need boldness, you don't usually need much planning..in most cases the recipe for doing great work is simply: work hard.on excitingly ambitious projects, and something good will come of.it. instead of making a plan and then executing it, you just try.to preserve certain invariants.the trouble with planning is that it only works for achievements.you can describe in advance. you can win a gold medal or get rich.by deciding to as a child and then tenaciously pursuing that goal,.but you can't discover natural selection that way.i think for most people who want to do great work, the right strategy.is not to plan too much. at each stage do whatever seems most.interesting and gives you the best options for the future. i call.this approach "staying upwind." this is how most people who've done.great work seem to have done it..even when you've found something exciting to work on, working on.it is not always straightforward. there will be times when some new.idea makes you leap out of bed in the morning and get straight to.work. but there will also be plenty of times when things aren't.like that.you don't just put out your sail and get blown forward by inspiration..there are headwinds and currents and hidden shoals. so there's a.technique to working, just as there is to sailing.for example, while you must work hard, it's possible to work too.hard, and if you do that you'll find you get diminishing returns:.fatigue will make you stupid, and eventually even damage your health..the point at which work yields diminishing returns depends on the.type. some of the hardest types you might only be able to do for.four or five hours a day.ideally those hours will be contiguous. to the extent you can, try.to arrange your life so you have big blocks of time to work in..you'll shy away from hard tasks if you know you might be interrupted.it will probably be harder to start working than to keep working..you'll often have to trick yourself to get over that initial.threshold. don't worry about this; it's the nature of work, not a.flaw in your character. work has a sort of activation energy, both.per day and per project. and since this threshold is fake in the.sense that it's higher than the energy required to keep going, it's.ok to tell yourself a lie of corresponding magnitude to get over.it.it's usually a mistake to lie to yourself if you want to do great.work, but this is one of the rare cases where it isn't. when i'm.reluctant to start work in the morning, i often trick myself by.saying "i'll just read over what i've got so far." five minutes.later i've found something that seems mistaken or incomplete, and.i'm off.similar techniques work for starting new projects. it's ok to lie.to yourself about how much work a project will entail, for example..lots of great things began with someone saying "how hard could it.be?"this is one case where the young have an advantage. they're more.optimistic, and even though one of the sources of their optimism.is ignorance, in this case ignorance can sometimes beat knowledge.try to finish what you start, though, even if it turns out to be.more work than you expected. finishing things is not just an exercise.in tidiness or self-discipline. in many projects a lot of the best.work happens in what was meant to be the final stage.another permissible lie is to exaggerate the importance of what.you're working on, at least in your own mind. if that helps you.discover something new, it may turn out not to have been a lie after.all..[7].since there are two senses of starting work — per day and per.project — there are also two forms of procrastination. per-project.procrastination is far the more dangerous. you put off starting.that ambitious project from year to year because the time isn't.quite right. when you're procrastinating in units of years, you can.get a lot not done..[8]one reason per-project procrastination is so dangerous is that it.usually camouflages itself as work. you're not just sitting around.doing nothing; you're working industriously on something else. so.per-project procrastination doesn't set off the alarms that per-day.procrastination does. you're too busy to notice it.the way to beat it is to stop occasionally and ask yourself: am i.working on what i most want to work on? when you're young it's ok.if the answer is sometimes no, but this gets increasingly dangerous.as you get older..[9].great work usually entails spending what would seem to most people.an unreasonable amount of time on a problem. you can't think of.this time as a cost, or it will seem too high. you have to find the.work sufficiently engaging as it's happening.there may be some jobs where you have to work diligently for years.at things you hate before you get to the good part, but this is not.how great work happens. great work happens by focusing consistently.on something you're genuinely interested in. when you pause to take.stock, you're surprised how far you've come.the reason we're surprised is that we underestimate the cumulative.effect of work. writing a page a day doesn't sound like much, but.if you do it every day you'll write a book a year. that's the key:.consistency. people who do great things don't get a lot done every.day. they get something done, rather than nothing.if you do work that compounds, you'll get exponential growth. most.people who do this do it unconsciously, but it's worth stopping to.think about. learning, for example, is an instance of this phenomenon:.the more you learn about something, the easier it is to learn more..growing an audience is another: the more fans you have, the more.new fans they'll bring you.the trouble with exponential growth is that the curve feels flat.in the beginning. it isn't; it's still a wonderful exponential.curve. but we can't grasp that intuitively, so we underrate exponential.growth in its early stages.something that grows exponentially can become so valuable that it's.worth making an extraordinary effort to get it started. but since.we underrate exponential growth early on, this too is mostly done.unconsciously: people push through the initial, unrewarding phase.of learning something new because they know from experience that.learning new things always takes an initial push, or they grow their.audience one fan at a time because they have nothing better to do..if people consciously realized they could invest in exponential.growth, many more would do it..work doesn't just happen when you're trying to. there's a kind of.undirected thinking you do when walking or taking a shower or lying.in bed that can be very powerful. by letting your mind wander a.little, you'll often solve problems you were unable to solve by.frontal attack.you have to be working hard in the normal way to benefit from this.phenomenon, though. you can't just walk around daydreaming. the.daydreaming has to be interleaved with deliberate work that feeds.it questions..[10]everyone knows to avoid distractions at work, but it's also important.to avoid them in the other half of the cycle. when you let your.mind wander, it wanders to whatever you care about most at that.moment. so avoid the kind of distraction that pushes your work out.of the top spot, or you'll waste this valuable type of thinking on.the distraction instead. (exception: don't avoid love.).consciously cultivate your taste in the work done in your field..until you know which is the best and what makes it so, you don't.know what you're aiming for.and that is what you're aiming for, because if you don't try to.be the best, you won't even be good. this observation has been made.by so many people in so many different fields that it might be worth.thinking about why it's true. it could be because ambition is a.phenomenon where almost all the error is in one direction — where.almost all the shells that miss the target miss by falling short..or it could be because ambition to be the best is a qualitatively.different thing from ambition to be good. or maybe being good is.simply too vague a standard. probably all three are true..[11]fortunately there's a kind of economy of scale here. though it might.seem like you'd be taking on a heavy burden by trying to be the.best, in practice you often end up net ahead. it's exciting, and.also strangely liberating. it simplifies things. in some ways it's.easier to try to be the best than to try merely to be good.one way to aim high is to try to make something that people will.care about in a hundred years. not because their opinions matter.more than your contemporaries', but because something that still.seems good in a hundred years is more likely to be genuinely good..don't try to work in a distinctive style. just try to do the best.job you can; you won't be able to help doing it in a distinctive.way.style is doing things in a distinctive way without trying to. trying.to is affectation.affectation is in effect to pretend that someone other than you is.doing the work. you adopt an impressive but fake persona, and while.you're pleased with the impressiveness, the fakeness is what shows.in the work..[12]the temptation to be someone else is greatest for the young. they.often feel like nobodies. but you never need to worry about that.problem, because it's self-solving if you work on sufficiently.ambitious projects. if you succeed at an ambitious project, you're.not a nobody; you're the person who did it. so just do the work and.your identity will take care of itself.."avoid affectation" is a useful rule so far as it goes, but how.would you express this idea positively? how would you say what to.be, instead of what not to be? the best answer is earnest. if you're.earnest you avoid not just affectation but a whole set of similar.vices.the core of being earnest is being intellectually honest. we're.taught as children to be honest as an unselfish virtue — as a kind.of sacrifice. but in fact it's a source of power too. to see new.ideas, you need an exceptionally sharp eye for the truth. you're.trying to see more truth than others have seen so far. and how can.you have a sharp eye for the truth if you're intellectually dishonest?one way to avoid intellectual dishonesty is to maintain a slight.positive pressure in the opposite direction. be aggressively willing.to admit that you're mistaken. once you've admitted you were mistaken.about something, you're free. till then you have to carry it..[13]another more subtle component of earnestness is informality..informality is much more important than its grammatically negative.name implies. it's not merely the absence of something. it means.focusing on what matters instead of what doesn't.what formality and affectation have in common is that as well as.doing the work, you're trying to seem a certain way as you're doing.it. but any energy that goes into how you seem comes out of being.good. that's one reason nerds have an advantage in doing great work:.they expend little effort on seeming anything. in fact that's.basically the definition of a nerd.nerds have a kind of innocent boldness that's exactly what you need.in doing great work. it's not learned; it's preserved from childhood..so hold onto it. be the one who puts things out there rather than.the one who sits back and offers sophisticated-sounding criticisms.of them. "it's easy to criticize" is true in the most literal sense,.and the route to great work is never easy.there may be some jobs where it's an advantage to be cynical and.pessimistic, but if you want to do great work it's an advantage to.be optimistic, even though that means you'll risk looking like a.fool sometimes. there's an old tradition of doing the opposite. the.old testament says it's better to keep quiet lest you look like a.fool. but that's advice for seeming smart. if you actually want.to discover new things, it's better to take the risk of telling.people your ideas.some people are naturally earnest, and with others it takes a.conscious effort. either kind of earnestness will suffice. but i.doubt it would be possible to do great work without being earnest..it's so hard to do even if you are. you don't have enough margin.for error to accommodate the distortions introduced by being affected,.intellectually dishonest, orthodox, fashionable, or cool..[14].great work is consistent not only with who did it, but with itself..it's usually all of a piece. so if you face a decision in the middle.of working on something, ask which choice is more consistent.you may have to throw things away and redo them. you won't necessarily.have to, but you have to be willing to. and that can take some.effort; when there's something you need to redo, status quo bias.and laziness will combine to keep you in denial about it. to beat.this ask: if i'd already made the change, would i want to revert.to what i have now?have the confidence to cut. don't keep something that doesn't fit.just because you're proud of it, or because it cost you a lot of.effort.indeed, in some kinds of work it's good to strip whatever you're.doing to its essence. the result will be more concentrated; you'll.understand it better; and you won't be able to lie to yourself about.whether there's anything real there.mathematical elegance may sound like a mere metaphor, drawn from.the arts. that's what i thought when i first heard the term "elegant".applied to a proof. but now i suspect it's conceptually prior —.that the main ingredient in artistic elegance is mathematical.elegance. at any rate it's a useful standard well beyond math.elegance can be a long-term bet, though. laborious solutions will.often have more prestige in the short term. they cost a lot of.effort and they're hard to understand, both of which impress people,.at least temporarily.whereas some of the very best work will seem like it took comparatively.little effort, because it was in a sense already there. it didn't.have to be built, just seen. it's a very good sign when it's hard.to say whether you're creating something or discovering it.when you're doing work that could be seen as either creation or.discovery, err on the side of discovery. try thinking of yourself.as a mere conduit through which the ideas take their natural shape.(strangely enough, one exception is the problem of choosing a problem.to work on. this is usually seen as search, but in the best case.it's more like creating something. in the best case you create the.field in the process of exploring it.)similarly, if you're trying to build a powerful tool, make it.gratuitously unrestrictive. a powerful tool almost by definition.will be used in ways you didn't expect, so err on the side of.eliminating restrictions, even if you don't know what the benefit.will be.great work will often be tool-like in the sense of being something.others build on. so it's a good sign if you're creating ideas that.others could use, or exposing questions that others could answer..the best ideas have implications in many different areas.if you express your ideas in the most general form, they'll be truer.than you intended..true by itself is not enough, of course. great ideas have to be.true and new. and it takes a certain amount of ability to see new.ideas even once you've learned enough to get to one of the frontiers.of knowledge.in english we give this ability names like originality, creativity,.and imagination. and it seems reasonable to give it a separate name,.because it does seem to some extent a separate skill. it's possible.to have a great deal of ability in other respects — to have a great.deal of what's often called technical ability — and yet not have.much of this.i've never liked the term "creative process." it seems misleading..originality isn't a process, but a habit of mind. original thinkers.throw off new ideas about whatever they focus on, like an angle.grinder throwing off sparks. they can't help it.if the thing they're focused on is something they don't understand.very well, these new ideas might not be good. one of the most.original thinkers i know decided to focus on dating after he got.divorced. he knew roughly as much about dating as the average 15.year old, and the results were spectacularly colorful. but to see.originality separated from expertise like that made its nature all.the more clear.i don't know if it's possible to cultivate originality, but there.are definitely ways to make the most of however much you have. for.example, you're much more likely to have original ideas when you're.working on something. original ideas don't come from trying to have.original ideas. they come from trying to build or understand something.slightly too difficult..[15]talking or writing about the things you're interested in is a good.way to generate new ideas. when you try to put ideas into words, a.missing idea creates a sort of vacuum that draws it out of you..indeed, there's a kind of thinking that can only be done by writing.changing your context can help. if you visit a new place, you'll.often find you have new ideas there. the journey itself often.dislodges them. but you may not have to go far to get this benefit..sometimes it's enough just to go for a walk..[16]it also helps to travel in topic space. you'll have more new ideas.if you explore lots of different topics, partly because it gives.the angle grinder more surface area to work on, and partly because.analogies are an especially fruitful source of new ideas.don't divide your attention evenly between many topics though,.or you'll spread yourself too thin. you want to distribute it.according to something more like a power law..[17].be professionally.curious about a few topics and idly curious about many more.curiosity and originality are closely related. curiosity feeds.originality by giving it new things to work on. but the relationship.is closer than that. curiosity is itself a kind of originality;.it's roughly to questions what originality is to answers. and since.questions at their best are a big component of answers, curiosity.at its best is a creative force..having new ideas is a strange game, because it usually consists of.seeing things that were right under your nose. once you've seen a.new idea, it tends to seem obvious. why did no one think of this.before?when an idea seems simultaneously novel and obvious, it's probably.a good one.seeing something obvious sounds easy. and yet empirically having.new ideas is hard. what's the source of this apparent contradiction?.it's that seeing the new idea usually requires you to change the.way you look at the world. we see the world through models that.both help and constrain us. when you fix a broken model, new ideas.become obvious. but noticing and fixing a broken model is hard..that's how new ideas can be both obvious and yet hard to discover:.they're easy to see after you do something hard.one way to discover broken models is to be stricter than other.people. broken models of the world leave a trail of clues where.they bash against reality. most people don't want to see these.clues. it would be an understatement to say that they're attached.to their current model; it's what they think in; so they'll tend.to ignore the trail of clues left by its breakage, however conspicuous.it may seem in retrospect.to find new ideas you have to seize on signs of breakage instead.of looking away. that's what einstein did. he was able to see the.wild implications of maxwell's equations not so much because he was.looking for new ideas as because he was stricter.the other thing you need is a willingness to break rules. paradoxical.as it sounds, if you want to fix your model of the world, it helps.to be the sort of person who's comfortable breaking rules. from the.point of view of the old model, which everyone including you initially.shares, the new model usually breaks at least implicit rules.few understand the degree of rule-breaking required, because new.ideas seem much more conservative once they succeed. they seem.perfectly reasonable once you're using the new model of the world.they brought with them. but they didn't at the time; it took the.greater part of a century for the heliocentric model to be generally.accepted, even among astronomers, because it felt so wrong.indeed, if you think about it, a good new idea has to seem bad to.most people, or someone would have already explored it. so what.you're looking for is ideas that seem crazy, but the right kind of.crazy. how do you recognize these? you can't with certainty. often.ideas that seem bad are bad. but ideas that are the right kind of.crazy tend to be exciting; they're rich in implications; whereas.ideas that are merely bad tend to be depressing.there are two ways to be comfortable breaking rules: to enjoy.breaking them, and to be indifferent to them. i call these two cases.being aggressively and passively independent-minded.the aggressively independent-minded are the naughty ones. rules.don't merely fail to stop them; breaking rules gives them additional.energy. for this sort of person, delight at the sheer audacity of.a project sometimes supplies enough activation energy to get it.started.the other way to break rules is not to care about them, or perhaps.even to know they exist. this is why novices and outsiders often.make new discoveries; their ignorance of a field's assumptions acts.as a source of temporary passive independent-mindedness. aspies.also seem to have a kind of immunity to conventional beliefs..several i know say that this helps them to have new ideas.strictness plus rule-breaking sounds like a strange combination..in popular culture they're opposed. but popular culture has a broken.model in this respect. it implicitly assumes that issues are trivial.ones, and in trivial matters strictness and rule-breaking are.opposed. but in questions that really matter, only rule-breakers.can be truly strict..an overlooked idea often doesn't lose till the semifinals. you do.see it, subconsciously, but then another part of your subconscious.shoots it down because it would be too weird, too risky, too much.work, too controversial. this suggests an exciting possibility: if.you could turn off such filters, you could see more new ideas.one way to do that is to ask what would be good ideas for someone.else to explore. then your subconscious won't shoot them down to.protect you.you could also discover overlooked ideas by working in the other.direction: by starting from what's obscuring them. every cherished.but mistaken principle is surrounded by a dead zone of valuable.ideas that are unexplored because they contradict it.religions are collections of cherished but mistaken principles. so.anything that can be described either literally or metaphorically.as a religion will have valuable unexplored ideas in its shadow..copernicus and darwin both made discoveries of this type..[18]what are people in your field religious about, in the sense of being.too attached to some principle that might not be as self-evident.as they think? what becomes possible if you discard it?.people show much more originality in solving problems than in.deciding which problems to solve. even the smartest can be surprisingly.conservative when deciding what to work on. people who'd never dream.of being fashionable in any other way get sucked into working on.fashionable problems.one reason people are more conservative when choosing problems than.solutions is that problems are bigger bets. a problem could occupy.you for years, while exploring a solution might only take days. but.even so i think most people are too conservative. they're not merely.responding to risk, but to fashion as well. unfashionable problems.are undervalued.one of the most interesting kinds of unfashionable problem is the.problem that people think has been fully explored, but hasn't..great work often takes something that already exists and shows its.latent potential. durer and watt both did this. so if you're.interested in a field that others think is tapped out, don't let.their skepticism deter you. people are often wrong about this.working on an unfashionable problem can be very pleasing. there's.no hype or hurry. opportunists and critics are both occupied.elsewhere. the existing work often has an old-school solidity. and.there's a satisfying sense of economy in cultivating ideas that.would otherwise be wasted.but the most common type of overlooked problem is not explicitly.unfashionable in the sense of being out of fashion. it just doesn't.seem to matter as much as it actually does. how do you find these?.by being self-indulgent — by letting your curiosity have its way,.and tuning out, at least temporarily, the little voice in your head.that says you should only be working on "important" problems.you do need to work on important problems, but almost everyone is.too conservative about what counts as one. and if there's an important.but overlooked problem in your neighborhood, it's probably already.on your subconscious radar screen. so try asking yourself: if you.were going to take a break from "serious" work to work on something.just because it would be really interesting, what would you do? the.answer is probably more important than it seems.originality in choosing problems seems to matter even more than.originality in solving them. that's what distinguishes the people.who discover whole new fields. so what might seem to be merely the.initial step — deciding what to work on — is in a sense the key.to the whole game..few grasp this. one of the biggest misconceptions about new ideas.is about the ratio of question to answer in their composition..people think big ideas are answers, but often the real insight was.in the question.part of the reason we underrate questions is the way they're used.in schools. in schools they tend to exist only briefly before being.answered, like unstable particles. but a really good question can.be much more than that. a really good question is a partial discovery..how do new species arise? is the force that makes objects fall to.earth the same as the one that keeps planets in their orbits? by.even asking such questions you were already in excitingly novel.territory.unanswered questions can be uncomfortable things to carry around.with you. but the more you're carrying, the greater the chance of.noticing a solution — or perhaps even more excitingly, noticing.that two unanswered questions are the same.sometimes you carry a question for a long time. great work often.comes from returning to a question you first noticed years before.— in your childhood, even — and couldn't stop thinking about..people talk a lot about the importance of keeping your youthful.dreams alive, but it's just as important to keep your youthful.questions alive..[19]this is one of the places where actual expertise differs most from.the popular picture of it. in the popular picture, experts are.certain. but actually the more puzzled you are, the better, so long.as (a) the things you're puzzled about matter, and (b) no one else.understands them either.think about what's happening at the moment just before a new idea.is discovered. often someone with sufficient expertise is puzzled.about something. which means that originality consists partly of.puzzlement — of confusion! you have to be comfortable enough with.the world being full of puzzles that you're willing to see them,.but not so comfortable that you don't want to solve them..[20]it's a great thing to be rich in unanswered questions. and this is.one of those situations where the rich get richer, because the best.way to acquire new questions is to try answering existing ones..questions don't just lead to answers, but also to more questions..the best questions grow in the answering. you notice a thread.protruding from the current paradigm and try pulling on it, and it.just gets longer and longer. so don't require a question to be.obviously big before you try answering it. you can rarely predict.that. it's hard enough even to notice the thread, let alone to.predict how much will unravel if you pull on it.it's better to be promiscuously curious — to pull a little bit on.a lot of threads, and see what happens. big things start small. the.initial versions of big things were often just experiments, or side.projects, or talks, which then grew into something bigger. so start.lots of small things.being prolific is underrated. the more different things you try,.the greater the chance of discovering something new. understand,.though, that trying lots of things will mean trying lots of things.that don't work. you can't have a lot of good ideas without also.having a lot of bad ones..[21]though it sounds more responsible to begin by studying everything.that's been done before, you'll learn faster and have more fun by.trying stuff. and you'll understand previous work better when you.do look at it. so err on the side of starting. which is easier when.starting means starting small; those two ideas fit together like.two puzzle pieces.how do you get from starting small to doing something great? by.making successive versions. great things are almost always made in.successive versions. you start with something small and evolve it,.and the final version is both cleverer and more ambitious than.anything you could have planned.it's particularly useful to make successive versions when you're.making something for people — to get an initial version in front.of them quickly, and then evolve it based on their response.begin by trying the simplest thing that could possibly work..surprisingly often, it does. if it doesn't, this will at least get.you started.don't try to cram too much new stuff into any one version. there.are names for doing this with the first version (taking too long.to ship) and the second (the second system effect), but these are.both merely instances of a more general principle.an early version of a new project will sometimes be dismissed as a.toy. it's a good sign when people do this. that means it has.everything a new idea needs except scale, and that tends to follow..[22]the alternative to starting with something small and evolving it.is to plan in advance what you're going to do. and planning does.usually seem the more responsible choice. it sounds more organized.to say "we're going to do x and then y and then z" than "we're going.to try x and see what happens." and it is more organized; it just.doesn't work as well.planning per se isn't good. it's sometimes necessary, but it's a.necessary evil — a response to unforgiving conditions. it's something.you have to do because you're working with inflexible media, or.because you need to coordinate the efforts of a lot of people. if.you keep projects small and use flexible media, you don't have to.plan as much, and your designs can evolve instead..take as much risk as you can afford. in an efficient market, risk.is proportionate to reward, so don't look for certainty, but for a.bet with high expected value. if you're not failing occasionally,.you're probably being too conservative.though conservatism is usually associated with the old, it's the.young who tend to make this mistake. inexperience makes them fear.risk, but it's when you're young that you can afford the most.even a project that fails can be valuable. in the process of working.on it, you'll have crossed territory few others have seen, and.encountered questions few others have asked. and there's probably.no better source of questions than the ones you encounter in trying.to do something slightly too hard..use the advantages of youth when you have them, and the advantages.of age once you have those. the advantages of youth are energy,.time, optimism, and freedom. the advantages of age are knowledge,.efficiency, money, and power. with effort you can acquire some of.the latter when young and keep some of the former when old.the old also have the advantage of knowing which advantages they.have. the young often have them without realizing it. the biggest.is probably time. the young have no idea how rich they are in time..the best way to turn this time to advantage is to use it in slightly.frivolous ways: to learn about something you don't need to know.about, just out of curiosity, or to try building something just.because it would be cool, or to become freakishly good at something.that "slightly" is an important qualification. spend time lavishly.when you're young, but don't simply waste it. there's a big difference.between doing something you worry might be a waste of time and doing.something you know for sure will be. the former is at least a bet,.and possibly a better one than you think..[23]the most subtle advantage of youth, or more precisely of inexperience,.is that you're seeing everything with fresh eyes. when your brain.embraces an idea for the first time, sometimes the two don't fit.together perfectly. usually the problem is with your brain, but.occasionally it's with the idea. a piece of it sticks out awkwardly.and jabs you when you think about it. people who are used to the.idea have learned to ignore it, but you have the opportunity not.to..[24]so when you're learning about something for the first time, pay.attention to things that seem wrong or missing. you'll be tempted.to ignore them, since there's a 99% chance the problem is with you..and you may have to set aside your misgivings temporarily to keep.progressing. but don't forget about them. when you've gotten further.into the subject, come back and check if they're still there. if.they're still viable in the light of your present knowledge, they.probably represent an undiscovered idea..one of the most valuable kinds of knowledge you get from experience.is to know what you don't have to worry about. the young know all.the things that could matter, but not their relative importance..so they worry equally about everything, when they should worry much.more about a few things and hardly at all about the rest.but what you don't know is only half the problem with inexperience..the other half is what you do know that ain't so. you arrive at.adulthood with your head full of nonsense — bad habits you've.acquired and false things you've been taught — and you won't be.able to do great work till you clear away at least the nonsense in.the way of whatever type of work you want to do.much of the nonsense left in your head is left there by schools..we're so used to schools that we unconsciously treat going to school.as identical with learning, but in fact schools have all sorts of.strange qualities that warp our ideas about learning and thinking.for example, schools induce passivity. since you were a small child,.there was an authority at the front of the class telling all of you.what you had to learn and then measuring whether you did. but neither.classes nor tests are intrinsic to learning; they're just artifacts.of the way schools are usually designed.the sooner you overcome this passivity, the better. if you're still.in school, try thinking of your education as your project, and your.teachers as working for you rather than vice versa. that may seem.a stretch, but it's not merely some weird thought experiment. it's.the truth economically, and in the best case it's the truth.intellectually as well. the best teachers don't want to be your.bosses. they'd prefer it if you pushed ahead, using them as a source.of advice, rather than being pulled by them through the material.schools also give you a misleading impression of what work is like..in school they tell you what the problems are, and they're almost.always soluble using no more than you've been taught so far. in.real life you have to figure out what the problems are, and you.often don't know if they're soluble at all.but perhaps the worst thing schools do to you is train you to win.by hacking the test. you can't do great work by doing that. you.can't trick god. so stop looking for that kind of shortcut. the way.to beat the system is to focus on problems and solutions that others.have overlooked, not to skimp on the work itself..don't think of yourself as dependent on some gatekeeper giving you.a "big break." even if this were true, the best way to get it would.be to focus on doing good work rather than chasing influential.people.and don't take rejection by committees to heart. the qualities that.impress admissions officers and prize committees are quite different.from those required to do great work. the decisions of selection.committees are only meaningful to the extent that they're part of.a feedback loop, and very few are..people new to a field will often copy existing work. there's nothing.inherently bad about that. there's no better way to learn how.something works than by trying to reproduce it. nor does.copying necessarily make your work unoriginal. originality is the.presence of new ideas, not the absence of old ones.there's a good way to copy and a bad way. if you're going to copy.something, do it openly instead of furtively, or worse still,.unconsciously. this is what's meant by the famously misattributed.phrase "great artists steal." the really dangerous kind of copying,.the kind that gives copying a bad name, is the kind that's done.without realizing it, because you're nothing more than a train.running on tracks laid down by someone else. but at the other.extreme, copying can be a sign of superiority rather than subordination..[25]in many fields it's almost inevitable that your early work will be.in some sense based on other people's. projects rarely arise in a.vacuum. they're usually a reaction to previous work. when you're.first starting out, you don't have any previous work; if you're.going to react to something, it has to be someone else's. once.you're established, you can react to your own. but while the former.gets called derivative and the latter doesn't, structurally the two.cases are more similar than they seem.oddly enough, the very novelty of the most novel ideas sometimes.makes them seem at first to be more derivative than they are. new.discoveries often have to be conceived initially as variations of.existing things, even by their discoverers, because there isn't.yet the conceptual vocabulary to express them.there are definitely some dangers to copying, though. one is that.you'll tend to copy old things — things that were in their day at.the frontier of knowledge, but no longer are.and when you do copy something, don't copy every feature of it..some will make you ridiculous if you do. don't copy the manner of.an eminent 50 year old professor if you're 18, for example, or the.idiom of a renaissance poem hundreds of years later.some of the features of things you admire are flaws they succeeded.despite. indeed, the features that are easiest to imitate are the.most likely to be the flaws.this is particularly true for behavior. some talented people are.jerks, and this sometimes makes it seem to the inexperienced that.being a jerk is part of being talented. it isn't; being talented.is merely how they get away with it.one of the most powerful kinds of copying is to copy something from.one field into another. history is so full of chance discoveries.of this type that it's probably worth giving chance a hand by.deliberately learning about other kinds of work. you can take ideas.from quite distant fields if you let them be metaphors.negative examples can be as inspiring as positive ones. in fact you.can sometimes learn more from things done badly than from things.done well; sometimes it only becomes clear what's needed when it's.missing..if a lot of the best people in your field are collected in one.place, it's usually a good idea to visit for a while. it will.increase your ambition, and also, by showing you that these people.are human, increase your self-confidence..[26]if you're earnest you'll probably get a warmer welcome than you.might expect. most people who are very good at something are happy.to talk about it with anyone who's genuinely interested. if they're.really good at their work, then they probably have a hobbyist's.interest in it, and hobbyists always want to talk about their.hobbies.it may take some effort to find the people who are really good,.though. doing great work has such prestige that in some places,.particularly universities, there's a polite fiction that everyone.is engaged in it. and that is far from true. people within universities.can't say so openly, but the quality of the work being done in.different departments varies immensely. some departments have people.doing great work; others have in the past; others never have..seek out the best colleagues. there are a lot of projects that can't.be done alone, and even if you're working on one that can be, it's.good to have other people to encourage you and to bounce ideas off.colleagues don't just affect your work, though; they also affect.you. so work with people you want to become like, because you will.quality is more important than quantity in colleagues. it's better.to have one or two great ones than a building full of pretty good.ones. in fact it's not merely better, but necessary, judging from.history: the degree to which great work happens in clusters suggests.that one's colleagues often make the difference between doing great.work and not.how do you know when you have sufficiently good colleagues? in my.experience, when you do, you know. which means if you're unsure,.you probably don't. but it may be possible to give a more concrete.answer than that. here's an attempt: sufficiently good colleagues.offer surprising insights. they can see and do things that you.can't. so if you have a handful of colleagues good enough to keep.you on your toes in this sense, you're probably over the threshold.most of us can benefit from collaborating with colleagues, but some.projects require people on a larger scale, and starting one of those.is not for everyone. if you want to run a project like that, you'll.have to become a manager, and managing well takes aptitude and.interest like any other kind of work. if you don't have them, there.is no middle path: you must either force yourself to learn management.as a second language, or avoid such projects..[27].husband your morale. it's the basis of everything when you're working.on ambitious projects. you have to nurture and protect it like a.living organism.morale starts with your view of life. you're more likely to do great.work if you're an optimist, and more likely to if you think of.yourself as lucky than if you think of yourself as a victim.indeed, work can to some extent protect you from your problems. if.you choose work that's pure, its very difficulties will serve as a.refuge from the difficulties of everyday life. if this is escapism,.it's a very productive form of it, and one that has been used by.some of the greatest minds in history.morale compounds via work: high morale helps you do good work, which.increases your morale and helps you do even better work. but this.cycle also operates in the other direction: if you're not doing.good work, that can demoralize you and make it even harder to. since.it matters so much for this cycle to be running in the right.direction, it can be a good idea to switch to easier work when.you're stuck, just so you start to get something done.one of the biggest mistakes ambitious people make is to allow.setbacks to destroy their morale all at once, like a balloon bursting..you can inoculate yourself against this by explicitly considering.setbacks a part of your process. solving hard problems always.involves some backtracking.doing great work is a depth-first search whose root node is the.desire to. so "if at first you don't succeed, try, try again" isn't.quite right. it should be: if at first you don't succeed, either.try again, or backtrack and then try again."never give up" is also not quite right. obviously there are times.when it's the right choice to eject. a more precise version would.be: never let setbacks panic you into backtracking more than you.need to. corollary: never abandon the root node.it's not necessarily a bad sign if work is a struggle, any more.than it's a bad sign to be out of breath while running. it depends.how fast you're running. so learn to distinguish good pain from.bad. good pain is a sign of effort; bad pain is a sign of damage..an audience is a critical component of morale. if you're a scholar,.your audience may be your peers; in the arts, it may be an audience.in the traditional sense. either way it doesn't need to be big..the value of an audience doesn't grow anything like linearly with.its size. which is bad news if you're famous, but good news if.you're just starting out, because it means a small but dedicated.audience can be enough to sustain you. if a handful of people.genuinely love what you're doing, that's enough.to the extent you can, avoid letting intermediaries come between.you and your audience. in some types of work this is inevitable,.but it's so liberating to escape it that you might be better off.switching to an adjacent type if that will let you go direct..[28]the people you spend time with will also have a big effect on your.morale. you'll find there are some who increase your energy and.others who decrease it, and the effect someone has is not always.what you'd expect. seek out the people who increase your energy and.avoid those who decrease it. though of course if there's someone.you need to take care of, that takes precedence.don't marry someone who doesn't understand that you need to work,.or sees your work as competition for your attention. if you're.ambitious, you need to work; it's almost like a medical condition;.so someone who won't let you work either doesn't understand you,.or does and doesn't care.ultimately morale is physical. you think with your body, so it's.important to take care of it. that means exercising regularly,.eating and sleeping well, and avoiding the more dangerous kinds of.drugs. running and walking are particularly good forms of exercise.because they're good for thinking..[29]people who do great work are not necessarily happier than everyone.else, but they're happier than they'd be if they didn't. in fact,.if you're smart and ambitious, it's dangerous not to be productive..people who are smart and ambitious but don't achieve much tend to.become bitter..it's ok to want to impress other people, but choose the right people..the opinion of people you respect is signal. fame, which is the.opinion of a much larger group you might or might not respect, just.adds noise.the prestige of a type of work is at best a trailing indicator and.sometimes completely mistaken. if you do anything well enough,.you'll make it prestigious. so the question to ask about a type of.work is not how much prestige it has, but how well it could be done.competition can be an effective motivator, but don't let it choose.the problem for you; don't let yourself get drawn into chasing.something just because others are. in fact, don't let competitors.make you do anything much more specific than work harder.curiosity is the best guide. your curiosity never lies, and it knows.more than you do about what's worth paying attention to..notice how often that word has come up. if you asked an oracle the.secret to doing great work and the oracle replied with a single.word, my bet would be on "curiosity."that doesn't translate directly to advice. it's not enough just to.be curious, and you can't command curiosity anyway. but you can.nurture it and let it drive you.curiosity is the key to all four steps in doing great work: it will.choose the field for you, get you to the frontier, cause you to.notice the gaps in it, and drive you to explore them. the whole.process is a kind of dance with curiosity..believe it or not, i tried to make this essay as short as i could..but its length at least means it acts as a filter. if you made it.this far, you must be interested in doing great work. and if so.you're already further along than you might realize, because the.set of people willing to want to is small.the factors in doing great work are factors in the literal,.mathematical sense, and they are: ability, interest, effort, and.luck. luck by definition you can't do anything about, so we can.ignore that. and we can assume effort, if you do in fact want to.do great work. so the problem boils down to ability and interest..can you find a kind of work where your ability and interest will.combine to yield an explosion of new ideas?here there are grounds for optimism. there are so many different.ways to do great work, and even more that are still undiscovered..out of all those different types of work, the one you're most suited.for is probably a pretty close match. probably a comically close.match. it's just a question of finding it, and how far into it your.ability and interest can take you. and you can only answer that by.trying.many more people could try to do great work than do. what holds.them back is a combination of modesty and fear. it seems presumptuous.to try to be newton or shakespeare. it also seems hard; surely if.you tried something like that, you'd fail. presumably the calculation.is rarely explicit. few people consciously decide not to try to do.great work. but that's what's going on subconsciously; they shy.away from the question.so i'm going to pull a sneaky trick on you. do you want to do great.work, or not? now you have to decide consciously. sorry about that..i wouldn't have done it to a general audience. but we already know.you're interested.don't worry about being presumptuous. you don't have to tell anyone..and if it's too hard and you fail, so what? lots of people have.worse problems than that. in fact you'll be lucky if it's the worst.problem you have.yes, you'll have to work hard. but again, lots of people have to.work hard. and if you're working on something you find very.interesting, which you necessarily will if you're on the right path,.the work will probably feel less burdensome than a lot of your.peers'.the discoveries are out there, waiting to be made. why not by you?.notes[1].i don't think you could give a precise definition of what.counts as great work. doing great work means doing something important.so well that you expand people's ideas of what's possible. but.there's no threshold for importance. it's a matter of degree, and.often hard to judge at the time anyway. so i'd rather people focused.on developing their interests rather than worrying about whether.they're important or not. just try to do something amazing, and.leave it to future generations to say if you succeeded.[2].a lot of standup comedy is based on noticing anomalies in.everyday life. "did you ever notice...?" new ideas come from doing.this about nontrivial things. which may help explain why people's.reaction to a new idea is often the first half of laughing: ha![3].that second qualifier is critical. if you're excited about.something most authorities discount, but you can't give a more.precise explanation than "they don't get it," then you're starting.to drift into the territory of cranks.[4].finding something to work on is not simply a matter of finding.a match between the current version of you and a list of known.problems. you'll often have to coevolve with the problem. that's.why it can sometimes be so hard to figure out what to work on. the.search space is huge. it's the cartesian product of all possible.types of work, both known and yet to be discovered, and all possible.future versions of you.there's no way you could search this whole space, so you have to.rely on heuristics to generate promising paths through it and hope.the best matches will be clustered. which they will not always be;.different types of work have been collected together as much by.accidents of history as by the intrinsic similarities between them.[5].there are many reasons curious people are more likely to do.great work, but one of the more subtle is that, by casting a wide.net, they're more likely to find the right thing to work on in the.first place.[6].it can also be dangerous to make things for an audience you.feel is less sophisticated than you, if that causes you to talk.down to them. you can make a lot of money doing that, if you do it.in a sufficiently cynical way, but it's not the route to great work..not that anyone using this m.o. would care.[7].this idea i learned from hardy's a mathematician's apology,.which i recommend to anyone ambitious to do great work, in any.field.[8].just as we overestimate what we can do in a day and underestimate.what we can do over several years, we overestimate the damage done.by procrastinating for a day and underestimate the damage done by.procrastinating for several years.[9].you can't usually get paid for doing exactly what you want,.especially early on. there are two options: get paid for doing work.close to what you want and hope to push it closer, or get paid for.doing something else entirely and do your own projects on the side..both can work, but both have drawbacks: in the first approach your.work is compromised by default, and in the second you have to fight.to get time to do it.[10].if you set your life up right, it will deliver the focus-relax.cycle automatically. the perfect setup is an office you work in and.that you walk to and from.[11].there may be some very unworldly people who do great work.without consciously trying to. if you want to expand this rule to.cover that case, it becomes: don't try to be anything except the.best.[12].this gets more complicated in work like acting, where the.goal is to adopt a fake persona. but even here it's possible to be.affected. perhaps the rule in such fields should be to avoid.unintentional affectation.[13].it's safe to have beliefs that you treat as unquestionable.if and only if they're also unfalsifiable. for example, it's safe.to have the principle that everyone should be treated equally under.the law, because a sentence with a "should" in it isn't really a.statement about the world and is therefore hard to disprove. and.if there's no evidence that could disprove one of your principles,.there can't be any facts you'd need to ignore in order to preserve.it.[14].affectation is easier to cure than intellectual dishonesty..affectation is often a shortcoming of the young that burns off in.time, while intellectual dishonesty is more of a character flaw.[15].obviously you don't have to be working at the exact moment.you have the idea, but you'll probably have been working fairly.recently.[16].some say psychoactive drugs have a similar effect. i'm.skeptical, but also almost totally ignorant of their effects.[17].for example you might give the nth most important topic.(m-1)/m^n of your attention, for some m > 1. you couldn't allocate.your attention so precisely, of course, but this at least gives an.idea of a reasonable distribution.[18].the principles defining a religion have to be mistaken..otherwise anyone might adopt them, and there would be nothing to.distinguish the adherents of the religion from everyone else.[19].it might be a good exercise to try writing down a list of.questions you wondered about in your youth. you might find you're.now in a position to do something about some of them.[20].the connection between originality and uncertainty causes a.strange phenomenon: because the conventional-minded are more certain.than the independent-minded, this tends to give them the upper hand.in disputes, even though they're generally stupider..the best lack all conviction, while the worst.are full of passionate intensity..[21].derived from linus pauling's "if you want to have good ideas,.you must have many ideas."[22].attacking a project as a "toy" is similar to attacking a.statement as "inappropriate." it means that no more substantial.criticism can be made to stick.[23].one way to tell whether you're wasting time is to ask if.you're producing or consuming. writing computer games is less likely.to be a waste of time than playing them, and playing games where.you create something is less likely to be a waste of time than.playing games where you don't.[24].another related advantage is that if you haven't said anything.publicly yet, you won't be biased toward evidence that supports.your earlier conclusions. with sufficient integrity you could achieve.eternal youth in this respect, but few manage to. for most people,.having previously published opinions has an effect similar to.ideology, just in quantity 1.[25].in the early 1630s daniel mytens made a painting of henrietta.maria handing a laurel wreath to charles i. van dyck then painted.his own version to show how much better he was.[26].i'm being deliberately vague about what a place is. as of.this writing, being in the same physical place has advantages that.are hard to duplicate, but that could change.[27].this is false when the work the other people have to do is.very constrained, as with seti@home or bitcoin. it may be possible.to expand the area in which it's false by defining similarly.restricted protocols with more freedom of action in the nodes.[28].corollary: building something that enables people to go around.intermediaries and engage directly with their audience is probably.a good idea.[29].it may be helpful always to walk or run the same route, because.that frees attention for thinking. it feels that way to me, and.there is some historical evidence for it.thanks.to trevor blackwell, daniel gackle, pam graham, tom howard,.patrick hsu, steve huffman, jessica livingston, henry lloyd-baker,.bob metcalfe, ben miller, robert morris, michael nielsen, courtenay.pipkin, joris poort, mieke roos, rajat suri, harj taggar, garry.tan, and my younger son for suggestions and for reading drafts.<eot><sot>the origins of wokeness.january 2025
the word "prig" isn't very common now, but if you look up.the definition, it will sound familiar. google's isn't bad:.a self-righteously moralistic person who behaves as if.superior to others..this sense of the word originated in the 18th century, and.its age is an important clue: it shows that although.wokeness is a comparatively recent phenomenon, it's an.instance of a much older one.there's a certain kind of person who's attracted to a.shallow, exacting kind of moral purity, and who demonstrates.his purity by attacking anyone who breaks the rules. every.society has these people. all that changes is the rules they.enforce. in victorian england it was christian virtue. in.stalin's russia it was orthodox marxism-leninism. for the.woke, it's social justice.so if you want to understand wokeness, the question to ask.is not why people behave this way. every society has prigs..the question to ask is why our prigs are priggish about.these ideas, at this moment. and to answer that we have to.ask when and where wokeness began.the answer to the first question is the 1980s. wokeness is a.second, more aggressive wave of political correctness, which.started in the late 1980s, died down in the late 1990s, and.then returned with a vengeance in the early 2010s, finally.peaking after the riots of 2020.this was not the original meaning of woke, but it's rarely.used in the original sense now. now the pejorative sense is.the dominant one. what does it mean now? i've often been.asked to define both wokeness and political correctness by.people who think they're meaningless labels, so i will. they.both have the same definition:.an aggressively performative focus on social justice..in other words, it's people being prigs about social.justice. and that's the real problem — the.performativeness, not the social justice.racism, for example, is a genuine problem. not a problem on.the scale that the woke believe it to be, but a genuine one..i don't think any reasonable person would deny that. the.problem with political correctness was not that it focused.on marginalized groups, but the shallow, aggressive way in.which it did so. instead of going out into the world and.quietly helping members of marginalized groups, the.politically correct focused on getting people in trouble for.using the wrong words to talk about them.as for where political correctness began, if you think about.it, you probably already know the answer. did it begin.outside universities and spread to them from this external.source? obviously not; it has always been most extreme in.universities. so where in universities did it begin? did it.begin in math, or the hard sciences, or engineering, and.spread from there to the humanities and social sciences?.those are amusing images, but no, obviously it began in the.humanities and social sciences.why there? and why then? what happened in the humanities and.social sciences in the 1980s?a successful theory of the origin of political correctness.has to be able to explain why it didn't happen earlier. why.didn't it happen during the protest movements of the 1960s,.for example? they were concerned with much the same issues..[1]the reason the student protests of the 1960s didn't lead to.political correctness was precisely that — they were.student movements. they didn't have any real power. the.students may have been talking a lot about women's.liberation and black power, but it was not what they were.being taught in their classes. not yet.but in the early 1970s the student protestors of the 1960s.began to finish their dissertations and get hired as.professors. at first they were neither powerful nor.numerous. but as more of their peers joined them and the.previous generation of professors started to retire, they.gradually became both.the reason political correctness began in the humanities and.social sciences was that these fields offered more scope for.the injection of politics. a 1960s radical who got a job as.a physics professor could still attend protests, but his.political beliefs wouldn't affect his work. whereas research.in sociology and modern literature can be made as political.as you like..[2]i saw political correctness arise. when i started college in.1982 it was not yet a thing. female students might object if.someone said something they considered sexist, but no one.was getting reported for it. it was still not a thing when.i started grad school in 1986. it was definitely a thing in.1988 though, and by the early 1990s it seemed to pervade.campus life.what happened? how did protest become punishment? why were.the late 1980s the point at which protests against male.chauvinism (as it used to be called) morphed into formal.complaints to university authorities about sexism?.basically, the 1960s radicals got tenure. they became the.establishment they'd protested against two decades before..now they were in a position not just to speak out about.their ideas, but to enforce them.a new set of moral rules to enforce was exciting news to a.certain kind of student. what made it particularly exciting.was that they were allowed to attack professors. i remember.noticing that aspect of political correctness at the time..it wasn't simply a grass-roots student movement. it was.faculty members encouraging students to attack other faculty.members. in that respect it was like the cultural.revolution. that wasn't a grass-roots movement either; that.was mao unleashing the younger generation on his political.opponents. and in fact when roderick macfarquhar started.teaching a class on the cultural revolution at harvard in.the late 1980s, many saw it as a comment on current events..i don't know if it actually was, but people thought it was,.and that means the similarities were obvious..[3]college students larp. it's their nature. it's usually.harmless. but larping morality turned out to be a poisonous.combination. the result was a kind of moral etiquette,.superficial but very complicated. imagine having to explain.to a well-meaning visitor from another planet why using the.phrase "people of color" is considered particularly.enlightened, but saying "colored people" gets you fired. and.why exactly one isn't supposed to use the word "negro" now,.even though martin luther king used it constantly in his.speeches. there are no underlying principles. you'd just.have to give him a long list of rules to memorize..[4].the danger of these rules was not just that they created.land mines for the unwary, but that their elaborateness made.them an effective substitute for virtue. whenever a society.has a concept of heresy and orthodoxy, orthodoxy becomes a.substitute for virtue. you can be the worst person in the.world, but as long as you're orthodox you're better than.everyone who isn't. this makes orthodoxy very attractive to.bad people.but for it to work as a substitute for virtue, orthodoxy.must be difficult. if all you have to do to be orthodox is.wear some garment or avoid saying some word, everyone knows.to do it, and the only way to seem more virtuous than other.people is to actually be virtuous. the shallow, complicated,.and frequently changing rules of political correctness made.it the perfect substitute for actual virtue. and the result.was a world in which good people who weren't up to date on.current moral fashions were brought down by people whose.characters would make you recoil in horror if you could see.them.one big contributing factor in the rise of political.correctness was the lack of other things to be morally pure.about. previous generations of prigs had been prigs mostly.about religion and sex. but among the cultural elite these.were the deadest of dead letters by the 1980s; if you were.religious, or a virgin, this was something you tended to.conceal rather than advertise. so the sort of people who.enjoy being moral enforcers had become starved of things to.enforce. a new set of rules was just what they'd been.waiting for.curiously enough, the tolerant side of the 1960s left helped.create the conditions in which the intolerant side.prevailed. the relaxed social rules advocated by the old,.easy-going hippy left became the dominant ones, at least.among the elite, and this left nothing for the naturally.intolerant to be intolerant about.another possibly contributing factor was the fall of the.soviet empire. marxism had been a popular focus of moral.purity on the left before political correctness emerged as a.competitor, but the pro-democracy movements in eastern bloc.countries took most of the shine off it. especially the fall.of the berlin wall in 1989. you couldn't be on the side of.the stasi. i remember looking at the moribund soviet studies.section of a used bookshop in cambridge in the late 1980s.and thinking "what will those people go on about now?" as it.turned out the answer was right under my nose.one thing i noticed at the time about the first phase of.political correctness was that it was more popular with.women than men. as many writers (perhaps most eloquently.george orwell) have observed, women seem more attracted than.men to the idea of being moral enforcers. but there was.another more specific reason women tended to be the.enforcers of political correctness. there was at this time a.great backlash against sexual harassment; the mid 1980s were.the point when the definition of sexual harassment was.expanded from explicit sexual advances to creating a."hostile environment." within universities the classic form.of accusation was for a (female) student to say that a.professor made her "feel uncomfortable." but the vagueness.of this accusation allowed the radius of forbidden behavior.to expand to include talking about heterodox ideas. those.make people uncomfortable too..[5]was it sexist to propose that darwin's greater male.variability hypothesis might explain some variation in human.performance? sexist enough to get larry summers pushed out.as president of harvard, apparently. one woman who heard the.talk in which he mentioned this idea said it made her feel."physically ill" and that she had to leave halfway through..if the test of a hostile environment is how it makes people.feel, this certainly sounds like one. and yet it does seem.plausible that greater male variability explains some of the.variation in human performance. so which should prevail,.comfort or truth? surely if truth should prevail anywhere,.it should be in universities; that's supposed to be their.specialty; but for decades starting in the late 1980s the.politically correct tried to pretend this conflict didn't.exist..[6]political correctness seemed to burn out in the second half.of the 1990s. one reason, perhaps the main reason, was that.it literally became a joke. it offered rich material for.comedians, who performed their usual disinfectant action.upon it. humor is one of the most powerful weapons against.priggishness of any sort, because prigs, being humorless,.can't respond in kind. humor was what defeated victorian.prudishness, and by 2000 it seemed to have done the same.thing to political correctness.unfortunately this was an illusion. within universities the.embers of political correctness were still glowing brightly..after all, the forces that created it were still there. the.professors who started it were now becoming deans and.department heads. and in addition to their departments there.were now a bunch of new ones explicitly focused on social.justice. students were still hungry for things to be morally.pure about. and there had been an explosion in the number of.university administrators, many of whose jobs involved.enforcing various forms of political correctness.in the early 2010s the embers of political correctness burst.into flame anew. there were several differences between this.new phase and the original one. it was more virulent. it.spread further into the real world, although it still burned.hottest within universities. and it was concerned with a.wider variety of sins. in the first phase of political.correctness there were really only three things people got.accused of: sexism, racism, and homophobia (which at the.time was a neologism invented for the purpose). but between.then and 2010 a lot of people had spent a lot of time trying.to invent new kinds of -isms and -phobias and seeing which.could be made to stick.the second phase was, in multiple senses, political.correctness metastasized. why did it happen when it did? my.guess is that it was due to the rise of social media,.particularly tumblr and twitter, because one of the most.distinctive features of the second wave of political.correctness was the cancel mob: a mob of angry people.uniting on social media to get someone ostracized or fired..indeed this second wave of political correctness was.originally called "cancel culture"; it didn't start to be.called "wokeness" till the 2020s.one aspect of social media that surprised almost everyone at.first was the popularity of outrage. users seemed to like.being outraged. we're so used to this idea now that we take.it for granted, but really it's pretty strange. being.outraged is not a pleasant feeling. you wouldn't expect.people to seek it out. but they do. and above all, they want.to share it. i happened to be running a forum from 2007 to.2014, so i can actually quantify how much they want to share.it: our users were about three times more likely to upvote.something if it outraged them.this tilt toward outrage wasn't due to wokeness. it's an.inherent feature of social media, or at least this.generation of it. but it did make social media the perfect.mechanism for fanning the flames of wokeness..[7]it wasn't just public social networks that drove the rise of.wokeness though. group chat apps were also critical,.especially in the final step, cancellation. imagine if a.group of employees trying to get someone fired had to do it.using only email. it would be hard to organize a mob. but.once you have group chat, mobs form naturally.another contributing factor in this second wave of political.correctness was the dramatic increase in the polarization of.the press. in the print era, newspapers were constrained to.be, or at least seem, politically neutral. the department.stores that ran ads in the new york times wanted to reach.everyone in the region, both liberal and conservative, so.the times had to serve both. but the times didn't regard.this neutrality as something forced upon them. they embraced.it as their duty as a paper of record — as one of the big.newspapers that aimed to be chronicles of their times,.reporting every sufficiently important story from a neutral.point of view.when i grew up the papers of record seemed timeless, almost.sacred institutions. papers like the new york times and.washington post had immense prestige, partly because other.sources of news were limited, but also because they did make.some effort to be neutral.unfortunately it turned out that the paper of record was.mostly an artifact of the constraints imposed by print..[8].when your market was determined by geography, you had.to be neutral. but publishing online enabled — in fact.probably forced — newspapers to switch to serving markets.defined by ideology instead of geography. most that remained.in business fell in the direction they'd already been.leaning: left. on october 11, 2020 the new york times.announced that "the paper is in the midst of an evolution.from the stodgy paper of record into a juicy collection of.great narratives.".[9].meanwhile journalists, of a sort,.had arisen to serve the right as well. and so journalism,.which in the previous era had been one of the great.centralizing forces, now became one of the great polarizing.ones.the rise of social media and the increasing polarization of.journalism reinforced one another. in fact there arose a new.variety of journalism involving a loop through social media..someone would say something controversial on social media..within hours it would become a news story. outraged readers.would then post links to the story on social media, driving.further arguments online. it was the cheapest source of.clicks imaginable. you didn't have to maintain overseas news.bureaus or pay for month-long investigations. all you had to.do was watch twitter for controversial remarks and repost.them on your site, with some additional comments to inflame.readers further.for the press there was money in wokeness. but they weren't.the only ones. that was one of the biggest differences.between the two waves of political correctness: the first.was driven almost entirely by amateurs, but the second was.often driven by professionals. for some it was their whole.job. by 2010 a new class of administrators had arisen whose.job was basically to enforce wokeness. they played a role.similar to that of the political commissars who got attached.to military and industrial organizations in the ussr: they.weren't directly in the flow of the organization's work, but.watched from the side to ensure that nothing improper.happened in the doing of it. these new administrators could.often be recognized by the word "inclusion" in their titles..within institutions this was the preferred euphemism for.wokeness; a new list of banned words, for example, would.usually be called an "inclusive language guide.".[10]this new class of bureaucrats pursued a woke agenda as if.their jobs depended on it, because they did. if you hire.people to keep watch for a particular type of problem,.they're going to find it, because otherwise there's no.justification for their existence..[11].but these.bureaucrats also represented a second and possibly even.greater danger. many were involved in hiring, and when.possible they tried to ensure their employers hired only.people who shared their political beliefs. the most.egregious cases were the new "dei statements" that some.universities started to require from faculty candidates,.proving their commitment to wokeness. some universities used.these statements as the initial filter and only even.considered candidates who scored high enough on them. you're.not hiring einstein that way; imagine what you get instead.another factor in the rise of wokeness was the black lives.matter movement, which started in 2013 when a white man was.acquitted after killing a black teenager in florida. but.this didn't launch wokeness; it was well underway by 2013.similarly for the me too movement, which took off in 2017.after the first news stories about harvey weinstein's.history of raping women. it accelerated wokeness, but didn't.play the same role in launching it that the 80s version did.in launching political correctness.the election of donald trump in 2016 also accelerated.wokeness, particularly in the press, where outrage now meant.traffic. trump made the new york times a lot of money:.headlines during his first administration mentioned his name.at about four times the rate of previous presidents.in 2020 we saw the biggest accelerant of all, after a white.police officer asphyxiated a black suspect on video. at this.point the metaphorical fire became a literal one, as violent.protests broke out across america. but in retrospect this.turned out to be peak woke, or close to it. by every measure.i've seen, wokeness peaked in 2020 or 2021.wokeness is sometimes described as a mind-virus. what makes.it viral is that it defines new types of impropriety. most.people are afraid of impropriety; they're never exactly sure.what the social rules are or which ones they might be.breaking. especially if the rules change rapidly. and since.most people already worry that they might be breaking rules.they don't know about, if you tell them they're breaking a.rule, their default reaction is to believe you. especially.if multiple people tell them. which in turn is a recipe for.exponential growth. zealots invent some new impropriety to.avoid. the first people to adopt it are fellow zealots,.eager for new ways to signal their virtue. if there are.enough of these, the initial group of zealots is followed by.a much larger group, motivated by fear. they're not trying.to signal virtue; they're just trying to avoid getting in.trouble. at this point the new impropriety is now firmly.established. plus its success has increased the rate of.change in social rules, which, remember, is one of the.reasons people are nervous about which rules they might be.breaking. so the cycle accelerates..[12]what's true of individuals is even more true of.organizations. especially organizations without a powerful.leader. such organizations do everything based on "best.practices." there's no higher authority; if some new "best.practice" achieves critical mass, they must adopt it. and.in this case the organization can't do what it usually does.when it's uncertain: delay. it might be committing.improprieties right now! so it's surprisingly easy for a.small group of zealots to capture this type of organization.by describing new improprieties it might be guilty of..[13]how does this kind of cycle ever end? eventually it leads to.disaster, and people start to say enough is enough. the.excesses of 2020 made a lot of people say that.since then wokeness has been in gradual but continual.retreat. corporate ceos, starting with brian armstrong, have.openly rejected it. universities, led by the university of.chicago and mit, have explicitly confirmed their commitment.to free speech. twitter, which was arguably the hub of.wokeness, was bought by elon musk in order to neutralize it,.and he seems to have succeeded — and not, incidentally, by.censoring left-wing users the way twitter used to censor.right-wing ones, but without censoring either..[14].consumers have emphatically rejected brands that ventured.too far into wokeness. the bud light brand may have been.permanently damaged by it. i'm not going to claim trump's.second victory in 2024 was a referendum on wokeness; i think.he won, as presidential candidates always do, because he was.more charismatic; but voters'.disgust with wokeness must have helped.so what do we do now? wokeness is already in retreat..obviously we should help it along. what's the best way to do.that? and more importantly, how do we avoid a third.outbreak? after all, it seemed to be dead once, but came.back worse than ever.in fact there's an even more ambitious goal: is there a way.to prevent any similar outbreak of aggressively performative.moralism in the future — not just a third outbreak of.political correctness, but the next thing like it? because.there will be a next thing. prigs are prigs by nature. they.need rules to obey and enforce, and now that darwin has cut.off their traditional supply of rules, they're constantly.hungry for new ones. all they need is someone to meet them.halfway by defining a new way to be morally pure, and we'll.see the same phenomenon again.let's start with the easier problem. is there a simple,.principled way to deal with wokeness? i think there is: to.use the customs we already have for dealing with religion..wokeness is effectively a religion, just with god replaced.by protected classes. it's not even the first religion of.this kind; marxism had a similar form, with god replaced by.the masses..[15].and we already have well-established.customs for dealing with religion within organizations. you.can express your own religious identity and explain your.beliefs, but you can't call your coworkers infidels if they.disagree, or try to ban them from saying things that.contradict its doctrines, or insist that the organization.adopt yours as its official religion.if we're not sure what to do about any particular.manifestation of wokeness, imagine we were dealing with some.other religion, like christianity. should we have people.within organizations whose jobs are to enforce woke.orthodoxy? no, because we wouldn't have people whose jobs.were to enforce christian orthodoxy. should we censor.writers or.scientists whose work contradicts woke doctrines?.no, because we wouldn't do this to people whose work.contradicted christian teachings. should job candidates be.required to write dei statements? of course not; imagine an.employer requiring proof of one's religious beliefs. should.students and employees have to participate in woke.indoctrination sessions in which they're required to answer.questions about their beliefs to ensure compliance? no,.because we wouldn't dream of catechizing people in this way.about their religion..[16]one shouldn't feel bad about not wanting to watch woke.movies any more than one would feel bad about not wanting to.listen to christian rock. in my twenties i drove across.america several times, listening to local radio stations..occasionally i'd turn the dial and hear some new song. but.the moment anyone mentioned jesus i'd turn the dial again..even the tiniest bit of being preached to was enough to make.me lose interest.but by the same token we should not automatically reject.everything the woke believe. i'm not a christian, but i can.see that many christian principles are good ones. it would.be a mistake to discard them all just because one didn't.share the religion that espoused them. it would be the sort.of thing a religious zealot would do.if we have genuine pluralism, i think we'll be safe from.future outbreaks of woke intolerance. wokeness itself won't.go away. there will for the foreseeable future continue to.be pockets of woke zealots inventing new moral fashions. the.key is not to let them treat their fashions as normative..they can change what their coreligionists are allowed to say.every few months if they like, but they mustn't be allowed.to change what we're allowed to say..[17]the more general problem — how to prevent similar outbreaks.of aggressively performative moralism — is of course.harder. here we're up against human nature. there will.always be prigs. and in particular there will always be the.enforcers among them, the.aggressively conventional-minded..these people are born that way. every society has them. so.the best we can do is to keep them bottled up.the aggressively conventional-minded aren't always on the.rampage. usually they just enforce whatever random rules are.nearest to hand. they only become dangerous when some new.ideology gets a lot of them pointed in the same direction at.once. that's what happened during the cultural revolution,.and to a lesser extent (thank god) in the two waves of.political correctness we've experienced.we can't get rid of the aggressively conventional-minded..[18].and we couldn't prevent people from creating new.ideologies that appealed to them even if we wanted to. so if.we want to keep them bottled up, we have to do it one step.downstream. fortunately when the aggressively.conventional-minded go on the rampage they always do one.thing that gives them away: they define new heresies to.punish people for. so the best way to protect ourselves from.future outbreaks of things like wokeness is to have powerful.antibodies against the concept of heresy.we should have a conscious bias against defining new forms.of heresy. whenever anyone tries to ban saying something.that we'd previously been able to say, our initial.assumption should be that they're wrong. only our initial.assumption of course. if they can prove we should stop.saying it, then we should. but the burden of proof is on.them. in liberal democracies, people trying to prevent.something from being said will usually claim they're not.merely engaging in censorship, but trying to prevent some.form of "harm". and maybe they're right. but once again, the.burden of proof is on them. it's not enough to claim harm;.they have to prove it.as long as the aggressively conventional-minded continue to.give themselves away by banning heresies, we'll always be.able to notice when they become aligned behind some new.ideology. and if we always fight back at that point, with.any luck we can stop them in their tracks.the number of true things we can't say.should not increase. if it does, something is wrong.notes[1].why did 1960s radicals focus on the causes they did?.one of the people who reviewed drafts of this essay.explained this so well that i asked if i could quote him:.the middle-class student protestors of the new left.rejected the socialist/marxist left as unhip. they were.interested in sexier forms of oppression uncovered by.cultural analysis (marcuse) and abstruse "theory". labor.politics became stodgy and old-fashioned. this took a.couple generations to work through. the woke ideology's.conspicuous lack of interest in the working class is the.tell-tale sign. such fragments as are, er, left of the old.left are anti-woke, and meanwhile the actual working class.shifted to the populist right and gave us trump. trump and.wokeness are cousins.the middle-class origins of wokeness smoothed its way.through the institutions because it had no interest in."seizing the means of production" (how quaint such phrases.seem now), which would quickly have run up against hard.state and corporate power. the fact that wokeness only.expressed interest in other kinds of class (race, sex,.etc) signalled compromise with existing power: give us.power within your system and we'll bestow the resource we.control — moral rectitude — upon you. as an ideological.stalking horse for gaining control over discourse and.institutions, this succeeded where a more ambitious.revolutionary program would not have..[2].it helped that the humanities and social sciences also.included some of the biggest and easiest undergrad majors..if a political movement had to start with physics students,.it could never get off the ground; there would be too few of.them, and they wouldn't have the time to spare.at the top universities these majors are not as big as they.used to be, though. a.2022 survey found that only 7% of.harvard undergrads plan to major in the humanities, vs.nearly 30% during the 1970s. i expect wokeness is at least.part of the reason; when undergrads consider majoring in.english, it's presumably because they love the written word.and not because they want to listen to lectures about.racism.[3].the puppet-master-and-puppet character of political.correctness became clearly visible when a bakery near.oberlin college was falsely accused of race discrimination.in 2016. in the subsequent civil trial, lawyers for the.bakery produced a text message from oberlin dean of students.meredith raimondo that read "i'd say unleash the students if.i wasn't convinced this needs to be put behind us."[4].the woke sometimes claim that wokeness is simply.treating people with respect. but if it were, that would be.the only rule you'd have to remember, and this is comically.far from being the case. my younger son likes to imitate.voices, and at one point when he was about seven i had to.explain which accents it was currently safe to imitate.publicly and which not. it took about ten minutes, and i.still hadn't covered all the cases.[5].in 1986 the supreme court ruled that creating a.hostile work environment could constitute sex.discrimination, which in turn affected universities via.title ix. the court specified that the test of a hostile.environment was whether it would bother a reasonable person,.but since for a professor merely being the subject of a.sexual harassment complaint would be a disaster whether the.complainant was reasonable or not, in practice any joke or.remark remotely connected with sex was now effectively.forbidden. which meant we'd now come full circle to.victorian codes of behavior, when there was a large class of.things that might not be said "with ladies present."[6].much as they tried to pretend there was no conflict.between diversity and quality. but you can't simultaneously.optimize for two things that aren't identical. what.diversity actually means, judging from the way the term is.used, is proportional representation, and unless you're.selecting a group whose purpose is to be representative,.like poll respondents, optimizing for proportional.representation has to come at the expense of quality. this.is not because of anything about representation; it's the.nature of optimization; optimizing for x has to come at the.expense of y unless x and y are identical.[7].maybe societies will eventually develop antibodies to.viral outrage. maybe we were just the first to be exposed to.it, so it tore through us like an epidemic through a.previously isolated population. i'm fairly confident that it.would be possible to create new social media apps that were.less driven by outrage, and an app of this type would have a.good chance of stealing users from existing ones, because.the smartest people would tend to migrate to it.[8].i say "mostly" because i have hopes that journalistic.neutrality will return in some form. there is some market.for unbiased news, and while it may be small, it's valuable..the rich and powerful want to know what's really going on;.that's how they became rich and powerful.[9].the times made this momentous announcement very.informally, in passing in the middle of an.article about a.times reporter who'd been criticized for inaccuracy. it's.quite possible no senior editor even approved it. but it's.somehow appropriate that this particular universe ended with.a whimper rather than a bang.[10].as the acronym dei goes out of fashion, many of these.bureaucrats will try to go underground by changing their.titles. it looks like "belonging" will be a popular option.[11].if you've ever wondered why our legal system includes.protections like the separation of prosecutor, judge, and.jury, the right to examine evidence and cross-examine.witnesses, and the right to be represented by legal counsel,.the de facto.parallel legal system.established by title ix.makes that all too clear.[12].the invention of new improprieties is most visible in.the rapid evolution of woke nomenclature. this is.particularly annoying to me as a writer, because the new.names are always worse. any religious observance has to be.inconvenient and slightly absurd; otherwise gentiles would.do it too. so "slaves" becomes "enslaved individuals." but.web search can show us the leading edge of moral growth in.real time: if you search for "individuals experiencing.slavery" you will as of this writing find five legit.attempts to use the phrase, and you'll even find two for."individuals experiencing enslavement."[13].organizations that do dubious things are particularly.concerned with propriety, which is how you end up with.absurdities like tobacco and oil companies having higher esg.ratings than tesla.[14].elon did something else that tilted twitter rightward.though: he gave more visibility to paying users. paying.users lean right on average, because people on the far left.dislike elon and don't want to give him money. elon.presumably knew this would happen. on the other hand, the.people on the far left have only themselves to blame; they.could tilt twitter back to the left tomorrow if they wanted.to.[15].it even, as james lindsay and peter boghossian.pointed out, has a concept of original sin: privilege. which.means unlike christianity's egalitarian version, people have varying.degrees of it. an able-bodied straight white.american male is born with such a load of sin that only by.the most abject repentance can he be saved.wokeness also shares something rather funny with many actual.versions of christianity: like god, the people for whose.sake wokeness purports to act are often revolted by the.things done in their name.[16].there is one exception to most of these rules: actual.religious organizations. it's reasonable for them to insist.on orthodoxy. but they in turn should declare that they're.religious organizations. it's rightly considered shady.when something that appears to be an ordinary business or.publication turns out to be a religious organization.[17].i don't want to give the impression that it will be.simple to roll back wokeness. there will be places where the.fight inevitably gets messy — particularly within.universities, which everyone has to share, yet which are.currently the most pervaded by wokeness of any institutions.[18].you can however get rid of aggressively.conventional-minded people within an organization, and in.many if not most organizations this would be an excellent.idea. even a handful of them can do a lot of damage. i bet.you'd feel a noticeable improvement going from a handful to.none.thanks to sam altman,.ben miller, daniel gackle, robin hanson, jessica.livingston, greg lukianoff, harj taggar, garry tan, and tim.urban for reading drafts of this.<eot><sot>writes and write-nots.october 2024
i'm usually reluctant to make predictions about technology, but i.feel fairly confident about this one: in a couple decades there.won't be many people who can write.one of the strangest things you learn if you're a writer is how.many people have trouble writing. doctors know how many people have.a mole they're worried about; people who are good at setting up.computers know how many people aren't; writers know how many people.need help writing.the reason so many people have trouble writing is that it's.fundamentally difficult. to write well you have to think clearly,.and thinking clearly is hard.and yet writing pervades many jobs, and the more prestigious the.job, the more writing it tends to require.these two powerful opposing forces, the pervasive expectation of.writing and the irreducible difficulty of doing it, create enormous.pressure. this is why eminent professors often turn out to have.resorted to plagiarism. the most striking thing to me about these.cases is the pettiness of the thefts. the stuff they steal is usually.the most mundane boilerplate — the sort of thing that anyone who.was even halfway decent at writing could turn out with no effort.at all. which means they're not even halfway decent at writing.till recently there was no convenient escape valve for the pressure.created by these opposing forces. you could pay someone to write.for you, like jfk, or plagiarize, like mlk, but if you couldn't buy.or steal words, you had to write them yourself. and as a result.nearly everyone who was expected to write had to learn how.not anymore. ai has blown this world open. almost all pressure to.write has dissipated. you can have ai do it for you, both in school.and at work.the result will be a world divided into writes and write-nots..there will still be some people who can write. some of us like it..but the middle ground between those who are good at writing and.those who can't write at all will disappear. instead of good writers,.ok writers, and people who can't write, there will just be good.writers and people who can't write.is that so bad? isn't it common for skills to disappear when.technology makes them obsolete? there aren't many blacksmiths left,.and it doesn't seem to be a problem.yes, it's bad. the reason is something i mentioned earlier: writing.is thinking. in fact there's a kind of thinking that can only be.done by writing. you can't make this point better than leslie lamport.did:.if you're thinking without writing, you only think you're thinking..so a world divided into writes and write-nots is more dangerous.than it sounds. it will be a world of thinks and think-nots. i know.which half i want to be in, and i bet you do too.this situation is not unprecedented. in preindustrial times most.people's jobs made them strong. now if you want to be strong, you.work out. so there are still strong people, but only those who.choose to be.it will be the same with writing. there will still be smart people,.but only those who choose to be.thanks to jessica livingston, ben miller,.and robert morris for reading drafts of this.<eot><sot>when to do what you love.september 2024
there's some debate about whether it's a good idea to "follow your.passion." in fact the question is impossible to answer with a simple.yes or no. sometimes you should and sometimes you shouldn't, but.the border between should and shouldn't is very complicated. the.only way to give a general answer is to trace it.when people talk about this question, there's always an implicit."instead of." all other things being equal, why wouldn't you work.on what interests you the most? so even raising the question implies.that all other things aren't equal, and that you have to choose.between working on what interests you the most and something else,.like what pays the best.and indeed if your main goal is to make money, you can't usually.afford to work on what interests you the most. people pay you for.doing what they want, not what you want. but there's an obvious.exception: when you both want the same thing. for example, if you.love football, and you're good enough at it, you can get paid a lot.to play it.of course the odds are against you in a case like football, because.so many other people like playing it too. this is not to say you.shouldn't try though. it depends how much ability you have and how.hard you're willing to work.the odds are better when you have strange tastes: when you like.something that pays well and that few other people like. for example,.it's clear that bill gates truly loved running a software company..he didn't just love programming, which a lot of people do. he loved.writing software for customers. that is a very strange taste indeed,.but if you have it, you can make a lot by indulging it.there are even some people who have a genuine intellectual interest.in making money. this is distinct from mere greed. they just can't.help noticing when something is mispriced, and can't help doing.something about it. it's like a puzzle for them..[1]in fact there's an edge case here so spectacular that it turns all.the preceding advice on its head. if you want to make a really.huge.amount of money — hundreds of millions or even billions of dollars.— it turns out to be very useful to work on what interests you the.most. the reason is not the extra motivation you get from doing.this, but that the way to make a really large amount of money is.to start a startup, and working on what interests you is an excellent.way to discover startup ideas.many if not most of the biggest startups began as projects the.founders were doing for fun. apple, google, and facebook all began.that way. why is this pattern so common? because the best ideas.tend to be such outliers that you'd overlook them if you were.consciously looking for ways to make money. whereas if you're young.and good at technology, your unconscious instincts about what would.be interesting to work on are very well aligned with what needs to.be built.so there's something like a midwit peak for making money. if you.don't need to make much, you can work on whatever you're most.interested in; if you want to become moderately rich, you can't.usually afford to; but if you want to become super rich, and you're.young and good at technology, working on what you're most interested.in becomes a good idea again.what if you're not sure what you want? what if you're attracted to.the idea of making money and more attracted to some kinds of work.than others, but neither attraction predominates? how do you break.ties?the key here is to understand that such ties are only apparent..when you have trouble choosing between following your interests and.making money, it's never because you have complete knowledge of.yourself and of the types of work you're choosing between, and the.options are perfectly balanced. when you can't decide which path.to take, it's almost always due to ignorance. in fact you're usually.suffering from three kinds of ignorance simultaneously: you don't.know what makes you happy, what the various kinds of work are really.like, or how well you could do them..[2]in a way this ignorance is excusable. it's often hard to predict.these things, and no one even tells you that you need to. if you're.ambitious you're told you should go to college, and this is good.advice so far as it goes, but that's where it usually ends. no one.tells you how to figure out what to work on, or how hard this can.be.what do you do in the face of uncertainty? get more certainty. and.probably the best way to do that is to try working on things you're.interested in. that will get you more information about how interested.you are in them, how good you are at them, and how much scope they.offer for ambition.don't wait. don't wait till the end of college to figure out what.to work on. don't even wait for internships during college. you.don't necessarily need a job doing x in order to work on x; often.you can just start doing it in some form yourself. and since figuring.out what to work on is a problem that could take years to solve,.the sooner you start, the better.one useful trick for judging different kinds of work is to look at.who your colleagues will be. you'll become like whoever you work.with. do you want to become like these people?indeed, the difference in character between different kinds of work.is magnified by the fact that everyone else is facing the same.decisions as you. if you choose a kind of work mainly for how well.it pays, you'll be surrounded by other people who chose it for the.same reason, and that will make it even more soul-sucking than it.seems from the outside. whereas if you choose work you're genuinely.interested in, you'll be surrounded mostly by other people who are.genuinely interested in it, and that will make it extra inspiring..[3]the other thing you do in the face of uncertainty is to make choices.that are uncertainty-proof. the less sure you are about what to do,.the more important it is to choose options that give you more options.in the future. i call this "staying upwind." if you're unsure whether.to major in math or economics, for example, choose math; math is.upwind of economics in the sense that it will be easier to switch.later from math to economics than from economics to math.there's one case, though, where it's easy to say whether you should.work on what interests you the most: if you want to do.great work..this is not a sufficient condition for doing great work, but it is.a necessary one.there's a lot of selection bias in advice about whether to "follow.your passion," and this is the reason. most such advice comes from.people who are famously successful, and if you ask someone who's.famously successful how to do what they did, most will tell you.that you have to work on what you're most interested in. and this.is in fact true.that doesn't mean it's the right advice for everyone. not everyone.can do great work, or wants to. but if you do want to, the complicated.question of whether or not to work on what interests you the most.becomes simple. the answer is yes. the root of great work is a sort.of ambitious curiosity, and you can't manufacture that.notes[1].these examples show why it's a mistake to assume that economic.inequality must be evidence of some kind of brokenness or unfairness..it's obvious that different people have different interests, and.that some interests yield far more money than others, so how can.it not be obvious that some people will end up much richer than.others? in a world where some people like to write enterprise.software and others like to make studio pottery, economic inequality.is the natural outcome.[2].difficulty choosing between interests is a different matter..that's not always due to ignorance. it's often intrinsically.difficult. i still have trouble doing it.[3].you can't always take people at their word on this. since.it's more prestigious to work on things you're interested in than.to be driven by money, people who are driven mainly by money will.often claim to be more interested in their work than they actually.are. one way to test such claims is by doing the following thought.experiment: if their work didn't pay well, would they take day jobs.doing something else in order to do it in their spare time? lots.of mathematicians and scientists and engineers would. historically.lots have. but i don't think as many investment bankers would.this thought experiment is also useful for distinguishing between.university departments.thanks to trevor blackwell, paul buchheit,.jessica livingston,.robert morris, harj taggar, and garry tan for reading drafts of.this.<eot><sot>founder mode.september 2024
at a yc event last week brian chesky gave a talk that everyone who.was there will remember. most founders i talked to afterward said.it was the best they'd ever heard. ron conway, for the first time.in his life, forgot to take notes. i'm not going to try to reproduce.it here. instead i want to talk about a question it raised.the theme of brian's talk was that the conventional wisdom about.how to run larger companies is mistaken. as airbnb grew, well-meaning.people advised him that he had to run the company in a certain way.for it to scale. their advice could be optimistically summarized.as "hire good people and give them room to do their jobs." he.followed this advice and the results were disastrous. so he had to.figure out a better way on his own, which he did partly by studying.how steve jobs ran apple. so far it seems to be working. airbnb's.free cash flow margin is now among the best in silicon valley.the audience at this event included a lot of the most successful.founders we've funded, and one after another said that the same.thing had happened to them. they'd been given the same advice about.how to run their companies as they grew, but instead of helping.their companies, it had damaged them.why was everyone telling these founders the wrong thing? that was.the big mystery to me. and after mulling it over for a bit i figured.out the answer: what they were being told was how to run a company.you hadn't founded — how to run a company if you're merely a.professional manager. but this m.o. is so much less effective that.to founders it feels broken. there are things founders can do that.managers can't, and not doing them feels wrong to founders, because.it is.in effect there are two different ways to run a company: founder.mode and manager mode. till now most people even in silicon valley.have implicitly assumed that scaling a startup meant switching to.manager mode. but we can infer the existence of another mode from.the dismay of founders who've tried it, and the success of their.attempts to escape from it.there are as far as i know no books specifically about founder mode..business schools don't know it exists. all we have so far are the.experiments of individual founders who've been figuring it out for.themselves. but now that we know what we're looking for, we can.search for it. i hope in a few years founder mode will be as well.understood as manager mode. we can already guess at some of the.ways it will differ.the way managers are taught to run companies seems to be like modular.design in the sense that you treat subtrees of the org chart as.black boxes. you tell your direct reports what to do, and it's up.to them to figure out how. but you don't get involved in the details.of what they do. that would be micromanaging them, which is bad.hire good people and give them room to do their jobs. sounds great.when it's described that way, doesn't it? except in practice, judging.from the report of founder after founder, what this often turns out.to mean is: hire professional fakers and let them drive the company.into the ground.one theme i noticed both in brian's talk and when talking to founders.afterward was the idea of being gaslit. founders feel like they're.being gaslit from both sides — by the people telling them they.have to run their companies like managers, and by the people working.for them when they do. usually when everyone around you disagrees.with you, your default assumption should be that you're mistaken..but this is one of the rare exceptions. vcs who haven't been founders.themselves don't know how founders should run companies, and c-level.execs, as a class, include some of the most skillful liars in the.world..[1]whatever founder mode consists of, it's pretty clear that it's going.to break the principle that the ceo should engage with the company.only via his or her direct reports. "skip-level" meetings will.become the norm instead of a practice so unusual that there's a.name for it. and once you abandon that constraint there are a huge.number of permutations to choose from.for example, steve jobs used to run an annual retreat for what he.considered the 100 most important people at apple, and these were.not the 100 people highest on the org chart. can you imagine the.force of will it would take to do this at the average company? and.yet imagine how useful such a thing could be. it could make a big.company feel like a startup. steve presumably wouldn't have kept.having these retreats if they didn't work. but i've never heard of.another company doing this. so is it a good idea, or a bad one? we.still don't know. that's how little we know about founder mode..[2]obviously founders can't keep running a 2000 person company the way.they ran it when it had 20. there's going to have to be some amount.of delegation. where the borders of autonomy end up, and how sharp.they are, will probably vary from company to company. they'll even.vary from time to time within the same company, as managers earn.trust. so founder mode will be more complicated than manager mode..but it will also work better. we already know that from the examples.of individual founders groping their way toward it.indeed, another prediction i'll make about founder mode is that.once we figure out what it is, we'll find that a number of individual.founders were already most of the way there — except that in doing.what they did they were regarded by many as eccentric or worse..[3]curiously enough it's an encouraging thought that we still know so.little about founder mode. look at what founders have achieved.already, and yet they've achieved this against a headwind of bad.advice. imagine what they'll do once we can tell them how to run.their companies like steve jobs instead of john sculley.notes[1].the more diplomatic way of phrasing this statement would be.to say that experienced c-level execs are often very skilled at.managing up. and i don't think anyone with knowledge of this world.would dispute that.[2].if the practice of having such retreats became so widespread.that even mature companies dominated by politics started to do it,.we could quantify the senescence of companies by the average depth.on the org chart of those invited.[3].i also have another less optimistic prediction: as soon as.the concept of founder mode becomes established, people will start.misusing it. founders who are unable to delegate even things they.should will use founder mode as the excuse. or managers who aren't.founders will decide they should try to act like founders. that may.even work, to some extent, but the results will be messy when it.doesn't; the modular approach does at least limit the damage a bad.ceo can do.thanks to brian chesky, patrick collison,.ron conway, jessica.livingston, elon musk, ryan petersen, harj taggar, and garry tan.for reading drafts of this.<eot><sot>the right kind of stubborn.july 2024
successful people tend to be persistent. new ideas often don't work.at first, but they're not deterred. they keep trying and eventually.find something that does.mere obstinacy, on the other hand, is a recipe for failure. obstinate.people are so annoying. they won't listen. they beat their heads.against a wall and get nowhere.but is there any real difference between these two cases? are.persistent and obstinate people actually behaving differently? or.are they doing the same thing, and we just label them later as.persistent or obstinate depending on whether they turned out to be.right or not?if that's the only difference then there's nothing to be learned.from the distinction. telling someone to be persistent rather than.obstinate would just be telling them to be right rather than wrong,.and they already know that. whereas if persistence and obstinacy.are actually different kinds of behavior, it would be worthwhile.to tease them apart..[1]i've talked to a lot of determined people, and it seems to me that.they're different kinds of behavior. i've often walked away from a.conversation thinking either "wow, that guy is determined" or "damn,.that guy is stubborn," and i don't think i'm just talking about.whether they seemed right or not. that's part of it, but not all.of it.there's something annoying about the obstinate that's not simply.due to being mistaken. they won't listen. and that's not true of.all determined people. i can't think of anyone more determined than.the collison brothers, and when you point out a problem to them,.they not only listen, but listen with an almost predatory intensity..is there a hole in the bottom of their boat? probably not, but if.there is, they want to know about it.it's the same with most successful people. they're never more.engaged than when you disagree with them. whereas the obstinate.don't want to hear you. when you point out problems, their eyes.glaze over, and their replies sound like ideologues talking about.matters of doctrine..[2]the reason the persistent and the obstinate seem similar is that.they're both hard to stop. but they're hard to stop in different.senses. the persistent are like boats whose engines can't be throttled.back. the obstinate are like boats whose rudders can't be turned..[3]in the degenerate case they're indistinguishable: when there's only.one way to solve a problem, your only choice is whether to give up.or not, and persistence and obstinacy both say no. this is presumably.why the two are so often conflated in popular culture. it assumes.simple problems. but as problems get more complicated, we can see.the difference between them. the persistent are much more attached.to points high in the decision tree than to minor ones lower down,.while the obstinate spray "don't give up" indiscriminately over the.whole tree.the persistent are attached to the goal. the obstinate are attached.to their ideas about how to reach it.worse still, that means they'll tend to be attached to their first.ideas about how to solve a problem, even though these are the least.informed by the experience of working on it. so the obstinate aren't.merely attached to details, but disproportionately likely to be.attached to wrong ones.why are they like this? why are the obstinate obstinate? one.possibility is that they're overwhelmed. they're not very capable..they take on a hard problem. they're immediately in over their head..so they grab onto ideas the way someone on the deck of a rolling.ship might grab onto the nearest handhold.that was my initial theory, but on examination it doesn't hold up..if being obstinate were simply a consequence of being in over one's.head, you could make persistent people become obstinate by making.them solve harder problems. but that's not what happens. if you.handed the collisons an extremely hard problem to solve, they.wouldn't become obstinate. if anything they'd become less obstinate..they'd know they had to be open to anything.similarly, if obstinacy were caused by the situation, the obstinate.would stop being obstinate when solving easier problems. but they.don't. and if obstinacy isn't caused by the situation, it must come.from within. it must be a feature of one's personality.obstinacy is a reflexive resistance to changing one's ideas. this.is not identical with stupidity, but they're closely related. a.reflexive resistance to changing one's ideas becomes a sort of.induced stupidity as contrary evidence mounts. and obstinacy is a.form of not giving up that's easily practiced by the stupid. you.don't have to consider complicated tradeoffs; you just dig in your.heels. it even works, up to a point.the fact that obstinacy works for simple problems is an important.clue. persistence and obstinacy aren't opposites. the relationship.between them is more like the relationship between the two kinds.of respiration we can do: aerobic respiration, and the anaerobic.respiration we inherited from our most distant ancestors. anaerobic.respiration is a more primitive process, but it has its uses. when.you leap suddenly away from a threat, that's what you're using.the optimal amount of obstinacy is not zero. it can be good if your.initial reaction to a setback is an unthinking "i won't give up,".because this helps prevent panic. but unthinking only gets you so.far. the further someone is toward the obstinate end of the continuum,.the less likely they are to succeed in solving hard problems..[4]obstinacy is a simple thing. animals have it. but persistence turns.out to have a fairly complicated internal structure.one thing that distinguishes the persistent is their energy. at the.risk of putting too much weight on words, they persist rather than.merely resisting. they keep trying things. which means the persistent.must also be imaginative. to keep trying things, you have to keep.thinking of things to try.energy and imagination make a wonderful combination. each gets the.best out of the other. energy creates demand for the ideas produced.by imagination, which thus produces more, and imagination gives.energy somewhere to go..[5]merely having energy and imagination is quite rare. but to solve.hard problems you need three more qualities: resilience, good.judgement, and a focus on some kind of goal.resilience means not having one's morale destroyed by setbacks..setbacks are inevitable once problems reach a certain size, so if.you can't bounce back from them, you can only do good work on a.small scale. but resilience is not the same as obstinacy. resilience.means setbacks can't change your morale, not that they can't change.your mind.indeed, persistence often requires that one change one's mind..that's where good judgement comes in. the persistent are quite.rational. they focus on expected value. it's this, not recklessness,.that lets them work on things that are unlikely to succeed.there is one point at which the persistent are often irrational.though: at the very top of the decision tree. when they choose.between two problems of roughly equal expected value, the choice.usually comes down to personal preference. indeed, they'll often.classify projects into deliberately wide bands of expected value.in order to ensure that the one they want to work on still qualifies.empirically this doesn't seem to be a problem. it's ok to be.irrational near the top of the decision tree. one reason is that.we humans will work harder on a problem we love. but there's another.more subtle factor involved as well: our preferences among problems.aren't random. when we love a problem that other people don't, it's.often because we've unconsciously noticed that it's more important.than they realize.which leads to our fifth quality: there needs to be some overall.goal. if you're like me you began, as a kid, merely with the desire.to do something great. in theory that should be the most powerful.motivator of all, since it includes everything that could possibly.be done. but in practice it's not much use, precisely because it.includes too much. it doesn't tell you what to do at this moment.so in practice your energy and imagination and resilience and good.judgement have to be directed toward some fairly specific goal. not.too specific, or you might miss a great discovery adjacent to what.you're searching for, but not too general, or it won't work to.motivate you..[6]when you look at the internal structure of persistence, it doesn't.resemble obstinacy at all. it's so much more complex. five distinct.qualities — energy, imagination, resilience, good judgement, and.focus on a goal — combine to produce a phenomenon that seems a bit.like obstinacy in the sense that it causes you not to give up. but.the way you don't give up is completely different. instead of merely.resisting change, you're driven toward a goal by energy and resilience,.through paths discovered by imagination and optimized by judgement..you'll give way on any point low down in the decision tree, if its.expected value drops sufficiently, but energy and resilience keep.pushing you toward whatever you chose higher up.considering what it's made of, it's not surprising that the right.kind of stubbornness is so much rarer than the wrong kind, or that.it gets so much better results. anyone can do obstinacy. indeed,.kids and drunks and fools are best at it. whereas very few people.have enough of all five of the qualities that produce the right kind.of stubbornness, but when they do the results are magical..notes[1].i'm going to use "persistent" for the good kind of stubborn.and "obstinate" for the bad kind, but i can't claim i'm simply.following current usage. conventional opinion barely distinguishes.between good and bad kinds of stubbornness, and usage is correspondingly.promiscuous. i could have invented a new word for the good kind,.but it seemed better just to stretch "persistent."[2].there are some domains where one can succeed by being obstinate..some political leaders have been notorious for it. but it won't.work in situations where you have to pass external tests. and indeed.the political leaders who are famous for being obstinate are famous.for getting power, not for using it well.[3].there will be some resistance to turning the rudder of a.persistent person, because there's some cost to changing direction.[4].the obstinate do sometimes succeed in solving hard problems..one way is through luck: like the stopped clock that's right twice.a day, they seize onto some arbitrary idea, and it turns out to be.right. another is when their obstinacy cancels out some other form.of error. for example, if a leader has overcautious subordinates,.their estimates of the probability of success will always be off.in the same direction. so if he mindlessly says "push ahead regardless".in every borderline case, he'll usually turn out to be right.[5].if you stop there, at just energy and imagination, you get.the conventional caricature of an artist or poet.[6].start by erring on the small side. if you're inexperienced.you'll inevitably err on one side or the other, and if you err on.the side of making the goal too broad, you won't get anywhere..whereas if you err on the small side you'll at least be moving.forward. then, once you're moving, you expand the goal.thanks to trevor blackwell,.jessica livingston, jackie mcdonough,.courtenay pipkin, harj taggar, and garry tan for reading drafts of.this.<eot><sot>the reddits.march 2024
i met the reddits before we even started y combinator. in fact they.were one of the reasons we started it.yc grew out of a talk i gave to the harvard computer society (the.undergrad computer club) about how to start a startup. everyone.else in the audience was probably local, but steve and alexis came.up on the train from the university of virginia, where they were.seniors. since they'd come so far i agreed to meet them for coffee..they told me about the startup idea we'd later fund them to drop:.a way to order fast food on your cellphone.this was before smartphones. they'd have had to make deals with.cell carriers and fast food chains just to get it launched. so it.was not going to happen. it still doesn't exist, 19 years later..but i was impressed with their brains and their energy. in fact i.was so impressed with them and some of the other people i met at.that talk that i decided to start something to fund them. a few.days later i told steve and alexis that we were starting y combinator,.and encouraged them to apply.that first batch we didn't have any way to identify applicants, so.we made up nicknames for them. the reddits were the "cell food.muffins." "muffin" is a term of endearment jessica uses for things.like small dogs and two year olds. so that gives you some idea what.kind of impression steve and alexis made in those days. they had.the look of slightly ruffled surprise that baby birds have.their idea was bad though. and since we thought then that we were.funding ideas rather than founders, we rejected them. but we felt.bad about it. jessica was sad that we'd rejected the muffins. and.it seemed wrong to me to turn down the people we'd been inspired.to start yc to fund.i don't think the startup sense of the word "pivot" had been invented.yet, but we wanted to fund steve and alexis, so if their idea was.bad, they'd have to work on something else. and i knew what else..in those days there was a site called delicious where you could.save links. it had a page called del.icio.us/popular that listed.the most-saved links, and people were using this page as a de facto.reddit. i knew because a lot of the traffic to my site was coming.from it. there needed to be something like del.icio.us/popular, but.designed for sharing links instead of being a byproduct of saving.them.so i called steve and alexis and said that we liked them, just not.their idea, so we'd fund them if they'd work on something else..they were on the train home to virginia at that point. they got off.at the next station and got on the next train north, and by the end.of the day were committed to working on what's now called reddit.they would have liked to call it snoo, as in "what snoo?" but.snoo.com was too expensive, so they settled for calling the mascot.snoo and picked a name for the site that wasn't registered. early.on reddit was just a provisional name, or so they told me at least,.but it's probably too late to change it now.as with all the really great startups, there's an uncannily close.match between the company and the founders. steve in particular..reddit has a certain personality — curious, skeptical, ready to.be amused — and that personality is steve's.steve will roll his eyes at this, but he's an intellectual; he's.interested in ideas for their own sake. that was how he came to be.in that audience in cambridge in the first place. he knew me because.he was interested in a programming language i've written about.called lisp, and lisp is one of those languages few people learn.except out of intellectual curiosity. steve's kind of vacuum-cleaner.curiosity is exactly what you want when you're starting a site.that's a list of links to literally anything interesting.steve was not a big fan of authority, so he also liked the idea of.a site without editors. in those days the top forum for programmers.was a site called slashdot. it was a lot like reddit, except the.stories on the frontpage were chosen by human moderators. and though.they did a good job, that one small difference turned out to be a.big difference. being driven by user submissions meant reddit was.fresher than slashdot. news there was newer, and users will always.go where the newest news is.i pushed the reddits to launch fast. a version one didn't need to.be more than a couple hundred lines of code. how could that take.more than a week or two to build? and they did launch comparatively.fast, about three weeks into the first yc batch. the first users.were steve, alexis, me, and some of their yc batchmates and college.friends. it turns out you don't need that many users to collect a.decent list of interesting links, especially if you have multiple.accounts per user.reddit got two more people from their yc batch: chris slowe and.aaron swartz, and they too were unusually smart. chris was just.finishing his phd in physics at harvard. aaron was younger, a college.freshman, and even more anti-authority than steve. it's not.exaggerating to describe him as a martyr for what authority later.did to him.slowly but inexorably reddit's traffic grew. at first the numbers.were so small they were hard to distinguish from background noise..but within a few weeks it was clear that there was a core of real.users returning regularly to the site. and although all kinds of.things have happened to reddit the company in the years since,.reddit the site never looked back.reddit the site (and now app) is such a fundamentally useful thing.that it's almost unkillable. which is why, despite a long stretch.after steve left when the management strategy ranged from benign.neglect to spectacular blunders, traffic just kept growing. you.can't do that with most companies. most companies you take your eye.off the ball for six months and you're in deep trouble. but reddit.was special, and when steve came back in 2015, i knew the world was.in for a surprise.people thought they had reddit's number: one of the players in.silicon valley, but not one of the big ones. but those who knew.what had been going on behind the scenes knew there was more to the.story than this. if reddit could grow to the size it had with.management that was harmless at best, what could it do if steve.came back? we now know the answer to that question. or at least a.lower bound on the answer. steve is not out of ideas yet.<eot><sot>how to start google.march 2024
(this is a talk i gave to 14 and 15 year olds about what to do now.if they might want to start a startup later. lots of schools think.they should tell students something about startups. this is what i.think they should tell them.)most of you probably think that when you're released into the.so-called real world you'll eventually have to get some kind of.job. that's not true, and today i'm going to talk about a trick you.can use to avoid ever having to get a job.the trick is to start your own company. so it's not a trick for.avoiding work, because if you start your own company you'll.work harder than you would if you had an ordinary job. but you will.avoid many of the annoying things that come with a job, including.a boss telling you what to do.it's more exciting to work on your own project than someone else's..and you can also get a lot richer. in fact, this is the standard.way to get.really rich. if you look at the lists of the richest.people that occasionally get published in the press, nearly all of.them did it by starting their own companies.starting your own company can mean anything from starting a barber.shop to starting google. i'm here to talk about one extreme end of.that continuum. i'm going to tell you how to start google.the companies at the google end of the continuum are called startups.when they're young. the reason i know about them is that my wife.jessica and i started something called y combinator that is basically.a startup factory. since 2005, y combinator has funded over 4000.startups. so we know exactly what you need to start a startup,.because we've helped people do it for the last 19 years.you might have thought i was joking when i said i was going to tell.you how to start google. you might be thinking "how could we.start google?" but that's effectively what the people who did start.google were thinking before they started it. if you'd told larry.page and sergey brin, the founders of google, that the company they.were about to start would one day be worth over a trillion dollars,.their heads would have exploded.all you can know when you start working on a startup is that it.seems worth pursuing. you can't know whether it will turn into.a company worth billions or one that goes out of business. so when i.say i'm going to tell you how to start google, i mean i'm going to.tell you how to get to the point where you can start a company that.has as much chance of being google as google had of being google..[1]how do you get from where you are now to the point where you can.start a successful startup? you need three things. you need to be.good at some kind of technology, you need an idea for what you're.going to build, and you need cofounders to start the company with.how do you get good at technology? and how do you choose which.technology to get good at? both of those questions turn out to have.the same answer: work on your own projects. don't try to guess.whether gene editing or llms or rockets will turn out to be the.most valuable technology to know about. no one can predict that..just work on whatever interests you the most. you'll work much.harder on something you're interested in than something you're doing.because you think you're supposed to.if you're not sure what technology to get good at, get good at.programming. that has been the source of the median startup for the.last 30 years, and this is probably not going to change in the next.10.those of you who are taking computer science classes in school may.at this point be thinking, ok, we've got this sorted. we're already.being taught all about programming. but sorry, this is not enough..you have to be working on your own projects, not just learning stuff.in classes. you can do well in computer science classes without.ever really learning to program. in fact you can graduate with a.degree in computer science from a top university and still not be.any good at programming. that's why tech companies all make you.take a coding test before they'll hire you, regardless of where you.went to university or how well you did there. they know grades and.exam results prove nothing.if you really want to learn to program, you have to work on your.own projects. you learn so much faster that way. imagine you're.writing a game and there's something you want to do in it, and you.don't know how. you're going to figure out how a lot faster than.you'd learn anything in a class.you don't have to learn programming, though. if you're wondering.what counts as technology, it includes practically everything you.could describe using the words "make" or "build." so welding would.count, or making clothes, or making videos. whatever you're most.interested in. the critical distinction is whether you're producing.or just consuming. are you writing computer games, or just playing.them? that's the cutoff.steve jobs, the founder of apple, spent time when he was a teenager.studying calligraphy — the sort of beautiful writing that.you see in medieval manuscripts. no one, including him, thought.that this would help him in his career. he was just doing it because.he was interested in it. but it turned out to help him a lot. the.computer that made apple really big, the macintosh, came out at.just the moment when computers got powerful enough to make letters.like the ones in printed books instead of the computery-looking.letters you see in 8 bit games. apple destroyed everyone else at.this, and one reason was that steve was one of the few people in.the computer business who really got graphic design.don't feel like your projects have to be serious. they can.be as frivolous as you like, so long as you're building things.you're excited about. probably 90% of programmers start out building.games. they and their friends like to play games. so they build.the kind of things they and their friends want. and that's exactly.what you should be doing at 15 if you want to start a startup one.day.you don't have to do just one project. in fact it's good to learn.about multiple things. steve jobs didn't just learn calligraphy..he also learned about electronics, which was even more valuable..whatever you're interested in. (do you notice a theme here?)so that's the first of the three things you need, to get good at.some kind or kinds of technology. you do it the same way you get.good at the violin or football: practice. if you start a startup.at 22, and you start writing your own programs now, then by the.time you start the company you'll have spent at least 7 years.practicing writing code, and you can get pretty good at anything.after practicing it for 7 years.let's suppose you're 22 and you've succeeded: you're now really.good at some technology. how do you get.startup ideas? it might.seem like that's the hard part. even if you are a good programmer,.how do you get the idea to start google?actually it's easy to get startup ideas once you're good at technology..once you're good at some technology, when you look at the world you.see dotted outlines around the things that are missing. you start.to be able to see both the things that are missing from the technology.itself, and all the broken things that could be fixed using it, and.each one of these is a potential startup.in the town near our house there's a shop with a sign warning that.the door is hard to close. the sign has been there for several.years. to the people in the shop it must seem like this mysterious.natural phenomenon that the door sticks, and all they can do is put.up a sign warning customers about it. but any carpenter looking at.this situation would think "why don't you just plane off the part.that sticks?"once you're good at programming, all the missing software in the.world starts to become as obvious as a sticking door to a carpenter..i'll give you a real world example. back in the 20th century,.american universities used to publish printed directories with all.the students' names and contact info. when i tell you what these.directories were called, you'll know which startup i'm talking.about. they were called facebooks, because they usually had a picture.of each student next to their name.so mark zuckerberg shows up at harvard in 2002, and the university.still hasn't gotten the facebook online. each individual house has.an online facebook, but there isn't one for the whole university..the university administration has been diligently having meetings.about this, and will probably have solved the problem in another.decade or so. most of the students don't consciously notice that.anything is wrong. but mark is a programmer. he looks at this.situation and thinks "well, this is stupid. i could write a program.to fix this in one night. just let people upload their own photos.and then combine the data into a new site for the whole university.".so he does. and almost literally overnight he has thousands of.users.of course facebook was not a startup yet. it was just a... project..there's that word again. projects aren't just the best way to learn.about technology. they're also the best source of startup ideas.facebook was not unusual in this respect. apple and google also.began as projects. apple wasn't meant to be a company. steve wozniak.just wanted to build his own computer. it only turned into a company.when steve jobs said "hey, i wonder if we could sell plans for this.computer to other people." that's how apple started. they weren't.even selling computers, just plans for computers. can you imagine.how lame this company seemed?ditto for google. larry and sergey weren't trying to start a company.at first. they were just trying to make search better. before google,.most search engines didn't try to sort the results they gave you.in order of importance. if you searched for "rugby" they just gave.you every web page that contained the word "rugby." and the web was.so small in 1997 that this actually worked! kind of. there might.only be 20 or 30 pages with the word "rugby," but the web was growing.exponentially, which meant this way of doing search was becoming.exponentially more broken. most users just thought, "wow, i sure.have to look through a lot of search results to find what i want.".door sticks. but like mark, larry and sergey were programmers. like.mark, they looked at this situation and thought "well, this is.stupid. some pages about rugby matter more than others. let's figure.out which those are and show them first."it's obvious in retrospect that this was a great idea for a startup..it wasn't obvious at the time. it's never obvious. if it was obviously.a good idea to start apple or google or facebook, someone else would.have already done it. that's why the best startups grow out of.projects that aren't meant to be startups. you're not trying to.start a company. you're just following your instincts about what's.interesting. and if you're young and good at technology, then your.unconscious instincts about what's interesting are better than your.conscious ideas about what would be a good company.so it's critical, if you're a young founder, to build things for.yourself and your friends to use. the biggest mistake young founders.make is to build something for some mysterious group of other people..but if you can make something that you and your friends truly want.to use — something your friends aren't just using out of.loyalty to you, but would be really sad to lose if you shut it down.— then you almost certainly have the germ of a good startup.idea. it may not seem like a startup to you. it may not be obvious.how to make money from it. but trust me, there's a way.what you need in a startup idea, and all you need, is something.your friends actually want. and those ideas aren't hard to see once.you're good at technology. there are sticking doors everywhere..[2]now for the third and final thing you need: a cofounder, or cofounders..the optimal startup has two or three founders, so you need one or.two cofounders. how do you find them? can you predict what i'm going.to say next? it's the same thing: projects. you find cofounders by.working on projects with them. what you need in a cofounder is.someone who's good at what they do and that you work well with, and.the only way to judge this is to work with them on things.at this point i'm going to tell you something you might not want.to hear. it really matters to do well in your classes, even the.ones that are just memorization or blathering about literature,.because you need to do well in your classes to get into a good.university. and if you want to start a startup you should try to.get into the best university you can, because that's where the best.cofounders are. it's also where the best employees are. when larry.and sergey started google, they began by just hiring all the smartest.people they knew out of stanford, and this was a real advantage for.them.the empirical evidence is clear on this. if you look at where the.largest numbers of successful startups come from, it's pretty much.the same as the list of the most selective universities.i don't think it's the prestigious names of these universities that.cause more good startups to come out of them. nor do i think it's.because the quality of the teaching is better. what's driving this.is simply the difficulty of getting in. you have to be pretty smart.and determined to get into mit or cambridge, so if you do manage.to get in, you'll find the other students include a lot of smart.and determined people..[3]you don't have to start a startup with someone you meet at university..the founders of twitch met when they were seven. the founders of.stripe, patrick and john collison, met when john was born. but.universities are the main source of cofounders. and because they're.where the cofounders are, they're also where the ideas are, because.the best ideas grow out of projects you do with the people who.become your cofounders.so the list of what you need to do to get from here to starting a.startup is quite short. you need to get good at technology, and the.way to do that is to work on your own projects. and you need to do.as well in school as you can, so you can get into a good university,.because that's where the cofounders and the ideas are.that's it, just two things, build stuff and do well in school.notes[1].the rhetorical trick in this sentence is that the "google"s.refer to different things. what i mean is: a company that has as.much chance of growing as big as google ultimately did as larry and.sergey could have reasonably expected google itself would at the.time they started it. but i think the original version is zippier.[2].making something for your friends isn't the only source of.startup ideas. it's just the best source for young founders, who.have the least knowledge of what other people want, and whose own.wants are most predictive of future demand.[3].strangely enough this is particularly true in countries like.the us where undergraduate admissions are done badly. us admissions.departments make applicants jump through a lot of arbitrary hoops.that have little to do with their intellectual ability. but the.more arbitrary a test, the more it becomes a test of mere determination.and resourcefulness. and those are the two most important qualities.in startup founders. so us admissions departments are better at.selecting founders than they would be if they were better at selecting.students.thanks to jared friedman, carolynn levy, jessica livingston, harj taggar, and garry tan for reading drafts of this.<eot><sot>the best essay.march 2024
despite its title this isn't meant to be the best essay. my goal.here is to figure out what the best essay would be like.it would be well-written, but you can write well about any topic..what made it special would be what it was about.obviously some topics would be better than others. it probably.wouldn't be about this year's lipstick colors. but it wouldn't be.vaporous talk about elevated themes either. a good essay has to be.surprising. it has to tell people something they don't already know.the best essay would be on the most important topic you could tell.people something surprising about.that may sound obvious, but it has some unexpected consequences..one is that science enters the picture like an elephant stepping.into a rowboat. for example, darwin first described the idea of.natural selection in an essay written in 1844..talk about an.important topic you could tell people something surprising about..if that's the test of a great essay, this was surely the best one.written in 1844..and indeed, the best possible essay at any given.time would usually be one describing the most important scientific.or technological discovery it was possible to make..[1]another unexpected consequence: i imagined when i started writing.this that the best essay would be fairly timeless — that the best.essay you could write in 1844 would be much the same as the best.one you could write now. but in fact the opposite seems to be true..it might be true that the best painting would be timeless in this.sense. but it wouldn't be impressive to write an essay introducing.natural selection now. the best essay now would be one describing.a great discovery we didn't yet know about.if the question of how to write the best possible essay reduces to.the question of how to make great discoveries, then i started with.the wrong question. perhaps what this exercise shows is that we.shouldn't waste our time writing essays but instead focus on making.discoveries in some specific domain. but i'm interested in essays.and what can be done with them, so i want to see if there's some.other question i could have asked.there is, and on the face of it, it seems almost identical to the.one i started with. instead of asking what would the best essay.be? i should have asked how do you write essays well? though.these seem only phrasing apart, their answers diverge. the answer.to the first question, as we've seen, isn't really about essay.writing. the second question forces it to be.writing essays, at its best, is a way of discovering ideas. how do.you do that well? how do you discover by writing?an essay should ordinarily start with what i'm going to call a.question, though i mean this in a very general sense: it doesn't.have to be a question grammatically, just something that acts like.one in the sense that it spurs some response.how do you get this initial question? it probably won't work to.choose some important-sounding topic at random and go at it..professional traders won't even trade unless they have what they.call an edge — a convincing story about why in some class of.trades they'll win more than they lose. similarly, you shouldn't.attack a topic unless you have a way in — some new insight about.it or way of approaching it.you don't need to have a complete thesis; you just need some kind.of gap you can explore. in fact, merely having questions about.something other people take for granted can be edge enough.if you come across a question that's sufficiently puzzling, it could.be worth exploring even if it doesn't seem very momentous. many an.important discovery has been made by pulling on a thread that seemed.insignificant at first. how can they all be finches?.[2]once you've got a question, then what? you start thinking out loud.about it. not literally out loud, but you commit to a specific.string of words in response, as you would if you were talking. this.initial response is usually mistaken or incomplete. writing converts.your ideas from vague to bad. but that's a step forward, because.once you can see the brokenness, you can fix it.perhaps beginning writers are alarmed at the thought of starting.with something mistaken or incomplete, but you shouldn't be, because.this is why essay writing works. forcing yourself to commit to some.specific string of words gives you a starting point, and if it's.wrong, you'll see that when you reread it. at least half of essay.writing is rereading what you've written and asking is this correct.and complete? you have to be very strict when rereading, not just.because you want to keep yourself honest, but because a gap between.your response and the truth is often a sign of new ideas to be.discovered.the prize for being strict with what you've written is not just.refinement. when you take a roughly correct answer and try to make.it exactly right, sometimes you find that you can't, and that the.reason is that you were depending on a false assumption. and when.you discard it, the answer turns out to be completely different..[3]ideally the response to a question is two things: the first step.in a process that converges on the truth, and a source of additional.questions (in my very general sense of the word). so the process.continues recursively, as response spurs response..[4]usually there are several possible responses to a question, which.means you're traversing a tree. but essays are linear, not tree-shaped,.which means you have to choose one branch to follow at each point..how do you choose? usually you should follow whichever offers the.greatest combination of generality and novelty. i don't consciously.rank branches this way; i just follow whichever seems most exciting;.but generality and novelty are what make a branch exciting..[5]if you're willing to do a lot of rewriting, you don't have to guess.right. you can follow a branch and see how it turns out, and if it.isn't good enough, cut it and backtrack. i do this all the time..in this essay i've already cut a 17-paragraph subtree, in addition.to countless shorter ones. maybe i'll reattach it at the end, or.boil it down to a footnote, or spin it off as its own essay; we'll.see..[6]in general you want to be quick to cut. one of the most dangerous.temptations in writing (and in software and painting) is to keep.something that isn't right, just because it contains a few good bits.or cost you a lot of effort.the most surprising new question being thrown off at this point is.does it really matter what the initial question is? if the space.of ideas is highly connected, it shouldn't, because you should be.able to get from any question to the most valuable ones in a few.hops. and we see evidence that it's highly connected in the way,.for example, that people who are obsessed with some topic can turn.any conversation toward it. but that only works if you know where.you want to go, and you don't in an essay. that's the whole point..you don't want to be the obsessive conversationalist, or all your.essays will be about the same thing..[7]the other reason the initial question matters is that you usually.feel somewhat obliged to stick to it. i don't think about this when.i decide which branch to follow. i just follow novelty and generality..sticking to the question is enforced later, when i notice i've.wandered too far and have to backtrack. but i think this is.the optimal solution. you don't want the hunt for novelty and.generality to be constrained in the moment. go with it and see what.you get..[8]since the initial question does constrain you, in the best case it.sets an upper bound on the quality of essay you'll write. if you.do as well as you possibly can on the chain of thoughts that follow.from the initial question, the initial question itself is the only.place where there's room for variation.it would be a mistake to let this make you too conservative though,.because you can't predict where a question will lead. not if you're.doing things right, because doing things right means making.discoveries, and by definition you can't predict those. so the way.to respond to this situation is not to be cautious about which.initial question you choose, but to write a lot of essays. essays.are for taking risks.almost any question can get you a good essay. indeed, it took some.effort to think of a sufficiently unpromising topic in the third.paragraph, because any essayist's first impulse on hearing that the.best essay couldn't be about x would be to try to write it. but if.most questions yield good essays, only some yield great ones.can we predict which questions will yield great essays? considering.how long i've been writing essays, it's alarming how novel that.question feels.one thing i like in an initial question is outrageousness. i love.questions that seem naughty in some way — for example, by seeming.counterintuitive or overambitious or heterodox. ideally all three..this essay is an example. writing about the best essay implies there.is such a thing, which pseudo-intellectuals will dismiss as reductive,.though it follows necessarily from the possibility of one essay.being better than another. and thinking about how to do something.so ambitious is close enough to doing it that it holds your attention.i like to start an essay with a gleam in my eye. this could be just.a taste of mine, but there's one aspect of it that probably isn't:.to write a really good essay on some topic, you have to be interested.in it. a good writer can write well about anything, but to stretch.for the novel insights that are the raison d'etre of the essay, you.have to care.if caring about it is one of the criteria for a good initial question,.then the optimal question varies from person to person. it also.means you're more likely to write great essays if you care about a.lot of different things. the more curious you are, the greater the.probable overlap between the set of things you're curious about and.the set of topics that yield great essays.what other qualities would a great initial question have? it's.probably good if it has implications in a lot of different areas..and i find it's a good sign if it's one that people think has already.been thoroughly explored. but the truth is that i've barely thought.about how to choose initial questions, because i rarely do it. i.rarely choose what to write about; i just start thinking about.something, and sometimes it turns into an essay.am i going to stop writing essays about whatever i happen to be.thinking about and instead start working my way through some.systematically generated list of topics? that doesn't sound like.much fun. and yet i want to write good essays, and if the initial.question matters, i should care about it.perhaps the answer is to go one step earlier: to write about whatever.pops into your head, but try to ensure that what pops into your.head is good. indeed, now that i think about it, this has to be the.answer, because a mere list of topics wouldn't be any use if you.didn't have edge with any of them. to start writing an essay, you.need a topic plus some initial insight about it, and you can't.generate those systematically. if only..[9]you can probably cause yourself to have more of them, though. the.quality of the ideas that come out of your head depends on what goes.in, and you can improve that in two dimensions, breadth and depth.you can't learn everything, so getting breadth implies learning.about topics that are very different from one another. when i tell.people about my book-buying trips to hay and they ask what i buy.books about, i usually feel a bit sheepish answering, because the.topics seem like a laundry list of unrelated subjects. but perhaps.that's actually optimal in this business.you can also get ideas by talking to people, by doing and building.things, and by going places and seeing things. i don't think it's.important to talk to new people so much as the sort of people who.make you have new ideas. i get more new ideas after talking for an.afternoon with robert morris than from talking to 20 new smart.people. i know because that's what a block of office hours at y.combinator consists of.while breadth comes from reading and talking and seeing, depth comes.from doing. the way to really learn about some domain is to have.to solve problems in it. though this could take the form of writing,.i suspect that to be a good essayist you also have to do, or have.done, some other kind of work. that may not be true for most other.fields, but essay writing is different. you could spend half your.time working on something else and be net ahead, so long as it was.hard.i'm not proposing that as a recipe so much as an encouragement to.those already doing it. if you've spent all your life so far working.on other things, you're already halfway there. though of course to.be good at writing you have to like it, and if you like writing.you'd probably have spent at least some time doing it.everything i've said about initial questions applies also to the.questions you encounter in writing the essay. they're the same.thing; every subtree of an essay is usually a shorter essay, just.as every subtree of a calder mobile is a smaller mobile. so any.technique that gets you good initial questions also gets you good.whole essays.at some point the cycle of question and response reaches what feels.like a natural end. which is a little suspicious; shouldn't every.answer suggest more questions? i think what happens is that you.start to feel sated. once you've covered enough interesting ground,.you start to lose your appetite for new questions. which is just.as well, because the reader is probably feeling sated too. and it's.not lazy to stop asking questions, because you could instead be.asking the initial question of a new essay.that's the ultimate source of drag on the connectedness of ideas:.the discoveries you make along the way. if you discover enough.starting from question a, you'll never make it to question b. though.if you keep writing essays you'll gradually fix this problem by.burning off such discoveries. so bizarrely enough, writing lots of.essays makes it as if the space of ideas were more highly connected.when a subtree comes to an end, you can do one of two things. you.can either stop, or pull the cubist trick of laying separate subtrees.end to end by returning to a question you skipped earlier. usually.it requires some sleight of hand to make the essay flow continuously.at this point, but not this time. this time i actually need an.example of the phenomenon. for example, we discovered earlier that.the best possible essay wouldn't usually be timeless in the way the.best painting would. this seems surprising enough to be.worth investigating further.there are two senses in which an essay can be timeless: to be about.a matter of permanent importance, and always to have the same effect.on readers. with art these two senses blend together. art that.looked beautiful to the ancient greeks still looks beautiful to us..but with essays the two senses diverge, because essays.teach, and you can't teach people something they already know..natural selection is certainly a matter of permanent importance,.but an essay explaining it couldn't have the same effect on us that.it would have had on darwin's contemporaries, precisely because his.ideas were so successful that everyone already knows about them..[10]i imagined when i started writing this that the best possible essay.would be timeless in the stricter, evergreen sense: that it would.contain some deep, timeless wisdom that would appeal equally to.aristotle and feynman. that doesn't seem to be true. but if the.best possible essay wouldn't usually be timeless in this stricter.sense, what would it take to write essays that were?the answer to that turns out to be very strange: to be the evergreen.kind of timeless, an essay has to be ineffective, in the sense that.its discoveries aren't assimilated into our shared culture. otherwise.there will be nothing new in it for the second generation of readers..if you want to surprise readers not just now but in the future as.well, you have to write essays that won't stick — essays that,.no matter how good they are, won't become part of what people in.the future learn before they read them..[11]i can imagine several ways to do that. one would be to write about.things people never learn. for example, it's a long-established.pattern for ambitious people to chase after various types of prizes,.and only later, perhaps too late, to realize that some of them.weren't worth as much as they thought. if you write about that, you.can be confident of a conveyor belt of future readers to be surprised.by it.ditto if you write about the tendency of the inexperienced to overdo.things — of young engineers to produce overcomplicated solutions,.for example. there are some kinds of mistakes people never learn.to avoid except by making them. any of those should be a timeless.topic.sometimes when we're slow to grasp things it's not just because.we're obtuse or in denial but because we've been deliberately lied.to. there are a lot of things adults lie.to kids about, and when.you reach adulthood, they don't take you aside and hand you a list.of them. they don't remember which lies they told you, and most.were implicit anyway. so contradicting such lies will be a source.of surprises for as long as adults keep telling them.sometimes it's systems that lie to you. for example, the educational.systems in most countries train you to win by.hacking the test. but.that's not how you win at the most important real-world tests, and.after decades of training, this is hard for new arrivals in the real.world to grasp. helping them overcome such institutional lies will.work as long as the institutions remain broken..[12]another recipe for timelessness is to write about things readers.already know, but in much more detail than can be transmitted.culturally. "everyone knows," for example, that it can be rewarding.to have kids. but till you have them you don't know precisely what.forms that takes, and even then much of what you know you may never.have put into words.i've written about all these kinds of topics. but i didn't do it.in a deliberate attempt to write essays that were timeless in the.stricter sense. and indeed, the fact that this depends on one's ideas.not sticking suggests that it's not worth making a deliberate attempt.to. you should write about topics of timeless importance, yes, but.if you do such a good job that your conclusions stick and future.generations find your essay obvious instead of novel, so much the.better. you've crossed into darwin territory.writing about topics of timeless importance is an instance of.something even more general, though: breadth of applicability. and.there are more kinds of breadth than chronological — applying to.lots of different fields, for example. so breadth is the ultimate.aim.i already aim for it. breadth and novelty are the two things i'm.always chasing. but i'm glad i understand where timelessness fits.i understand better where a lot of things fit now. this essay has.been a kind of tour of essay writing. i started out hoping to get.advice about topics; if you assume good writing, the only thing.left to differentiate the best essay is its topic. and i did get.advice about topics: discover natural selection. yeah, that would.be nice. but when you step back and ask what's the best you can do.short of making some great discovery like that, the answer turns.out to be about procedure. ultimately the quality of an essay is a.function of the ideas discovered in it, and the way you get them.is by casting a wide net for questions and then being very exacting.with the answers.the most striking feature of this map of essay writing are the.alternating stripes of inspiration and effort required. the questions.depend on inspiration, but the answers can be got by sheer persistence..you don't have to get an answer right the first time, but there's.no excuse for not getting it right eventually, because you can keep.rewriting till you do. and this is not just a theoretical possibility..it's a pretty accurate description of the way i work. i'm rewriting.as we speak.but although i wish i could say that writing great essays depends mostly.on effort, in the limit case it's inspiration that makes the.difference. in the limit case, the questions are the harder thing.to get. that pool has no bottom.how to get more questions? that is the most important question of.all.notes[1].there might be some resistance to this conclusion on the.grounds that some of these discoveries could only be understood by.a small number of readers. but you get into all sorts of difficulties.if you want to disqualify essays on this account. how do you decide.where the cutoff should be? if a virus kills off everyone except a.handful of people sequestered at los alamos,.could an essay that had been disqualified now be eligible? etc.darwin's 1844 essay was derived from an earlier version written in 1839..extracts from it were published in 1858.[2].when you find yourself very curious about an apparently minor.question, that's an exciting sign. evolution has designed you to.pay attention to things that matter. so when you're very curious.about something random, that could mean you've unconsciously noticed.it's less random than it seems.[3].corollary: if you're not intellectually honest, your writing.won't just be biased, but also boring, because you'll miss all the.ideas you'd have discovered if you pushed for the truth.[4].sometimes this process begins before you start writing..sometimes you've already figured out the first few things you want.to say. schoolchildren are often taught they should decide everything.they want to say, and write this down as an outline before they.start writing the essay itself. maybe that's a good way to get them.started — or not, i don't know — but it's antithetical to the.spirit of essay writing. the more detailed your outline, the less.your ideas can benefit from the sort of discovery that essays are for.[5].the problem with this type of "greedy" algorithm is that you.can end up on a local maximum. if the most valuable question is.preceded by a boring one, you'll overlook it. but i can't imagine.a better strategy. there's no lookahead except by writing. so use.a greedy algorithm and a lot of time.[6].i ended up reattaching the first 5 of the 17 paragraphs, and.discarding the rest.[7].stephen fry confessed to making use of this phenomenon when.taking exams at oxford. he had in his head a standard essay about.some general literary topic, and he would find a way to turn the.exam question toward it and then just reproduce it again.strictly speaking it's the graph of ideas that would be highly.connected, not the space, but that usage would confuse people who.don't know graph theory, whereas people who do know it will get.what i mean if i say "space".[8].too far doesn't depend just on the distance from the original.topic. it's more like that distance divided by the value of whatever.i've discovered in the subtree.[9].or can you? i should try writing about this. even if the.chance of succeeding is small, the expected value is huge.[10].there was a vogue in the 20th century for saying that the.purpose of art was also to teach. some artists tried to justify.their work by explaining that their goal was not to produce something.good, but to challenge our preconceptions about art. and to be fair,.art can teach somewhat. the ancient greeks' naturalistic sculptures.represented a new idea, and must have been extra exciting to.contemporaries on that account. but they still look good to us.[11].bertrand russell caused huge controversy in the early 20th.century with his ideas about "trial marriage." but they make boring.reading now, because they prevailed. "trial marriage" is what we.call "dating."[12].if you'd asked me 10 years ago, i'd have predicted that schools.would continue to teach hacking the test for centuries. but now it.seems plausible that students will soon be taught individually by.ais, and that exams will be replaced by ongoing, invisible.micro-assessments.thanks to sam altman, trevor blackwell,.jessica livingston, robert.morris, courtenay pipkin, and harj taggar for reading drafts of.this.<eot><sot>superlinear returns.october 2023
one of the most important things i didn't understand about the world.when i was a child is the degree to which the returns for performance.are superlinear.teachers and coaches implicitly told us the returns were linear.."you get out," i heard a thousand times, "what you put in." they.meant well, but this is rarely true. if your product is only half.as good as your competitor's, you don't get half as many customers..you get no customers, and you go out of business.it's obviously true that the returns for performance are superlinear.in business. some think this is a flaw of capitalism, and that if.we changed the rules it would stop being true. but superlinear.returns for performance are a feature of the world, not an artifact.of rules we've invented. we see the same pattern in fame, power,.military victories, knowledge, and even benefit to humanity. in all.of these, the rich get richer..[1]you can't understand the world without understanding the concept.of superlinear returns. and if you're ambitious you definitely.should, because this will be the wave you surf on.it may seem as if there are a lot of different situations with.superlinear returns, but as far as i can tell they reduce to two.fundamental causes: exponential growth and thresholds.the most obvious case of superlinear returns is when you're working.on something that grows exponentially. for example, growing bacterial.cultures. when they grow at all, they grow exponentially. but they're.tricky to grow. which means the difference in outcome between someone.who's adept at it and someone who's not is very great.startups can also grow exponentially, and we see the same pattern.there. some manage to achieve high growth rates. most don't. and.as a result you get qualitatively different outcomes: the companies.with high growth rates tend to become immensely valuable, while the.ones with lower growth rates may not even survive.y combinator encourages founders to focus on growth rate rather.than absolute numbers. it prevents them from being discouraged early.on, when the absolute numbers are still low. it also helps them.decide what to focus on: you can use growth rate as a compass to.tell you how to evolve the company. but the main advantage is that.by focusing on growth rate you tend to get something that grows.exponentially.yc doesn't explicitly tell founders that with growth rate "you get.out what you put in," but it's not far from the truth. and if growth.rate were proportional to performance, then the reward for performance.p over time t would be proportional to pt.even after decades of thinking about this, i find that sentence.startling.whenever how well you do depends on how well you've done, you'll.get exponential growth. but neither our dna nor our customs prepare.us for it. no one finds exponential growth natural; every child is.surprised, the first time they hear it, by the story of the man who.asks the king for a single grain of rice the first day and double.the amount each successive day.what we don't understand naturally we develop customs to deal with,.but we don't have many customs about exponential growth either,.because there have been so few instances of it in human history..in principle herding should have been one: the more animals you.had, the more offspring they'd have. but in practice grazing land.was the limiting factor, and there was no plan for growing that.exponentially.or more precisely, no generally applicable plan. there was a way.to grow one's territory exponentially: by conquest. the more territory.you control, the more powerful your army becomes, and the easier.it is to conquer new territory. this is why history is full of.empires. but so few people created or ran empires that their.experiences didn't affect customs very much. the emperor was a.remote and terrifying figure, not a source of lessons one could use.in one's own life.the most common case of exponential growth in preindustrial times.was probably scholarship. the more you know, the easier it is to.learn new things. the result, then as now, was that some people.were startlingly more knowledgeable than the rest about certain.topics. but this didn't affect customs much either. although empires.of ideas can overlap and there can thus be far more emperors, in.preindustrial times this type of empire had little practical effect..[2]that has changed in the last few centuries. now the emperors of.ideas can design bombs that defeat the emperors of territory. but.this phenomenon is still so new that we haven't fully assimilated.it. few even of the participants realize they're benefitting from.exponential growth or ask what they can learn from other instances.of it.the other source of superlinear returns is embodied in the expression."winner take all." in a sports match the relationship between.performance and return is a step function: the winning team gets.one win whether they do much better or just slightly better..[3]the source of the step function is not competition per se, however..it's that there are thresholds in the outcome. you don't need.competition to get those. there can be thresholds in situations.where you're the only participant, like proving a theorem or hitting.a target.it's remarkable how often a situation with one source of superlinear.returns also has the other. crossing thresholds leads to exponential.growth: the winning side in a battle usually suffers less damage,.which makes them more likely to win in the future. and exponential.growth helps you cross thresholds: in a market with network effects,.a company that grows fast enough can shut out potential competitors.fame is an interesting example of a phenomenon that combines both.sources of superlinear returns. fame grows exponentially because.existing fans bring you new ones. but the fundamental reason it's.so concentrated is thresholds: there's only so much room on the.a-list in the average person's head.the most important case combining both sources of superlinear returns.may be learning. knowledge grows exponentially, but there are also.thresholds in it. learning to ride a bicycle, for example. some of.these thresholds are akin to machine tools: once you learn to read,.you're able to learn anything else much faster. but the most important.thresholds of all are those representing new discoveries. knowledge.seems to be fractal in the sense that if you push hard at the.boundary of one area of knowledge, you sometimes discover a whole.new field. and if you do, you get first crack at all the new.discoveries to be made in it. newton did this, and so did durer and.darwin..are there general rules for finding situations with superlinear.returns? the most obvious one is to seek work that compounds.there are two ways work can compound. it can compound directly, in.the sense that doing well in one cycle causes you to do better in.the next. that happens for example when you're building infrastructure,.or growing an audience or brand. or work can compound by teaching.you, since learning compounds. this second case is an interesting.one because you may feel you're doing badly as it's happening. you.may be failing to achieve your immediate goal. but if you're learning.a lot, then you're getting exponential growth nonetheless.this is one reason silicon valley is so tolerant of failure. people.in silicon valley aren't blindly tolerant of failure. they'll only.continue to bet on you if you're learning from your failures. but.if you are, you are in fact a good bet: maybe your company didn't.grow the way you wanted, but you yourself have, and that should.yield results eventually.indeed, the forms of exponential growth that don't consist of.learning are so often intermixed with it that we should probably.treat this as the rule rather than the exception. which yields.another heuristic: always be learning. if you're not learning,.you're probably not on a path that leads to superlinear returns.but don't overoptimize what you're learning. don't limit yourself.to learning things that are already known to be valuable. you're.learning; you don't know for sure yet what's going to be valuable,.and if you're too strict you'll lop off the outliers.what about step functions? are there also useful heuristics of the.form "seek thresholds" or "seek competition?" here the situation.is trickier. the existence of a threshold doesn't guarantee the.game will be worth playing. if you play a round of russian roulette,.you'll be in a situation with a threshold, certainly, but in the.best case you're no better off. "seek competition" is similarly.useless; what if the prize isn't worth competing for? sufficiently.fast exponential growth guarantees both the shape and magnitude of.the return curve — because something that grows fast enough will.grow big even if it's trivially small at first — but thresholds.only guarantee the shape..[4]a principle for taking advantage of thresholds has to include a.test to ensure the game is worth playing. here's one that does: if.you come across something that's mediocre yet still popular, it.could be a good idea to replace it. for example, if a company makes.a product that people dislike yet still buy, then presumably they'd.buy a better alternative if you made one..[5]it would be great if there were a way to find promising intellectual.thresholds. is there a way to tell which questions have whole new.fields beyond them? i doubt we could ever predict this with certainty,.but the prize is so valuable that it would be useful to have.predictors that were even a little better than random, and there's.hope of finding those. we can to some degree predict when a research.problem isn't likely to lead to new discoveries: when it seems.legit but boring. whereas the kind that do lead to new discoveries.tend to seem very mystifying, but perhaps unimportant. (if they.were mystifying and obviously important, they'd be famous open.questions with lots of people already working on them.) so one.heuristic here is to be driven by curiosity rather than careerism.— to give free rein to your curiosity instead of working on what.you're supposed to..the prospect of superlinear returns for performance is an exciting.one for the ambitious. and there's good news in this department:.this territory is expanding in both directions. there are more types.of work in which you can get superlinear returns, and the returns.themselves are growing.there are two reasons for this, though they're so closely intertwined.that they're more like one and a half: progress in technology, and.the decreasing importance of organizations.fifty years ago it used to be much more necessary to be part of an.organization to work on ambitious projects. it was the only way to.get the resources you needed, the only way to have colleagues, and.the only way to get distribution. so in 1970 your prestige was in.most cases the prestige of the organization you belonged to. and.prestige was an accurate predictor, because if you weren't part of.an organization, you weren't likely to achieve much. there were a.handful of exceptions, most notably artists and writers, who worked.alone using inexpensive tools and had their own brands. but even.they were at the mercy of organizations for reaching audiences..[6]a world dominated by organizations damped variation in the returns.for performance. but this world has eroded significantly just in.my lifetime. now a lot more people can have the freedom that artists.and writers had in the 20th century. there are lots of ambitious.projects that don't require much initial funding, and lots of new.ways to learn, make money, find colleagues, and reach audiences.there's still plenty of the old world left, but the rate of change.has been dramatic by historical standards. especially considering.what's at stake. it's hard to imagine a more fundamental change.than one in the returns for performance.without the damping effect of institutions, there will be more.variation in outcomes. which doesn't imply everyone will be better.off: people who do well will do even better, but those who do badly.will do worse. that's an important point to bear in mind. exposing.oneself to superlinear returns is not for everyone. most people.will be better off as part of the pool. so who should shoot for.superlinear returns? ambitious people of two types: those who know.they're so good that they'll be net ahead in a world with higher.variation, and those, particularly the young, who can afford to.risk trying it to find out..[7]the switch away from institutions won't simply be an exodus of their.current inhabitants. many of the new winners will be people they'd.never have let in. so the resulting democratization of opportunity.will be both greater and more authentic than any tame intramural.version the institutions themselves might have cooked up..not everyone is happy about this great unlocking of ambition. it.threatens some vested interests and contradicts some ideologies. [8].but if you're an ambitious individual it's good news for you..how should you take advantage of it?the most obvious way to take advantage of superlinear returns for.performance is by doing exceptionally good work. at the far end of.the curve, incremental effort is a bargain. all the more so because.there's less competition at the far end — and not just for the.obvious reason that it's hard to do something exceptionally well,.but also because people find the prospect so intimidating that few.even try. which means it's not just a bargain to do exceptional.work, but a bargain even to try to.there are many variables that affect how good your work is, and if.you want to be an outlier you need to get nearly all of them right..for example, to do something exceptionally well, you have to be.interested in it. mere diligence is not enough. so in a world with.superlinear returns, it's even more valuable to know what you're.interested in, and to find ways to work on it..[9].it will also be.important to choose work that suits your circumstances. for example,.if there's a kind of work that inherently requires a huge expenditure.of time and energy, it will be increasingly valuable to do it when.you're young and don't yet have children.there's a surprising amount of technique to doing great work..it's not just a matter of trying hard. i'm going to take a shot.giving a recipe in one paragraph.choose work you have a natural aptitude for and a deep interest in..develop a habit of working on your own projects; it doesn't matter.what they are so long as you find them excitingly ambitious. work.as hard as you can without burning out, and this will eventually.bring you to one of the frontiers of knowledge. these look smooth.from a distance, but up close they're full of gaps. notice and.explore such gaps, and if you're lucky one will expand into a whole.new field. take as much risk as you can afford; if you're not failing.occasionally you're probably being too conservative. seek out the.best colleagues. develop good taste and learn from the best examples..be honest, especially with yourself. exercise and eat and sleep.well and avoid the more dangerous drugs. when in doubt, follow your.curiosity. it never lies, and it knows more than you do about what's.worth paying attention to..[10]and there is of course one other thing you need: to be lucky. luck.is always a factor, but it's even more of a factor when you're.working on your own rather than as part of an organization. and.though there are some valid aphorisms about luck being where.preparedness meets opportunity and so on, there's also a component.of true chance that you can't do anything about. the solution is.to take multiple shots. which is another reason to start taking.risks early..the best example of a field with superlinear returns is probably.science. it has exponential growth, in the form of learning, combined.with thresholds at the extreme edge of performance — literally at.the limits of knowledge.the result has been a level of inequality in scientific discovery.that makes the wealth inequality of even the most stratified societies.seem mild by comparison. newton's discoveries were arguably greater.than all his contemporaries' combined..[11]this point may seem obvious, but it might be just as well to spell.it out. superlinear returns imply inequality. the steeper the return.curve, the greater the variation in outcomes.in fact, the correlation between superlinear returns and inequality.is so strong that it yields another heuristic for finding work of.this type: look for fields where a few big winners outperform.everyone else. a kind of work where everyone does about the same.is unlikely to be one with superlinear returns.what are fields where a few big winners outperform everyone else?.here are some obvious ones: sports, politics, art, music, acting,.directing, writing, math, science, starting companies, and investing..in sports the phenomenon is due to externally imposed thresholds;.you only need to be a few percent faster to win every race. in.politics, power grows much as it did in the days of emperors. and.in some of the other fields (including politics) success is driven.largely by fame, which has its own source of superlinear growth..but when we exclude sports and politics and the effects of fame, a.remarkable pattern emerges: the remaining list is exactly the same.as the list of fields where you have to be independent-minded to.succeed — where your ideas have to be not just correct, but novel.as well..[12]this is obviously the case in science. you can't publish papers.saying things that other people have already said. but it's just.as true in investing, for example. it's only useful to believe that.a company will do well if most other investors don't; if everyone.else thinks the company will do well, then its stock price will.already reflect that, and there's no room to make money.what else can we learn from these fields? in all of them you have.to put in the initial effort. superlinear returns seem small at.first. at this rate, you find yourself thinking, i'll never get.anywhere. but because the reward curve rises so steeply at the far.end, it's worth taking extraordinary measures to get there.in the startup world, the name for this principle is "do things.that don't scale." if you pay a ridiculous amount of attention to.your tiny initial set of customers, ideally you'll kick off exponential.growth by word of mouth. but this same principle applies to anything.that grows exponentially. learning, for example. when you first.start learning something, you feel lost. but it's worth making the.initial effort to get a toehold, because the more you learn, the.easier it will get.there's another more subtle lesson in the list of fields with.superlinear returns: not to equate work with a job. for most of the.20th century the two were identical for nearly everyone, and as a.result we've inherited a custom that equates productivity with.having a job. even now to most people the phrase "your work" means.their job. but to a writer or artist or scientist it means whatever.they're currently studying or creating. for someone like that, their.work is something they carry with them from job to job, if they.have jobs at all. it may be done for an employer, but it's part of.their portfolio..it's an intimidating prospect to enter a field where a few big.winners outperform everyone else. some people do this deliberately,.but you don't need to. if you have sufficient natural ability and.you follow your curiosity sufficiently far, you'll end up in one..your curiosity won't let you be interested in boring questions, and.interesting questions tend to create fields with superlinear returns.if they're not already part of one.the territory of superlinear returns is by no means static. indeed,.the most extreme returns come from expanding it. so while both.ambition and curiosity can get you into this territory, curiosity.may be the more powerful of the two. ambition tends to make you.climb existing peaks, but if you stick close enough to an interesting.enough question, it may grow into a mountain beneath you.notesthere's a limit to how sharply you can distinguish between effort,.performance, and return, because they're not sharply distinguished.in fact. what counts as return to one person might be performance.to another. but though the borders of these concepts are blurry,.they're not meaningless. i've tried to write about them as precisely.as i could without crossing into error.[1].evolution itself is probably the most pervasive example of.superlinear returns for performance. but this is hard for us to.empathize with because we're not the recipients; we're the returns.[2].knowledge did of course have a practical effect before the.industrial revolution. the development of agriculture changed human.life completely. but this kind of change was the result of broad,.gradual improvements in technique, not the discoveries of a few.exceptionally learned people.[3].it's not mathematically correct to describe a step function as.superlinear, but a step function starting from zero works like a.superlinear function when it describes the reward curve for effort.by a rational actor. if it starts at zero then the part before the.step is below any linearly increasing return, and the part after.the step must be above the necessary return at that point or no one.would bother.[4].seeking competition could be a good heuristic in the sense that.some people find it motivating. it's also somewhat of a guide to.promising problems, because it's a sign that other people find them.promising. but it's a very imperfect sign: often there's a clamoring.crowd chasing some problem, and they all end up being trumped by.someone quietly working on another one.[5].not always, though. you have to be careful with this rule. when.something is popular despite being mediocre, there's often a hidden.reason why. perhaps monopoly or regulation make it hard to compete..perhaps customers have bad taste or have broken procedures for.deciding what to buy. there are huge swathes of mediocre things.that exist for such reasons.[6].in my twenties i wanted to be an artist.and even went to art.school to study painting. mostly because i liked art, but a nontrivial.part of my motivation came from the fact that artists seemed least.at the mercy of organizations.[7].in principle everyone is getting superlinear returns. learning.compounds, and everyone learns in the course of their life. but in.practice few push this kind of everyday learning to the point where.the return curve gets really steep.[8].it's unclear exactly what advocates of "equity" mean by it..they seem to disagree among themselves. but whatever they mean is.probably at odds with a world in which institutions have less power.to control outcomes, and a handful of outliers do much better than.everyone else.it may seem like bad luck for this concept that it arose at just.the moment when the world was shifting in the opposite direction,.but i don't think this was a coincidence. i think one reason it.arose now is because its adherents feel threatened by rapidly.increasing variation in performance.[9].corollary: parents who pressure their kids to work on something.prestigious, like medicine, even though they have no interest in.it, will be hosing them even more than they have in the past.[10].the original version of this paragraph was the first draft of."how to do great work.".as soon as i wrote it i realized it was a more important topic than superlinear.returns, so i paused the present essay to expand this paragraph into its.own. practically nothing remains of the original version, because.after i finished "how to do great work" i rewrote it based on that.[11].before the industrial revolution, people who got rich usually.did it like emperors: capturing some resource made them more powerful.and enabled them to capture more. now it can be done like a scientist,.by discovering or building something uniquely valuable. most people.who get rich use a mix of the old and the new ways, but in the most.advanced economies the ratio has shifted dramatically toward discovery.just in the last half century.[12].it's not surprising that conventional-minded people would.dislike inequality if independent-mindedness is one of the biggest.drivers of it. but it's not simply that they don't want anyone to.have what they can't. the conventional-minded literally can't imagine.what it's like to have novel ideas. so the whole phenomenon of great.variation in performance seems unnatural to them, and when they.encounter it they assume it must be due to cheating or to some.malign external influence.thanks.to trevor blackwell, patrick collison, tyler cowen,.jessica livingston, harj taggar, and garry tan for reading drafts.of this.<eot><sot>how to do great work.july 2023
if you collected lists of techniques for doing great work in a lot.of different fields, what would the intersection look like? i decided.to find out by making it.partly my goal was to create a guide that could be used by someone.working in any field. but i was also curious about the shape of the.intersection. and one thing this exercise shows is that it does.have a definite shape; it's not just a point labelled "work hard."the following recipe assumes you're very ambitious..the first step is to decide what to work on. the work you choose.needs to have three qualities: it has to be something you have a.natural aptitude for, that you have a deep interest in, and that.offers scope to do great work.in practice you don't have to worry much about the third criterion..ambitious people are if anything already too conservative about it..so all you need to do is find something you have an aptitude for.and great interest in..[1]that sounds straightforward, but it's often quite difficult. when.you're young you don't know what you're good at or what different.kinds of work are like. some kinds of work you end up doing may not.even exist yet. so while some people know what they want to do at.14, most have to figure it out.the way to figure out what to work on is by working. if you're not.sure what to work on, guess. but pick something and get going..you'll probably guess wrong some of the time, but that's fine. it's.good to know about multiple things; some of the biggest discoveries.come from noticing connections between different fields.develop a habit of working on your own projects. don't let "work".mean something other people tell you to do. if you do manage to do.great work one day, it will probably be on a project of your own..it may be within some bigger project, but you'll be driving your.part of it.what should your projects be? whatever seems to you excitingly.ambitious. as you grow older and your taste in projects evolves,.exciting and important will converge. at 7 it may seem excitingly.ambitious to build huge things out of lego, then at 14 to teach.yourself calculus, till at 21 you're starting to explore unanswered.questions in physics. but always preserve excitingness.there's a kind of excited curiosity that's both the engine and the.rudder of great work. it will not only drive you, but if you let.it have its way, will also show you what to work on.what are you excessively curious about — curious to a degree that.would bore most other people? that's what you're looking for.once you've found something you're excessively interested in, the.next step is to learn enough about it to get you to one of the.frontiers of knowledge. knowledge expands fractally, and from a.distance its edges look smooth, but once you learn enough to get.close to one, they turn out to be full of gaps.the next step is to notice them. this takes some skill, because.your brain wants to ignore such gaps in order to make a simpler.model of the world. many discoveries have come from asking questions.about things that everyone else took for granted..[2]if the answers seem strange, so much the better. great work often.has a tincture of strangeness. you see this from painting to math..it would be affected to try to manufacture it, but if it appears,.embrace it.boldly chase outlier ideas, even if other people aren't interested.in them — in fact, especially if they aren't. if you're excited.about some possibility that everyone else ignores, and you have.enough expertise to say precisely what they're all overlooking,.that's as good a bet as you'll find..[3]four steps: choose a field, learn enough to get to the frontier,.notice gaps, explore promising ones. this is how practically everyone.who's done great work has done it, from painters to physicists.steps two and four will require hard work. it may not be possible.to prove that you have to work hard to do great things, but the.empirical evidence is on the scale of the evidence for mortality..that's why it's essential to work on something you're deeply.interested in. interest will drive you to work harder than mere.diligence ever could.the three most powerful motives are curiosity, delight, and the.desire to do something impressive. sometimes they converge, and.that combination is the most powerful of all.the big prize is to discover a new fractal bud. you notice a crack.in the surface of knowledge, pry it open, and there's a whole world.inside.let's talk a little more about the complicated business of figuring.out what to work on. the main reason it's hard is that you can't.tell what most kinds of work are like except by doing them. which.means the four steps overlap: you may have to work at something for.years before you know how much you like it or how good you are at.it. and in the meantime you're not doing, and thus not learning.about, most other kinds of work. so in the worst case you choose.late based on very incomplete information..[4]the nature of ambition exacerbates this problem. ambition comes in.two forms, one that precedes interest in the subject and one that.grows out of it. most people who do great work have a mix, and the.more you have of the former, the harder it will be to decide what.to do.the educational systems in most countries pretend it's easy. they.expect you to commit to a field long before you could know what.it's really like. and as a result an ambitious person on an optimal.trajectory will often read to the system as an instance of breakage.it would be better if they at least admitted it — if they admitted.that the system not only can't do much to help you figure out what.to work on, but is designed on the assumption that you'll somehow.magically guess as a teenager. they don't tell you, but i will:.when it comes to figuring out what to work on, you're on your own..some people get lucky and do guess correctly, but the rest will.find themselves scrambling diagonally across tracks laid down on.the assumption that everyone does.what should you do if you're young and ambitious but don't know.what to work on? what you should not do is drift along passively,.assuming the problem will solve itself. you need to take action..but there is no systematic procedure you can follow. when you read.biographies of people who've done great work, it's remarkable how.much luck is involved. they discover what to work on as a result.of a chance meeting, or by reading a book they happen to pick up..so you need to make yourself a big target for luck, and the way to.do that is to be curious. try lots of things, meet lots of people,.read lots of books, ask lots of questions..[5]when in doubt, optimize for interestingness. fields change as you.learn more about them. what mathematicians do, for example, is very.different from what you do in high school math classes. so you need.to give different types of work a chance to show you what they're.like. but a field should become increasingly interesting as you.learn more about it. if it doesn't, it's probably not for you.don't worry if you find you're interested in different things than.other people. the stranger your tastes in interestingness, the.better. strange tastes are often strong ones, and a strong taste.for work means you'll be productive. and you're more likely to find.new things if you're looking where few have looked before.one sign that you're suited for some kind of work is when you like.even the parts that other people find tedious or frightening.but fields aren't people; you don't owe them any loyalty. if in the.course of working on one thing you discover another that's more.exciting, don't be afraid to switch.if you're making something for people, make sure it's something.they actually want. the best way to do this is to make something.you yourself want. write the story you want to read; build the tool.you want to use. since your friends probably have similar interests,.this will also get you your initial audience.this should follow from the excitingness rule. obviously the most.exciting story to write will be the one you want to read. the reason.i mention this case explicitly is that so many people get it wrong..instead of making what they want, they try to make what some.imaginary, more sophisticated audience wants. and once you go down.that route, you're lost..[6]there are a lot of forces that will lead you astray when you're.trying to figure out what to work on. pretentiousness, fashion,.fear, money, politics, other people's wishes, eminent frauds. but.if you stick to what you find genuinely interesting, you'll be proof.against all of them. if you're interested, you're not astray..following your interests may sound like a rather passive strategy,.but in practice it usually means following them past all sorts of.obstacles. you usually have to risk rejection and failure. so it.does take a good deal of boldness.but while you need boldness, you don't usually need much planning..in most cases the recipe for doing great work is simply: work hard.on excitingly ambitious projects, and something good will come of.it. instead of making a plan and then executing it, you just try.to preserve certain invariants.the trouble with planning is that it only works for achievements.you can describe in advance. you can win a gold medal or get rich.by deciding to as a child and then tenaciously pursuing that goal,.but you can't discover natural selection that way.i think for most people who want to do great work, the right strategy.is not to plan too much. at each stage do whatever seems most.interesting and gives you the best options for the future. i call.this approach "staying upwind." this is how most people who've done.great work seem to have done it..even when you've found something exciting to work on, working on.it is not always straightforward. there will be times when some new.idea makes you leap out of bed in the morning and get straight to.work. but there will also be plenty of times when things aren't.like that.you don't just put out your sail and get blown forward by inspiration..there are headwinds and currents and hidden shoals. so there's a.technique to working, just as there is to sailing.for example, while you must work hard, it's possible to work too.hard, and if you do that you'll find you get diminishing returns:.fatigue will make you stupid, and eventually even damage your health..the point at which work yields diminishing returns depends on the.type. some of the hardest types you might only be able to do for.four or five hours a day.ideally those hours will be contiguous. to the extent you can, try.to arrange your life so you have big blocks of time to work in..you'll shy away from hard tasks if you know you might be interrupted.it will probably be harder to start working than to keep working..you'll often have to trick yourself to get over that initial.threshold. don't worry about this; it's the nature of work, not a.flaw in your character. work has a sort of activation energy, both.per day and per project. and since this threshold is fake in the.sense that it's higher than the energy required to keep going, it's.ok to tell yourself a lie of corresponding magnitude to get over.it.it's usually a mistake to lie to yourself if you want to do great.work, but this is one of the rare cases where it isn't. when i'm.reluctant to start work in the morning, i often trick myself by.saying "i'll just read over what i've got so far." five minutes.later i've found something that seems mistaken or incomplete, and.i'm off.similar techniques work for starting new projects. it's ok to lie.to yourself about how much work a project will entail, for example..lots of great things began with someone saying "how hard could it.be?"this is one case where the young have an advantage. they're more.optimistic, and even though one of the sources of their optimism.is ignorance, in this case ignorance can sometimes beat knowledge.try to finish what you start, though, even if it turns out to be.more work than you expected. finishing things is not just an exercise.in tidiness or self-discipline. in many projects a lot of the best.work happens in what was meant to be the final stage.another permissible lie is to exaggerate the importance of what.you're working on, at least in your own mind. if that helps you.discover something new, it may turn out not to have been a lie after.all..[7].since there are two senses of starting work — per day and per.project — there are also two forms of procrastination. per-project.procrastination is far the more dangerous. you put off starting.that ambitious project from year to year because the time isn't.quite right. when you're procrastinating in units of years, you can.get a lot not done..[8]one reason per-project procrastination is so dangerous is that it.usually camouflages itself as work. you're not just sitting around.doing nothing; you're working industriously on something else. so.per-project procrastination doesn't set off the alarms that per-day.procrastination does. you're too busy to notice it.the way to beat it is to stop occasionally and ask yourself: am i.working on what i most want to work on? when you're young it's ok.if the answer is sometimes no, but this gets increasingly dangerous.as you get older..[9].great work usually entails spending what would seem to most people.an unreasonable amount of time on a problem. you can't think of.this time as a cost, or it will seem too high. you have to find the.work sufficiently engaging as it's happening.there may be some jobs where you have to work diligently for years.at things you hate before you get to the good part, but this is not.how great work happens. great work happens by focusing consistently.on something you're genuinely interested in. when you pause to take.stock, you're surprised how far you've come.the reason we're surprised is that we underestimate the cumulative.effect of work. writing a page a day doesn't sound like much, but.if you do it every day you'll write a book a year. that's the key:.consistency. people who do great things don't get a lot done every.day. they get something done, rather than nothing.if you do work that compounds, you'll get exponential growth. most.people who do this do it unconsciously, but it's worth stopping to.think about. learning, for example, is an instance of this phenomenon:.the more you learn about something, the easier it is to learn more..growing an audience is another: the more fans you have, the more.new fans they'll bring you.the trouble with exponential growth is that the curve feels flat.in the beginning. it isn't; it's still a wonderful exponential.curve. but we can't grasp that intuitively, so we underrate exponential.growth in its early stages.something that grows exponentially can become so valuable that it's.worth making an extraordinary effort to get it started. but since.we underrate exponential growth early on, this too is mostly done.unconsciously: people push through the initial, unrewarding phase.of learning something new because they know from experience that.learning new things always takes an initial push, or they grow their.audience one fan at a time because they have nothing better to do..if people consciously realized they could invest in exponential.growth, many more would do it..work doesn't just happen when you're trying to. there's a kind of.undirected thinking you do when walking or taking a shower or lying.in bed that can be very powerful. by letting your mind wander a.little, you'll often solve problems you were unable to solve by.frontal attack.you have to be working hard in the normal way to benefit from this.phenomenon, though. you can't just walk around daydreaming. the.daydreaming has to be interleaved with deliberate work that feeds.it questions..[10]everyone knows to avoid distractions at work, but it's also important.to avoid them in the other half of the cycle. when you let your.mind wander, it wanders to whatever you care about most at that.moment. so avoid the kind of distraction that pushes your work out.of the top spot, or you'll waste this valuable type of thinking on.the distraction instead. (exception: don't avoid love.).consciously cultivate your taste in the work done in your field..until you know which is the best and what makes it so, you don't.know what you're aiming for.and that is what you're aiming for, because if you don't try to.be the best, you won't even be good. this observation has been made.by so many people in so many different fields that it might be worth.thinking about why it's true. it could be because ambition is a.phenomenon where almost all the error is in one direction — where.almost all the shells that miss the target miss by falling short..or it could be because ambition to be the best is a qualitatively.different thing from ambition to be good. or maybe being good is.simply too vague a standard. probably all three are true..[11]fortunately there's a kind of economy of scale here. though it might.seem like you'd be taking on a heavy burden by trying to be the.best, in practice you often end up net ahead. it's exciting, and.also strangely liberating. it simplifies things. in some ways it's.easier to try to be the best than to try merely to be good.one way to aim high is to try to make something that people will.care about in a hundred years. not because their opinions matter.more than your contemporaries', but because something that still.seems good in a hundred years is more likely to be genuinely good..don't try to work in a distinctive style. just try to do the best.job you can; you won't be able to help doing it in a distinctive.way.style is doing things in a distinctive way without trying to. trying.to is affectation.affectation is in effect to pretend that someone other than you is.doing the work. you adopt an impressive but fake persona, and while.you're pleased with the impressiveness, the fakeness is what shows.in the work..[12]the temptation to be someone else is greatest for the young. they.often feel like nobodies. but you never need to worry about that.problem, because it's self-solving if you work on sufficiently.ambitious projects. if you succeed at an ambitious project, you're.not a nobody; you're the person who did it. so just do the work and.your identity will take care of itself.."avoid affectation" is a useful rule so far as it goes, but how.would you express this idea positively? how would you say what to.be, instead of what not to be? the best answer is earnest. if you're.earnest you avoid not just affectation but a whole set of similar.vices.the core of being earnest is being intellectually honest. we're.taught as children to be honest as an unselfish virtue — as a kind.of sacrifice. but in fact it's a source of power too. to see new.ideas, you need an exceptionally sharp eye for the truth. you're.trying to see more truth than others have seen so far. and how can.you have a sharp eye for the truth if you're intellectually dishonest?one way to avoid intellectual dishonesty is to maintain a slight.positive pressure in the opposite direction. be aggressively willing.to admit that you're mistaken. once you've admitted you were mistaken.about something, you're free. till then you have to carry it..[13]another more subtle component of earnestness is informality..informality is much more important than its grammatically negative.name implies. it's not merely the absence of something. it means.focusing on what matters instead of what doesn't.what formality and affectation have in common is that as well as.doing the work, you're trying to seem a certain way as you're doing.it. but any energy that goes into how you seem comes out of being.good. that's one reason nerds have an advantage in doing great work:.they expend little effort on seeming anything. in fact that's.basically the definition of a nerd.nerds have a kind of innocent boldness that's exactly what you need.in doing great work. it's not learned; it's preserved from childhood..so hold onto it. be the one who puts things out there rather than.the one who sits back and offers sophisticated-sounding criticisms.of them. "it's easy to criticize" is true in the most literal sense,.and the route to great work is never easy.there may be some jobs where it's an advantage to be cynical and.pessimistic, but if you want to do great work it's an advantage to.be optimistic, even though that means you'll risk looking like a.fool sometimes. there's an old tradition of doing the opposite. the.old testament says it's better to keep quiet lest you look like a.fool. but that's advice for seeming smart. if you actually want.to discover new things, it's better to take the risk of telling.people your ideas.some people are naturally earnest, and with others it takes a.conscious effort. either kind of earnestness will suffice. but i.doubt it would be possible to do great work without being earnest..it's so hard to do even if you are. you don't have enough margin.for error to accommodate the distortions introduced by being affected,.intellectually dishonest, orthodox, fashionable, or cool..[14].great work is consistent not only with who did it, but with itself..it's usually all of a piece. so if you face a decision in the middle.of working on something, ask which choice is more consistent.you may have to throw things away and redo them. you won't necessarily.have to, but you have to be willing to. and that can take some.effort; when there's something you need to redo, status quo bias.and laziness will combine to keep you in denial about it. to beat.this ask: if i'd already made the change, would i want to revert.to what i have now?have the confidence to cut. don't keep something that doesn't fit.just because you're proud of it, or because it cost you a lot of.effort.indeed, in some kinds of work it's good to strip whatever you're.doing to its essence. the result will be more concentrated; you'll.understand it better; and you won't be able to lie to yourself about.whether there's anything real there.mathematical elegance may sound like a mere metaphor, drawn from.the arts. that's what i thought when i first heard the term "elegant".applied to a proof. but now i suspect it's conceptually prior —.that the main ingredient in artistic elegance is mathematical.elegance. at any rate it's a useful standard well beyond math.elegance can be a long-term bet, though. laborious solutions will.often have more prestige in the short term. they cost a lot of.effort and they're hard to understand, both of which impress people,.at least temporarily.whereas some of the very best work will seem like it took comparatively.little effort, because it was in a sense already there. it didn't.have to be built, just seen. it's a very good sign when it's hard.to say whether you're creating something or discovering it.when you're doing work that could be seen as either creation or.discovery, err on the side of discovery. try thinking of yourself.as a mere conduit through which the ideas take their natural shape.(strangely enough, one exception is the problem of choosing a problem.to work on. this is usually seen as search, but in the best case.it's more like creating something. in the best case you create the.field in the process of exploring it.)similarly, if you're trying to build a powerful tool, make it.gratuitously unrestrictive. a powerful tool almost by definition.will be used in ways you didn't expect, so err on the side of.eliminating restrictions, even if you don't know what the benefit.will be.great work will often be tool-like in the sense of being something.others build on. so it's a good sign if you're creating ideas that.others could use, or exposing questions that others could answer..the best ideas have implications in many different areas.if you express your ideas in the most general form, they'll be truer.than you intended..true by itself is not enough, of course. great ideas have to be.true and new. and it takes a certain amount of ability to see new.ideas even once you've learned enough to get to one of the frontiers.of knowledge.in english we give this ability names like originality, creativity,.and imagination. and it seems reasonable to give it a separate name,.because it does seem to some extent a separate skill. it's possible.to have a great deal of ability in other respects — to have a great.deal of what's often called technical ability — and yet not have.much of this.i've never liked the term "creative process." it seems misleading..originality isn't a process, but a habit of mind. original thinkers.throw off new ideas about whatever they focus on, like an angle.grinder throwing off sparks. they can't help it.if the thing they're focused on is something they don't understand.very well, these new ideas might not be good. one of the most.original thinkers i know decided to focus on dating after he got.divorced. he knew roughly as much about dating as the average 15.year old, and the results were spectacularly colorful. but to see.originality separated from expertise like that made its nature all.the more clear.i don't know if it's possible to cultivate originality, but there.are definitely ways to make the most of however much you have. for.example, you're much more likely to have original ideas when you're.working on something. original ideas don't come from trying to have.original ideas. they come from trying to build or understand something.slightly too difficult..[15]talking or writing about the things you're interested in is a good.way to generate new ideas. when you try to put ideas into words, a.missing idea creates a sort of vacuum that draws it out of you..indeed, there's a kind of thinking that can only be done by writing.changing your context can help. if you visit a new place, you'll.often find you have new ideas there. the journey itself often.dislodges them. but you may not have to go far to get this benefit..sometimes it's enough just to go for a walk..[16]it also helps to travel in topic space. you'll have more new ideas.if you explore lots of different topics, partly because it gives.the angle grinder more surface area to work on, and partly because.analogies are an especially fruitful source of new ideas.don't divide your attention evenly between many topics though,.or you'll spread yourself too thin. you want to distribute it.according to something more like a power law..[17].be professionally.curious about a few topics and idly curious about many more.curiosity and originality are closely related. curiosity feeds.originality by giving it new things to work on. but the relationship.is closer than that. curiosity is itself a kind of originality;.it's roughly to questions what originality is to answers. and since.questions at their best are a big component of answers, curiosity.at its best is a creative force..having new ideas is a strange game, because it usually consists of.seeing things that were right under your nose. once you've seen a.new idea, it tends to seem obvious. why did no one think of this.before?when an idea seems simultaneously novel and obvious, it's probably.a good one.seeing something obvious sounds easy. and yet empirically having.new ideas is hard. what's the source of this apparent contradiction?.it's that seeing the new idea usually requires you to change the.way you look at the world. we see the world through models that.both help and constrain us. when you fix a broken model, new ideas.become obvious. but noticing and fixing a broken model is hard..that's how new ideas can be both obvious and yet hard to discover:.they're easy to see after you do something hard.one way to discover broken models is to be stricter than other.people. broken models of the world leave a trail of clues where.they bash against reality. most people don't want to see these.clues. it would be an understatement to say that they're attached.to their current model; it's what they think in; so they'll tend.to ignore the trail of clues left by its breakage, however conspicuous.it may seem in retrospect.to find new ideas you have to seize on signs of breakage instead.of looking away. that's what einstein did. he was able to see the.wild implications of maxwell's equations not so much because he was.looking for new ideas as because he was stricter.the other thing you need is a willingness to break rules. paradoxical.as it sounds, if you want to fix your model of the world, it helps.to be the sort of person who's comfortable breaking rules. from the.point of view of the old model, which everyone including you initially.shares, the new model usually breaks at least implicit rules.few understand the degree of rule-breaking required, because new.ideas seem much more conservative once they succeed. they seem.perfectly reasonable once you're using the new model of the world.they brought with them. but they didn't at the time; it took the.greater part of a century for the heliocentric model to be generally.accepted, even among astronomers, because it felt so wrong.indeed, if you think about it, a good new idea has to seem bad to.most people, or someone would have already explored it. so what.you're looking for is ideas that seem crazy, but the right kind of.crazy. how do you recognize these? you can't with certainty. often.ideas that seem bad are bad. but ideas that are the right kind of.crazy tend to be exciting; they're rich in implications; whereas.ideas that are merely bad tend to be depressing.there are two ways to be comfortable breaking rules: to enjoy.breaking them, and to be indifferent to them. i call these two cases.being aggressively and passively independent-minded.the aggressively independent-minded are the naughty ones. rules.don't merely fail to stop them; breaking rules gives them additional.energy. for this sort of person, delight at the sheer audacity of.a project sometimes supplies enough activation energy to get it.started.the other way to break rules is not to care about them, or perhaps.even to know they exist. this is why novices and outsiders often.make new discoveries; their ignorance of a field's assumptions acts.as a source of temporary passive independent-mindedness. aspies.also seem to have a kind of immunity to conventional beliefs..several i know say that this helps them to have new ideas.strictness plus rule-breaking sounds like a strange combination..in popular culture they're opposed. but popular culture has a broken.model in this respect. it implicitly assumes that issues are trivial.ones, and in trivial matters strictness and rule-breaking are.opposed. but in questions that really matter, only rule-breakers.can be truly strict..an overlooked idea often doesn't lose till the semifinals. you do.see it, subconsciously, but then another part of your subconscious.shoots it down because it would be too weird, too risky, too much.work, too controversial. this suggests an exciting possibility: if.you could turn off such filters, you could see more new ideas.one way to do that is to ask what would be good ideas for someone.else to explore. then your subconscious won't shoot them down to.protect you.you could also discover overlooked ideas by working in the other.direction: by starting from what's obscuring them. every cherished.but mistaken principle is surrounded by a dead zone of valuable.ideas that are unexplored because they contradict it.religions are collections of cherished but mistaken principles. so.anything that can be described either literally or metaphorically.as a religion will have valuable unexplored ideas in its shadow..copernicus and darwin both made discoveries of this type..[18]what are people in your field religious about, in the sense of being.too attached to some principle that might not be as self-evident.as they think? what becomes possible if you discard it?.people show much more originality in solving problems than in.deciding which problems to solve. even the smartest can be surprisingly.conservative when deciding what to work on. people who'd never dream.of being fashionable in any other way get sucked into working on.fashionable problems.one reason people are more conservative when choosing problems than.solutions is that problems are bigger bets. a problem could occupy.you for years, while exploring a solution might only take days. but.even so i think most people are too conservative. they're not merely.responding to risk, but to fashion as well. unfashionable problems.are undervalued.one of the most interesting kinds of unfashionable problem is the.problem that people think has been fully explored, but hasn't..great work often takes something that already exists and shows its.latent potential. durer and watt both did this. so if you're.interested in a field that others think is tapped out, don't let.their skepticism deter you. people are often wrong about this.working on an unfashionable problem can be very pleasing. there's.no hype or hurry. opportunists and critics are both occupied.elsewhere. the existing work often has an old-school solidity. and.there's a satisfying sense of economy in cultivating ideas that.would otherwise be wasted.but the most common type of overlooked problem is not explicitly.unfashionable in the sense of being out of fashion. it just doesn't.seem to matter as much as it actually does. how do you find these?.by being self-indulgent — by letting your curiosity have its way,.and tuning out, at least temporarily, the little voice in your head.that says you should only be working on "important" problems.you do need to work on important problems, but almost everyone is.too conservative about what counts as one. and if there's an important.but overlooked problem in your neighborhood, it's probably already.on your subconscious radar screen. so try asking yourself: if you.were going to take a break from "serious" work to work on something.just because it would be really interesting, what would you do? the.answer is probably more important than it seems.originality in choosing problems seems to matter even more than.originality in solving them. that's what distinguishes the people.who discover whole new fields. so what might seem to be merely the.initial step — deciding what to work on — is in a sense the key.to the whole game..few grasp this. one of the biggest misconceptions about new ideas.is about the ratio of question to answer in their composition..people think big ideas are answers, but often the real insight was.in the question.part of the reason we underrate questions is the way they're used.in schools. in schools they tend to exist only briefly before being.answered, like unstable particles. but a really good question can.be much more than that. a really good question is a partial discovery..how do new species arise? is the force that makes objects fall to.earth the same as the one that keeps planets in their orbits? by.even asking such questions you were already in excitingly novel.territory.unanswered questions can be uncomfortable things to carry around.with you. but the more you're carrying, the greater the chance of.noticing a solution — or perhaps even more excitingly, noticing.that two unanswered questions are the same.sometimes you carry a question for a long time. great work often.comes from returning to a question you first noticed years before.— in your childhood, even — and couldn't stop thinking about..people talk a lot about the importance of keeping your youthful.dreams alive, but it's just as important to keep your youthful.questions alive..[19]this is one of the places where actual expertise differs most from.the popular picture of it. in the popular picture, experts are.certain. but actually the more puzzled you are, the better, so long.as (a) the things you're puzzled about matter, and (b) no one else.understands them either.think about what's happening at the moment just before a new idea.is discovered. often someone with sufficient expertise is puzzled.about something. which means that originality consists partly of.puzzlement — of confusion! you have to be comfortable enough with.the world being full of puzzles that you're willing to see them,.but not so comfortable that you don't want to solve them..[20]it's a great thing to be rich in unanswered questions. and this is.one of those situations where the rich get richer, because the best.way to acquire new questions is to try answering existing ones..questions don't just lead to answers, but also to more questions..the best questions grow in the answering. you notice a thread.protruding from the current paradigm and try pulling on it, and it.just gets longer and longer. so don't require a question to be.obviously big before you try answering it. you can rarely predict.that. it's hard enough even to notice the thread, let alone to.predict how much will unravel if you pull on it.it's better to be promiscuously curious — to pull a little bit on.a lot of threads, and see what happens. big things start small. the.initial versions of big things were often just experiments, or side.projects, or talks, which then grew into something bigger. so start.lots of small things.being prolific is underrated. the more different things you try,.the greater the chance of discovering something new. understand,.though, that trying lots of things will mean trying lots of things.that don't work. you can't have a lot of good ideas without also.having a lot of bad ones..[21]though it sounds more responsible to begin by studying everything.that's been done before, you'll learn faster and have more fun by.trying stuff. and you'll understand previous work better when you.do look at it. so err on the side of starting. which is easier when.starting means starting small; those two ideas fit together like.two puzzle pieces.how do you get from starting small to doing something great? by.making successive versions. great things are almost always made in.successive versions. you start with something small and evolve it,.and the final version is both cleverer and more ambitious than.anything you could have planned.it's particularly useful to make successive versions when you're.making something for people — to get an initial version in front.of them quickly, and then evolve it based on their response.begin by trying the simplest thing that could possibly work..surprisingly often, it does. if it doesn't, this will at least get.you started.don't try to cram too much new stuff into any one version. there.are names for doing this with the first version (taking too long.to ship) and the second (the second system effect), but these are.both merely instances of a more general principle.an early version of a new project will sometimes be dismissed as a.toy. it's a good sign when people do this. that means it has.everything a new idea needs except scale, and that tends to follow..[22]the alternative to starting with something small and evolving it.is to plan in advance what you're going to do. and planning does.usually seem the more responsible choice. it sounds more organized.to say "we're going to do x and then y and then z" than "we're going.to try x and see what happens." and it is more organized; it just.doesn't work as well.planning per se isn't good. it's sometimes necessary, but it's a.necessary evil — a response to unforgiving conditions. it's something.you have to do because you're working with inflexible media, or.because you need to coordinate the efforts of a lot of people. if.you keep projects small and use flexible media, you don't have to.plan as much, and your designs can evolve instead..take as much risk as you can afford. in an efficient market, risk.is proportionate to reward, so don't look for certainty, but for a.bet with high expected value. if you're not failing occasionally,.you're probably being too conservative.though conservatism is usually associated with the old, it's the.young who tend to make this mistake. inexperience makes them fear.risk, but it's when you're young that you can afford the most.even a project that fails can be valuable. in the process of working.on it, you'll have crossed territory few others have seen, and.encountered questions few others have asked. and there's probably.no better source of questions than the ones you encounter in trying.to do something slightly too hard..use the advantages of youth when you have them, and the advantages.of age once you have those. the advantages of youth are energy,.time, optimism, and freedom. the advantages of age are knowledge,.efficiency, money, and power. with effort you can acquire some of.the latter when young and keep some of the former when old.the old also have the advantage of knowing which advantages they.have. the young often have them without realizing it. the biggest.is probably time. the young have no idea how rich they are in time..the best way to turn this time to advantage is to use it in slightly.frivolous ways: to learn about something you don't need to know.about, just out of curiosity, or to try building something just.because it would be cool, or to become freakishly good at something.that "slightly" is an important qualification. spend time lavishly.when you're young, but don't simply waste it. there's a big difference.between doing something you worry might be a waste of time and doing.something you know for sure will be. the former is at least a bet,.and possibly a better one than you think..[23]the most subtle advantage of youth, or more precisely of inexperience,.is that you're seeing everything with fresh eyes. when your brain.embraces an idea for the first time, sometimes the two don't fit.together perfectly. usually the problem is with your brain, but.occasionally it's with the idea. a piece of it sticks out awkwardly.and jabs you when you think about it. people who are used to the.idea have learned to ignore it, but you have the opportunity not.to..[24]so when you're learning about something for the first time, pay.attention to things that seem wrong or missing. you'll be tempted.to ignore them, since there's a 99% chance the problem is with you..and you may have to set aside your misgivings temporarily to keep.progressing. but don't forget about them. when you've gotten further.into the subject, come back and check if they're still there. if.they're still viable in the light of your present knowledge, they.probably represent an undiscovered idea..one of the most valuable kinds of knowledge you get from experience.is to know what you don't have to worry about. the young know all.the things that could matter, but not their relative importance..so they worry equally about everything, when they should worry much.more about a few things and hardly at all about the rest.but what you don't know is only half the problem with inexperience..the other half is what you do know that ain't so. you arrive at.adulthood with your head full of nonsense — bad habits you've.acquired and false things you've been taught — and you won't be.able to do great work till you clear away at least the nonsense in.the way of whatever type of work you want to do.much of the nonsense left in your head is left there by schools..we're so used to schools that we unconsciously treat going to school.as identical with learning, but in fact schools have all sorts of.strange qualities that warp our ideas about learning and thinking.for example, schools induce passivity. since you were a small child,.there was an authority at the front of the class telling all of you.what you had to learn and then measuring whether you did. but neither.classes nor tests are intrinsic to learning; they're just artifacts.of the way schools are usually designed.the sooner you overcome this passivity, the better. if you're still.in school, try thinking of your education as your project, and your.teachers as working for you rather than vice versa. that may seem.a stretch, but it's not merely some weird thought experiment. it's.the truth economically, and in the best case it's the truth.intellectually as well. the best teachers don't want to be your.bosses. they'd prefer it if you pushed ahead, using them as a source.of advice, rather than being pulled by them through the material.schools also give you a misleading impression of what work is like..in school they tell you what the problems are, and they're almost.always soluble using no more than you've been taught so far. in.real life you have to figure out what the problems are, and you.often don't know if they're soluble at all.but perhaps the worst thing schools do to you is train you to win.by hacking the test. you can't do great work by doing that. you.can't trick god. so stop looking for that kind of shortcut. the way.to beat the system is to focus on problems and solutions that others.have overlooked, not to skimp on the work itself..don't think of yourself as dependent on some gatekeeper giving you.a "big break." even if this were true, the best way to get it would.be to focus on doing good work rather than chasing influential.people.and don't take rejection by committees to heart. the qualities that.impress admissions officers and prize committees are quite different.from those required to do great work. the decisions of selection.committees are only meaningful to the extent that they're part of.a feedback loop, and very few are..people new to a field will often copy existing work. there's nothing.inherently bad about that. there's no better way to learn how.something works than by trying to reproduce it. nor does.copying necessarily make your work unoriginal. originality is the.presence of new ideas, not the absence of old ones.there's a good way to copy and a bad way. if you're going to copy.something, do it openly instead of furtively, or worse still,.unconsciously. this is what's meant by the famously misattributed.phrase "great artists steal." the really dangerous kind of copying,.the kind that gives copying a bad name, is the kind that's done.without realizing it, because you're nothing more than a train.running on tracks laid down by someone else. but at the other.extreme, copying can be a sign of superiority rather than subordination..[25]in many fields it's almost inevitable that your early work will be.in some sense based on other people's. projects rarely arise in a.vacuum. they're usually a reaction to previous work. when you're.first starting out, you don't have any previous work; if you're.going to react to something, it has to be someone else's. once.you're established, you can react to your own. but while the former.gets called derivative and the latter doesn't, structurally the two.cases are more similar than they seem.oddly enough, the very novelty of the most novel ideas sometimes.makes them seem at first to be more derivative than they are. new.discoveries often have to be conceived initially as variations of.existing things, even by their discoverers, because there isn't.yet the conceptual vocabulary to express them.there are definitely some dangers to copying, though. one is that.you'll tend to copy old things — things that were in their day at.the frontier of knowledge, but no longer are.and when you do copy something, don't copy every feature of it..some will make you ridiculous if you do. don't copy the manner of.an eminent 50 year old professor if you're 18, for example, or the.idiom of a renaissance poem hundreds of years later.some of the features of things you admire are flaws they succeeded.despite. indeed, the features that are easiest to imitate are the.most likely to be the flaws.this is particularly true for behavior. some talented people are.jerks, and this sometimes makes it seem to the inexperienced that.being a jerk is part of being talented. it isn't; being talented.is merely how they get away with it.one of the most powerful kinds of copying is to copy something from.one field into another. history is so full of chance discoveries.of this type that it's probably worth giving chance a hand by.deliberately learning about other kinds of work. you can take ideas.from quite distant fields if you let them be metaphors.negative examples can be as inspiring as positive ones. in fact you.can sometimes learn more from things done badly than from things.done well; sometimes it only becomes clear what's needed when it's.missing..if a lot of the best people in your field are collected in one.place, it's usually a good idea to visit for a while. it will.increase your ambition, and also, by showing you that these people.are human, increase your self-confidence..[26]if you're earnest you'll probably get a warmer welcome than you.might expect. most people who are very good at something are happy.to talk about it with anyone who's genuinely interested. if they're.really good at their work, then they probably have a hobbyist's.interest in it, and hobbyists always want to talk about their.hobbies.it may take some effort to find the people who are really good,.though. doing great work has such prestige that in some places,.particularly universities, there's a polite fiction that everyone.is engaged in it. and that is far from true. people within universities.can't say so openly, but the quality of the work being done in.different departments varies immensely. some departments have people.doing great work; others have in the past; others never have..seek out the best colleagues. there are a lot of projects that can't.be done alone, and even if you're working on one that can be, it's.good to have other people to encourage you and to bounce ideas off.colleagues don't just affect your work, though; they also affect.you. so work with people you want to become like, because you will.quality is more important than quantity in colleagues. it's better.to have one or two great ones than a building full of pretty good.ones. in fact it's not merely better, but necessary, judging from.history: the degree to which great work happens in clusters suggests.that one's colleagues often make the difference between doing great.work and not.how do you know when you have sufficiently good colleagues? in my.experience, when you do, you know. which means if you're unsure,.you probably don't. but it may be possible to give a more concrete.answer than that. here's an attempt: sufficiently good colleagues.offer surprising insights. they can see and do things that you.can't. so if you have a handful of colleagues good enough to keep.you on your toes in this sense, you're probably over the threshold.most of us can benefit from collaborating with colleagues, but some.projects require people on a larger scale, and starting one of those.is not for everyone. if you want to run a project like that, you'll.have to become a manager, and managing well takes aptitude and.interest like any other kind of work. if you don't have them, there.is no middle path: you must either force yourself to learn management.as a second language, or avoid such projects..[27].husband your morale. it's the basis of everything when you're working.on ambitious projects. you have to nurture and protect it like a.living organism.morale starts with your view of life. you're more likely to do great.work if you're an optimist, and more likely to if you think of.yourself as lucky than if you think of yourself as a victim.indeed, work can to some extent protect you from your problems. if.you choose work that's pure, its very difficulties will serve as a.refuge from the difficulties of everyday life. if this is escapism,.it's a very productive form of it, and one that has been used by.some of the greatest minds in history.morale compounds via work: high morale helps you do good work, which.increases your morale and helps you do even better work. but this.cycle also operates in the other direction: if you're not doing.good work, that can demoralize you and make it even harder to. since.it matters so much for this cycle to be running in the right.direction, it can be a good idea to switch to easier work when.you're stuck, just so you start to get something done.one of the biggest mistakes ambitious people make is to allow.setbacks to destroy their morale all at once, like a balloon bursting..you can inoculate yourself against this by explicitly considering.setbacks a part of your process. solving hard problems always.involves some backtracking.doing great work is a depth-first search whose root node is the.desire to. so "if at first you don't succeed, try, try again" isn't.quite right. it should be: if at first you don't succeed, either.try again, or backtrack and then try again."never give up" is also not quite right. obviously there are times.when it's the right choice to eject. a more precise version would.be: never let setbacks panic you into backtracking more than you.need to. corollary: never abandon the root node.it's not necessarily a bad sign if work is a struggle, any more.than it's a bad sign to be out of breath while running. it depends.how fast you're running. so learn to distinguish good pain from.bad. good pain is a sign of effort; bad pain is a sign of damage..an audience is a critical component of morale. if you're a scholar,.your audience may be your peers; in the arts, it may be an audience.in the traditional sense. either way it doesn't need to be big..the value of an audience doesn't grow anything like linearly with.its size. which is bad news if you're famous, but good news if.you're just starting out, because it means a small but dedicated.audience can be enough to sustain you. if a handful of people.genuinely love what you're doing, that's enough.to the extent you can, avoid letting intermediaries come between.you and your audience. in some types of work this is inevitable,.but it's so liberating to escape it that you might be better off.switching to an adjacent type if that will let you go direct..[28]the people you spend time with will also have a big effect on your.morale. you'll find there are some who increase your energy and.others who decrease it, and the effect someone has is not always.what you'd expect. seek out the people who increase your energy and.avoid those who decrease it. though of course if there's someone.you need to take care of, that takes precedence.don't marry someone who doesn't understand that you need to work,.or sees your work as competition for your attention. if you're.ambitious, you need to work; it's almost like a medical condition;.so someone who won't let you work either doesn't understand you,.or does and doesn't care.ultimately morale is physical. you think with your body, so it's.important to take care of it. that means exercising regularly,.eating and sleeping well, and avoiding the more dangerous kinds of.drugs. running and walking are particularly good forms of exercise.because they're good for thinking..[29]people who do great work are not necessarily happier than everyone.else, but they're happier than they'd be if they didn't. in fact,.if you're smart and ambitious, it's dangerous not to be productive..people who are smart and ambitious but don't achieve much tend to.become bitter..it's ok to want to impress other people, but choose the right people..the opinion of people you respect is signal. fame, which is the.opinion of a much larger group you might or might not respect, just.adds noise.the prestige of a type of work is at best a trailing indicator and.sometimes completely mistaken. if you do anything well enough,.you'll make it prestigious. so the question to ask about a type of.work is not how much prestige it has, but how well it could be done.competition can be an effective motivator, but don't let it choose.the problem for you; don't let yourself get drawn into chasing.something just because others are. in fact, don't let competitors.make you do anything much more specific than work harder.curiosity is the best guide. your curiosity never lies, and it knows.more than you do about what's worth paying attention to..notice how often that word has come up. if you asked an oracle the.secret to doing great work and the oracle replied with a single.word, my bet would be on "curiosity."that doesn't translate directly to advice. it's not enough just to.be curious, and you can't command curiosity anyway. but you can.nurture it and let it drive you.curiosity is the key to all four steps in doing great work: it will.choose the field for you, get you to the frontier, cause you to.notice the gaps in it, and drive you to explore them. the whole.process is a kind of dance with curiosity..believe it or not, i tried to make this essay as short as i could..but its length at least means it acts as a filter. if you made it.this far, you must be interested in doing great work. and if so.you're already further along than you might realize, because the.set of people willing to want to is small.the factors in doing great work are factors in the literal,.mathematical sense, and they are: ability, interest, effort, and.luck. luck by definition you can't do anything about, so we can.ignore that. and we can assume effort, if you do in fact want to.do great work. so the problem boils down to ability and interest..can you find a kind of work where your ability and interest will.combine to yield an explosion of new ideas?here there are grounds for optimism. there are so many different.ways to do great work, and even more that are still undiscovered..out of all those different types of work, the one you're most suited.for is probably a pretty close match. probably a comically close.match. it's just a question of finding it, and how far into it your.ability and interest can take you. and you can only answer that by.trying.many more people could try to do great work than do. what holds.them back is a combination of modesty and fear. it seems presumptuous.to try to be newton or shakespeare. it also seems hard; surely if.you tried something like that, you'd fail. presumably the calculation.is rarely explicit. few people consciously decide not to try to do.great work. but that's what's going on subconsciously; they shy.away from the question.so i'm going to pull a sneaky trick on you. do you want to do great.work, or not? now you have to decide consciously. sorry about that..i wouldn't have done it to a general audience. but we already know.you're interested.don't worry about being presumptuous. you don't have to tell anyone..and if it's too hard and you fail, so what? lots of people have.worse problems than that. in fact you'll be lucky if it's the worst.problem you have.yes, you'll have to work hard. but again, lots of people have to.work hard. and if you're working on something you find very.interesting, which you necessarily will if you're on the right path,.the work will probably feel less burdensome than a lot of your.peers'.the discoveries are out there, waiting to be made. why not by you?.notes[1].i don't think you could give a precise definition of what.counts as great work. doing great work means doing something important.so well that you expand people's ideas of what's possible. but.there's no threshold for importance. it's a matter of degree, and.often hard to judge at the time anyway. so i'd rather people focused.on developing their interests rather than worrying about whether.they're important or not. just try to do something amazing, and.leave it to future generations to say if you succeeded.[2].a lot of standup comedy is based on noticing anomalies in.everyday life. "did you ever notice...?" new ideas come from doing.this about nontrivial things. which may help explain why people's.reaction to a new idea is often the first half of laughing: ha![3].that second qualifier is critical. if you're excited about.something most authorities discount, but you can't give a more.precise explanation than "they don't get it," then you're starting.to drift into the territory of cranks.[4].finding something to work on is not simply a matter of finding.a match between the current version of you and a list of known.problems. you'll often have to coevolve with the problem. that's.why it can sometimes be so hard to figure out what to work on. the.search space is huge. it's the cartesian product of all possible.types of work, both known and yet to be discovered, and all possible.future versions of you.there's no way you could search this whole space, so you have to.rely on heuristics to generate promising paths through it and hope.the best matches will be clustered. which they will not always be;.different types of work have been collected together as much by.accidents of history as by the intrinsic similarities between them.[5].there are many reasons curious people are more likely to do.great work, but one of the more subtle is that, by casting a wide.net, they're more likely to find the right thing to work on in the.first place.[6].it can also be dangerous to make things for an audience you.feel is less sophisticated than you, if that causes you to talk.down to them. you can make a lot of money doing that, if you do it.in a sufficiently cynical way, but it's not the route to great work..not that anyone using this m.o. would care.[7].this idea i learned from hardy's a mathematician's apology,.which i recommend to anyone ambitious to do great work, in any.field.[8].just as we overestimate what we can do in a day and underestimate.what we can do over several years, we overestimate the damage done.by procrastinating for a day and underestimate the damage done by.procrastinating for several years.[9].you can't usually get paid for doing exactly what you want,.especially early on. there are two options: get paid for doing work.close to what you want and hope to push it closer, or get paid for.doing something else entirely and do your own projects on the side..both can work, but both have drawbacks: in the first approach your.work is compromised by default, and in the second you have to fight.to get time to do it.[10].if you set your life up right, it will deliver the focus-relax.cycle automatically. the perfect setup is an office you work in and.that you walk to and from.[11].there may be some very unworldly people who do great work.without consciously trying to. if you want to expand this rule to.cover that case, it becomes: don't try to be anything except the.best.[12].this gets more complicated in work like acting, where the.goal is to adopt a fake persona. but even here it's possible to be.affected. perhaps the rule in such fields should be to avoid.unintentional affectation.[13].it's safe to have beliefs that you treat as unquestionable.if and only if they're also unfalsifiable. for example, it's safe.to have the principle that everyone should be treated equally under.the law, because a sentence with a "should" in it isn't really a.statement about the world and is therefore hard to disprove. and.if there's no evidence that could disprove one of your principles,.there can't be any facts you'd need to ignore in order to preserve.it.[14].affectation is easier to cure than intellectual dishonesty..affectation is often a shortcoming of the young that burns off in.time, while intellectual dishonesty is more of a character flaw.[15].obviously you don't have to be working at the exact moment.you have the idea, but you'll probably have been working fairly.recently.[16].some say psychoactive drugs have a similar effect. i'm.skeptical, but also almost totally ignorant of their effects.[17].for example you might give the nth most important topic.(m-1)/m^n of your attention, for some m > 1. you couldn't allocate.your attention so precisely, of course, but this at least gives an.idea of a reasonable distribution.[18].the principles defining a religion have to be mistaken..otherwise anyone might adopt them, and there would be nothing to.distinguish the adherents of the religion from everyone else.[19].it might be a good exercise to try writing down a list of.questions you wondered about in your youth. you might find you're.now in a position to do something about some of them.[20].the connection between originality and uncertainty causes a.strange phenomenon: because the conventional-minded are more certain.than the independent-minded, this tends to give them the upper hand.in disputes, even though they're generally stupider..the best lack all conviction, while the worst.are full of passionate intensity..[21].derived from linus pauling's "if you want to have good ideas,.you must have many ideas."[22].attacking a project as a "toy" is similar to attacking a.statement as "inappropriate." it means that no more substantial.criticism can be made to stick.[23].one way to tell whether you're wasting time is to ask if.you're producing or consuming. writing computer games is less likely.to be a waste of time than playing them, and playing games where.you create something is less likely to be a waste of time than.playing games where you don't.[24].another related advantage is that if you haven't said anything.publicly yet, you won't be biased toward evidence that supports.your earlier conclusions. with sufficient integrity you could achieve.eternal youth in this respect, but few manage to. for most people,.having previously published opinions has an effect similar to.ideology, just in quantity 1.[25].in the early 1630s daniel mytens made a painting of henrietta.maria handing a laurel wreath to charles i. van dyck then painted.his own version to show how much better he was.[26].i'm being deliberately vague about what a place is. as of.this writing, being in the same physical place has advantages that.are hard to duplicate, but that could change.[27].this is false when the work the other people have to do is.very constrained, as with seti@home or bitcoin. it may be possible.to expand the area in which it's false by defining similarly.restricted protocols with more freedom of action in the nodes.[28].corollary: building something that enables people to go around.intermediaries and engage directly with their audience is probably.a good idea.[29].it may be helpful always to walk or run the same route, because.that frees attention for thinking. it feels that way to me, and.there is some historical evidence for it.thanks.to trevor blackwell, daniel gackle, pam graham, tom howard,.patrick hsu, steve huffman, jessica livingston, henry lloyd-baker,.bob metcalfe, ben miller, robert morris, michael nielsen, courtenay.pipkin, joris poort, mieke roos, rajat suri, harj taggar, garry.tan, and my younger son for suggestions and for reading drafts.<eot><sot>how to get new ideas.january 2023
(someone fed my essays into gpt to make something that could answer.questions based on them, then asked it where good ideas come from.  the.answer was ok, but not what i would have said. this is what i would have said.)the way to get new ideas is to notice anomalies: what seems strange,.or missing, or broken? you can see anomalies in everyday life (much.of standup comedy is based on this), but the best place to look for.them is at the frontiers of knowledge.knowledge grows fractally..from a distance its edges look smooth, but when you learn enough.to get close to one, you'll notice it's full of gaps. these gaps.will seem obvious; it will seem inexplicable that no one has tried.x or wondered about y. in the best case, exploring such gaps yields.whole new fractal buds.<eot><sot>the need to read.november 2022
in the science fiction books i read as a kid, reading had often.been replaced by some more efficient way of acquiring knowledge..mysterious "tapes" would load it into one's brain like a program.being loaded into a computer.that sort of thing is unlikely to happen anytime soon. not just.because it would be hard to build a replacement for reading, but.because even if one existed, it would be insufficient. reading about.x doesn't just teach you about x; it also teaches you how to write..[1]would that matter? if we replaced reading, would anyone need to be.good at writing?the reason it would matter is that writing is not just a way to.convey ideas, but also a way to have them.a good writer doesn't just think, and then write down what he.thought, as a sort of transcript. a good writer will almost always.discover new things in the process of writing. and there is, as far.as i know, no substitute for this kind of discovery. talking about.your ideas with other people is a good way to develop them. but.even after doing this, you'll find you still discover new things.when you sit down to write. there is a kind of thinking that can.only be done by writing.there are of course kinds of thinking that can be done without.writing. if you don't need to go too deeply into a problem, you can.solve it without writing. if you're thinking about how two pieces.of machinery should fit together, writing about it probably won't.help much. and when a problem can be described formally, you can.sometimes solve it in your head. but if you need to solve a.complicated, ill-defined problem, it will almost always help to.write about it. which in turn means that someone who's not good at.writing will almost always be at a disadvantage in solving such.problems.you can't think well without writing well, and you can't write well.without reading well. and i mean that last "well" in both senses..you have to be good at reading, and read good things..[2]people who just want information may find other ways to get it..but people who want to have ideas can't afford to.notes[1].audiobooks can give you examples of good writing, but having.them read to you doesn't teach you as much about writing as reading.them yourself.[2].by "good at reading" i don't mean good at the mechanics of.reading. you don't have to be good at extracting words from the.page so much as extracting meaning from the words.japanese translationchinese translationitalian translationfrench translation<eot><sot>what you (want to)* want.november 2022
since i was about 9 i've been puzzled by the apparent contradiction.between being made of matter that behaves in a predictable way, and.the feeling that i could choose to do whatever i wanted. at the.time i had a self-interested motive for exploring the question. at.that age (like most succeeding ages) i was always in trouble with.the authorities, and it seemed to me that there might possibly be.some way to get out of trouble by arguing that i wasn't responsible.for my actions. i gradually lost hope of that, but the puzzle.remained: how do you reconcile being a machine made of matter with.the feeling that you're free to choose what you do?.[1]the best way to explain the answer may be to start with a slightly.wrong version, and then fix it. the wrong version is: you can do.what you want, but you can't want what you want. yes, you can control.what you do, but you'll do what you want, and you can't control.that.the reason this is mistaken is that people do sometimes change what.they want. people who don't want to want something — drug addicts,.for example — can sometimes make themselves stop wanting it. and.people who want to want something — who want to like classical.music, or broccoli — sometimes succeed.so we modify our initial statement: you can do what you want, but.you can't want to want what you want.that's still not quite true. it's possible to change what you want.to want. i can imagine someone saying "i decided to stop wanting.to like classical music." but we're getting closer to the truth..it's rare for people to change what they want to want, and the more."want to"s we add, the rarer it gets.we can get arbitrarily close to a true statement by adding more "want.to"s in much the same way we can get arbitrarily close to 1 by adding.more 9s to a string of 9s following a decimal point. in practice.three or four "want to"s must surely be enough. it's hard even to.envision what it would mean to change what you want to want to want.to want, let alone actually do it.so one way to express the correct answer is to use a regular.expression. you can do what you want, but there's some statement.of the form "you can't (want to)* want what you want" that's true..ultimately you get back to a want that you don't control..[2].notes[1].i didn't know when i was 9 that matter might behave randomly,.but i don't think it affects the problem much. randomness destroys.the ghost in the machine as effectively as determinism.[2].if you don't like using an expression, you can make the same.point using higher-order desires: there is some n such that you.don't control your nth-order desires..thanks to trevor blackwell,.jessica livingston, robert morris, and.michael nielsen for reading drafts of this.irish translation<eot><sot>alien truth.october 2022
if there were intelligent beings elsewhere in the universe, they'd.share certain truths in common with us. the truths of mathematics.would be the same, because they're true by definition. ditto for.the truths of physics; the mass of a carbon atom would be the same.on their planet. but i think we'd share other truths with aliens.besides the truths of math and physics, and that it would be.worthwhile to think about what these might be.for example, i think we'd share the principle that a controlled.experiment testing some hypothesis entitles us to have proportionally.increased belief in it. it seems fairly likely, too, that it would.be true for aliens that one can get better at something by practicing..we'd probably share occam's razor. there doesn't seem anything.specifically human about any of these ideas.we can only guess, of course. we can't say for sure what forms.intelligent life might take. nor is it my goal here to explore that.question, interesting though it is. the point of the idea of alien.truth is not that it gives us a way to speculate about what forms.intelligent life might take, but that it gives us a threshold, or.more precisely a target, for truth. if you're trying to find the.most general truths short of those of math or physics, then presumably.they'll be those we'd share in common with other forms of intelligent.life.alien truth will work best as a heuristic if we err on the side of.generosity. if an idea might plausibly be relevant to aliens, that's.enough. justice, for example. i wouldn't want to bet that all.intelligent beings would understand the concept of justice, but i.wouldn't want to bet against it either.the idea of alien truth is related to erdos's idea of god's book..he used to describe a particularly good proof as being in god's.book, the implication being (a) that a sufficiently good proof was.more discovered than invented, and (b) that its goodness would be.universally recognized. if there's such a thing as alien truth,.then there's more in god's book than math.what should we call the search for alien truth? the obvious choice.is "philosophy." whatever else philosophy includes, it should.probably include this. i'm fairly sure aristotle would have thought.so. one could even make the case that the search for alien truth.is, if not an accurate description of philosophy, a good.definition for it. i.e. that it's what people who call.themselves philosophers should be doing, whether or not they currently.are. but i'm not wedded to that; doing it is what matters, not what.we call it.we may one day have something like alien life among us in the form.of ais. and that may in turn allow us to be precise about what.truths an intelligent being would have to share with us. we might.find, for example, that it's impossible to create something we'd.consider intelligent that doesn't use occam's razor. we might one.day even be able to prove that. but though this sort of research.would be very interesting, it's not necessary for our purposes, or.even the same field; the goal of philosophy, if we're going to call it that, would be.to see what ideas we come up with using alien truth as a target,.not to say precisely where the threshold of it is. those two questions might one.day converge, but they'll converge from quite different directions,.and till they do, it would be too constraining to restrict ourselves.to thinking only about things we're certain would be alien truths..especially since this will probably be one of those areas where the.best guesses turn out to be surprisingly close to optimal. (let's.see if that one does.)whatever we call it, the attempt to discover alien truths would be.a worthwhile undertaking. and curiously enough, that is itself.probably an alien truth.thanks to trevor blackwell, greg brockman,.patrick collison, robert morris, and michael nielsen for reading drafts of this.<eot><sot>what i've learned from users.september 2022
i recently told applicants to y combinator that the best advice i.could give for getting in, per word, was.explain what you've learned from users..that tests a lot of things: whether you're paying attention to.users, how well you understand them, and even how much they need.what you're making.afterward i asked myself the same question. what have i learned.from yc's users, the startups we've funded?the first thing that came to mind was that most startups have the.same problems. no two have exactly the same problems, but it's.surprising how much the problems remain the same, regardless of.what they're making. once you've advised 100 startups all doing.different things, you rarely encounter problems you haven't seen.before.this fact is one of the things that makes yc work. but i didn't.know it when we started yc. i only had a few data points: our own.startup, and those started by friends. it was a surprise to me how.often the same problems recur in different forms. many later stage.investors might never realize this, because later stage investors.might not advise 100 startups in their whole career, but a yc partner.will get this much experience in the first year or two.that's one advantage of funding large numbers of early stage companies.rather than smaller numbers of later-stage ones. you get a lot of.data. not just because you're looking at more companies, but also.because more goes wrong.but knowing (nearly) all the problems startups can encounter doesn't.mean that advising them can be automated, or reduced to a formula..there's no substitute for individual office hours with a yc partner..each startup is unique, which means they have to be advised.by specific partners who know them well..[1]we learned that the hard way, in the notorious "batch that broke.yc" in the summer of 2012. up till that point we treated the partners.as a pool. when a startup requested office hours, they got the next.available slot posted by any partner. that meant every partner had.to know every startup. this worked fine up to 60 startups, but when.the batch grew to 80, everything broke. the founders probably didn't.realize anything was wrong, but the partners were confused and.unhappy because halfway through the batch they still didn't know.all the companies yet..[2]at first i was puzzled. how could things be fine at 60 startups and.broken at 80? it was only a third more. then i realized what had.happened. we were using an o(n2) algorithm. so of course it blew.up.the solution we adopted was the classic one in these situations..we sharded the batch into smaller groups of startups, each overseen.by a dedicated group of partners. that fixed the problem, and has.worked fine ever since. but the batch that broke yc was a powerful.demonstration of how individualized the process of advising startups.has to be.another related surprise is how bad founders can be at realizing.what their problems are. founders will sometimes come in to talk.about some problem, and we'll discover another much bigger one in.the course of the conversation. for example (and this case is all.too common), founders will come in to talk about the difficulties.they're having raising money, and after digging into their situation,.it turns out the reason is that the company is doing badly, and.investors can tell. or founders will come in worried that they still.haven't cracked the problem of user acquisition, and the reason turns out.to be that their product isn't good enough. there have been times.when i've asked "would you use this yourself, if you hadn't built.it?" and the founders, on thinking about it, said "no." well, there's.the reason you're having trouble getting users.often founders know what their problems are, but not their relative.importance..[3].they'll come in to talk about three problems.they're worrying about. one is of moderate importance, one doesn't.matter at all, and one will kill the company if it isn't addressed.immediately. it's like watching one of those horror movies where.the heroine is deeply upset that her boyfriend cheated on her, and.only mildly curious about the door that's mysteriously ajar. you.want to say: never mind about your boyfriend, think about that door!.fortunately in office hours you can. so while startups still die.with some regularity, it's rarely because they wandered into a room.containing a murderer. the yc partners can warn them where the.murderers are.not that founders listen. that was another big surprise: how often.founders don't listen to us. a couple weeks ago i talked to a partner.who had been working for yc for a couple batches and was starting.to see the pattern. "they come back a year later," she said, "and.say 'we wish we'd listened to you.'"it took me a long time to figure out why founders don't listen. at.first i thought it was mere stubbornness. that's part of the reason,.but another and probably more important reason is that so much about.startups is counterintuitive..and when you tell someone something.counterintuitive, what it sounds to them is wrong. so the reason.founders don't listen to us is that they don't believe us. at.least not till experience teaches them otherwise..[4]the reason startups are so counterintuitive is that they're so.different from most people's other experiences. no one knows what.it's like except those who've done it. which is why yc partners.should usually have been founders themselves. but strangely enough,.the counterintuitiveness of startups turns out to be another of the.things that make yc work. if it weren't counterintuitive, founders.wouldn't need our advice about how to do it.focus is doubly important for early stage startups, because not.only do they have a hundred different problems, they don't have.anyone to work on them except the founders. if the founders focus.on things that don't matter, there's no one focusing on the things.that do. so the essence of what happens at yc is to figure out which.problems matter most, then cook up ideas for solving them — ideally.at a resolution of a week or less — and then try those ideas and.measure how well they worked. the focus is on action, with measurable,.near-term results.this doesn't imply that founders should rush forward regardless of.the consequences. if you correct course at a high enough frequency,.you can be simultaneously decisive at a micro scale and tentative.at a macro scale. the result is a somewhat winding path, but executed.very rapidly, like the path a running back takes downfield. and in.practice there's less backtracking than you might expect. founders.usually guess right about which direction to run in, especially if.they have someone experienced like a yc partner to bounce their.hypotheses off. and when they guess wrong, they notice fast, because.they'll talk about the results at office hours the next week..[5]a small improvement in navigational ability can make you a lot.faster, because it has a double effect: the path is shorter, and.you can travel faster along it when you're more certain it's the.right one. that's where a lot of yc's value lies, in helping founders.get an extra increment of focus that lets them move faster. and.since moving fast is the essence of a startup, yc in effect makes.startups more startup-like.speed defines startups. focus enables speed. yc improves focus.why are founders uncertain about what to do? partly because startups.almost by definition are doing something new, which means no one.knows how to do it yet, or in most cases even what "it" is. partly.because startups are so counterintuitive generally. and partly.because many founders, especially young and ambitious ones, have.been trained to win the wrong way. that took me years to figure.out. the educational system in most countries trains you to win by.hacking the test.instead of actually doing whatever it's supposed.to measure. but that stops working when you start a startup. so.part of what yc does is to retrain founders to stop trying to hack.the test. (it takes a surprisingly long time. a year in, you still.see them reverting to their old habits.)yc is not simply more experienced founders passing on their knowledge..it's more like specialization than apprenticeship. the knowledge.of the yc partners and the founders have different shapes: it.wouldn't be worthwhile for a founder to acquire the encyclopedic.knowledge of startup problems that a yc partner has, just as it.wouldn't be worthwhile for a yc partner to acquire the depth of.domain knowledge that a founder has. that's why it can still be.valuable for an experienced founder to do yc, just as it can still.be valuable for an experienced athlete to have a coach.the other big thing yc gives founders is colleagues, and this may.be even more important than the advice of partners. if you look at.history, great work clusters around certain places and institutions:.florence in the late 15th century, the university of göttingen in.the late 19th, the new yorker under ross, bell labs, xerox parc..however good you are, good colleagues make you better. indeed, very.ambitious people probably need colleagues more than anyone else,.because they're so starved for them in everyday life.whether or not yc manages one day to be listed alongside those.famous clusters, it won't be for lack of trying. we were very aware.of this historical phenomenon and deliberately designed yc to be.one. by this point it's not bragging to say that it's the biggest.cluster of great startup founders. even people trying to attack yc.concede that.colleagues and startup founders are two of the most powerful forces.in the world, so you'd expect it to have a big effect to combine.them. before yc, to the extent people thought about the question.at all, most assumed they couldn't be combined — that loneliness.was the price of independence. that was how it felt to us when we.started our own startup in boston in the 1990s. we had a handful.of older people we could go to for advice (of varying quality), but.no peers. there was no one we could commiserate with about the.misbehavior of investors, or speculate with about the future of.technology. i often tell founders to make something they themselves.want, and yc is certainly that: it was designed to be exactly what.we wanted when we were starting a startup.one thing we wanted was to be able to get seed funding without.having to make the rounds of random rich people. that has become a.commodity now, at least in the us. but great colleagues can never.become a commodity, because the fact that they cluster in some.places means they're proportionally absent from the rest.something magical happens where they do cluster though. the energy.in the room at a yc dinner is like nothing else i've experienced..we would have been happy just to have one or two other startups to.talk to. when you have a whole roomful it's another thing entirely.yc founders aren't just inspired by one another. they also help one.another. that's the happiest thing i've learned about startup.founders: how generous they can be in helping one another. we noticed.this in the first batch and consciously designed yc to magnify it..the result is something far more intense than, say, a university..between the partners, the alumni, and their batchmates, founders.are surrounded by people who want to help them, and can.notes[1].this is why i've never liked it when people refer to yc as a."bootcamp." it's intense like a bootcamp, but the opposite in.structure. instead of everyone doing the same thing, they're each.talking to yc partners to figure out what their specific startup.needs.[2].when i say the summer 2012 batch was broken, i mean it felt.to the partners that something was wrong. things weren't yet so.broken that the startups had a worse experience. in fact that batch.did unusually well.[3].this situation reminds me of the research showing that people.are much better at answering questions than they are at judging how.accurate their answers are. the two phenomena feel very similar.[4].the airbnbs were.particularly good at listening — partly.because they were flexible and disciplined, but also because they'd.had such a rough time during the preceding year. they were ready.to listen.[5].the optimal unit of decisiveness depends on how long it takes.to get results, and that depends on the type of problem you're.solving. when you're negotiating with investors, it could be a.couple days, whereas if you're building hardware it could be months..thanks to trevor blackwell, jessica livingston,.harj taggar, and garry tan for reading drafts of this.<eot><sot>heresy.april 2022
one of the most surprising things i've witnessed in my lifetime is.the rebirth of the concept of heresy.in his excellent biography of newton, richard westfall writes about the.moment when he was elected a fellow of trinity college:.supported comfortably, newton was free to devote himself wholly.to whatever he chose. to remain on, he had only to avoid the three.unforgivable sins: crime, heresy, and marriage..[1].the first time i read that, in the 1990s, it sounded amusingly.medieval. how strange, to have to avoid committing heresy. but when.i reread it 20 years later it sounded like a description of.contemporary employment.there are an ever-increasing number of opinions you can be fired.for. those doing the firing don't use the word "heresy" to describe.them, but structurally they're equivalent. structurally there are.two distinctive things about heresy: (1) that it takes priority.over the question of truth or falsity, and (2) that it outweighs.everything else the speaker has done.for example, when someone calls a statement "x-ist," they're also.implicitly saying that this is the end of the discussion. they do.not, having said this, go on to consider whether the statement is.true or not. using such labels is the conversational equivalent of.signalling an exception. that's one of the reasons they're used:.to end a discussion.if you find yourself talking to someone who uses these labels a.lot, it might be worthwhile to ask them explicitly if they believe.any babies are being thrown out with the bathwater. can a statement.be x-ist, for whatever value of x, and also true? if the answer is.yes, then they're admitting to banning the truth. that's obvious.enough that i'd guess most would answer no. but if they answer no,.it's easy to show that they're mistaken, and that in practice such.labels are applied to statements regardless of their truth or.falsity.the clearest evidence of this is that whether a statement is.considered x-ist often depends on who said it. truth doesn't work.that way. the same statement can't be true when one person says it,.but x-ist, and therefore false, when another person does..[2]the other distinctive thing about heresies, compared to ordinary.opinions, is that the public expression of them outweighs everything.else the speaker has done. in ordinary matters, like knowledge of.history, or taste in music, you're judged by the average of your.opinions. a heresy is qualitatively different. it's like dropping.a chunk of uranium onto the scale.back in the day (and still, in some places) the punishment for.heresy was death. you could have led a life of exemplary goodness,.but if you publicly doubted, say, the divinity of christ, you were.going to burn. nowadays, in civilized countries, heretics only get.fired in the metaphorical sense, by losing their jobs. but the.structure of the situation is the same: the heresy.outweighs everything else. you could have spent the last ten years.saving children's lives, but if you express certain opinions, you're.automatically fired.it's much the same as if you committed a crime. no matter how.virtuously you've lived, if you commit a crime, you must still.suffer the penalty of the law. having lived a previously blameless.life might mitigate the punishment, but it doesn't affect whether.you're guilty or not.a heresy is an opinion whose expression is treated like a crime —.one that makes some people feel not merely that you're mistaken,.but that you should be punished. indeed, their desire to see you.punished is often stronger than it would be if you'd committed an.actual crime. there are many on the far left who believe.strongly in the reintegration of felons (as i do myself), and yet.seem to feel that anyone guilty of certain heresies should never.work again.there are always some heresies — some opinions you'd be punished.for expressing. but there are a lot more now than there were a few.decades ago, and even those who are happy about this would have to.agree that it's so.why? why has this antiquated-sounding religious concept come back.in a secular form? and why now?you need two ingredients for a wave of intolerance: intolerant.people, and an ideology to guide them. the intolerant people are.always there. they exist in every sufficiently large society. that's.why waves of intolerance can arise so suddenly; all they need is.something to set them off.i've already written an essay.describing the aggressively.conventional-minded. the short version is that people can be.classified in two dimensions according to (1) how independent- or.conventional-minded they are, and (2) how aggressive they are about.it. the aggressively conventional-minded are the enforcers of.orthodoxy.normally they're only locally visible. they're the grumpy, censorious.people in a group — the ones who are always first to complain when.something violates the current rules of propriety. but occasionally,.like a vector field whose elements become aligned, a large number.of aggressively conventional-minded people unite behind some ideology.all at once. then they become much more of a problem, because a mob.dynamic takes over, where the enthusiasm of each participant is.increased by the enthusiasm of the others.the most notorious 20th century case may have been the cultural.revolution. though initiated by mao to undermine his rivals, the.cultural revolution was otherwise mostly a grass-roots phenomenon..mao said in essence: there are heretics among us. seek them out and.punish them. and that's all the aggressively conventional-minded.ever need to hear. they went at it with the delight of dogs chasing.squirrels.to unite the conventional-minded, an ideology must have many of the.features of a religion. in particular it must have strict and.arbitrary rules that adherents can demonstrate their.purity.by obeying, and its adherents must believe that anyone who obeys these.rules is ipso facto morally superior to anyone who doesn't..[3]in the late 1980s a new ideology of this type appeared in us.universities. it had a very strong component of moral purity, and.the aggressively conventional-minded seized upon it with their usual.eagerness — all the more because the relaxation of social norms.in the preceding decades meant there had been less and less to.forbid. the resulting wave of intolerance has been eerily similar.in form to the cultural revolution, though fortunately much smaller.in magnitude..[4]i've deliberately avoided mentioning any specific heresies here..partly because one of the universal tactics of heretic hunters, now.as in the past, is to accuse those who disapprove of the way in.which they suppress ideas of being heretics themselves. indeed,.this tactic is so consistent that you could use it as a way of.detecting witch hunts in any era.and that's the second reason i've avoided mentioning any specific.heresies. i want this essay to work in the future, not just now..and unfortunately it probably will. the aggressively conventional-minded.will always be among us, looking for things to forbid. all they.need is an ideology to tell them what. and it's unlikely the current.one will be the last.there are aggressively conventional-minded people on both the right.and the left. the reason the current wave of intolerance comes from.the left is simply because the new unifying ideology happened to.come from the left. the next one might come from the right. imagine.what that would be like.fortunately in western countries the suppression of heresies is.nothing like as bad as it used to be. though the window of opinions.you can express publicly has narrowed in the last decade, it's still.much wider than it was a few hundred years ago. the problem is the.derivative. up till about 1985 the window had been growing ever.wider. anyone looking into the future in 1985 would have expected.freedom of expression to continue to increase. instead it has.decreased..[5]the situation is similar to what's happened with infectious diseases.like measles. anyone looking into the future in 2010 would have.expected the number of measles cases in the us to continue to.decrease. instead, thanks to anti-vaxxers, it has increased. the.absolute number is still not that high. the problem is the derivative..[6]in both cases it's hard to know how much to worry. is it really.dangerous to society as a whole if a handful of extremists refuse.to get their kids vaccinated, or shout down speakers at universities?.the point to start worrying is presumably when their efforts start.to spill over into everyone else's lives. and in both cases that.does seem to be happening.so it's probably worth spending some amount of effort on pushing.back to keep open the window of free expression. my hope is that.this essay will help form social antibodies not just against current.efforts to suppress ideas, but against the concept of heresy in.general. that's the real prize. how do you disable the concept of.heresy? since the enlightenment, western societies have discovered.many techniques for doing that, but there are surely more to be.discovered.overall i'm optimistic. though the trend in freedom of expression.has been bad over the last decade, it's been good over the longer.term. and there are signs that the current wave of intolerance is.peaking. independent-minded people i talk to seem more confident.than they did a few years ago. on the other side, even some of the.leaders are starting to wonder if things have.gone too far. and popular culture among the young has already moved on..all we have.to do is keep pushing back, and the wave collapses. and then we'll.be net ahead, because as well as having defeated this wave, we'll.also have developed new tactics for resisting the next one.notes[1].or more accurately, biographies of newton, since westfall wrote.two: a long version called never at rest, and a shorter one called.the life of isaac newton. both are great. the short version moves.faster, but the long one is full of interesting and often very funny.details. this passage is the same in both.[2].another more subtle but equally damning bit of evidence is.that claims of x-ism are never qualified. you never hear anyone say.that a statement is "probably x-ist" or "almost certainly y-ist.".if claims of x-ism were actually claims about truth, you'd expect.to see "probably" in front of "x-ist" as often as you see it in.front of "fallacious."[3].the rules must be strict, but they need not be demanding. so.the most effective type of rules are those about superficial matters,.like doctrinal minutiae, or the precise words adherents must use..such rules can be made extremely complicated, and yet don't repel.potential converts by requiring significant sacrifice.the superficial demands of orthodoxy make it an inexpensive substitute.for virtue. and that in turn is one of the reasons orthodoxy is so.attractive to bad people. you could be a horrible person, and yet.as long as you're orthodox, you're better than everyone who isn't.[4].arguably there were two. the first had died down somewhat by.2000, but was followed by a second in the 2010s, probably caused.by social media.[5].fortunately most of those trying to suppress ideas today still.respect enlightenment principles enough to pay lip service to them..they know they're not supposed to ban ideas per se, so they have.to recast the ideas as causing "harm," which sounds like something.that can be banned. the more extreme try to claim speech itself is.violence, or even that silence is. but strange as it may sound,.such gymnastics are a good sign. we'll know we're really in trouble.when they stop bothering to invent pretenses for banning ideas —.when, like the medieval church, they say "damn right we're banning.ideas, and in fact here's a list of them."[6].people only have the luxury of ignoring the medical consensus.about vaccines because vaccines have worked so well. if we didn't.have any vaccines at all, the mortality rate would be so high that.most current anti-vaxxers would be begging for them. and the situation.with freedom of expression is similar. it's only because they live.in a world created by the enlightenment that kids from the suburbs.can play at banning ideas.thanks to marc andreessen, chris best,.trevor blackwell, nicholas.christakis, daniel gackle, jonathan haidt, claire lehmann, jessica.livingston, greg lukianoff, robert morris, and garry tan for reading.drafts of this.<eot><sot>putting ideas into words.february 2022
writing about something, even something you know well, usually shows.you that you didn't know it as well as you thought. putting ideas.into words is a severe test. the first words you choose are usually.wrong; you have to rewrite sentences over and over  to.get them exactly right. and your ideas won't just be imprecise, but.incomplete too. half the ideas that end up in an essay will be ones.you thought of while you were writing it. indeed, that's why i write.them.once you publish something, the convention is that whatever you.wrote was what you thought before you wrote it. these were your.ideas, and now you've expressed them. but you know this isn't true..you know that putting your ideas into words changed them. and not.just the ideas you published. presumably there were others that.turned out to be too broken to fix, and those you discarded instead.it's not just having to commit your ideas to specific words that.makes writing so exacting. the real test is reading what you've.written. you have to pretend to be a neutral reader who knows nothing.of what's in your head, only what you wrote. when he reads what you.wrote, does it seem correct? does it seem complete? if you make an.effort, you can read your writing as if you were a complete stranger,.and when you do the news is usually bad. it takes me many cycles.before i can get an essay past the stranger. but the stranger is.rational, so you always can, if you ask him what he needs. if he's.not satisfied because you failed to mention x or didn't qualify.some sentence sufficiently, then you mention x or add more.qualifications. happy now? it may cost you some nice sentences, but.you have to resign yourself to that. you just have to make them as.good as you can and still satisfy the stranger.this much, i assume, won't be that controversial. i think it will.accord with the experience of anyone who has tried to write about.anything nontrivial. there may exist people whose thoughts are so.perfectly formed that they just flow straight into words. but i've.never known anyone who could do this, and if i met someone who said.they could, it would seem evidence of their limitations rather than.their ability. indeed, this is a trope in movies: the guy who claims.to have a plan for doing some difficult thing, and who when questioned.further, taps his head and says "it's all up here." everyone watching.the movie knows what that means. at best the plan is vague and.incomplete. very likely there's some undiscovered flaw that invalidates.it completely. at best it's a plan for a plan.in precisely defined domains it's possible to form complete ideas.in your head. people can play chess in their heads, for example..and mathematicians can do some amount of math in their heads, though.they don't seem to feel sure of a proof over a certain length till.they write it down. but this only seems possible with ideas you can.express in a formal language.  [1] arguably what such people are.doing is putting ideas into words in their heads. i can to some.extent write essays in my head. i'll sometimes think of a paragraph.while walking or lying in bed that survives nearly unchanged in the.final version. but really i'm writing when i do this. i'm doing the.mental part of writing; my fingers just aren't moving as i do it..[2]you can know a great deal about something without writing about it..can you ever know so much that you wouldn't learn more from trying.to explain what you know? i don't think so. i've written about at.least two subjects i know well — lisp hacking and startups.— and in both cases i learned a lot from writing about them..in both cases there were things i didn't consciously realize till.i had to explain them. and i don't think my experience was anomalous..a great deal of knowledge is unconscious, and experts have if.anything a higher proportion of unconscious knowledge than beginners.i'm not saying that writing is the best way to explore all ideas..if you have ideas about architecture, presumably the best way to.explore them is to build actual buildings. what i'm saying is that.however much you learn from exploring ideas in other ways, you'll.still learn new things from writing about them.putting ideas into words doesn't have to mean writing, of course..you can also do it the old way, by talking. but in my experience,.writing is the stricter test. you have to commit to a single, optimal.sequence of words. less can go unsaid when you don't have tone of.voice to carry meaning. and you can focus in a way that would seem.excessive in conversation. i'll often spend 2 weeks on an essay and.reread drafts 50 times. if you did that in conversation.it would seem evidence of some kind of.mental disorder..if you're lazy,.of course, writing and talking are equally useless. but if you want.to push yourself to get things right, writing is the steeper hill..[3]the reason i've spent so long establishing this rather obvious point.is that it leads to another that many people will find shocking..if writing down your ideas always makes them more precise and more.complete, then no one who hasn't written about a topic has fully.formed ideas about it. and someone who never writes has no fully.formed ideas about anything nontrivial.it feels to them as if they do, especially if they're not in the.habit of critically examining their own thinking. ideas can feel.complete. it's only when you try to put them into words that you.discover they're not. so if you never subject your ideas to that.test, you'll not only never have fully formed ideas, but also never.realize it.putting ideas into words is certainly no guarantee that they'll be.right. far from it. but though it's not a sufficient condition, it.is a necessary one.notes[1] machinery and.circuits are formal languages.[2] i thought of this.sentence as i was walking down the street in palo alto.[3] there are two.senses of talking to someone: a strict sense in which the conversation.is verbal, and a more general sense in which it can take any form,.including writing. in the limit case (e.g. seneca's letters),.conversation in the latter sense becomes essay writing.it can be very useful to talk (in either sense) with other people.as you're writing something. but a verbal conversation will never.be more exacting than when you're talking about something you're.writing. thanks to trevor blackwell, patrick.collison, and robert morris for reading drafts of this.  french translation<eot><sot>is there such a thing as good taste?.november 2021
(this essay is derived from a talk at the cambridge union.)when i was a kid, i'd have said there wasn't. my father told me so..some people like some things, and other people like other things,.and who's to say who's right?it seemed so obvious that there was no such thing as good taste.that it was only through indirect evidence that i realized my father.was wrong. and that's what i'm going to give you here: a proof by.reductio ad absurdum. if we start from the premise that there's no.such thing as good taste, we end up with conclusions that are.obviously false, and therefore the premise must be wrong.we'd better start by saying what good taste is. there's a narrow.sense in which it refers to aesthetic judgements and a broader one.in which it refers to preferences of any kind. the strongest proof.would be to show that taste exists in the narrowest sense, so i'm.going to talk about taste in art. you have better taste than me if.the art you like is better than the art i like.if there's no such thing as good taste, then there's no such thing.as good art. because if there is such a.thing as good art, it's.easy to tell which of two people has better taste. show them a lot.of works by artists they've never seen before and ask them to.choose the best, and whoever chooses the better art has better.taste.so if you want to discard the concept of good taste, you also have.to discard the concept of good art. and that means you have to.discard the possibility of people being good at making it. which.means there's no way for artists to be good at their jobs. and not.just visual artists, but anyone who is in any sense an artist. you.can't have good actors, or novelists, or composers, or dancers.either. you can have popular novelists, but not good ones.we don't realize how far we'd have to go if we discarded the concept.of good taste, because we don't even debate the most obvious cases..but it doesn't just mean we can't say which of two famous painters.is better. it means we can't say that any painter is better than a.randomly chosen eight year old.that was how i realized my father was wrong. i started studying.painting. and it was just like other kinds of work i'd done: you.could do it well, or badly, and if you tried hard, you could get.better at it. and it was obvious that leonardo and bellini were.much better at it than me. that gap between us was not imaginary..they were so good. and if they could be good, then art could be.good, and there was such a thing as good taste after all.now that i've explained how to show there is such a thing as good.taste, i should also explain why people think there isn't. there.are two reasons. one is that there's always so much disagreement.about taste. most people's response to art is a tangle of unexamined.impulses. is the artist famous? is the subject attractive? is this.the sort of art they're supposed to like? is it hanging in a famous.museum, or reproduced in a big, expensive book? in practice most.people's response to art is dominated by such extraneous factors.and the people who do claim to have good taste are so often mistaken..the paintings admired by the so-called experts in one generation.are often so different from those admired a few generations later..it's easy to conclude there's nothing real there at all. it's only.when you isolate this force, for example by trying to paint and.comparing your work to bellini's, that you can see that it does in.fact exist.the other reason people doubt that art can be good is that there.doesn't seem to be any room in the art for this goodness. the.argument goes like this. imagine several people looking at a work.of art and judging how good it is. if being good art really is a.property of objects, it should be in the object somehow. but it.doesn't seem to be; it seems to be something happening in the heads.of each of the observers. and if they disagree, how do you choose.between them?the solution to this puzzle is to realize that the purpose of art.is to work on its human audience, and humans have a lot in common..and to the extent the things an object acts upon respond in the.same way, that's arguably what it means for the object to have the.corresponding property. if everything a particle interacts with.behaves as if the particle had a mass of m, then it has a mass of.m. so the distinction between "objective" and "subjective" is not.binary, but a matter of degree, depending on how much the subjects.have in common. particles interacting with one another are at one.pole, but people interacting with art are not all the way at the.other; their reactions aren't random.because people's responses to art aren't random, art can be designed.to operate on people, and be good or bad depending on how effectively.it does so. much as a vaccine can be. if someone were talking about.the ability of a vaccine to confer immunity, it would seem very.frivolous to object that conferring immunity wasn't really a property.of vaccines, because acquiring immunity is something that happens.in the immune system of each individual person. sure, people's.immune systems vary, and a vaccine that worked on one might not.work on another, but that doesn't make it meaningless to talk about.the effectiveness of a vaccine.the situation with art is messier, of course. you can't measure.effectiveness by simply taking a vote, as you do with vaccines..you have to imagine the responses of subjects with a deep knowledge.of art, and enough clarity of mind to be able to ignore extraneous.influences like the fame of the artist. and even then you'd still.see some disagreement. people do vary, and judging art is hard,.especially recent art. there is definitely not a total order either.of works or of people's ability to judge them. but there is equally.definitely a partial order of both. so while it's not possible to.have perfect taste, it is possible to have good taste..thanks to the cambridge union for inviting me, and to trevor.blackwell, jessica livingston, and robert morris for reading drafts.of this.<eot><sot>beyond smart.october 2021
if you asked people what was special about einstein, most would say.that he was really smart. even the ones who tried to give you a.more sophisticated-sounding answer would probably think this first..till a few years ago i would have given the same answer myself. but.that wasn't what was special about einstein. what was special about.him was that he had important new ideas. being very smart was a.necessary precondition for having those ideas, but the two are not.identical.it may seem a hair-splitting distinction to point out that intelligence.and its consequences are not identical, but it isn't. there's a big.gap between them. anyone who's spent time around universities and.research labs knows how big. there are a lot of genuinely smart.people who don't achieve very much.i grew up thinking that being smart was the thing most to be desired..perhaps you did too. but i bet it's not what you really want. imagine.you had a choice between being really smart but discovering nothing.new, and being less smart but discovering lots of new ideas. surely.you'd take the latter. i would. the choice makes me uncomfortable,.but when you see the two options laid out explicitly like that,.it's obvious which is better.the reason the choice makes me uncomfortable is that being smart.still feels like the thing that matters, even though i know.intellectually that it isn't. i spent so many years thinking it.was. the circumstances of childhood are a perfect storm for fostering.this illusion. intelligence is much easier to measure than the value.of new ideas, and you're constantly being judged by it. whereas.even the kids who will ultimately discover new things aren't usually.discovering them yet. for kids that way inclined, intelligence is.the only game in town.there are more subtle reasons too, which persist long into adulthood..intelligence wins in conversation, and thus becomes the basis of.the dominance hierarchy..[1].plus having new ideas is such a new.thing historically, and even now done by so few people, that society.hasn't yet assimilated the fact that this is the actual destination,.and intelligence merely a means to an end..[2]why do so many smart people fail to discover anything new? viewed.from that direction, the question seems a rather depressing one..but there's another way to look at it that's not just more optimistic,.but more interesting as well. clearly intelligence is not the only.ingredient in having new ideas. what are the other ingredients?.are they things we could cultivate?because the trouble with intelligence, they say, is that it's mostly.inborn. the evidence for this seems fairly convincing, especially.considering that most of us don't want it to be true, and the.evidence thus has to face a stiff headwind. but i'm not going.to get into that question here, because it's the other ingredients.in new ideas that i care about, and it's clear that many of them.can be cultivated.that means the truth is excitingly different from the story i got.as a kid. if intelligence is what matters, and also mostly inborn,.the natural consequence is a sort of brave new world fatalism. the.best you can do is figure out what sort of work you have an "aptitude".for, so that whatever intelligence you were born with will at least.be put to the best use, and then work as hard as you can at it..whereas if intelligence isn't what matters, but only one of several.ingredients in what does, and many of those aren't inborn, things.get more interesting. you have a lot more control, but the problem.of how to arrange your life becomes that much more complicated.so what are the other ingredients in having new ideas? the fact.that i can even ask this question proves the point i raised earlier.— that society hasn't assimilated the fact that it's this and not.intelligence that matters. otherwise we'd all know the answers.to such a fundamental question..[3]i'm not going to try to provide a complete catalogue of the other.ingredients here. this is the first time i've posed.the question to myself this way, and i think it may take a while.to answer. but i wrote recently about one of the most important:.an obsessive interest in a particular topic..and this can definitely be cultivated.another quality you need in order to discover new ideas is.independent-mindedness. i wouldn't want to.claim that this is.distinct from intelligence — i'd be reluctant to call someone smart.who wasn't independent-minded — but though largely inborn, this.quality seems to be something that can be cultivated to some extent.there are general techniques for having new ideas — for example,.for working on your own projects.and.for overcoming the obstacles you face with early work.— and these.can all be learned. some of them can be learned by societies. and.there are also collections of techniques for generating specific types.of new ideas, like startup ideas and.essay topics.and of course there are a lot of fairly mundane ingredients in.discovering new ideas, like working hard,.getting enough sleep, avoiding certain.kinds of stress, having the right colleagues, and finding tricks.for working on what you want even when it's not what you're supposed.to be working on. anything that prevents people from doing great.work has an inverse that helps them to. and this class of ingredients.is not as boring as it might seem at first. for example, having new.ideas is generally associated with youth. but perhaps it's not youth.per se that yields new ideas, but specific things that come with.youth, like good health and lack of responsibilities. investigating.this might lead to strategies that will help people of any age to.have better ideas.one of the most surprising ingredients in having new ideas is writing.ability. there's a class of new ideas that are best discovered by.writing essays and books. and that "by" is deliberate: you don't.think of the ideas first, and then merely write them down. there.is a kind of thinking that one does by writing, and if you're clumsy.at writing, or don't enjoy doing it, that will get in your way if.you try to do this kind of thinking..[4]i predict the gap between intelligence and new ideas will turn out.to be an interesting place. if we think of this gap merely as a measure.of unrealized potential, it becomes a sort of wasteland that we try to.hurry through with our eyes averted. but if we flip the question,.and start inquiring into the other ingredients in new ideas that.it implies must exist, we can mine this gap for discoveries about.discovery..notes[1].what wins in conversation depends on who with. it ranges from.mere aggressiveness at the bottom, through quick-wittedness in the.middle, to something closer to actual intelligence at the top,.though probably always with some component of quick-wittedness.[2].just as intelligence isn't the only ingredient in having new.ideas, having new ideas isn't the only thing intelligence is useful.for. it's also useful, for example, in diagnosing problems and figuring.out how to fix them. both overlap with having new ideas, but both.have an end that doesn't.those ways of using intelligence are much more common than having.new ideas. and in such cases intelligence is even harder to distinguish.from its consequences.[3].some would attribute the difference between intelligence and.having new ideas to "creativity," but this doesn't seem a very.useful term. as well as being pretty vague, it's shifted half a frame.sideways from what we care about: it's neither separable from.intelligence, nor responsible for all the difference between.intelligence and having new ideas.[4].curiously enough, this essay is an example. it started out.as an essay about writing ability. but when i came to the distinction.between intelligence and having new ideas, that seemed so much more.important that i turned the original essay inside out, making that.the topic and my original topic one of the points in it. as in many.other fields, that level of reworking is easier to contemplate once.you've had a lot of practice..thanks to trevor blackwell, patrick collison, jessica livingston,.robert morris, michael nielsen, and lisa randall for reading drafts.of this.<eot><sot>weird languages.august 2021
when people say that in their experience all programming languages.are basically equivalent, they're making a statement not about.languages but about the kind of programming they've done.99.5% of programming consists of gluing together calls to library.functions. all popular languages are equally good at this. so one.can easily spend one's whole career operating in the intersection.of popular programming languages.but the other .5% of programming is disproportionately interesting..if you want to learn what it consists of, the weirdness of weird.languages is a good clue to follow.weird languages aren't weird by accident. not the good ones, at.least. the weirdness of the good ones usually implies the existence.of some form of programming that's not just the usual gluing together.of library calls.a concrete example: lisp macros. lisp macros seem weird even to.many lisp programmers. they're not only not in the intersection of.popular languages, but by their nature would be hard to implement.properly in a language without turning it into a dialect of.lisp. and macros are definitely evidence of techniques that go.beyond glue programming. for example, solving problems by first.writing a language for problems of that type, and then writing.your specific application in it. nor is this all you can do with.macros; it's just one region in a space of program-manipulating.techniques that even now is far from fully explored.so if you want to expand your concept of what programming can be,.one way to do it is by learning weird languages. pick a language.that most programmers consider weird but whose median user is smart,.and then focus on the differences between this language and the.intersection of popular languages. what can you say in this language.that would be impossibly inconvenient to say in others? in the.process of learning how to say things you couldn't previously say,.you'll probably be learning how to think things you couldn't.previously think..thanks to trevor blackwell, patrick collison, daniel gackle, amjad.masad, and robert morris for reading drafts of this..japanese translation<eot><sot>how to work hard.june 2021
it might not seem there's much to learn about how to work hard..anyone who's been to school knows what it entails, even if they.chose not to do it. there are 12 year olds who work amazingly hard. and.yet when i ask if i know more about working hard now than when i.was in school, the answer is definitely yes.one thing i know is that if you want to do great things, you'll.have to work very hard. i wasn't sure of that as a kid. schoolwork.varied in difficulty; one didn't always have to work super hard to.do well. and some of the things famous adults did, they seemed to.do almost effortlessly. was there, perhaps, some way to evade hard.work through sheer brilliance? now i know the answer to that question..there isn't.the reason some subjects seemed easy was that my school had low.standards. and the reason famous adults seemed to do things.effortlessly was years of practice; they made it look easy.of course, those famous adults usually had a lot of natural ability.too. there are three ingredients in great work: natural ability,.practice, and effort. you can do pretty well with just two, but to.do the best work you need all three: you need great natural ability.and to have practiced a lot and to be trying very hard..[1]bill gates, for example, was among the smartest people in business.in his era, but he was also among the hardest working. "i never.took a day off in my twenties," he said. "not one." it was similar.with lionel messi. he had great natural ability, but when his youth.coaches talk about him, what they remember is not his talent but.his dedication and his desire to win. p. g. wodehouse would probably.get my vote for best english writer of the 20th century, if i had.to choose. certainly no one ever made it look easier. but no one.ever worked harder. at 74, he wrote.with each new book of mine i have, as i say, the feeling that.this time i have picked a lemon in the garden of literature. a.good thing, really, i suppose. keeps one up on one's toes and.makes one rewrite every sentence ten times. or in many cases.twenty times..sounds a bit extreme, you think. and yet bill gates sounds even.more extreme. not one day off in ten years?  these two had about.as much natural ability as anyone could have, and yet they also.worked about as hard as anyone could work. you need both.that seems so obvious, and yet in practice we find it slightly hard.to grasp. there's a faint xor between talent and hard work. it comes.partly from popular culture, where it seems to run very deep, and.partly from the fact that the outliers are so rare. if great talent.and great drive are both rare, then people with both are rare.squared. most people you meet who have a lot of one will have less.of the other. but you'll need both if you want to be an outlier.yourself. and since you can't really change how much natural talent.you have, in practice doing great work, insofar as you can, reduces.to working very hard.it's straightforward to work hard if you have clearly defined,.externally imposed goals, as you do in school. there is some technique.to it: you have to learn not to lie to yourself, not to procrastinate.(which is a form of lying to yourself), not to get distracted, and.not to give up when things go wrong. but this level of discipline.seems to be within the reach of quite young children, if they want.it.what i've learned since i was a kid is how to work toward goals.that are neither clearly defined nor externally imposed. you'll.probably have to learn both if you want to do really great things.the most basic level of which is simply to feel you should be working.without anyone telling you to. now, when i'm not working hard, alarm.bells go off. i can't be sure i'm getting anywhere when i'm working.hard, but i can be sure i'm getting nowhere when i'm not, and it.feels awful..[2]there wasn't a single point when i learned this. like most little.kids, i enjoyed the feeling of achievement when i learned or did.something new. as i grew older, this morphed into a feeling of.disgust when i wasn't achieving anything. the one precisely dateable.landmark i have is when i stopped watching tv, at age 13.several people i've talked to remember getting serious about work.around this age. when i asked patrick collison when he started to.find idleness distasteful, he said.i think around age 13 or 14. i have a clear memory from around.then of sitting in the sitting room, staring outside, and wondering.why i was wasting my summer holiday..perhaps something changes at adolescence. that would make sense.strangely enough, the biggest obstacle to getting serious about.work was probably school, which made work (what they called work).seem boring and pointless. i had to learn what real work was before.i could wholeheartedly desire to do it. that took a while, because.even in college a lot of the work is pointless; there are entire.departments that are pointless. but as i learned the shape of real.work, i found that my desire to do it slotted into it as if they'd.been made for each other.i suspect most people have to learn what work is before they can.love it. hardy wrote eloquently about this in a mathematician's.apology:.i do not remember having felt, as a boy, any passion for.mathematics, and such notions as i may have had of the career of.a mathematician were far from noble. i thought of mathematics in.terms of examinations and scholarships: i wanted to beat other.boys, and this seemed to be the way in which i could do so most.decisively..he didn't learn what math was really about till part way through.college, when he read jordan's cours d'analyse..i shall never forget the astonishment with which i read that.remarkable work, the first inspiration for so many mathematicians.of my generation, and learnt for the first time as i read it what.mathematics really meant..there are two separate kinds of fakeness you need to learn to.discount in order to understand what real work is. one is the kind.hardy encountered in school. subjects get distorted when they're.adapted to be taught to kids — often so distorted that they're.nothing like the work done by actual practitioners..[3].the other.kind of fakeness is intrinsic to certain types of work. some types.of work are inherently bogus, or at best mere busywork.there's a kind of solidity to real work. it's not all writing the.principia, but it all feels necessary. that's a vague criterion,.but it's deliberately vague, because it has to cover a lot of.different types..[4]once you know the shape of real work, you have to learn how many.hours a day to spend on it. you can't solve this problem by simply.working every waking hour, because in many kinds of work there's a.point beyond which the quality of the result will start to decline.that limit varies depending on the type of work and the person..i've done several different kinds of work, and the limits were.different for each. my limit for the harder types of writing or.programming is about five hours a day. whereas when i was running.a startup, i could.work all the time. at least for the three years i did it; if i'd.kept going much longer, i'd probably have needed to take occasional.vacations..[5]the only way to find the limit is by crossing it. cultivate a.sensitivity to the quality of the work you're doing, and then you'll.notice if it decreases because you're working too hard. honesty is.critical here, in both directions: you have to notice when you're.being lazy, but also when you're working too hard. and if you think.there's something admirable about working too hard, get that idea.out of your head. you're not merely getting worse results, but.getting them because you're showing off — if not to other people,.then to yourself..[6]finding the limit of working hard is a constant, ongoing process,.not something you do just once. both the difficulty of the work and.your ability to do it can vary hour to hour, so you need to be.constantly judging both how hard you're trying and how well you're.doing.trying hard doesn't mean constantly pushing yourself to work, though..there may be some people who do, but i think my experience is fairly.typical, and i only have to push myself occasionally when i'm.starting a project or when i encounter some sort of check. that's.when i'm in danger of procrastinating. but once i get rolling, i.tend to keep going.what keeps me going depends on the type of work. when i was working.on viaweb, i was driven by fear of failure. i barely procrastinated.at all then, because there was always something that needed doing,.and if i could put more distance between me and the pursuing beast.by doing it, why wait? [7].whereas what drives me now, writing.essays, is the flaws in them. between essays i fuss for a few days,.like a dog circling while it decides exactly where to lie down. but.once i get started on one, i don't have to push myself to work,.because there's always some error or omission already pushing me.i do make some amount of effort to focus on important topics. many.problems have a hard core at the center, surrounded by easier stuff.at the edges. working hard means aiming toward the center to the.extent you can. some days you may not be able to; some days you'll.only be able to work on the easier, peripheral stuff. but you should.always be aiming as close to the center as you can without stalling.the bigger question of what to do with your life is one of these.problems with a hard core. there are important problems at the.center, which tend to be hard, and less important, easier ones at.the edges. so as well as the small, daily adjustments involved in.working on a specific problem, you'll occasionally have to make.big, lifetime-scale adjustments about which type of work to do..and the rule is the same: working hard means aiming toward the.center — toward the most ambitious problems.by center, though, i mean the actual center, not merely the current.consensus about the center. the consensus about which problems are.most important is often mistaken, both in general and within specific.fields. if you disagree with it, and you're right, that could.represent a valuable opportunity to do something new.the more ambitious types of work will usually be harder, but although.you should not be in denial about this, neither should you treat.difficulty as an infallible guide in deciding what to do. if you.discover some ambitious type of work that's a bargain in the sense.of being easier for you than other people, either because of the.abilities you happen to have, or because of some new way you've.found to approach it, or simply because you're more excited about.it, by all means work on that. some of the best work is done by.people who find an easy way to do something hard.as well as learning the shape of real work, you need to figure out.which kind you're suited for. and that doesn't just mean figuring.out which kind your natural abilities match the best; it doesn't.mean that if you're 7 feet tall, you have to play basketball. what.you're suited for depends not just on your talents but perhaps even.more on your interests. a deep interest.in a topic makes people.work harder than any amount of discipline can.it can be harder to discover your interests than your talents..there are fewer types of talent than interest, and they start to.be judged early in childhood, whereas interest in a topic is a.subtle thing that may not mature till your twenties, or even later..the topic may not even exist earlier. plus there are some powerful.sources of error you need to learn to discount. are you really.interested in x, or do you want to work on it because you'll make.a lot of money, or because other people will be impressed with you,.or because your parents want you to?.[8]the difficulty of figuring out what to work on varies enormously.from one person to another. that's one of the most important things.i've learned about work since i was a kid. as a kid, you get the.impression that everyone has a calling, and all they have to do is.figure out what it is. that's how it works in movies, and in the.streamlined biographies fed to kids. sometimes it works that way.in real life. some people figure out what to do as children and.just do it, like mozart. but others, like newton, turn restlessly.from one kind of work to another. maybe in retrospect we can identify.one as their calling — we can wish newton spent more time on math.and physics and less on alchemy and theology — but this is an.illusion induced by hindsight bias..there was no voice calling to him that he could have heard.so while some people's lives converge fast, there will be others.whose lives never converge. and for these people, figuring out what.to work on is not so much a prelude to working hard as an ongoing.part of it, like one of a set of simultaneous equations. for these.people, the process i described earlier has a third component: along.with measuring both how hard you're working and how well you're.doing, you have to think about whether you should keep working in.this field or switch to another. if you're working hard but not.getting good enough results, you should switch. it sounds simple.expressed that way, but in practice it's very difficult. you shouldn't.give up on the first day just because you work hard and don't get.anywhere. you need to give yourself time to get going. but how much.time? and what should you do if work that was going well stops going.well? how much time do you give yourself then?.[9]what even counts as good results? that can be really hard to decide..if you're exploring an area few others have worked in, you may not.even know what good results look like. history is full of examples.of people who misjudged the importance of what they were working.on.the best test of whether it's worthwhile to work on something is.whether you find it interesting. that may sound like a dangerously.subjective measure, but it's probably the most accurate one you're.going to get. you're the one working on the stuff. who's in a better.position than you to judge whether it's important, and what's a.better predictor of its importance than whether it's interesting?for this test to work, though, you have to be honest with yourself..indeed, that's the most striking thing about the whole question of.working hard: how at each point it depends on being honest with.yourself.working hard is not just a dial you turn up to 11. it's a complicated,.dynamic system that has to be tuned just right at each point. you.have to understand the shape of real work, see clearly what kind.you're best suited for, aim as close to the true core of it as you.can, accurately judge at each moment both what you're capable of.and how you're doing, and put in as many hours each day as you can.without harming the quality of the result. this network is too.complicated to trick. but if you're consistently honest and.clear-sighted, it will automatically assume an optimal shape, and.you'll be productive in a way few people are.notes[1].in "the bus ticket theory of genius" i said the three ingredients.in great work were natural ability, determination, and interest..that's the formula in the preceding stage; determination and interest.yield practice and effort.[2].i mean this at a resolution of days, not hours. you'll often.get somewhere while not working in the sense that the solution to.a problem comes to you while taking a.shower, or even in your sleep,.but only because you were working hard on it the day before.it's good to go on vacation occasionally, but when i go on vacation,.i like to learn new things. i wouldn't like just sitting on a beach.[3].the thing kids do in school that's most like the real version.is sports. admittedly because many sports originated as games played.in schools. but in this one area, at least, kids are doing exactly.what adults do.in the average american high school, you have a choice of pretending.to do something serious, or seriously doing something pretend..arguably the latter is no worse.[4].knowing what you want to work on doesn't mean you'll be able.to. most people have to spend a lot of their time working on things.they don't want to, especially early on. but if you know what you.want to do, you at least know what direction to nudge your life in.[5].the lower time limits for intense work suggest a solution to.the problem of having less time to work after you have kids: switch.to harder problems. in effect i did that, though not deliberately.[6].some cultures have a tradition of performative hard work. i.don't love this idea, because (a) it makes a parody of something.important and (b) it causes people to wear themselves out doing.things that don't matter. i don't know enough to say for sure whether.it's net good or bad, but my guess is bad.[7].one of the reasons people work so hard on startups is that.startups can fail, and when they do, that failure tends to be both.decisive and conspicuous.[8].it's ok to work on something to make a lot of money. you need.to solve the money problem somehow, and there's nothing wrong with.doing that efficiently by trying to make a lot at once. i suppose.it would even be ok to be interested in money for its own sake;.whatever floats your boat. just so long as you're conscious of your.motivations. the thing to avoid is unconsciously letting the need.for money warp your ideas about what kind of work you find most.interesting.[9].many people face this question on a smaller scale with.individual projects. but it's easier both to recognize and to accept.a dead end in a single project than to abandon some type of work.entirely. the more determined you are, the harder it gets. like a.spanish flu victim, you're fighting your own immune system: instead.of giving up, you tell yourself, i should just try harder. and who.can say you're not right?.thanks to trevor blackwell, john carmack, john collison, patrick collison,.robert morris, geoff ralston, and harj taggar for reading drafts of this.arabic translation<eot><sot>a project of one's own.june 2021
a few days ago, on the way home from school, my nine year old son.told me he couldn't wait to get home to write more of the story he.was working on. this made me as happy as anything i've heard him.say — not just because he was excited about his story, but because.he'd discovered this way of working. working on a project of your.own is as different from ordinary work as skating is from walking..it's more fun, but also much more productive.what proportion of great work has been done by people who were.skating in this sense? if not all of it, certainly a lot.there is something special about working on a project of your own..i wouldn't say exactly that you're happier. a better word would be.excited, or engaged. you're happy when things are going well, but.often they aren't. when i'm writing an essay, most of the time i'm.worried and puzzled: worried that the essay will turn out badly,.and puzzled because i'm groping for some idea that i can't see.clearly enough. will i be able to pin it down with words? in the.end i usually can, if i take long enough, but i'm never sure; the.first few attempts often fail.you have moments of happiness when things work out, but they don't.last long, because then you're on to the next problem. so why do.it at all? because to the kind of people who like working this way,.nothing else feels as right. you feel as if you're an animal in its.natural habitat, doing what you were meant to do — not always.happy, maybe, but awake and alive.many kids experience the excitement of working on projects of their.own. the hard part is making this converge with the work you do as.an adult. and our customs make it harder. we treat "playing" and."hobbies" as qualitatively different from "work". it's not clear.to a kid building a treehouse that there's a direct (though long).route from that to architecture or engineering. and instead of.pointing out the route, we conceal it, by implicitly treating the.stuff kids do as different from real work..[1]instead of telling kids that their treehouses could be on the path.to the work they do as adults, we tell them the path goes through.school. and unfortunately schoolwork tends to be very different from.working on projects of one's own. it's usually neither a project,.nor one's own. so as school gets more serious, working on projects.of one's own is something that survives, if at all, as a thin thread.off to the side.it's a bit sad to think of all the high school kids turning their.backs on building treehouses and sitting in class dutifully learning.about darwin or newton to pass some exam, when the work that made.darwin and newton famous was actually closer in spirit to building.treehouses than studying for exams.if i had to choose between my kids getting good grades and.working on ambitious projects of their own, i'd pick.the projects. and not because i'm an indulgent parent, but because.i've been on the other end and i know which has more predictive.value. when i was picking startups for y combinator, i didn't care.about applicants' grades. but if they'd worked on projects of their.own, i wanted to hear all about those..[2]it may be inevitable that school is the way it is. i'm not saying.we have to redesign it (though i'm not saying we don't), just that.we should understand what it does to our attitudes to work — that.it steers us toward the dutiful plodding kind of work, often using.competition as bait, and away from skating.there are occasionally times when schoolwork becomes a project of.one's own. whenever i had to write a paper, that would become a.project of my own — except in english classes, ironically, because.the things one has to write in english classes are so.bogus. and.when i got to college and started taking cs classes, the programs.i had to write became projects of my own. whenever i was writing.or programming, i was usually skating, and that has been true ever.since.so where exactly is the edge of projects of one's own? that's an.interesting question, partly because the answer is so complicated,.and partly because there's so much at stake. there turn out to be.two senses in which work can be one's own: 1) that you're doing it.voluntarily, rather than merely because someone told you to, and.2) that you're doing it by yourself.the edge of the former is quite sharp. people who care a lot about.their work are usually very sensitive to the difference between.pulling, and being pushed, and work tends to fall into one category.or the other. but the test isn't simply whether you're told to do.something. you can choose to do something you're told to do. indeed,.you can own it far more thoroughly than the person who told you to.do it.for example, math homework is for most people something they're.told to do. but for my father, who was a mathematician, it wasn't..most of us think of the problems in a math book as a way to test.or develop our knowledge of the material explained in each section..but to my father the problems were the part that mattered, and the.text was merely a sort of annotation. whenever he got a new math.book it was to him like being given a puzzle: here was a new set.of problems to solve, and he'd immediately set about solving all.of them.the other sense of a project being one's own — working on it by.oneself — has a much softer edge. it shades gradually into.collaboration. and interestingly, it shades into collaboration in.two different ways. one way to collaborate is to share a single.project. for example, when two mathematicians collaborate on a proof.that takes shape in the course of a conversation between them. the.other way is when multiple people work on separate projects of their.own that fit together like a jigsaw puzzle. for example, when one.person writes the text of a book and another does the graphic design..[3]these two paths into collaboration can of course be combined. but.under the right conditions, the excitement of working on a project.of one's own can be preserved for quite a while before disintegrating.into the turbulent flow of work in a large organization. indeed,.the history of successful organizations is partly the history of.techniques for preserving that excitement..[4]the team that made the original macintosh were a great example of.this phenomenon. people like burrell smith and andy hertzfeld and.bill atkinson and susan kare were not just following orders. they.were not tennis balls hit by steve jobs, but rockets let loose by.steve jobs. there was a lot of collaboration between them, but.they all seem to have individually felt the excitement of.working on a project of one's own.in andy hertzfeld's book on the macintosh, he describes how they'd.come back into the office after dinner and work late into the night..people who've never experienced the thrill of working on a project.they're excited about can't distinguish this kind of working long.hours from the kind that happens in sweatshops and boiler rooms,.but they're at opposite ends of the spectrum. that's why it's a.mistake to insist dogmatically on "work/life balance." indeed, the.mere expression "work/life" embodies a mistake: it assumes work and.life are distinct. for those to whom the word "work" automatically.implies the dutiful plodding kind, they are. but for the skaters,.the relationship between work and life would be better represented.by a dash than a slash. i wouldn't want to work on anything that i didn't.want to take over my life.of course, it's easier to achieve this level of motivation when.you're making something like the macintosh. it's easy for something.new to feel like a project of your own. that's one of the reasons.for the tendency programmers have to rewrite things that don't need.rewriting, and to write their own versions of things that already.exist. this sometimes alarms managers, and measured by total number.of characters typed, it's rarely the optimal solution. but it's not.always driven simply by arrogance or cluelessness..writing code from scratch is also much more rewarding — so much.more rewarding that a good programmer can end up net ahead, despite.the shocking waste of characters. indeed, it may be one of the.advantages of capitalism that it encourages such rewriting. a company.that needs software to do something can't use the software already.written to do it at another company, and thus has to write their.own, which often turns out better..[5]the natural alignment between skating and solving new problems is.one of the reasons the payoffs from startups are so high. not only.is the market price of unsolved problems higher, you also get a.discount on productivity when you work on them. in fact, you get a.double increase in productivity: when you're doing a clean-sheet.design, it's easier to recruit skaters, and they get to spend all.their time skating.steve jobs knew a thing or two about skaters from having watched.steve wozniak. if you can find the right people, you only have to.tell them what to do at the highest level. they'll handle the.details. indeed, they insist on it. for a project to feel like your.own, you must have sufficient autonomy. you can't be working to.order, or slowed down.by bureaucracy.one way to ensure autonomy is not to have a boss at all. there are.two ways to do that: to be the boss yourself, and to work on projects.outside of work. though they're at opposite ends of the scale.financially, startups and open source projects have a lot in common,.including the fact that they're often run by skaters. and indeed,.there's a wormhole from one end of the scale to the other: one of.the best ways to discover.startup ideas is to work on a project.just for fun.if your projects are the kind that make money, it's easy to work.on them. it's harder when they're not. and the hardest part, usually,.is morale. that's where adults have it harder than kids. kids just.plunge in and build their treehouse without worrying about whether.they're wasting their time, or how it compares to other treehouses..and frankly we could learn a lot from kids here. the high standards.most grownups have for "real" work do not always serve us well.the most important phase in a project of one's own is at the.beginning: when you go from thinking it might be cool to do x to.actually doing x. and at that point high standards are not merely.useless but positively harmful. there are a few people who start.too many new projects, but far more, i suspect, who are deterred.by fear of failure from starting projects that would have succeeded.if they had.but if we couldn't benefit as kids from the knowledge that our.treehouses were on the path to grownup projects, we can at least.benefit as grownups from knowing that our projects are on a path.that stretches back to treehouses. remember that careless confidence.you had as a kid when starting something new? that would be a.powerful thing to recapture.if it's harder as adults to retain that kind of confidence, we at.least tend to be more aware of what we're doing. kids bounce, or.are herded, from one kind of work to the next, barely realizing.what's happening to them. whereas we know more about different types.of work and have more control over which we do. ideally we can have.the best of both worlds: to be deliberate in choosing to work on.projects of our own, and carelessly confident in starting new ones..notes[1]."hobby" is a curious word. now it means work that isn't real.work — work that one is not to be judged by — but originally it just.meant an obsession in a fairly general sense (even a political.opinion, for example) that one metaphorically rode as a child rides.a hobby-horse. it's hard to say if its recent, narrower meaning is.a change for the better or the worse. for sure there are lots of.false positives — lots of projects that end up being important but.are dismissed initially as mere hobbies. but on the other hand, the.concept provides valuable cover for projects in the early, ugly.duckling phase.[2].tiger parents, as parents so often do, are fighting the last.war. grades mattered more in the old days when the route to success.was to acquire.credentials.while ascending some predefined ladder..but it's just as well that their tactics are focused on grades. how.awful it would be if they invaded the territory of projects, and.thereby gave their kids a distaste for this kind of work by forcing.them to do it. grades are already a grim, fake world, and aren't.harmed much by parental interference, but working on one's own.projects is a more delicate, private thing that could be damaged.very easily.[3].the complicated, gradual edge between working on one's own.projects and collaborating with others is one reason there is so.much disagreement about the idea of the "lone genius." in practice.people collaborate (or not) in all kinds of different ways, but the.idea of the lone genius is definitely not a myth. there's a core.of truth to it that goes with a certain way of working.[4].collaboration is powerful too. the optimal organization would.combine collaboration and ownership in such a way as to do the least.damage to each. interestingly, companies and university departments.approach this ideal from opposite directions: companies insist on.collaboration, and occasionally also manage both to recruit skaters.and allow them to skate, and university departments insist on the.ability to do independent research (which is by custom treated as.skating, whether it is or not), and the people they hire collaborate.as much as they choose.[5].if a company could design its software in such a way that the.best newly arrived programmers always got a clean sheet, it could.have a kind of eternal youth. that might not be impossible. if you.had a software backbone defining a game with sufficiently clear.rules, individual programmers could write their own players..thanks to trevor blackwell, paul buchheit, andy hertzfeld, jessica.livingston, and peter norvig for reading drafts of this.<eot><sot>fierce nerds.may 2021
most people think of nerds as quiet, diffident people. in ordinary.social situations they are — as quiet and diffident as the star.quarterback would be if he found himself in the middle of a physics.symposium. and for the same reason: they are fish out of water..but the apparent diffidence of nerds is an illusion due to the fact.that when non-nerds observe them, it's usually in ordinary social.situations. in fact some nerds are quite fierce.the fierce nerds are a small but interesting group. they are as a.rule extremely competitive — more competitive, i'd say, than highly.competitive non-nerds. competition is more personal for them. partly.perhaps because they're not emotionally mature enough to distance.themselves from it, but also because there's less randomness in the.kinds of competition they engage in, and they are thus more justified.in taking the results personally.fierce nerds also tend to be somewhat overconfident, especially.when young. it might seem like it would be a disadvantage to be.mistaken about one's abilities, but empirically it isn't. up to a.point, confidence is a self-fullfilling prophecy.another quality you find in most fierce nerds is intelligence. not.all nerds are smart, but the fierce ones are always at least.moderately so. if they weren't, they wouldn't have the confidence.to be fierce..[1]there's also a natural connection between nerdiness and.independent-mindedness. it's hard to be.independent-minded without.being somewhat socially awkward, because conventional beliefs are.so often mistaken, or at least arbitrary. no one who was both.independent-minded and ambitious would want to waste the effort it.takes to fit in. and the independent-mindedness of the fierce nerds.will obviously be of the aggressive.rather than the passive type:.they'll be annoyed by rules, rather than dreamily unaware of them.i'm less sure why fierce nerds are impatient, but most seem to be..you notice it first in conversation, where they tend to interrupt.you. this is merely annoying, but in the more promising fierce nerds.it's connected to a deeper impatience about solving problems. perhaps.the competitiveness and impatience of fierce nerds are not separate.qualities, but two manifestations of a single underlying drivenness.when you combine all these qualities in sufficient quantities, the.result is quite formidable. the most vivid example of fierce nerds.in action may be james watson's the double helix. the first sentence.of the book is "i have never seen francis crick in a modest mood,".and the portrait he goes on to paint of crick is the quintessential.fierce nerd: brilliant, socially awkward, competitive, independent-minded,.overconfident. but so is the implicit portrait he paints of himself..indeed, his lack of social awareness makes both portraits that much.more realistic, because he baldly states all sorts of opinions and.motivations that a smoother person would conceal. and moreover it's.clear from the story that crick and watson's fierce nerdiness was.integral to their success. their independent-mindedness caused them.to consider approaches that most others ignored, their overconfidence.allowed them to work on problems they only half understood (they.were literally described as "clowns" by one eminent insider), and.their impatience and competitiveness got them to the answer ahead.of two other groups that would otherwise have found it within the.next year, if not the next several months..[2]the idea that there could be fierce nerds is an unfamiliar one not.just to many normal people but even to some young nerds. especially.early on, nerds spend so much of their time in ordinary social.situations and so little doing real work that they get a lot more.evidence of their awkwardness than their power. so there will be.some who read this description of the fierce nerd and realize "hmm,.that's me." and it is to you, young fierce nerd, that i now turn.i have some good news, and some bad news. the good news is that.your fierceness will be a great help in solving difficult problems..and not just the kind of scientific and technical problems that.nerds have traditionally solved. as the world progresses, the number.of things you can win at by getting the right answer increases..recently getting rich became.one of them: 7 of the 8 richest people.in america are now fierce nerds.indeed, being a fierce nerd is probably even more helpful in business.than in nerds' original territory of scholarship. fierceness seems.optional there. darwin for example doesn't seem to have been.especially fierce. whereas it's impossible to be the ceo of a company.over a certain size without being fierce, so now that nerds can win.at business, fierce nerds will increasingly monopolize the really.big successes.the bad news is that if it's not exercised, your fierceness will.turn to bitterness, and you will become an intellectual playground.bully: the grumpy sysadmin, the forum troll, the.hater, the shooter.down of new ideas.how do you avoid this fate? work on ambitious projects. if you.succeed, it will bring you a kind of satisfaction that neutralizes.bitterness. but you don't need to have succeeded to feel this;.merely working on hard projects gives most fierce nerds some.feeling of satisfaction. and those it doesn't, it at least keeps.busy..[3]another solution may be to somehow turn off your fierceness, by.devoting yourself to meditation or psychotherapy or something like.that. maybe that's the right answer for some people. i have no idea..but it doesn't seem the optimal solution to me. if you're given a.sharp knife, it seems to me better to use it than to blunt its edge.to avoid cutting yourself.if you do choose the ambitious route, you'll have a tailwind behind.you. there has never been a better time to be a nerd. in the past.century we've seen a continuous transfer of power from dealmakers.to technicians — from the charismatic to the competent — and i.don't see anything on the horizon that will end it. at least not.till the nerds end it themselves by bringing about the singularity.notes[1].to be a nerd is to be socially awkward, and there are two.distinct ways to do that: to be playing the same game as everyone.else, but badly, and to be playing a different game. the smart nerds.are the latter type.[2].the same qualities that make fierce nerds so effective can.also make them very annoying. fierce nerds would do well to remember.this, and (a) try to keep a lid on it, and (b) seek out organizations.and types of work where getting the right answer matters more than.preserving social harmony. in practice that means small groups.working on hard problems. which fortunately is the most fun kind.of environment anyway.[3].if success neutralizes bitterness, why are there some people.who are at least moderately successful and yet still quite bitter?.because people's potential bitterness varies depending on how.naturally bitter their personality is, and how ambitious they are:.someone who's naturally very bitter will still have a lot left after.success neutralizes some of it, and someone who's very ambitious.will need proportionally more success to satisfy that ambition.so the worst-case scenario is someone who's both naturally bitter.and extremely ambitious, and yet only moderately successful..thanks to trevor blackwell, steve blank, patrick collison, jessica.livingston, amjad masad, and robert morris for reading drafts of this.chinese translation<eot><sot>crazy new ideas.may 2021
there's one kind of opinion i'd be very afraid to express publicly..if someone i knew to be both a domain expert and a reasonable person.proposed an idea that sounded preposterous, i'd be very reluctant.to say "that will never work."anyone who has studied the history of ideas, and especially the.history of science, knows that's how big things start. someone.proposes an idea that sounds crazy, most people dismiss it, then.it gradually takes over the world.most implausible-sounding ideas are in fact bad and could be safely.dismissed. but not when they're proposed by reasonable domain.experts. if the person proposing the idea is reasonable, then they.know how implausible it sounds. and yet they're proposing it anyway..that suggests they know something you don't. and if they have deep.domain expertise, that's probably the source of it..[1]such ideas are not merely unsafe to dismiss, but disproportionately.likely to be interesting. when the average person proposes an.implausible-sounding idea, its implausibility is evidence of their.incompetence. but when a reasonable domain expert does it, the.situation is reversed. there's something like an efficient market.here: on average the ideas that seem craziest will, if correct,.have the biggest effect. so if you can eliminate the theory that.the person proposing an implausible-sounding idea is incompetent,.its implausibility switches from evidence that it's boring to.evidence that it's exciting..[2]such ideas are not guaranteed to work. but they don't have to be..they just have to be sufficiently good bets — to have sufficiently.high expected value. and i think on average they do. i think if you.bet on the entire set of implausible-sounding ideas proposed by.reasonable domain experts, you'd end up net ahead.the reason is that everyone is too conservative. the word "paradigm".is overused, but this is a case where it's warranted. everyone is.too much in the grip of the current paradigm. even the people who.have the new ideas undervalue them initially. which means that.before they reach the stage of proposing them publicly, they've.already subjected them to an excessively strict filter..[3]the wise response to such an idea is not to make statements, but.to ask questions, because there's a real mystery here. why has this.smart and reasonable person proposed an idea that seems so wrong?.are they mistaken, or are you? one of you has to be. if you're the.one who's mistaken, that would be good to know, because it means.there's a hole in your model of the world. but even if they're.mistaken, it should be interesting to learn why. a trap that an.expert falls into is one you have to worry about too.this all seems pretty obvious. and yet there are clearly a lot of.people who don't share my fear of dismissing new ideas. why do they.do it? why risk looking like a jerk now and a fool later, instead.of just reserving judgement?one reason they do it is envy. if you propose a radical new idea.and it succeeds, your reputation (and perhaps also your wealth).will increase proportionally. some people would be envious if that.happened, and this potential envy propagates back into a conviction.that you must be wrong.another reason people dismiss new ideas is that it's an easy way.to seem sophisticated. when a new idea first emerges, it usually.seems pretty feeble. it's a mere hatchling. received wisdom is a.full-grown eagle by comparison. so it's easy to launch a devastating.attack on a new idea, and anyone who does will seem clever to those.who don't understand this asymmetry.this phenomenon is exacerbated by the difference between how those.working on new ideas and those attacking them are rewarded. the.rewards for working on new ideas are weighted by the value of the.outcome. so it's worth working on something that only has a 10%.chance of succeeding if it would make things more than 10x better..whereas the rewards for attacking new ideas are roughly constant;.such attacks seem roughly equally clever regardless of the target.people will also attack new ideas when they have a vested interest.in the old ones. it's not surprising, for example, that some of.darwin's harshest critics were churchmen. people build whole careers.on some ideas. when someone claims they're false or obsolete, they.feel threatened.the lowest form of dismissal is mere factionalism: to automatically.dismiss any idea associated with the opposing faction. the lowest.form of all is to dismiss an idea because of who proposed it.but the main thing that leads reasonable people to dismiss new ideas.is the same thing that holds people back from proposing them: the.sheer pervasiveness of the current paradigm. it doesn't just affect.the way we think; it is the lego blocks we build thoughts out of..popping out of the current paradigm is something only a few people.can do. and even they usually have to suppress their intuitions at.first, like a pilot flying through cloud who has to trust his.instruments over his sense of balance..[4]paradigms don't just define our present thinking. they also vacuum.up the trail of crumbs that led to them, making our standards for.new ideas impossibly high. the current paradigm seems so perfect.to us, its offspring, that we imagine it must have been accepted.completely as soon as it was discovered — that whatever the church thought.of the heliocentric model, astronomers must have been convinced as.soon as copernicus proposed it. far, in fact, from it. copernicus.published the heliocentric model in 1532, but it wasn't till the.mid seventeenth century that the balance of scientific opinion.shifted in its favor..[5]few understand how feeble new ideas look when they first appear..so if you want to have new ideas yourself, one of the most valuable.things you can do is to learn what they look like when they're born..read about how new ideas happened, and try to get yourself into the.heads of people at the time. how did things look to them, when the.new idea was only half-finished, and even the person who had it was.only half-convinced it was right?but you don't have to stop at history. you can observe big new ideas.being born all around you right now. just look for a reasonable.domain expert proposing something that sounds wrong.if you're nice, as well as wise, you won't merely resist attacking.such people, but encourage them. having new ideas is a lonely.business. only those who've tried it know how lonely. these people.need your help. and if you help them, you'll probably learn something.in the process.notes[1].this domain expertise could be in another field. indeed,.such crossovers tend to be particularly promising.[2].i'm not claiming this principle extends much beyond math,.engineering, and the hard sciences. in politics, for example,.crazy-sounding ideas generally are as bad as they sound. though.arguably this is not an exception, because the people who propose.them are not in fact domain experts; politicians are domain experts.in political tactics, like how to get elected and how to get.legislation passed, but not in the world that policy acts upon..perhaps no one could be.[3].this sense of "paradigm" was defined by thomas kuhn in his.structure of scientific revolutions, but i also recommend his.copernican revolution, where you can see him at work developing the.idea.[4].this is one reason people with a touch of asperger's may have.an advantage in discovering new ideas. they're always flying on.instruments.[5].hall, rupert. from galileo to newton. collins, 1963. this.book is particularly good at getting into contemporaries' heads.thanks to trevor blackwell, patrick collison, suhail doshi, daniel.gackle, jessica livingston, and robert morris for reading drafts of this.<eot><sot>an nft that saves lives.may 2021
noora health, a nonprofit i've.supported for years, just launched.a new nft. it has a dramatic name, save thousands of lives,.because that's what the proceeds will do.noora has been saving lives for 7 years. they run programs in.hospitals in south asia to teach new mothers how to take care of.their babies once they get home. they're in 165 hospitals now. and.because they know the numbers before and after they start at a new.hospital, they can measure the impact they have. it is massive..for every 1000 live births, they save 9 babies.this number comes from a study.of 133,733 families at 28 different.hospitals that noora conducted in collaboration with the better.birth team at ariadne labs, a joint center for health systems.innovation at brigham and womens hospital and harvard t.h. chan.school of public health.noora is so effective that even if you measure their costs in the.most conservative way, by dividing their entire budget by the number.of lives saved, the cost of saving a life is the lowest i've seen..$1,235.for this nft, they're going to issue a public report tracking how.this specific tranche of money is spent, and estimating the number.of lives saved as a result.nfts are a new territory, and this way of using them is especially.new, but i'm excited about its potential. and i'm excited to see.what happens with this particular auction, because unlike an nft.representing something that has already happened,.this nft gets better as the price gets higher.the reserve price was about $2.5 million, because that's what it.takes for the name to be accurate: that's what it costs to save.2000 lives. but the higher the price of this nft goes, the more.lives will be saved. what a sentence to be able to write.<eot><sot>the real reason to end the death penalty.april 2021
when intellectuals talk about the death penalty, they talk about.things like whether it's permissible for the state to take someone's.life, whether the death penalty acts as a deterrent, and whether.more death sentences are given to some groups than others. but in.practice the debate about the death penalty is not about whether.it's ok to kill murderers. it's about whether it's ok to kill.innocent people, because at least 4% of people on death row are.innocent.when i was a kid i imagined that it was unusual for people to be.convicted of crimes they hadn't committed, and that in murder cases.especially this must be very rare. far from it. now, thanks to.organizations like the.innocence project,.we see a constant stream.of stories about murder convictions being overturned after new.evidence emerges. sometimes the police and prosecutors were just.very sloppy. sometimes they were crooked, and knew full well they.were convicting an innocent person.kenneth adams and three other men spent 18 years in prison on a.murder conviction. they were exonerated after dna testing implicated.three different men, two of whom later confessed. the police had.been told about the other men early in the investigation, but never.followed up the lead.keith harward spent 33 years in prison on a murder conviction. he.was convicted because "experts" said his teeth matched photos of.bite marks on one victim. he was exonerated after dna testing showed.the murder had been committed by another man, jerry crotty.ricky jackson and two other men spent 39 years in prison after being.convicted of murder on the testimony of a 12 year old boy, who later.recanted and said he'd been coerced by police. multiple people have.confirmed the boy was elsewhere at the time. the three men were.exonerated after the county prosecutor dropped the charges, saying."the state is conceding the obvious."alfred brown spent 12 years in prison on a murder conviction,.including 10 years on death row. he was exonerated after it was.discovered that the assistant district attorney had concealed phone.records proving he could not have committed the crimes.glenn ford spent 29 years on death row after having been convicted.of murder. he was exonerated after new evidence proved he was not.even at the scene when the murder occurred. the attorneys assigned.to represent him had never tried a jury case before.cameron willingham was actually executed in 2004 by lethal injection..the "expert" who testified that he deliberately set fire to his.house has since been discredited. a re-examination of the case.ordered by the state of texas in 2009 concluded that "a finding of.arson could not be sustained."rich glossip.has spent 20 years on death row after being convicted.of murder on the testimony of the actual killer, who escaped with.a life sentence in return for implicating him. in 2015 he came.within minutes of execution before it emerged that oklahoma had.been planning to kill him with an illegal combination of drugs..they still plan to go ahead with the execution, perhaps as soon as.this summer, despite.new.evidence exonerating him.i could go on. there are hundreds of similar cases. in florida.alone, 29 death row prisoners have been exonerated so far.far from being rare, wrongful murder convictions are.very common..police are under pressure to solve a crime that has gotten a lot.of attention. when they find a suspect, they want to believe he's.guilty, and ignore or even destroy evidence suggesting otherwise..district attorneys want to be seen as effective and tough on crime,.and in order to win convictions are willing to manipulate witnesses.and withhold evidence. court-appointed defense attorneys are.overworked and often incompetent. there's a ready supply of criminals.willing to give false testimony in return for a lighter sentence,.suggestible witnesses who can be made to say whatever police want,.and bogus "experts" eager to claim that science proves the defendant.is guilty. and juries want to believe them, since otherwise some.terrible crime remains unsolved.this circus of incompetence and dishonesty is the real issue with.the death penalty. we don't even reach the point where theoretical.questions about the moral justification or effectiveness of capital.punishment start to matter, because so many of the people sentenced.to death are actually innocent. whatever it means in theory, in.practice capital punishment means killing innocent people..thanks to trevor blackwell, jessica livingston, and don knight for.reading drafts of this.related:will florida kill an innocent man?was kevin cooper framed for murder?did texas execute an innocent man?<eot><sot>how people get rich now.april 2021
every year since 1982, forbes magazine has published a list of the.richest americans. if we compare the 100 richest people in 1982 to.the 100 richest in 2020, we notice some big differences.in 1982 the most common source of wealth was inheritance. of the.100 richest people, 60 inherited from an ancestor. there were 10.du pont heirs alone. by 2020 the number of heirs had been cut in.half, accounting for only 27 of the biggest 100 fortunes.why would the percentage of heirs decrease? not because inheritance.taxes increased. in fact, they decreased significantly during this.period. the reason the percentage of heirs has decreased is not.that fewer people are inheriting great fortunes, but that more.people are making them.how are people making these new fortunes? roughly 3/4 by starting.companies and 1/4 by investing. of the 73 new fortunes in 2020, 56.derive from founders' or early employees' equity (52 founders, 2.early employees, and 2 wives of founders), and 17 from managing.investment funds.there were no fund managers among the 100 richest americans in 1982..hedge funds and private equity firms existed in 1982, but none of.their founders were rich enough yet to make it into the top 100..two things changed: fund managers discovered new ways to generate.high returns, and more investors were willing to trust them with.their money..[1]but the main source of new fortunes now is starting companies, and.when you look at the data, you see big changes there too. people.get richer from starting companies now than they did in 1982, because.the companies do different things.in 1982, there were two dominant sources of new wealth: oil and.real estate. of the 40 new fortunes in 1982, at least 24 were due.primarily to oil or real estate. now only a small number are: of.the 73 new fortunes in 2020, 4 were due to real estate and only 2.to oil.by 2020 the biggest source of new wealth was what are sometimes.called "tech" companies. of the 73 new fortunes, about 30 derive.from such companies. these are particularly common among the richest.of the rich: 8 of the top 10 fortunes in 2020 were new fortunes of.this type.arguably it's slightly misleading to treat tech as a category..isn't amazon really a retailer, and tesla a car maker? yes and no..maybe in 50 years, when what we call tech is taken for granted, it.won't seem right to put these two businesses in the same category..but at the moment at least, there is definitely something they share.in common that distinguishes them. what retailer starts aws? what.car maker is run by someone who also has a rocket company?the tech companies behind the top 100 fortunes also form a.well-differentiated group in the sense that they're all companies.that venture capitalists would readily invest in, and the others.mostly not. and there's a reason why: these are mostly companies.that win by having better technology, rather than just a ceo who's.really driven and good at making deals.to that extent, the rise of the tech companies represents a qualitative.change. the oil and real estate magnates of the 1982 forbes 400.didn't win by making better technology. they won by being really.driven and good at making deals..[2].and indeed, that way of.getting rich is so old that it predates the industrial revolution..the courtiers who got rich in the (nominal) service of european.royal houses in the 16th and 17th centuries were also, as a rule,.really driven and good at making deals.people who don't look any deeper than the gini coefficient look.back on the world of 1982 as the good old days, because those who.got rich then didn't get as rich. but if you dig into how they.got rich, the old days don't look so good. in 1982, 84% of the.richest 100 people got rich by inheritance, extracting natural.resources, or doing real estate deals. is that really better than.a world in which the richest people get rich by starting tech.companies?why are people starting so many more new companies than they used.to, and why are they getting so rich from it? the answer to the.first question, curiously enough, is that it's misphrased. we.shouldn't be asking why people are starting companies, but why.they're starting companies again..[3]in 1892, the new york herald tribune compiled a list of all the.millionaires in america. they found 4047 of them. how many had.inherited their wealth then? only about 20%, which is less than the.proportion of heirs today. and when you investigate the sources of.the new fortunes, 1892 looks even more like today. hugh rockoff.found that "many of the richest ... gained their initial edge from.the new technology of mass production.".[4]so it's not 2020 that's the anomaly here, but 1982. the real question.is why so few people had gotten rich from starting companies in.1982. and the answer is that even as the herald tribune's list was.being compiled, a wave of consolidation.was sweeping through the.american economy. in the late 19th and early 20th centuries,.financiers like j. p. morgan combined thousands of smaller companies.into a few hundred giant ones with commanding economies of scale..by the end of world war ii, as michael lind writes, "the major.sectors of the economy were either organized as government-backed.cartels or dominated by a few oligopolistic corporations.".[5]in 1960, most of the people who start startups today would have.gone to work for one of them. you could get rich from starting your.own company in 1890 and in 2020, but in 1960 it was not really a.viable option. you couldn't break through the oligopolies to get.at the markets. so the prestigious route in 1960 was not to start.your own company, but to work your way up the corporate ladder at.an existing one..[6]making everyone a corporate employee decreased economic inequality.(and every other kind of variation), but if your model of normal.is the mid 20th century, you have a very misleading model in that.respect. j. p. morgan's economy turned out to be just a phase, and.starting in the 1970s, it began to break up.why did it break up? partly senescence. the big companies that.seemed models of scale and efficiency in 1930 had by 1970 become.slack and bloated. by 1970 the rigid structure of the economy was.full of cosy nests that various groups had built to insulate.themselves from market forces. during the carter administration the.federal government realized something was amiss and began, in a.process they called "deregulation," to roll back the policies that.propped up the oligopolies.but it wasn't just decay from within that broke up j. p. morgan's.economy. there was also pressure from without, in the form of new.technology, and particularly microelectronics. the best way to.envision what happened is to imagine a pond with a crust of ice on.top. initially the only way from the bottom to the surface is around.the edges. but as the ice crust weakens, you start to be able to.punch right through the middle.the edges of the pond were pure tech: companies that actually.described themselves as being in the electronics or software business..when you used the word "startup" in 1990, that was what you meant..but now startups are punching right through the middle of the ice.crust and displacing incumbents like retailers and tv networks and.car companies..[7]but though the breakup of j. p. morgan's economy created a new world.in the technological sense, it was a reversion to the norm in the.social sense. if you only look back as far as the mid 20th century,.it seems like people getting rich by starting their own companies.is a recent phenomenon. but if you look back further, you realize.it's actually the default. so what we should expect in the future.is more of the same. indeed, we should expect both the number and.wealth of founders to grow, because every decade it gets easier to.start a startup.part of the reason it's getting easier to start a startup is social..society is (re)assimilating the concept. if you start one now, your.parents won't freak out the way they would have a generation ago,.and knowledge about how to do it is much more widespread. but the.main reason it's easier to start a startup now is that it's cheaper..technology has driven down the cost of both building products and.acquiring customers.the decreasing cost of starting a startup has in turn changed the.balance of power between founders and investors. back when starting.a startup meant building a factory, you needed investors' permission.to do it at all. but now investors need founders more than founders.need investors, and that, combined with the increasing amount of.venture capital available, has driven up valuations..[8]so the decreasing cost of starting a startup increases the number.of rich people in two ways: it means that more people start them,.and that those who do can raise money on better terms.but there's also a third factor at work: the companies themselves.are more valuable, because newly founded companies grow faster than.they used to. technology hasn't just made it cheaper to build and.distribute things, but faster too.this trend has been running for a long time. ibm, founded in 1896,.took 45 years to reach a billion 2020 dollars in revenue..hewlett-packard, founded in 1939, took 25 years. microsoft, founded.in 1975, took 13 years. now the norm for fast-growing companies is.7 or 8 years..[9]fast growth has a double effect on the value of founders' stock..the value of a company is a function of its revenue and its growth.rate. so if a company grows faster, you not only get to a billion.dollars in revenue sooner, but the company is more valuable when.it reaches that point than it would be if it were growing slower.that's why founders sometimes get so rich so young now. the low.initial cost of starting a startup means founders can start young,.and the fast growth of companies today means that if they succeed.they could be surprisingly rich just a few years later.it's easier now to start and grow a company than it has ever been..that means more people start them, that those who do get better.terms from investors, and that the resulting companies become more.valuable. once you understand how these mechanisms work, and that.startups were suppressed for most of the 20th century, you don't.have to resort to some vague right turn the country took under.reagan to explain why america's gini coefficient is increasing. of.course the gini coefficient is increasing. with more people starting.more valuable companies, how could it not be?notes[1].investment firms grew rapidly after a regulatory change by.the labor department in 1978 allowed pension funds to invest in.them, but the effects of this growth were not yet visible in the.top 100 fortunes in 1982.[2].george mitchell deserves mention as an exception. though.really driven and good at making deals, he was also the first to.figure out how to use fracking to get natural gas out of shale.[3].when i say people are starting more companies, i mean the.type of company meant to grow.very big. there has actually been a.decrease in the last couple decades in the overall number of new.companies. but the vast majority of companies are small retail and.service businesses. so what the statistics about the decreasing.number of new businesses mean is that people are starting fewer.shoe stores and barber shops.people sometimes get confused when they see a graph labelled."startups" that's going down, because there are two senses of the.word "startup": (1) the founding of a company, and (2) a particular.type of company designed to grow big fast. the statistics mean.startup in sense (1), not sense (2).[4].rockoff, hugh. "great fortunes of the gilded age." nber working.paper 14555, 2008.[5].lind, michael. land of promise. harpercollins, 2012.it's also likely that the high tax rates in the mid 20th century.deterred people from starting their own companies. starting one's.own company is risky, and when risk isn't rewarded, people opt for.safety instead.but it wasn't simply cause and effect. the oligopolies and high tax.rates of the mid 20th century were all of a piece. lower taxes are.not just a cause of entrepreneurship, but an effect as well: the.people getting rich in the mid 20th century from real estate and.oil exploration lobbied for and got huge tax loopholes that made.their effective tax rate much lower, and presumably if it had been.more common to grow big companies by building new technology, the.people doing that would have lobbied for their own loopholes as.well.[6].that's why the people who did get rich in the mid 20th century.so often got rich from oil exploration or real estate. those were.the two big areas of the economy that weren't susceptible to.consolidation.[7].the pure tech companies used to be called "high technology" startups..but now that startups can punch through the middle of the ice crust,.we don't need a separate name for the edges, and the term "high-tech".has a decidedly retro.sound.[8].higher valuations mean you either sell less stock to get a.given amount of money, or get more money for a given amount of.stock. the typical startup does some of each. obviously you end up.richer if you keep more stock, but you should also end up richer.if you raise more money, because (a) it should make the company.more successful, and (b) you should be able to last longer before.the next round, or not even need one. notice all those shoulds.though. in practice a lot of money slips through them.it might seem that the huge rounds raised by startups nowadays.contradict the claim that it has become cheaper to start one. but.there's no contradiction here; the startups that raise the most are.the ones doing it by choice, in order to grow faster, not the ones.doing it because they need the money to survive. there's nothing.like not needing money to make people offer it to you.you would think, after having been on the side of labor in its fight.with capital for almost two centuries, that the far left would be.happy that labor has finally prevailed. but none of them seem to.be. you can almost hear them saying "no, no, not that way."[9].ibm was created in 1911 by merging three companies, the most.important of which was herman hollerith's tabulating machine company,.founded in 1896. in 1941 its revenues were $60 million.hewlett-packard's revenues in 1964 were $125 million.microsoft's revenues in 1988 were $590 million.thanks to trevor blackwell, jessica livingston, bob lesko, robert morris,.russ roberts, and alex tabarrok for reading drafts of this, and to jon erlichman for growth data.<eot><sot>write simply.march 2021
i try to write using ordinary words and simple sentences.that kind of writing is easier to read, and the easier something.is to read, the more deeply readers will engage with it. the less.energy they expend on your prose, the more they'll have left for.your ideas.and the further they'll read. most readers' energy tends to flag.part way through an article or essay. if the friction of reading.is low enough, more keep going till the end.there's an italian dish called saltimbocca, which means "leap.into the mouth." my goal when writing might be called saltintesta:.the ideas leap into your head and you barely notice the words that.got them there.it's too much to hope that writing could ever be pure ideas. you.might not even want it to be. but for most writers, most of the.time, that's the goal to aim for. the gap between most writing and.pure ideas is not filled with poetry.plus it's more considerate to write simply. when you write in a.fancy way to impress people, you're making them do extra work just.so you can seem cool. it's like trailing a long train behind you.that readers have to carry.and remember, if you're writing in english, that a lot of your.readers won't be native english speakers. their understanding of.ideas may be way ahead of their understanding of english. so you.can't assume that writing about a difficult topic means you can.use difficult words.of course, fancy writing doesn't just conceal ideas. it can also.conceal the lack of them. that's why some people write that way,.to conceal the fact that they have.nothing to say. whereas writing.simply keeps you honest. if you say nothing simply, it will be.obvious to everyone, including you.simple writing also lasts better. people reading your stuff in the.future will be in much the same position as people from other.countries reading it today. the culture and the language will have.changed. it's not vain to care about that, any more than it's vain.for a woodworker to build a chair to last.indeed, lasting is not merely an accidental quality of chairs, or.writing. it's a sign you did a good job.but although these are all real advantages of writing simply, none.of them are why i do it. the main reason i write simply is that it.offends me not to. when i write a sentence that seems too complicated,.or that uses unnecessarily intellectual words, it doesn't seem fancy.to me. it seems clumsy.there are of course times when you want to use a complicated sentence.or fancy word for effect. but you should never do it by accident.the other reason my writing ends up being simple is the way i do.it. i write the first draft fast, then spend days editing it, trying.to get everything just right. much of this editing is cutting, and.that makes simple writing even simpler.<eot><sot>donate unrestricted.march 2021
the secret curse of the nonprofit world is restricted donations..if you haven't been involved with nonprofits, you may never have.heard this phrase before. but if you have been, it probably made.you wince.restricted donations mean donations where the donor limits what can.be done with the money. this is common with big donations, perhaps.the default. and yet it's usually a bad idea. usually the way the.donor wants the money spent is not the way the nonprofit would have.chosen. otherwise there would have been no need to restrict the.donation. but who has a better understanding of where money needs.to be spent, the nonprofit or the donor?if a nonprofit doesn't understand better than its donors where money.needs to be spent, then it's incompetent and you shouldn't be.donating to it at all.which means a restricted donation is inherently suboptimal. it's.either a donation to a bad nonprofit, or a donation for the wrong.things.there are a couple exceptions to this principle. one is when the.nonprofit is an umbrella organization. it's reasonable to make a.restricted donation to a university, for example, because a university.is only nominally a single nonprofit. another exception is when the.donor actually does know as much as the nonprofit about where money.needs to be spent. the gates foundation, for example, has specific.goals and often makes restricted donations to individual nonprofits.to accomplish them. but unless you're a domain expert yourself or.donating to an umbrella organization, your donation would do more.good if it were unrestricted.if restricted donations do less good than unrestricted ones, why.do donors so often make them? partly because doing good isn't donors'.only motive. they often have other motives as well — to make a mark,.or to generate good publicity.[1],.or to comply with regulations.or corporate policies. many donors may simply never have considered.the distinction between restricted and unrestricted donations. they.may believe that donating money for some specific purpose is just.how donation works. and to be fair, nonprofits don't try very hard.to discourage such illusions. they can't afford to. people running.nonprofits are almost always anxious about money. they can't afford.to talk back to big donors.you can't expect candor in a relationship so asymmetric. so i'll.tell you what nonprofits wish they could tell you. if you want to.donate to a nonprofit, donate unrestricted. if you trust them to.spend your money, trust them to decide how..note[1].unfortunately restricted donations tend to generate more.publicity than unrestricted ones. "x donates money to build a school.in africa" is not only more interesting than "x donates money to y.nonprofit to spend as y chooses," but also focuses more attention.on x..thanks to chase adam, ingrid bassett, trevor blackwell, and edith.elliot for reading drafts of this.<eot><sot>what i worked on.february 2021
before college the two main things i worked on, outside of school,.were writing and programming. i didn't write essays. i wrote what.beginning writers were supposed to write then, and probably still.are: short stories. my stories were awful. they had hardly any plot,.just characters with strong feelings, which i imagined made them.deep.the first programs i tried writing were on the ibm 1401 that our.school district used for what was then called "data processing.".this was in 9th grade, so i was 13 or 14. the school district's.1401 happened to be in the basement of our junior high school, and.my friend rich draves and i got permission to use it. it was like.a mini bond villain's lair down there, with all these alien-looking.machines  cpu, disk drives, printer, card reader  sitting up.on a raised floor under bright fluorescent lights.the language we used was an early version of fortran. you had to.type programs on punch cards, then stack them in the card reader.and press a button to load the program into memory and run it. the.result would ordinarily be to print something on the spectacularly.loud printer.i was puzzled by the 1401. i couldn't figure out what to do with.it. and in retrospect there's not much i could have done with it..the only form of input to programs was data stored on punched cards,.and i didn't have any data stored on punched cards. the only other.option was to do things that didn't rely on any input, like calculate.approximations of pi, but i didn't know enough math to do anything.interesting of that type. so i'm not surprised i can't remember any.programs i wrote, because they can't have done much. my clearest.memory is of the moment i learned it was possible for programs not.to terminate, when one of mine didn't. on a machine without.time-sharing, this was a social as well as a technical error, as.the data center manager's expression made clear.with microcomputers, everything changed. now you could have a.computer sitting right in front of you, on a desk, that could respond.to your keystrokes as it was running instead of just churning through.a stack of punch cards and then stopping..[1]the first of my friends to get a microcomputer built it himself..it was sold as a kit by heathkit. i remember vividly how impressed.and envious i felt watching him sitting in front of it, typing.programs right into the computer.computers were expensive in those days and it took me years of.nagging before i convinced my father to buy one, a trs-80, in about.1980. the gold standard then was the apple ii, but a trs-80 was.good enough. this was when i really started programming. i wrote.simple games, a program to predict how high my model rockets would.fly, and a word processor that my father used to write at least one.book. there was only room in memory for about 2 pages of text, so.he'd write 2 pages at a time and then print them out, but it was a.lot better than a typewriter.though i liked programming, i didn't plan to study it in college..in college i was going to study philosophy, which sounded much more.powerful. it seemed, to my naive high school self, to be the study.of the ultimate truths, compared to which the things studied in.other fields would be mere domain knowledge. what i discovered when.i got to college was that the other fields took up so much of the.space of ideas that there wasn't much left for these supposed.ultimate truths. all that seemed left for philosophy were edge cases.that people in other fields felt could safely be ignored.i couldn't have put this into words when i was 18. all i knew at.the time was that i kept taking philosophy courses and they kept.being boring. so i decided to switch to ai.ai was in the air in the mid 1980s, but there were two things.especially that made me want to work on it: a novel by heinlein.called the moon is a harsh mistress, which featured an intelligent.computer called mike, and a pbs documentary that showed terry.winograd using shrdlu. i haven't tried rereading the moon is a harsh.mistress, so i don't know how well it has aged, but when i read it.i was drawn entirely into its world. it seemed only a matter of.time before we'd have mike, and when i saw winograd using shrdlu,.it seemed like that time would be a few years at most. all you had.to do was teach shrdlu more words.there weren't any classes in ai at cornell then, not even graduate.classes, so i started trying to teach myself. which meant learning.lisp, since in those days lisp was regarded as the language of ai..the commonly used programming languages then were pretty primitive,.and programmers' ideas correspondingly so. the default language at.cornell was a pascal-like language called pl/i, and the situation.was similar elsewhere. learning lisp expanded my concept of a program.so fast that it was years before i started to have a sense of where.the new limits were. this was more like it; this was what i had.expected college to do. it wasn't happening in a class, like it was.supposed to, but that was ok. for the next couple years i was on a.roll. i knew what i was going to do.for my undergraduate thesis, i reverse-engineered shrdlu. my god.did i love working on that program. it was a pleasing bit of code,.but what made it even more exciting was my belief  hard to imagine.now, but not unique in 1985  that it was already climbing the.lower slopes of intelligence.i had gotten into a program at cornell that didn't make you choose.a major. you could take whatever classes you liked, and choose.whatever you liked to put on your degree. i of course chose "artificial.intelligence." when i got the actual physical diploma, i was dismayed.to find that the quotes had been included, which made them read as.scare-quotes. at the time this bothered me, but now it seems amusingly.accurate, for reasons i was about to discover.i applied to 3 grad schools: mit and yale, which were renowned for.ai at the time, and harvard, which i'd visited because rich draves.went there, and was also home to bill woods, who'd invented the.type of parser i used in my shrdlu clone. only harvard accepted me,.so that was where i went.i don't remember the moment it happened, or if there even was a.specific moment, but during the first year of grad school i realized.that ai, as practiced at the time, was a hoax. by which i mean the.sort of ai in which a program that's told "the dog is sitting on.the chair" translates this into some formal representation and adds.it to the list of things it knows.what these programs really showed was that there's a subset of.natural language that's a formal language. but a very proper subset..it was clear that there was an unbridgeable gap between what they.could do and actually understanding natural language. it was not,.in fact, simply a matter of teaching shrdlu more words. that whole.way of doing ai, with explicit data structures representing concepts,.was not going to work. its brokenness did, as so often happens,.generate a lot of opportunities to write papers about various.band-aids that could be applied to it, but it was never going to.get us mike.so i looked around to see what i could salvage from the wreckage.of my plans, and there was lisp. i knew from experience that lisp.was interesting for its own sake and not just for its association.with ai, even though that was the main reason people cared about.it at the time. so i decided to focus on lisp. in fact, i decided.to write a book about lisp hacking. it's scary to think how little.i knew about lisp hacking when i started writing that book. but.there's nothing like writing a book about something to help you.learn it. the book, on lisp, wasn't published till 1993, but i wrote.much of it in grad school.computer science is an uneasy alliance between two halves, theory.and systems. the theory people prove things, and the systems people.build things. i wanted to build things. i had plenty of respect for.theory  indeed, a sneaking suspicion that it was the more admirable.of the two halves  but building things seemed so much more exciting.the problem with systems work, though, was that it didn't last..any program you wrote today, no matter how good, would be obsolete.in a couple decades at best. people might mention your software in.footnotes, but no one would actually use it. and indeed, it would.seem very feeble work. only people with a sense of the history of.the field would even realize that, in its time, it had been good.there were some surplus xerox dandelions floating around the computer.lab at one point. anyone who wanted one to play around with could.have one. i was briefly tempted, but they were so slow by present.standards; what was the point? no one else wanted one either, so.off they went. that was what happened to systems work.i wanted not just to build things, but to build things that would.last.in this dissatisfied state i went in 1988 to visit rich draves at.cmu, where he was in grad school. one day i went to visit the.carnegie institute, where i'd spent a lot of time as a kid. while.looking at a painting there i realized something that might seem.obvious, but was a big surprise to me. there, right on the wall,.was something you could make that would last. paintings didn't.become obsolete. some of the best ones were hundreds of years old.and moreover this was something you could make a living doing. not.as easily as you could by writing software, of course, but i thought.if you were really industrious and lived really cheaply, it had to.be possible to make enough to survive. and as an artist you could.be truly independent. you wouldn't have a boss, or even need to get.research funding.i had always liked looking at paintings. could i make them? i had.no idea. i'd never imagined it was even possible. i knew intellectually.that people made art  that it didn't just appear spontaneously. but it was as if the people who made it were a different species..they either lived long ago or were mysterious geniuses doing strange.things in profiles in life magazine. the idea of actually being.able to make art, to put that verb before that noun, seemed almost.miraculous.that fall i started taking art classes at harvard. grad students.could take classes in any department, and my advisor, tom cheatham,.was very easy going. if he even knew about the strange classes i.was taking, he never said anything.so now i was in a phd program in computer science, yet planning to.be an artist, yet also genuinely in love with lisp hacking and.working away at on lisp. in other words, like many a grad student,.i was working energetically on multiple projects that were not my.thesis.i didn't see a way out of this situation. i didn't want to drop out.of grad school, but how else was i going to get out? i remember.when my friend robert morris got kicked out of cornell for writing.the internet worm of 1988, i was envious that he'd found such a.spectacular way to get out of grad school.then one day in april 1990 a crack appeared in the wall. i ran into.professor cheatham and he asked if i was far enough along to graduate.that june. i didn't have a word of my dissertation written, but in.what must have been the quickest bit of thinking in my life, i.decided to take a shot at writing one in the 5 weeks or so that.remained before the deadline, reusing parts of on lisp where i.could, and i was able to respond, with no perceptible delay "yes,.i think so. i'll give you something to read in a few days."i picked applications of continuations as the topic. in retrospect.i should have written about macros and embedded languages. there's.a whole world there that's barely been explored. but all i wanted.was to get out of grad school, and my rapidly written dissertation.sufficed, just barely.meanwhile i was applying to art schools. i applied to two: risd in.the us, and the accademia di belli arti in florence, which, because.it was the oldest art school, i imagined would be good. risd accepted.me, and i never heard back from the accademia, so off to providence.i went.i'd applied for the bfa program at risd, which meant in effect that.i had to go to college again. this was not as strange as it sounds,.because i was only 25, and art schools are full of people of different.ages. risd counted me as a transfer sophomore and said i had to do.the foundation that summer. the foundation means the classes that.everyone has to take in fundamental subjects like drawing, color,.and design.toward the end of the summer i got a big surprise: a letter from.the accademia, which had been delayed because they'd sent it to.cambridge england instead of cambridge massachusetts, inviting me.to take the entrance exam in florence that fall. this was now only.weeks away. my nice landlady let me leave my stuff in her attic. i.had some money saved from consulting work i'd done in grad school;.there was probably enough to last a year if i lived cheaply. now.all i had to do was learn italian.only stranieri (foreigners) had to take this entrance exam. in.retrospect it may well have been a way of excluding them, because.there were so many stranieri attracted by the idea of studying.art in florence that the italian students would otherwise have been.outnumbered. i was in decent shape at painting and drawing from the.risd foundation that summer, but i still don't know how i managed.to pass the written exam. i remember that i answered the essay.question by writing about cezanne, and that i cranked up the.intellectual level as high as i could to make the most of my limited.vocabulary..[2]i'm only up to age 25 and already there are such conspicuous patterns..here i was, yet again about to attend some august institution in.the hopes of learning about some prestigious subject, and yet again.about to be disappointed. the students and faculty in the painting.department at the accademia were the nicest people you could imagine,.but they had long since arrived at an arrangement whereby the.students wouldn't require the faculty to teach anything, and in.return the faculty wouldn't require the students to learn anything..and at the same time all involved would adhere outwardly to the.conventions of a 19th century atelier. we actually had one of those.little stoves, fed with kindling, that you see in 19th century.studio paintings, and a nude model sitting as close to it as possible.without getting burned. except hardly anyone else painted her besides.me. the rest of the students spent their time chatting or occasionally.trying to imitate things they'd seen in american art magazines.our model turned out to live just down the street from me. she made.a living from a combination of modelling and making fakes for a.local antique dealer. she'd copy an obscure old painting out of a.book, and then he'd take the copy and maltreat it to make it look.old..[3]while i was a student at the accademia i started painting still.lives in my bedroom at night. these paintings were tiny, because.the room was, and because i painted them on leftover scraps of.canvas, which was all i could afford at the time. painting still.lives is different from painting people, because the subject, as.its name suggests, can't move. people can't sit for more than about.15 minutes at a time, and when they do they don't sit very still..so the traditional m.o. for painting people is to know how to paint.a generic person, which you then modify to match the specific person.you're painting. whereas a still life you can, if you want, copy.pixel by pixel from what you're seeing. you don't want to stop.there, of course, or you get merely photographic accuracy, and what.makes a still life interesting is that it's been through a head..you want to emphasize the visual cues that tell you, for example,.that the reason the color changes suddenly at a certain point is.that it's the edge of an object. by subtly emphasizing such things.you can make paintings that are more realistic than photographs not.just in some metaphorical sense, but in the strict information-theoretic.sense..[4]i liked painting still lives because i was curious about what i was.seeing. in everyday life, we aren't consciously aware of much we're.seeing. most visual perception is handled by low-level processes.that merely tell your brain "that's a water droplet" without telling.you details like where the lightest and darkest points are, or."that's a bush" without telling you the shape and position of every.leaf. this is a feature of brains, not a bug. in everyday life it.would be distracting to notice every leaf on every bush. but when.you have to paint something, you have to look more closely, and.when you do there's a lot to see. you can still be noticing new.things after days of trying to paint something people usually take.for granted, just as you can  after.days of trying to write an essay about something people usually.take for granted.this is not the only way to paint. i'm not 100% sure it's even a.good way to paint. but it seemed a good enough bet to be worth.trying.our teacher, professor ulivi, was a nice guy. he could see i worked.hard, and gave me a good grade, which he wrote down in a sort of.passport each student had. but the accademia wasn't teaching me.anything except italian, and my money was running out, so at the.end of the first year i went back to the us.i wanted to go back to risd, but i was now broke and risd was very.expensive, so i decided to get a job for a year and then return to.risd the next fall. i got one at a company called interleaf, which.made software for creating documents. you mean like microsoft word?.exactly. that was how i learned that low end software tends to eat.high end software. but interleaf still had a few years to live yet..[5]interleaf had done something pretty bold. inspired by emacs, they'd.added a scripting language, and even made the scripting language a.dialect of lisp. now they wanted a lisp hacker to write things in.it. this was the closest thing i've had to a normal job, and i.hereby apologize to my boss and coworkers, because i was a bad.employee. their lisp was the thinnest icing on a giant c cake, and.since i didn't know c and didn't want to learn it, i never understood.most of the software. plus i was terribly irresponsible. this was.back when a programming job meant showing up every day during certain.working hours. that seemed unnatural to me, and on this point the.rest of the world is coming around to my way of thinking, but at.the time it caused a lot of friction. toward the end of the year i.spent much of my time surreptitiously working on on lisp, which i.had by this time gotten a contract to publish.the good part was that i got paid huge amounts of money, especially.by art student standards. in florence, after paying my part of the.rent, my budget for everything else had been $7 a day. now i was.getting paid more than 4 times that every hour, even when i was.just sitting in a meeting. by living cheaply i not only managed to.save enough to go back to risd, but also paid off my college loans.i learned some useful things at interleaf, though they were mostly.about what not to do. i learned that it's better for technology.companies to be run by product people than sales people (though.sales is a real skill and people who are good at it are really good.at it), that it leads to bugs when code is edited by too many people,.that cheap office space is no bargain if it's depressing, that.planned meetings are inferior to corridor conversations, that big,.bureaucratic customers are a dangerous source of money, and that.there's not much overlap between conventional office hours and the.optimal time for hacking, or conventional offices and the optimal.place for it.but the most important thing i learned, and which i used in both.viaweb and y combinator, is that the low end eats the high end:.that it's good to be the "entry level" option, even though that.will be less prestigious, because if you're not, someone else will.be, and will squash you against the ceiling. which in turn means.that prestige is a danger sign.when i left to go back to risd the next fall, i arranged to do.freelance work for the group that did projects for customers, and.this was how i survived for the next several years. when i came.back to visit for a project later on, someone told me about a new.thing called html, which was, as he described it, a derivative of.sgml. markup language enthusiasts were an occupational hazard at.interleaf and i ignored him, but this html thing later became a big.part of my life.in the fall of 1992 i moved back to providence to continue at risd..the foundation had merely been intro stuff, and the accademia had.been a (very civilized) joke. now i was going to see what real art.school was like. but alas it was more like the accademia than not..better organized, certainly, and a lot more expensive, but it was.now becoming clear that art school did not bear the same relationship.to art that medical school bore to medicine. at least not the.painting department. the textile department, which my next door.neighbor belonged to, seemed to be pretty rigorous. no doubt.illustration and architecture were too. but painting was post-rigorous..painting students were supposed to express themselves, which to the.more worldly ones meant to try to cook up some sort of distinctive.signature style.a signature style is the visual equivalent of what in show business.is known as a "schtick": something that immediately identifies the.work as yours and no one else's. for example, when you see a painting.that looks like a certain kind of cartoon, you know it's by roy.lichtenstein. so if you see a big painting of this type hanging in.the apartment of a hedge fund manager, you know he paid millions.of dollars for it. that's not always why artists have a signature.style, but it's usually why buyers pay a lot for such work..[6]there were plenty of earnest students too: kids who "could draw".in high school, and now had come to what was supposed to be the.best art school in the country, to learn to draw even better. they.tended to be confused and demoralized by what they found at risd,.but they kept going, because painting was what they did. i was not.one of the kids who could draw in high school, but at risd i was.definitely closer to their tribe than the tribe of signature style.seekers.i learned a lot in the color class i took at risd, but otherwise i.was basically teaching myself to paint, and i could do that for.free. so in 1993 i dropped out. i hung around providence for a bit,.and then my college friend nancy parmet did me a big favor. a.rent-controlled apartment in a building her mother owned in new.york was becoming vacant. did i want it? it wasn't much more than.my current place, and new york was supposed to be where the artists.were. so yes, i wanted it!.[7]asterix comics begin by zooming in on a tiny corner of roman gaul.that turns out not to be controlled by the romans. you can do.something similar on a map of new york city: if you zoom in on the.upper east side, there's a tiny corner that's not rich, or at least.wasn't in 1993. it's called yorkville, and that was my new home..now i was a new york artist  in the strictly technical sense of.making paintings and living in new york.i was nervous about money, because i could sense that interleaf was.on the way down. freelance lisp hacking work was very rare, and i.didn't want to have to program in another language, which in those.days would have meant c++ if i was lucky. so with my unerring nose.for financial opportunity, i decided to write another book on lisp..this would be a popular book, the sort of book that could be used.as a textbook. i imagined myself living frugally off the royalties.and spending all my time painting. (the painting on the cover of.this book, ansi common lisp, is one that i painted around this.time.)the best thing about new york for me was the presence of idelle and.julian weber. idelle weber was a painter, one of the early.photorealists, and i'd taken her painting class at harvard. i've.never known a teacher more beloved by her students. large numbers.of former students kept in touch with her, including me. after i.moved to new york i became her de facto studio assistant.she liked to paint on big, square canvases, 4 to 5 feet on a side..one day in late 1994 as i was stretching one of these monsters there.was something on the radio about a famous fund manager. he wasn't.that much older than me, and was super rich. the thought suddenly.occurred to me: why don't i become rich? then i'll be able to work.on whatever i want.meanwhile i'd been hearing more and more about this new thing called.the world wide web. robert morris showed it to me when i visited.him in cambridge, where he was now in grad school at harvard. it.seemed to me that the web would be a big deal. i'd seen what graphical.user interfaces had done for the popularity of microcomputers. it.seemed like the web would do the same for the internet.if i wanted to get rich, here was the next train leaving the station..i was right about that part. what i got wrong was the idea. i decided.we should start a company to put art galleries online. i can't.honestly say, after reading so many y combinator applications, that.this was the worst startup idea ever, but it was up there. art.galleries didn't want to be online, and still don't, not the fancy.ones. that's not how they sell. i wrote some software to generate.web sites for galleries, and robert wrote some to resize images and.set up an http server to serve the pages. then we tried to sign up.galleries. to call this a difficult sale would be an understatement..it was difficult to give away. a few galleries let us make sites.for them for free, but none paid us.then some online stores started to appear, and i realized that.except for the order buttons they were identical to the sites we'd.been generating for galleries. this impressive-sounding thing called.an "internet storefront" was something we already knew how to build.so in the summer of 1995, after i submitted the camera-ready copy.of ansi common lisp to the publishers, we started trying to write.software to build online stores. at first this was going to be.normal desktop software, which in those days meant windows software..that was an alarming prospect, because neither of us knew how to.write windows software or wanted to learn. we lived in the unix.world. but we decided we'd at least try writing a prototype store.builder on unix. robert wrote a shopping cart, and i wrote a new.site generator for stores  in lisp, of course.we were working out of robert's apartment in cambridge. his roommate.was away for big chunks of time, during which i got to sleep in his.room. for some reason there was no bed frame or sheets, just a.mattress on the floor. one morning as i was lying on this mattress.i had an idea that made me sit up like a capital l. what if we ran.the software on the server, and let users control it by clicking.on links? then we'd never have to write anything to run on users'.computers. we could generate the sites on the same server we'd serve.them from. users wouldn't need anything more than a browser.this kind of software, known as a web app, is common now, but at.the time it wasn't clear that it was even possible. to find out,.we decided to try making a version of our store builder that you.could control through the browser. a couple days later, on august.12, we had one that worked. the ui was horrible, but it proved you.could build a whole store through the browser, without any client.software or typing anything into the command line on the server.now we felt like we were really onto something. i had visions of a.whole new generation of software working this way. you wouldn't.need versions, or ports, or any of that crap. at interleaf there.had been a whole group called release engineering that seemed to.be at least as big as the group that actually wrote the software..now you could just update the software right on the server.we started a new company we called viaweb, after the fact that our.software worked via the web, and we got $10,000 in seed funding.from idelle's husband julian. in return for that and doing the.initial legal work and giving us business advice, we gave him 10%.of the company. ten years later this deal became the model for y.combinator's. we knew founders needed something like this, because.we'd needed it ourselves.at this stage i had a negative net worth, because the thousand.dollars or so i had in the bank was more than counterbalanced by.what i owed the government in taxes. (had i diligently set aside.the proper proportion of the money i'd made consulting for interleaf?.no, i had not.) so although robert had his graduate student stipend,.i needed that seed funding to live on.we originally hoped to launch in september, but we got more ambitious.about the software as we worked on it. eventually we managed to.build a wysiwyg site builder, in the sense that as you were creating.pages, they looked exactly like the static ones that would be.generated later, except that instead of leading to static pages,.the links all referred to closures stored in a hash table on the.server.it helped to have studied art, because the main goal of an online.store builder is to make users look legit, and the key to looking.legit is high production values. if you get page layouts and fonts.and colors right, you can make a guy running a store out of his.bedroom look more legit than a big company.(if you're curious why my site looks so old-fashioned, it's because.it's still made with this software. it may look clunky today, but.in 1996 it was the last word in slick.)in september, robert rebelled. "we've been working on this for a.month," he said, "and it's still not done." this is funny in.retrospect, because he would still be working on it almost 3 years.later. but i decided it might be prudent to recruit more programmers,.and i asked robert who else in grad school with him was really good..he recommended trevor blackwell, which surprised me at first, because.at that point i knew trevor mainly for his plan to reduce everything.in his life to a stack of notecards, which he carried around with.him. but rtm was right, as usual. trevor turned out to be a.frighteningly effective hacker.it was a lot of fun working with robert and trevor. they're the two.most independent-minded people.i know, and in completely different.ways. if you could see inside rtm's brain it would look like a.colonial new england church, and if you could see inside trevor's.it would look like the worst excesses of austrian rococo.we opened for business, with 6 stores, in january 1996. it was just.as well we waited a few months, because although we worried we were.late, we were actually almost fatally early. there was a lot of.talk in the press then about ecommerce, but not many people actually.wanted online stores..[8]there were three main parts to the software: the editor, which.people used to build sites and which i wrote, the shopping cart,.which robert wrote, and the manager, which kept track of orders and.statistics, and which trevor wrote. in its time, the editor was one.of the best general-purpose site builders. i kept the code tight.and didn't have to integrate with any other software except robert's.and trevor's, so it was quite fun to work on. if all i'd had to do.was work on this software, the next 3 years would have been the.easiest of my life. unfortunately i had to do a lot more, all of.it stuff i was worse at than programming, and the next 3 years were.instead the most stressful.there were a lot of startups making ecommerce software in the second.half of the 90s. we were determined to be the microsoft word, not.the interleaf. which meant being easy to use and inexpensive. it.was lucky for us that we were poor, because that caused us to make.viaweb even more inexpensive than we realized. we charged $100 a.month for a small store and $300 a month for a big one. this low.price was a big attraction, and a constant thorn in the sides of.competitors, but it wasn't because of some clever insight that we.set the price low. we had no idea what businesses paid for things..$300 a month seemed like a lot of money to us.we did a lot of things right by accident like that. for example,.we did what's now called "doing things that.don't scale," although.at the time we would have described it as "being so lame that we're.driven to the most desperate measures to get users." the most common.of which was building stores for them. this seemed particularly.humiliating, since the whole raison d'etre of our software was that.people could use it to make their own stores. but anything to get.users.we learned a lot more about retail than we wanted to know. for.example, that if you could only have a small image of a man's shirt.(and all images were small then by present standards), it was better.to have a closeup of the collar than a picture of the whole shirt..the reason i remember learning this was that it meant i had to.rescan about 30 images of men's shirts. my first set of scans were.so beautiful too.though this felt wrong, it was exactly the right thing to be doing..building stores for users taught us about retail, and about how it.felt to use our software. i was initially both mystified and repelled.by "business" and thought we needed a "business person" to be in.charge of it, but once we started to get users, i was converted,.in much the same way i was converted to.fatherhood once i had kids..whatever users wanted, i was all theirs. maybe one day we'd have.so many users that i couldn't scan their images for them, but in.the meantime there was nothing more important to do.another thing i didn't get at the time is that.growth rate is the.ultimate test of a startup. our growth rate was fine. we had about.70 stores at the end of 1996 and about 500 at the end of 1997. i.mistakenly thought the thing that mattered was the absolute number.of users. and that is the thing that matters in the sense that.that's how much money you're making, and if you're not making enough,.you might go out of business. but in the long term the growth rate.takes care of the absolute number. if we'd been a startup i was.advising at y combinator, i would have said: stop being so stressed.out, because you're doing fine. you're growing 7x a year. just don't.hire too many more people and you'll soon be profitable, and then.you'll control your own destiny.alas i hired lots more people, partly because our investors wanted.me to, and partly because that's what startups did during the.internet bubble. a company with just a handful of employees would.have seemed amateurish. so we didn't reach breakeven until about.when yahoo bought us in the summer of 1998. which in turn meant we.were at the mercy of investors for the entire life of the company..and since both we and our investors were noobs at startups, the.result was a mess even by startup standards.it was a huge relief when yahoo bought us. in principle our viaweb.stock was valuable. it was a share in a business that was profitable.and growing rapidly. but it didn't feel very valuable to me; i had.no idea how to value a business, but i was all too keenly aware of.the near-death experiences we seemed to have every few months. nor.had i changed my grad student lifestyle significantly since we.started. so when yahoo bought us it felt like going from rags to.riches. since we were going to california, i bought a car, a yellow.1998 vw gti. i remember thinking that its leather seats alone were.by far the most luxurious thing i owned.the next year, from the summer of 1998 to the summer of 1999, must.have been the least productive of my life. i didn't realize it at.the time, but i was worn out from the effort and stress of running.viaweb. for a while after i got to california i tried to continue.my usual m.o. of programming till 3 in the morning, but fatigue.combined with yahoo's prematurely aged.culture and grim cube farm.in santa clara gradually dragged me down. after a few months it.felt disconcertingly like working at interleaf.yahoo had given us a lot of options when they bought us. at the.time i thought yahoo was so overvalued that they'd never be worth.anything, but to my astonishment the stock went up 5x in the next.year. i hung on till the first chunk of options vested, then in the.summer of 1999 i left. it had been so long since i'd painted anything.that i'd half forgotten why i was doing this. my brain had been.entirely full of software and men's shirts for 4 years. but i had.done this to get rich so i could paint, i reminded myself, and now.i was rich, so i should go paint.when i said i was leaving, my boss at yahoo had a long conversation.with me about my plans. i told him all about the kinds of pictures.i wanted to paint. at the time i was touched that he took such an.interest in me. now i realize it was because he thought i was lying..my options at that point were worth about $2 million a month. if i.was leaving that kind of money on the table, it could only be to.go and start some new startup, and if i did, i might take people.with me. this was the height of the internet bubble, and yahoo was.ground zero of it. my boss was at that moment a billionaire. leaving.then to start a new startup must have seemed to him an insanely,.and yet also plausibly, ambitious plan.but i really was quitting to paint, and i started immediately..there was no time to lose. i'd already burned 4 years getting rich..now when i talk to founders who are leaving after selling their.companies, my advice is always the same: take a vacation. that's.what i should have done, just gone off somewhere and done nothing.for a month or two, but the idea never occurred to me.so i tried to paint, but i just didn't seem to have any energy or.ambition. part of the problem was that i didn't know many people.in california. i'd compounded this problem by buying a house up in.the santa cruz mountains, with a beautiful view but miles from.anywhere. i stuck it out for a few more months, then in desperation.i went back to new york, where unless you understand about rent.control you'll be surprised to hear i still had my apartment, sealed.up like a tomb of my old life. idelle was in new york at least, and.there were other people trying to paint there, even though i didn't.know any of them.when i got back to new york i resumed my old life, except now i was.rich. it was as weird as it sounds. i resumed all my old patterns,.except now there were doors where there hadn't been. now when i was.tired of walking, all i had to do was raise my hand, and (unless.it was raining) a taxi would stop to pick me up. now when i walked.past charming little restaurants i could go in and order lunch. it.was exciting for a while. painting started to go better. i experimented.with a new kind of still life where i'd paint one painting in the.old way, then photograph it and print it, blown up, on canvas, and.then use that as the underpainting for a second still life, painted.from the same objects (which hopefully hadn't rotted yet).meanwhile i looked for an apartment to buy. now i could actually.choose what neighborhood to live in. where, i asked myself and.various real estate agents, is the cambridge of new york? aided by.occasional visits to actual cambridge, i gradually realized there.wasn't one. huh.around this time, in the spring of 2000, i had an idea. it was clear.from our experience with viaweb that web apps were the future. why.not build a web app for making web apps? why not let people edit.code on our server through the browser, and then host the resulting.applications for them?.[9].you could run all sorts of services.on the servers that these applications could use just by making an.api call: making and receiving phone calls, manipulating images,.taking credit card payments, etc.i got so excited about this idea that i couldn't think about anything.else. it seemed obvious that this was the future. i didn't particularly.want to start another company, but it was clear that this idea would.have to be embodied as one, so i decided to move to cambridge and.start it. i hoped to lure robert into working on it with me, but.there i ran into a hitch. robert was now a postdoc at mit, and.though he'd made a lot of money the last time i'd lured him into.working on one of my schemes, it had also been a huge time sink..so while he agreed that it sounded like a plausible idea, he firmly.refused to work on it.hmph. well, i'd do it myself then. i recruited dan giffin, who had.worked for viaweb, and two undergrads who wanted summer jobs, and.we got to work trying to build what it's now clear is about twenty.companies and several open source projects worth of software. the.language for defining applications would of course be a dialect of.lisp. but i wasn't so naive as to assume i could spring an overt.lisp on a general audience; we'd hide the parentheses, like dylan.did.by then there was a name for the kind of company viaweb was, an."application service provider," or asp. this name didn't last long.before it was replaced by "software as a service," but it was current.for long enough that i named this new company after it: it was going.to be called aspra.i started working on the application builder, dan worked on network.infrastructure, and the two undergrads worked on the first two.services (images and phone calls). but about halfway through the.summer i realized i really didn't want to run a company  especially.not a big one, which it was looking like this would have to be. i'd.only started viaweb because i needed the money. now that i didn't.need money anymore, why was i doing this? if this vision had to be.realized as a company, then screw the vision. i'd build a subset.that could be done as an open source project.much to my surprise, the time i spent working on this stuff was not.wasted after all. after we started y combinator, i would often.encounter startups working on parts of this new architecture, and.it was very useful to have spent so much time thinking about it and.even trying to write some of it.the subset i would build as an open source project was the new lisp,.whose parentheses i now wouldn't even have to hide. a lot of lisp.hackers dream of building a new lisp, partly because one of the.distinctive features of the language is that it has dialects, and.partly, i think, because we have in our minds a platonic form of.lisp that all existing dialects fall short of. i certainly did. so.at the end of the summer dan and i switched to working on this new.dialect of lisp, which i called arc, in a house i bought in cambridge.the following spring, lightning struck. i was invited to give a.talk at a lisp conference, so i gave one about how we'd used lisp.at viaweb. afterward i put a postscript file of this talk online,.on paulgraham.com, which i'd created years before using viaweb but.had never used for anything. in one day it got 30,000 page views..what on earth had happened? the referring urls showed that someone.had posted it on slashdot..[10]wow, i thought, there's an audience. if i write something and put.it on the web, anyone can read it. that may seem obvious now, but.it was surprising then. in the print era there was a narrow channel.to readers, guarded by fierce monsters known as editors. the only.way to get an audience for anything you wrote was to get it published.as a book, or in a newspaper or magazine. now anyone could publish.anything.this had been possible in principle since 1993, but not many people.had realized it yet. i had been intimately involved with building.the infrastructure of the web for most of that time, and a writer.as well, and it had taken me 8 years to realize it. even then it.took me several years to understand the implications. it meant there.would be a whole new generation of.essays..[11]in the print era, the channel for publishing essays had been.vanishingly small. except for a few officially anointed thinkers.who went to the right parties in new york, the only people allowed.to publish essays were specialists writing about their specialties..there were so many essays that had never been written, because there.had been no way to publish them. now they could be, and i was going.to write them..[12]i've worked on several different things, but to the extent there.was a turning point where i figured out what to work on, it was.when i started publishing essays online. from then on i knew that.whatever else i did, i'd always write essays too.i knew that online essays would be a.marginal medium at first..socially they'd seem more like rants posted by nutjobs on their.geocities sites than the genteel and beautifully typeset compositions.published in the new yorker. but by this point i knew enough to.find that encouraging instead of discouraging.one of the most conspicuous patterns i've noticed in my life is how.well it has worked, for me at least, to work on things that weren't.prestigious. still life has always been the least prestigious form.of painting. viaweb and y combinator both seemed lame when we started.them. i still get the glassy eye from strangers when they ask what.i'm writing, and i explain that it's an essay i'm going to publish.on my web site. even lisp, though prestigious intellectually in.something like the way latin is, also seems about as hip.it's not that unprestigious types of work are good per se. but when.you find yourself drawn to some kind of work despite its current.lack of prestige, it's a sign both that there's something real to.be discovered there, and that you have the right kind of motives..impure motives are a big danger for the ambitious. if anything is.going to lead you astray, it will be the desire to impress people..so while working on things that aren't prestigious doesn't guarantee.you're on the right track, it at least guarantees you're not on the.most common type of wrong one.over the next several years i wrote lots of essays about all kinds.of different topics. o'reilly reprinted a collection of them as a.book, called hackers & painters after one of the essays in it. i.also worked on spam filters, and did some more painting. i used to.have dinners for a group of friends every thursday night, which.taught me how to cook for groups. and i bought another building in.cambridge, a former candy factory (and later, twas said, porn.studio), to use as an office.one night in october 2003 there was a big party at my house. it was.a clever idea of my friend maria daniels, who was one of the thursday.diners. three separate hosts would all invite their friends to one.party. so for every guest, two thirds of the other guests would be.people they didn't know but would probably like. one of the guests.was someone i didn't know but would turn out to like a lot: a woman.called jessica livingston. a couple days later i asked her out.jessica was in charge of marketing at a boston investment bank..this bank thought it understood startups, but over the next year,.as she met friends of mine from the startup world, she was surprised.how different reality was. and how colorful their stories were. so.she decided to compile a book of.interviews with startup founders.when the bank had financial problems and she had to fire half her.staff, she started looking for a new job. in early 2005 she interviewed.for a marketing job at a boston vc firm. it took them weeks to make.up their minds, and during this time i started telling her about.all the things that needed to be fixed about venture capital. they.should make a larger number of smaller investments instead of a.handful of giant ones, they should be funding younger, more technical.founders instead of mbas, they should let the founders remain as.ceo, and so on.one of my tricks for writing essays had always been to give talks..the prospect of having to stand up in front of a group of people.and tell them something that won't waste their time is a great.spur to the imagination. when the harvard computer society, the.undergrad computer club, asked me to give a talk, i decided i would.tell them how to start a startup. maybe they'd be able to avoid the.worst of the mistakes we'd made.so i gave this talk, in the course of which i told them that the.best sources of seed funding were successful startup founders,.because then they'd be sources of advice too. whereupon it seemed.they were all looking expectantly at me. horrified at the prospect.of having my inbox flooded by business plans (if i'd only known),.i blurted out "but not me!" and went on with the talk. but afterward.it occurred to me that i should really stop procrastinating about.angel investing. i'd been meaning to since yahoo bought us, and now.it was 7 years later and i still hadn't done one angel investment.meanwhile i had been scheming with robert and trevor about projects.we could work on together. i missed working with them, and it seemed.like there had to be something we could collaborate on.as jessica and i were walking home from dinner on march 11, at the.corner of garden and walker streets, these three threads converged..screw the vcs who were taking so long to make up their minds. we'd.start our own investment firm and actually implement the ideas we'd.been talking about. i'd fund it, and jessica could quit her job and.work for it, and we'd get robert and trevor as partners too..[13]once again, ignorance worked in our favor. we had no idea how to.be angel investors, and in boston in 2005 there were no ron conways.to learn from. so we just made what seemed like the obvious choices,.and some of the things we did turned out to be novel.there are multiple components to y combinator, and we didn't figure.them all out at once. the part we got first was to be an angel firm..in those days, those two words didn't go together. there were vc.firms, which were organized companies with people whose job it was.to make investments, but they only did big, million dollar investments..and there were angels, who did smaller investments, but these were.individuals who were usually focused on other things and made.investments on the side. and neither of them helped founders enough.in the beginning. we knew how helpless founders were in some respects,.because we remembered how helpless we'd been. for example, one thing.julian had done for us that seemed to us like magic was to get us.set up as a company. we were fine writing fairly difficult software,.but actually getting incorporated, with bylaws and stock and all.that stuff, how on earth did you do that? our plan was not only to.make seed investments, but to do for startups everything julian had.done for us.yc was not organized as a fund. it was cheap enough to run that we.funded it with our own money. that went right by 99% of readers,.but professional investors are thinking "wow, that means they got.all the returns." but once again, this was not due to any particular.insight on our part. we didn't know how vc firms were organized..it never occurred to us to try to raise a fund, and if it had, we.wouldn't have known where to start..[14]the most distinctive thing about yc is the batch model: to fund a.bunch of startups all at once, twice a year, and then to spend three.months focusing intensively on trying to help them. that part we.discovered by accident, not merely implicitly but explicitly due.to our ignorance about investing. we needed to get experience as.investors. what better way, we thought, than to fund a whole bunch.of startups at once? we knew undergrads got temporary jobs at tech.companies during the summer. why not organize a summer program where.they'd start startups instead? we wouldn't feel guilty for being.in a sense fake investors, because they would in a similar sense.be fake founders. so while we probably wouldn't make much money out.of it, we'd at least get to practice being investors on them, and.they for their part would probably have a more interesting summer.than they would working at microsoft.we'd use the building i owned in cambridge as our headquarters..we'd all have dinner there once a week  on tuesdays, since i was.already cooking for the thursday diners on thursdays  and after.dinner we'd bring in experts on startups to give talks.we knew undergrads were deciding then about summer jobs, so in a.matter of days we cooked up something we called the summer founders.program, and i posted an.announcement.on my site, inviting undergrads.to apply. i had never imagined that writing essays would be a way.to get "deal flow," as investors call it, but it turned out to be.the perfect source..[15].we got 225 applications for the summer.founders program, and we were surprised to find that a lot of them.were from people who'd already graduated, or were about to that.spring. already this sfp thing was starting to feel more serious.than we'd intended.we invited about 20 of the 225 groups to interview in person, and.from those we picked 8 to fund. they were an impressive group. that.first batch included reddit, justin kan and emmett shear, who went.on to found twitch, aaron swartz, who had already helped write the.rss spec and would a few years later become a martyr for open access,.and sam altman, who would later become the second president of yc..i don't think it was entirely luck that the first batch was so good..you had to be pretty bold to sign up for a weird thing like the.summer founders program instead of a summer job at a legit place.like microsoft or goldman sachs.the deal for startups was based on a combination of the deal we did.with julian ($10k for 10%) and what robert said mit grad students.got for the summer ($6k). we invested $6k per founder, which in the.typical two-founder case was $12k, in return for 6%. that had to.be fair, because it was twice as good as the deal we ourselves had.taken. plus that first summer, which was really hot, jessica brought.the founders free air conditioners..[16]fairly quickly i realized that we had stumbled upon the way to scale.startup funding. funding startups in batches was more convenient.for us, because it meant we could do things for a lot of startups.at once, but being part of a batch was better for the startups too..it solved one of the biggest problems faced by founders: the.isolation. now you not only had colleagues, but colleagues who.understood the problems you were facing and could tell you how they.were solving them.as yc grew, we started to notice other advantages of scale. the.alumni became a tight community, dedicated to helping one another,.and especially the current batch, whose shoes they remembered being.in. we also noticed that the startups were becoming one another's.customers. we used to refer jokingly to the "yc gdp," but as yc.grows this becomes less and less of a joke. now lots of startups.get their initial set of customers almost entirely from among their.batchmates.i had not originally intended yc to be a full-time job. i was going.to do three things: hack, write essays, and work on yc. as yc grew,.and i grew more excited about it, it started to take up a lot more.than a third of my attention. but for the first few years i was.still able to work on other things.in the summer of 2006, robert and i started working on a new version.of arc. this one was reasonably fast, because it was compiled into.scheme. to test this new arc, i wrote hacker news in it. it was.originally meant to be a news aggregator for startup founders and.was called startup news, but after a few months i got tired of.reading about nothing but startups. plus it wasn't startup founders.we wanted to reach. it was future startup founders. so i changed.the name to hacker news and the topic to whatever engaged one's.intellectual curiosity.hn was no doubt good for yc, but it was also by far the biggest.source of stress for me. if all i'd had to do was select and help.founders, life would have been so easy. and that implies that hn.was a mistake. surely the biggest source of stress in one's work.should at least be something close to the core of the work. whereas.i was like someone who was in pain while running a marathon not.from the exertion of running, but because i had a blister from an.ill-fitting shoe. when i was dealing with some urgent problem during.yc, there was about a 60% chance it had to do with hn, and a 40%.chance it had do with everything else combined..[17]as well as hn, i wrote all of yc's internal software in arc. but.while i continued to work a good deal in arc, i gradually stopped.working on arc, partly because i didn't have time to, and partly.because it was a lot less attractive to mess around with the language.now that we had all this infrastructure depending on it. so now my.three projects were reduced to two: writing essays and working on.yc.yc was different from other kinds of work i've done. instead of.deciding for myself what to work on, the problems came to me. every.6 months there was a new batch of startups, and their problems,.whatever they were, became our problems. it was very engaging work,.because their problems were quite varied, and the good founders.were very effective. if you were trying to learn the most you could.about startups in the shortest possible time, you couldn't have.picked a better way to do it.there were parts of the job i didn't like. disputes between cofounders,.figuring out when people were lying to us, fighting with people who.maltreated the startups, and so on. but i worked hard even at the.parts i didn't like. i was haunted by something kevin hale once.said about companies: "no one works harder than the boss." he meant.it both descriptively and prescriptively, and it was the second.part that scared me. i wanted yc to be good, so if how hard i worked.set the upper bound on how hard everyone else worked, i'd better.work very hard.one day in 2010, when he was visiting california for interviews,.robert morris did something astonishing: he offered me unsolicited.advice. i can only remember him doing that once before. one day at.viaweb, when i was bent over double from a kidney stone, he suggested.that it would be a good idea for him to take me to the hospital..that was what it took for rtm to offer unsolicited advice. so i.remember his exact words very clearly. "you know," he said, "you.should make sure y combinator isn't the last cool thing you do."at the time i didn't understand what he meant, but gradually it.dawned on me that he was saying i should quit. this seemed strange.advice, because yc was doing great. but if there was one thing rarer.than rtm offering advice, it was rtm being wrong. so this set me.thinking. it was true that on my current trajectory, yc would be.the last thing i did, because it was only taking up more of my.attention. it had already eaten arc, and was in the process of.eating essays too. either yc was my life's work or i'd have to leave.eventually. and it wasn't, so i would.in the summer of 2012 my mother had a stroke, and the cause turned.out to be a blood clot caused by colon cancer. the stroke destroyed.her balance, and she was put in a nursing home, but she really.wanted to get out of it and back to her house, and my sister and i.were determined to help her do it. i used to fly up to oregon to.visit her regularly, and i had a lot of time to think on those.flights. on one of them i realized i was ready to hand yc over to.someone else.i asked jessica if she wanted to be president, but she didn't, so.we decided we'd try to recruit sam altman. we talked to robert and.trevor and we agreed to make it a complete changing of the guard..up till that point yc had been controlled by the original llc we.four had started. but we wanted yc to last for a long time, and to.do that it couldn't be controlled by the founders. so if sam said.yes, we'd let him reorganize yc. robert and i would retire, and.jessica and trevor would become ordinary partners.when we asked sam if he wanted to be president of yc, initially he.said no. he wanted to start a startup to make nuclear reactors..but i kept at it, and in october 2013 he finally agreed. we decided.he'd take over starting with the winter 2014 batch. for the rest.of 2013 i left running yc more and more to sam, partly so he could.learn the job, and partly because i was focused on my mother, whose.cancer had returned.she died on january 15, 2014. we knew this was coming, but it was.still hard when it did.i kept working on yc till march, to help get that batch of startups.through demo day, then i checked out pretty completely. (i still.talk to alumni and to new startups working on things i'm interested.in, but that only takes a few hours a week.)what should i do next? rtm's advice hadn't included anything about.that. i wanted to do something completely different, so i decided.i'd paint. i wanted to see how good i could get if i really focused.on it. so the day after i stopped working on yc, i started painting..i was rusty and it took a while to get back into shape, but it was.at least completely engaging..[18]i spent most of the rest of 2014 painting. i'd never been able to.work so uninterruptedly before, and i got to be better than i had.been. not good enough, but better. then in november, right in the.middle of a painting, i ran out of steam. up till that point i'd.always been curious to see how the painting i was working on would.turn out, but suddenly finishing this one seemed like a chore. so.i stopped working on it and cleaned my brushes and haven't painted.since. so far anyway.i realize that sounds rather wimpy. but attention is a zero sum.game. if you can choose what to work on, and you choose a project.that's not the best one (or at least a good one) for you, then it's.getting in the way of another project that is. and at 50 there was.some opportunity cost to screwing around.i started writing essays again, and wrote a bunch of new ones over.the next few months. i even wrote a couple that.weren't about.startups. then in march 2015 i started working on lisp again.the distinctive thing about lisp is that its core is a language.defined by writing an interpreter in itself. it wasn't originally.intended as a programming language in the ordinary sense. it was.meant to be a formal model of computation, an alternative to the.turing machine. if you want to write an interpreter for a language.in itself, what's the minimum set of predefined operators you need?.the lisp that john mccarthy invented, or more accurately discovered,.is an answer to that question..[19]mccarthy didn't realize this lisp could even be used to program.computers till his grad student steve russell suggested it. russell.translated mccarthy's interpreter into ibm 704 machine language,.and from that point lisp started also to be a programming language.in the ordinary sense. but its origins as a model of computation.gave it a power and elegance that other languages couldn't match..it was this that attracted me in college, though i didn't understand.why at the time.mccarthy's 1960 lisp did nothing more than interpret lisp expressions..it was missing a lot of things you'd want in a programming language..so these had to be added, and when they were, they weren't defined.using mccarthy's original axiomatic approach. that wouldn't have.been feasible at the time. mccarthy tested his interpreter by.hand-simulating the execution of programs. but it was already getting.close to the limit of interpreters you could test that way  indeed,.there was a bug in it that mccarthy had overlooked. to test a more.complicated interpreter, you'd have had to run it, and computers.then weren't powerful enough.now they are, though. now you could continue using mccarthy's.axiomatic approach till you'd defined a complete programming language..and as long as every change you made to mccarthy's lisp was a.discoveredness-preserving transformation, you could, in principle,.end up with a complete language that had this quality. harder to.do than to talk about, of course, but if it was possible in principle,.why not try? so i decided to take a shot at it. it took 4 years,.from march 26, 2015 to october 12, 2019. it was fortunate that i.had a precisely defined goal, or it would have been hard to keep.at it for so long.i wrote this new lisp, called bel,.in itself in arc. that may sound.like a contradiction, but it's an indication of the sort of trickery.i had to engage in to make this work. by means of an egregious.collection of hacks i managed to make something close enough to an.interpreter written in itself that could actually run. not fast,.but fast enough to test.i had to ban myself from writing essays during most of this time,.or i'd never have finished. in late 2015 i spent 3 months writing.essays, and when i went back to working on bel i could barely.understand the code. not so much because it was badly written as.because the problem is so convoluted. when you're working on an.interpreter written in itself, it's hard to keep track of what's.happening at what level, and errors can be practically encrypted.by the time you get them.so i said no more essays till bel was done. but i told few people.about bel while i was working on it. so for years it must have.seemed that i was doing nothing, when in fact i was working harder.than i'd ever worked on anything. occasionally after wrestling for.hours with some gruesome bug i'd check twitter or hn and see someone.asking "does paul graham still code?"working on bel was hard but satisfying. i worked on it so intensively.that at any given time i had a decent chunk of the code in my head.and could write more there. i remember taking the boys to the.coast on a sunny day in 2015 and figuring out how to deal with some.problem involving continuations while i watched them play in the.tide pools. it felt like i was doing life right. i remember that.because i was slightly dismayed at how novel it felt. the good news.is that i had more moments like this over the next few years.in the summer of 2016 we moved to england. we wanted our kids to.see what it was like living in another country, and since i was a.british citizen by birth, that seemed the obvious choice. we only.meant to stay for a year, but we liked it so much that we still.live there. so most of bel was written in england.in the fall of 2019, bel was finally finished. like mccarthy's.original lisp, it's a spec rather than an implementation, although.like mccarthy's lisp it's a spec expressed as code.now that i could write essays again, i wrote a bunch about topics.i'd had stacked up. i kept writing essays through 2020, but i also.started to think about other things i could work on. how should i.choose what to do? well, how had i chosen what to work on in the.past? i wrote an essay for myself to answer that question, and i.was surprised how long and messy the answer turned out to be. if.this surprised me, who'd lived it, then i thought perhaps it would.be interesting to other people, and encouraging to those with.similarly messy lives. so i wrote a more detailed version for others.to read, and this is the last sentence of it..notes[1].my experience skipped a step in the evolution of computers:.time-sharing machines with interactive oses. i went straight from.batch processing to microcomputers, which made microcomputers seem.all the more exciting.[2].italian words for abstract concepts can nearly always be.predicted from their english cognates (except for occasional traps.like polluzione). it's the everyday words that differ. so if you.string together a lot of abstract concepts with a few simple verbs,.you can make a little italian go a long way.[3].i lived at piazza san felice 4, so my walk to the accademia.went straight down the spine of old florence: past the pitti, across.the bridge, past orsanmichele, between the duomo and the baptistery,.and then up via ricasoli to piazza san marco. i saw florence at.street level in every possible condition, from empty dark winter.evenings to sweltering summer days when the streets were packed with.tourists.[4].you can of course paint people like still lives if you want.to, and they're willing. that sort of portrait is arguably the apex.of still life painting, though the long sitting does tend to produce.pained expressions in the sitters.[5].interleaf was one of many companies that had smart people and.built impressive technology, and yet got crushed by moore's law..in the 1990s the exponential growth in the power of commodity (i.e..intel) processors rolled up high-end, special-purpose hardware and.software companies like a bulldozer.[6].the signature style seekers at risd weren't specifically.mercenary. in the art world, money and coolness are tightly coupled..anything expensive comes to be seen as cool, and anything seen as.cool will soon become equally expensive.[7].technically the apartment wasn't rent-controlled but.rent-stabilized, but this is a refinement only new yorkers would.know or care about. the point is that it was really cheap, less.than half market price.[8].most software you can launch as soon as it's done. but when.the software is an online store builder and you're hosting the.stores, if you don't have any users yet, that fact will be painfully.obvious. so before we could launch publicly we had to launch.privately, in the sense of recruiting an initial set of users and.making sure they had decent-looking stores.[9].we'd had a code editor in viaweb for users to define their.own page styles. they didn't know it, but they were editing lisp.expressions underneath. but this wasn't an app editor, because the.code ran when the merchants' sites were generated, not when shoppers.visited them.[10].this was the first instance of what is now a familiar experience,.and so was what happened next, when i read the comments and found.they were full of angry people. how could i claim that lisp was.better than other languages? weren't they all turing complete?.people who see the responses to essays i write sometimes tell me.how sorry they feel for me, but i'm not exaggerating when i reply.that it has always been like this, since the very beginning. it.comes with the territory. an essay must tell readers things they.don't already know, and some.people dislike being told such things.[11].people put plenty of stuff on the internet in the 90s of.course, but putting something online is not the same as publishing.it online. publishing online means you treat the online version as.the (or at least a) primary version.[12].there is a general lesson here that our experience with y.combinator also teaches: customs continue to constrain you long.after the restrictions that caused them have disappeared. customary.vc practice had once, like the customs about publishing essays,.been based on real constraints. startups had once been much more.expensive to start, and proportionally rare. now they could be cheap.and common, but the vcs' customs still reflected the old world,.just as customs about writing essays still reflected the constraints.of the print era.which in turn implies that people who are independent-minded (i.e..less influenced by custom) will have an advantage in fields affected.by rapid change (where customs are more likely to be obsolete).here's an interesting point, though: you can't always predict which.fields will be affected by rapid change. obviously software and.venture capital will be, but who would have predicted that essay.writing would be?[13].y combinator was not the original name. at first we were.called cambridge seed. but we didn't want a regional name, in case.someone copied us in silicon valley, so we renamed ourselves after.one of the coolest tricks in the lambda calculus, the y combinator.i picked orange as our color partly because it's the warmest, and.partly because no vc used it. in 2005 all the vcs used staid colors.like maroon, navy blue, and forest green, because they were trying.to appeal to lps, not founders. the yc logo itself is an inside.joke: the viaweb logo had been a white v on a red circle, so i made.the yc logo a white y on an orange square.[14].yc did become a fund for a couple years starting in 2009,.because it was getting so big i could no longer afford to fund it.personally. but after heroku got bought we had enough money to go.back to being self-funded.[15].i've never liked the term "deal flow," because it implies.that the number of new startups at any given time is fixed. this.is not only false, but it's the purpose of yc to falsify it, by.causing startups to be founded that would not otherwise have existed.[16].she reports that they were all different shapes and sizes,.because there was a run on air conditioners and she had to get.whatever she could, but that they were all heavier than she could.carry now.[17].another problem with hn was a bizarre edge case that occurs.when you both write essays and run a forum. when you run a forum,.you're assumed to see if not every conversation, at least every.conversation involving you. and when you write essays, people post.highly imaginative misinterpretations of them on forums. individually.these two phenomena are tedious but bearable, but the combination.is disastrous. you actually have to respond to the misinterpretations,.because the assumption that you're present in the conversation means.that not responding to any sufficiently upvoted misinterpretation.reads as a tacit admission that it's correct. but that in turn.encourages more; anyone who wants to pick a fight with you senses.that now is their chance.[18].the worst thing about leaving yc was not working with jessica.anymore. we'd been working on yc almost the whole time we'd known.each other, and we'd neither tried nor wanted to separate it from.our personal lives, so leaving was like pulling up a deeply rooted.tree.[19].one way to get more precise about the concept of invented vs.discovered is to talk about space aliens. any sufficiently advanced.alien civilization would certainly know about the pythagorean.theorem, for example. i believe, though with less certainty, that.they would also know about the lisp in mccarthy's 1960 paper.but if so there's no reason to suppose that this is the limit of.the language that might be known to them. presumably aliens need.numbers and errors and i/o too. so it seems likely there exists at.least one path out of mccarthy's lisp along which discoveredness.is preserved.thanks to trevor blackwell, john collison, patrick collison, daniel.gackle, ralph hazell, jessica livingston, robert morris, and harj.taggar for reading drafts of this.<eot><sot>earnestness.december 2020
jessica and i have certain words that have special significance.when we're talking about startups. the highest compliment we can.pay to founders is to describe them as "earnest." this is not by.itself a guarantee of success. you could be earnest but incapable..but when founders are both formidable (another of our words) and.earnest, they're as close to unstoppable as you get.earnestness sounds like a boring, even victorian virtue. it seems.a bit of an anachronism that people in silicon valley would care.about it. why does this matter so much?when you call someone earnest, you're making a statement about their.motives. it means both that they're doing something for the right.reasons, and that they're trying as hard as they can. if we imagine.motives as vectors, it means both the direction and the magnitude.are right. though these are of course related: when people are doing.something for the right reasons, they try harder..[1]the reason motives matter so much in silicon valley is that so many.people there have the wrong ones. starting a successful startup.makes you rich and famous. so a lot of the people trying to start.them are doing it for those reasons. instead of what? instead of.interest in the problem for its own sake. that is the root of.earnestness..[2]it's also the hallmark of a nerd. indeed, when people describe.themselves as "x nerds," what they mean is that they're interested.in x for its own sake, and not because it's cool to be interested.in x, or because of what they can get from it. they're saying they.care so much about x that they're willing to sacrifice seeming cool.for its sake.a genuine interest.in something is a very powerful motivator  for.some people, the most powerful motivator of all..[3].which is why.it's what jessica and i look for in founders. but as well as being.a source of strength, it's also a source of vulnerability. caring.constrains you. the earnest can't easily reply in kind to mocking.banter, or put on a cool facade of nihil admirari. they care too.much. they are doomed to be the straight man. that's a real.disadvantage in your.teenage years,.when mocking banter and nihil.admirari often have the upper hand. but it becomes an advantage.later.it's a commonplace now that the kids who were.nerds in high school.become the cool kids' bosses later on. but people misunderstand why.this happens. it's not just because the nerds are smarter, but also.because they're more earnest. when the problems get harder than the.fake ones you're given in high school, caring about them starts to.matter.does it always matter? do the earnest always win? not always. it.probably doesn't matter much in politics, or in crime, or in certain.types of business that are similar to crime, like gambling, personal.injury law, patent trolling, and so on. nor does it matter in.academic fields at the more.bogus end of the spectrum. and though.i don't know enough to say for sure, it may not matter in some kinds.of humor: it may be possible to be completely cynical and still be.very funny..[4]looking at the list of fields i mentioned, there's an obvious.pattern. except possibly for humor, these are all types of work i'd.avoid like the plague. so that could be a useful heuristic for.deciding which fields to work in: how much does earnestness matter?.which can in turn presumably be inferred from the prevalence of.nerds at the top.along with "nerd," another word that tends to be associated with.earnestness is "naive." the earnest often seem naive.  it's not.just that they don't have the motives other people have. they often.don't fully grasp that such motives exist. or they may know.intellectually that they do, but because they don't feel them, they.forget about them..[5]it works to be slightly naive not just about motives but also,.believe it or not, about the problems you're working on. naive.optimism can compensate for the bit rot that.rapid change causes.in established beliefs. you plunge into some problem saying "how.hard can it be?", and then after solving it you learn that it was.till recently insoluble.naivete is an obstacle for anyone who wants to seem sophisticated,.and this is one reason would-be intellectuals find it so difficult.to understand silicon valley. it hasn't been safe for such people.to use the word "earnest" outside scare quotes since oscar wilde.wrote "the importance of being earnest" in 1895. and yet when you.zoom in on silicon valley, right into.jessica livingston's brain,.that's what her x-ray vision.is seeking out in founders. earnestness!.who'd have guessed? reporters literally can't believe it when.founders making piles of money say that they started their companies.to make the world better. the situation seems made for mockery..how can these founders be so naive as not to realize how implausible.they sound?though those asking this question don't realize it, that's not a.rhetorical question.a lot of founders are faking it, of course, particularly the smaller.fry, and the soon to be smaller fry. but not all of them. there are.a significant number of founders who really are interested in the.problem they're solving mainly for its own sake.why shouldn't there be? we have no difficulty believing that people.would be interested in history or math or even old bus tickets for.their own sake. why can't there be people interested in self-driving.cars or social networks for their own sake? when you look at the.question from this side, it seems obvious there would be. and isn't.it likely that having a deep interest in something would be a source.of great energy and resilience? it is in every other field.the question really is why we have a blind spot about business..and the answer to that is obvious if you know enough history. for.most of history, making large amounts of money has not been very.intellectually interesting. in preindustrial times it was never far.from robbery, and some areas of business still retain that character,.except using lawyers instead of soldiers.but there are other areas of business where the work is genuinely.interesting. henry ford got to spend much of his time working on.interesting technical problems, and for the last several decades.the trend in that direction has been accelerating. it's much easier.now to make a lot of money by working on something you're interested.in than it was 50 years ago..and that, rather than how fast they.grow, may be the most important change that startups represent..though indeed, the fact that the work is genuinely interesting is.a big part of why it gets done so fast..[6]can you imagine a more important change than one in the relationship.between intellectual curiosity and money? these are two of the most.powerful forces in the world, and in my lifetime they've become.significantly more aligned. how could you not be fascinated to watch.something like this happening in real time?i meant this essay to be about earnestness generally, and now i've.gone and talked about startups again. but i suppose at least it.serves as an example of an x nerd in the wild.notes[1].it's interesting how many different ways there are not to.be earnest: to be cleverly cynical, to be superficially brilliant,.to be conspicuously virtuous, to be cool, to be sophisticated, to.be orthodox, to be a snob, to bully, to pander, to be on the make..this pattern suggests that earnestness is not one end of a continuum,.but a target one can fall short of in multiple dimensions.another thing i notice about this list is that it sounds like a.list of the ways people behave on twitter. whatever else social.media is, it's a vivid catalogue of ways not to be earnest.[2].people's motives are as mixed in silicon valley as anywhere.else. even the founders motivated mostly by money tend to be at.least somewhat interested in the problem they're solving, and even.the founders most interested in the problem they're solving also.like the idea of getting rich. but there's great variation in the.relative proportions of different founders' motivations.and when i talk about "wrong" motives, i don't mean morally wrong..there's nothing morally wrong with starting a startup to make money..i just mean that those startups don't do as well.[3].the most powerful motivator for most people is probably family..but there are some for whom intellectual curiosity comes first. in.his (wonderful) autobiography, paul halmos says explicitly that for.a mathematician, math must come before anything else, including.family. which at least implies that it did for him.[4].interestingly, just as the word "nerd" implies earnestness even.when used as a metaphor, the word "politics" implies the opposite..it's not only in actual politics that earnestness seems to be a.handicap, but also in office politics and academic politics.[5].it's a bigger social error to seem naive in most european.countries than it is in america, and this may be one of subtler.reasons startups are less common there. founder culture is completely.at odds with sophisticated cynicism.the most earnest part of europe is scandinavia, and not surprisingly.this is also the region with the highest number of successful.startups per capita.[6].much of business is schleps, and probably always will be. but.even being a professor is largely schleps. it would be interesting.to collect statistics about the schlep ratios of different jobs,.but i suspect they'd rarely be less than 30%.thanks to trevor blackwell, patrick collison, suhail doshi, jessica.livingston, mattias ljungman, harj taggar, and kyle vogt for reading.drafts of this.<eot><sot>billionaires build.december 2020
as i was deciding what to write about next, i was surprised to find.that two separate essays i'd been planning to write were actually.the same.the first is about how to ace your y combinator interview. there.has been so much nonsense written about this topic that i've been.meaning for years to write something telling founders the truth.the second is about something politicians sometimes say  that the.only way to become a billionaire is by exploiting people  and why.this is mistaken.keep reading, and you'll learn both simultaneously.i know the politicians are mistaken because it was my job to predict.which people will become billionaires. i think i can truthfully say.that i know as much about how to do this as anyone. if the key to.becoming a billionaire  the defining feature of billionaires .was to exploit people, then i, as a professional billionaire scout,.would surely realize this and look for people who would be good at.it, just as an nfl scout looks for speed in wide receivers.but aptitude for exploiting people is not what y combinator looks.for at all. in fact, it's the opposite of what they look for. i'll.tell you what they do look for, by explaining how to convince.y combinator to fund you, and you can see for yourself.what yc looks for, above all, is founders who understand some group.of users and can make what they want. this is so important that.it's yc's motto: "make something people want."a big company can to some extent force unsuitable products on.unwilling customers, but a startup doesn't have the power to do.that. a startup must sing for its supper, by making things that.genuinely delight its customers. otherwise it will never get off.the ground.here's where things get difficult, both for you as a founder and.for the yc partners trying to decide whether to fund you. in a.market economy, it's hard to make something people want that they.don't already have. that's the great thing about market economies..if other people both knew about this need and were able to satisfy.it, they already would be, and there would be no room for your.startup.which means the conversation during your yc interview will have to.be about something new: either a new need, or a new way to satisfy.one. and not just new, but uncertain. if it were certain that the.need existed and that you could satisfy it, that certainty would.be reflected in large and rapidly growing revenues, and you wouldn't.be seeking seed funding.so the yc partners have to guess both whether you've discovered a.real need, and whether you'll be able to satisfy it. that's what they.are, at least in this part of their job: professional guessers..they have 1001 heuristics for doing this, and i'm not going to tell.you all of them, but i'm happy to tell you the most important ones,.because these can't be faked; the only way to "hack" them would be.to do what you should be doing anyway as a founder.the first thing the partners will try to figure out, usually, is.whether what you're making will ever be something a lot of people.want. it doesn't have to be something a lot of people want now..the product and the market will both evolve, and will influence.each other's evolution. but in the end there has to be something.with a huge market. that's what the partners will be trying to.figure out: is there a path to a huge market?.[1]sometimes it's obvious there will be a huge market. if.boom manages.to ship an airliner at all, international airlines will have to buy.it. but usually it's not obvious. usually the path to a huge market.is by growing a small market. this idea is important enough that.it's worth coining a phrase for, so let's call one of these small.but growable markets a "larval market."the perfect example of a larval market might be apple's market when.they were founded in 1976. in 1976, not many people wanted their.own computer. but more and more started to want one, till now every.10 year old on the planet wants a computer (but calls it a "phone").the ideal combination is the group of founders who are."living in.the future" in the sense of being at the leading edge of some kind.of change, and who are building something they themselves want..most super-successful startups are of this type. steve wozniak.wanted a computer. mark zuckerberg wanted to engage online with his.college friends. larry and sergey wanted to find things on the web..all these founders were building things they and their peers wanted,.and the fact that they were at the leading edge of change meant.that more people would want these things in the future.but although the ideal larval market is oneself and one's peers,.that's not the only kind. a larval market might also be regional,.for example. you build something to serve one location, and then.expand to others.the crucial feature of the initial market is that it exist. that.may seem like an obvious point, but the lack of it is the biggest.flaw in most startup ideas. there have to be some people who want.what you're building right now, and want it so urgently that they're.willing to use it, bugs and all, even though you're a small company.they've never heard of. there don't have to be many, but there have.to be some. as long as you have some users, there are straightforward.ways to get more: build new features they want, seek out more people.like them, get them to refer you to their friends, and so on. but.these techniques all require some initial seed group of users.so this is one thing the yc partners will almost certainly dig into.during your interview. who are your first users going to be, and.how do you know they want this? if i had to decide whether to fund.startups based on a single question, it would be "how do you know.people want this?"the most convincing answer is "because we and our friends want it.".it's even better when this is followed by the news that you've.already built a prototype, and even though it's very crude, your.friends are using it, and it's spreading by word of mouth. if you.can say that and you're not lying, the partners will switch from.default no to default yes. meaning you're in unless there's some.other disqualifying flaw.that is a hard standard to meet, though. airbnb didn't meet it..they had the first part. they had made something they themselves.wanted. but it wasn't spreading. so don't feel bad if you don't hit.this gold standard of convincingness. if airbnb didn't hit it, it.must be too high.in practice, the yc partners will be satisfied if they feel that.you have a deep understanding of your users' needs. and the airbnbs.did have that. they were able to tell us all about what motivated.hosts and guests. they knew from first-hand experience, because.they'd been the first hosts. we couldn't ask them a question they.didn't know the answer to. we ourselves were not very excited about.the idea as users, but we knew this didn't prove anything, because.there were lots of successful startups we hadn't been excited about.as users. we were able to say to ourselves "they seem to know what.they're talking about. maybe they're onto something. it's not growing.yet, but maybe they can figure out how to make it grow during yc.".which they did, about three weeks into the batch.the best thing you can do in a yc interview is to teach the partners.about your users. so if you want to prepare for your interview, one of the best.ways to do it is to go talk to your users and find out exactly what.they're thinking. which is what you should be doing anyway.this may sound strangely credulous, but the yc partners want to.rely on the founders to tell them about the market. think about.how vcs typically judge the potential market for an idea. they're.not ordinarily domain experts themselves, so they forward the idea.to someone who is, and ask for their opinion. yc doesn't have time.to do this, but if the yc partners can convince themselves that the.founders both (a) know what they're talking about and (b) aren't.lying, they don't need outside domain experts. they can use the.founders themselves as domain experts when evaluating their own.idea.this is why yc interviews aren't pitches. to give as many founders.as possible a chance to get funded, we made interviews as short as.we could: 10 minutes. that is not enough time for the partners to.figure out, through the indirect evidence in a pitch, whether you.know what you're talking about and aren't lying. they need to dig.in and ask you questions. there's not enough time for sequential.access. they need random access..[2]the worst advice i ever heard about how to succeed in a yc interview.is that you should take control of the interview and make sure to.deliver the message you want to. in other words, turn the interview.into a pitch. &langle;elaborate expletive&rangle;. it is so annoying when people.try to do that. you ask them a question, and instead of answering.it, they deliver some obviously prefabricated blob of pitch. it.eats up 10 minutes really fast.there is no one who can give you accurate advice about what to do.in a yc interview except a current or former yc partner. people.who've merely been interviewed, even successfully, have no idea of.this, but interviews take all sorts of different forms depending.on what the partners want to know about most. sometimes they're all.about the founders, other times they're all about the idea. sometimes.some very narrow aspect of the idea. founders sometimes walk away.from interviews complaining that they didn't get to explain their.idea completely. true, but they explained enough.since a yc interview consists of questions, the way to do it well.is to answer them well. part of that is answering them candidly..the partners don't expect you to know everything. but if you don't.know the answer to a question, don't try to bullshit your way out.of it. the partners, like most experienced investors, are professional.bullshit detectors, and you are (hopefully) an amateur bullshitter..and if you try to bullshit them and fail, they may not even tell.you that you failed. so it's better to be honest than to try to.sell them. if you don't know the answer to a question, say you.don't, and tell them how you'd go about finding it, or tell them.the answer to some related question.if you're asked, for example, what could go wrong, the worst possible.answer is "nothing." instead of convincing them that your idea is.bullet-proof, this will convince them that you're a fool or a liar..far better to go into gruesome detail. that's what experts do when.you ask what could go wrong.  the partners know that your idea is.risky. that's what a good bet looks like at this stage: a tiny.probability of a huge outcome.ditto if they ask about competitors. competitors are rarely what.kills startups. poor execution does. but you should know who your.competitors are, and tell the yc partners candidly what your relative.strengths and weaknesses are. because the yc partners know that.competitors don't kill startups, they won't hold competitors against.you too much. they will, however, hold it against you if you seem.either to be unaware of competitors, or to be minimizing the threat.they pose. they may not be sure whether you're clueless or lying,.but they don't need to be.the partners don't expect your idea to be perfect. this is seed.investing. at this stage, all they can expect are promising hypotheses..but they do expect you to be thoughtful and honest. so if trying.to make your idea seem perfect causes you to come off as glib or.clueless, you've sacrificed something you needed for something you.didn't.if the partners are sufficiently convinced that there's a path to.a big market, the next question is whether you'll be able to find.it. that in turn depends on three things: the general qualities of.the founders, their specific expertise in this domain, and the.relationship between them. how determined are the founders? are.they good at building things? are they resilient enough to keep.going when things go wrong? how strong is their friendship?though the airbnbs only did ok in the idea department, they did.spectacularly well in this department. the story of how they'd.funded themselves by making obama- and mccain-themed breakfast.cereal was the single most important factor in our decision to fund.them. they didn't realize it at the time, but what seemed to them.an irrelevant story was in fact fabulously good evidence of their.qualities as founders. it showed they were resourceful and determined,.and could work together.it wasn't just the cereal story that showed that, though. the whole.interview showed that they cared. they weren't doing this just for.the money, or because startups were cool. the reason they were.working so hard on this company was because it was their project..they had discovered an interesting new idea, and they just couldn't.let it go.mundane as it sounds, that's the most powerful motivator of all,.not just in startups, but in most ambitious undertakings: to be.genuinely interested in what.you're building. this is what really.drives billionaires, or at least the ones who become billionaires.from starting companies. the company is their project.one thing few people realize about billionaires is that all of them.could have stopped sooner. they could have gotten acquired, or found.someone else to run the company. many founders do. the ones who.become really rich are the ones who keep working. and what makes.them keep working is not just money. what keeps them working is the.same thing that keeps anyone else working when they could stop if.they wanted to: that there's nothing else they'd rather do.that, not exploiting people, is the defining quality of people who.become billionaires from starting companies. so that's what yc looks.for in founders: authenticity. people's motives for starting startups.are usually mixed. they're usually doing it from some combination.of the desire to make money, the desire to seem cool, genuine.interest in the problem, and unwillingness to work for someone else..the last two are more powerful motivators than the first two. it's.ok for founders to want to make money or to seem cool. most do..but if the founders seem like they're doing it just to make money.or just to seem cool, they're not likely to succeed on a big.scale. the founders who are doing it for the money will take the.first sufficiently large acquisition offer, and the ones who are.doing it to seem cool will rapidly discover that there are much.less painful ways of seeming cool..[3]y combinator certainly sees founders whose m.o. is to exploit people..yc is a magnet for them, because they want the yc brand. but when.the yc partners detect someone like that, they reject them. if bad.people made good founders, the yc partners would face a moral.dilemma. fortunately they don't, because bad people make bad founders..this exploitative type of founder is not going to succeed on a large.scale, and in fact probably won't even succeed on a small one,.because they're always going to be taking shortcuts. they see yc.itself as a shortcut.their exploitation usually begins with their own cofounders, which.is disastrous, since the cofounders' relationship is the foundation.of the company. then it moves on to the users, which is also.disastrous, because the sort of early adopters a successful startup.wants as its initial users are the hardest to fool. the best this.kind of founder can hope for is to keep the edifice of deception.tottering along until some acquirer can be tricked into buying it..but that kind of acquisition is never very big..[4]if professional billionaire scouts know that exploiting people is.not the skill to look for, why do some politicians think this is.the defining quality of billionaires?i think they start from the feeling that it's wrong that one person.could have so much more money than another. it's understandable.where that feeling comes from. it's in our dna, and even in the dna.of other species.if they limited themselves to saying that it made them feel bad.when one person had so much more money than other people, who would.disagree? it makes me feel bad too, and i think people who make a.lot of money have a moral obligation to use it for the common good..the mistake they make is to jump from feeling bad that some people.are much richer than others to the conclusion that there's no.legitimate way to make a very large amount of money. now we're.getting into statements that are not only falsifiable, but false.there are certainly some people who become rich by doing bad things..but there are also plenty of people who behave badly and don't make.that much from it. there is no correlation  in fact, probably an.inverse correlation  between how badly you behave and how much.money you make.the greatest danger of this nonsense may not even be that it sends.policy astray, but that it misleads ambitious people. can you imagine.a better way to destroy social mobility than by telling poor kids.that the way to get rich is by exploiting people, while the rich.kids know, from having watched the preceding generation do it, how.it's really done?i'll tell you how it's really done, so you can at least tell your.own kids the truth. it's all about users. the most reliable way to.become a billionaire is to start a company that.grows fast, and the.way to grow fast is to make what users want. newly started startups.have no choice but to delight users, or they'll never even get.rolling. but this never stops being the lodestar, and bigger companies.take their eye off it at their peril. stop delighting users, and.eventually someone else will.users are what the partners want to.know about in yc interviews, and what i want to know about when i.talk to founders that we funded ten years ago and who are billionaires.now. what do users want? what new things could you build for them?.founders who've become billionaires are always eager to talk about.that topic. that's how they became billionaires.notes[1].the yc partners have so much practice doing this that they.sometimes see paths that the founders themselves haven't seen yet..the partners don't try to seem skeptical, as buyers in transactions.often do to increase their leverage. although the founders feel.their job is to convince the partners of the potential of their.idea, these roles are not infrequently reversed, and the founders.leave the interview feeling their idea has more potential than they.realized.[2].in practice, 7 minutes would be enough. you rarely change your.mind at minute 8. but 10 minutes is socially convenient.[3].i myself took the first sufficiently large acquisition offer.in my first startup, so i don't blame founders for doing this..there's nothing wrong with starting a startup to make money. you.need to make money somehow, and for some people startups are the.most efficient way to do it. i'm just saying that these are not the.startups that get really big.[4].not these days, anyway. there were some big ones during the.internet bubble, and indeed some big ipos.thanks to trevor blackwell, jessica livingston, robert morris, geoff ralston, and.harj taggar for reading drafts of this.<eot><sot>the airbnbs.december 2020
to celebrate airbnb's ipo and to help future founders, i thought.it might be useful to explain what was special about airbnb.what was special about the airbnbs was how earnest they were. they.did nothing half-way, and we could sense this even in the interview..sometimes after we interviewed a startup we'd be uncertain what to.do, and have to talk it over. other times we'd just look at one.another and smile. the airbnbs' interview was that kind. we didn't.even like the idea that much. nor did users, at that stage; they.had no growth. but the founders seemed so full of energy that it.was impossible not to like them.that first impression was not misleading. during the batch our.nickname for brian chesky was the tasmanian devil, because like the.cartoon.character he seemed a tornado of energy. all three of them were.like that. no one ever worked harder during yc than the airbnbs.did. when you talked to the airbnbs, they took notes. if you suggested.an idea to them in office hours, the next time you talked to them.they'd not only have implemented it, but also implemented two new.ideas they had in the process. "they probably have the best attitude.of any startup we've funded" i wrote to mike arrington during the.batch.they're still like that. jessica and i had dinner with brian in the.summer of 2018, just the three of us. by this point the company is.ten years old. he took a page of notes about ideas for new things.airbnb could do.what we didn't realize when we first met brian and joe and nate was.that airbnb was on its last legs. after working on the company for.a year and getting no growth, they'd agreed to give it one last.shot. they'd try this y combinator thing, and if the company still.didn't take off, they'd give up.any normal person would have given up already. they'd been funding.the company with credit cards. they had a binder full of.credit cards they'd maxed out. investors didn't think much of the.idea. one investor they met in a cafe walked out in the middle of.meeting with them. they thought he was going to the bathroom, but.he never came back. "he didn't even finish his smoothie," brian.said. and now, in late 2008, it was the worst recession in decades..the stock market was in free fall and wouldn't hit bottom for another.four months.why hadn't they given up? this is a useful question to ask. people,.like matter, reveal their nature under extreme conditions. one thing.that's clear is that they weren't doing this just for the money..as a money-making scheme, this was pretty lousy: a year's work and.all they had to show for it was a binder full of maxed-out credit.cards. so why were they still working on this startup? because of.the experience they'd had as the first hosts.when they first tried renting out airbeds on their floor during a.design convention, all they were hoping for was to make enough money.to pay their rent that month. but something surprising happened:.they enjoyed having those first three guests staying with them. and.the guests enjoyed it too. both they and the guests had done it.because they were in a sense forced to, and yet they'd all had a.great experience. clearly there was something new here: for hosts,.a new way to make money that had literally been right under their.noses, and for guests, a new way to travel that was in many ways.better than hotels.that experience was why the airbnbs didn't give up. they knew they'd.discovered something. they'd seen a glimpse of the future, and they.couldn't let it go.they knew that once people tried staying in what is now called "an.airbnb," they would also realize that this was the future. but only.if they tried it, and they weren't. that was the problem during y.combinator: to get growth started.airbnb's goal during yc was to reach what we call ramen profitability,.which means making enough money that the company can pay the founders'.living expenses, if they live on ramen noodles. ramen profitability.is not, obviously, the end goal of any startup, but it's the most.important threshold on the way, because this is the point where.you're airborne. this is the point where you no longer need investors'.permission to continue existing. for the airbnbs, ramen profitability.was $4000 a month: $3500 for rent, and $500 for food. they taped.this goal to the mirror in the bathroom of their apartment.the way to get growth started in something like airbnb is to focus.on the hottest subset of the market. if you can get growth started.there, it will spread to the rest. when i asked the airbnbs where.there was most demand, they knew from searches: new york city. so.they focused on new york. they went there in person to visit their.hosts and help them make their listings more attractive. a big part.of that was better pictures. so joe and brian rented a professional.camera and took pictures of the hosts' places themselves.this didn't just make the listings better. it also taught them about.their hosts. when they came back from their first trip to new york,.i asked what they'd noticed about hosts that surprised them, and.they said the biggest surprise was how many of the hosts were in.the same position they'd been in: they needed this money to pay.their rent. this was, remember, the worst recession in decades, and.it had hit new york first. it definitely added to the airbnbs' sense.of mission to feel that people needed them.in late january 2009, about three weeks into y combinator, their.efforts started to show results, and their numbers crept upward..but it was hard to say for sure whether it was growth or just random.fluctuation. by february it was clear that it was real growth. they.made $460 in fees in the first week of february, $897 in the second,.and $1428 in the third. that was it: they were airborne. brian sent.me an email on february 22 announcing that they were ramen profitable.and giving the last three weeks' numbers."i assume you know what you've now set yourself up for next week,".i responded.brian's reply was seven words: "we are not going to slow down."<eot><sot>how to think for yourself.november 2020
there are some kinds of work that you can't do well without thinking.differently from your peers. to be a successful scientist, for.example, it's not enough just to be correct. your ideas have to be.both correct and novel. you can't publish papers saying things other.people already know. you need to say things no one else has realized.yet.the same is true for investors. it's not enough for a public market.investor to predict correctly how a company will do. if a lot of.other people make the same prediction, the stock price will already.reflect it, and there's no room to make money. the only valuable.insights are the ones most other investors don't share.you see this pattern with startup founders too. you don't want to.start a startup to do something that everyone agrees is a good idea,.or there will already be other companies doing it. you have to do.something that sounds to most other people like a bad idea, but.that you know isn't  like writing software for a tiny computer.used by a few thousand hobbyists, or starting a site to let people.rent airbeds on strangers' floors.ditto for essayists. an essay that told people things they already.knew would be boring. you have to tell them something new.but this pattern isn't universal. in fact, it doesn't hold for most.kinds of work. in most kinds of work  to be an administrator, for.example  all you need is the first half. all you need is to be.right. it's not essential that everyone else be wrong.there's room for a little novelty in most kinds of work, but in.practice there's a fairly sharp distinction between the kinds of.work where it's essential to be independent-minded, and the kinds.where it's not.i wish someone had told me about this distinction when i was a kid,.because it's one of the most important things to think about when.you're deciding what kind of work you want to do. do you want to.do the kind of work where you can only win by thinking differently.from everyone else? i suspect most people's unconscious mind will.answer that question before their conscious mind has a chance to..i know mine does.independent-mindedness seems to be more a matter of nature than.nurture. which means if you pick the wrong type of work, you're.going to be unhappy. if you're naturally independent-minded, you're.going to find it frustrating to be a middle manager. and if you're.naturally conventional-minded, you're going to be sailing into a.headwind if you try to do original research.one difficulty here, though, is that people are often mistaken about.where they fall on the spectrum from conventional- to independent-minded..conventional-minded people don't like to think of themselves as.conventional-minded. and in any case, it genuinely feels to them.as if they make up their own minds about everything. it's just a.coincidence that their beliefs are identical to their peers'. and.the independent-minded, meanwhile, are often unaware how different.their ideas are from conventional ones, at least till they state.them publicly..[1]by the time they reach adulthood, most people know roughly how smart.they are (in the narrow sense of ability to solve pre-set problems),.because they're constantly being tested and ranked according to it..but schools generally ignore independent-mindedness, except to the.extent they try to suppress it. so we don't get anything like the.same kind of feedback about how independent-minded we are.there may even be a phenomenon like dunning-kruger at work, where.the most conventional-minded people are confident that they're.independent-minded, while the genuinely independent-minded worry.they might not be independent-minded enough..___________.can you make yourself more independent-minded? i think so. this.quality may be largely inborn, but there seem to be ways to magnify.it, or at least not to suppress it.one of the most effective techniques is one practiced unintentionally.by most nerds: simply to be less aware what conventional beliefs.are. it's hard to be a conformist if you don't know what you're.supposed to conform to. though again, it may be that such people.already are independent-minded. a conventional-minded person would.probably feel anxious not knowing what other people thought, and.make more effort to find out.it matters a lot who you surround yourself with. if you're surrounded.by conventional-minded people, it will constrain which ideas you.can express, and that in turn will constrain which ideas you have..but if you surround yourself with independent-minded people, you'll.have the opposite experience: hearing other people say surprising.things will encourage you to, and to think of more.because the independent-minded find it uncomfortable to be surrounded.by conventional-minded people, they tend to self-segregate once.they have a chance to. the problem with high school is that they.haven't yet had a chance to. plus high school tends to be an.inward-looking little world whose inhabitants lack confidence, both.of which magnify the forces of conformism.  so high school is.often a bad time for the.independent-minded. but there is some advantage even here: it.teaches you what to avoid. if you later find yourself in a situation.that makes you think "this is like high school," you know you should.get out..[2]another place where the independent- and conventional-minded are.thrown together is in successful startups. the founders and early.employees are almost always independent-minded; otherwise the startup.wouldn't be successful. but conventional-minded people greatly.outnumber independent-minded ones, so as the company grows, the.original spirit of independent-mindedness is inevitably diluted..this causes all kinds of problems besides the obvious one that the.company starts to suck. one of the strangest is that the founders.find themselves able to speak more freely with founders of other.companies than with their own employees..[3]fortunately you don't have to spend all your time with independent-minded.people. it's enough to have one or two you can talk to regularly..and once you find them, they're usually as eager to talk as you.are; they need you too. although universities no longer have the.kind of monopoly they used to have on education, good universities.are still an excellent way to meet independent-minded people. most.students will still be conventional-minded, but you'll at least.find clumps of independent-minded ones, rather than the near zero.you may have found in high school.it also works to go in the other direction: as well as cultivating.a small collection of independent-minded friends, to try to meet.as many different types of people as you can. it will decrease the.influence of your immediate peers if you have several other groups.of peers. plus if you're part of several different worlds, you can.often import ideas from one to another.but by different types of people, i don't mean demographically.different. for this technique to work, they have to think differently..so while it's an excellent idea to go and visit other countries,.you can probably find people who think differently right around the.corner. when i meet someone who knows a lot about something unusual.(which includes practically everyone, if you dig deep enough), i.try to learn what they know that other people don't. there are.almost always surprises here. it's a good way to make conversation.when you meet strangers, but i don't do it to make conversation..i really want to know.you can expand the source of influences in time as well as space,.by reading history. when i read history i do it not just to learn.what happened, but to try to get inside the heads of people who.lived in the past. how did things look to them? this is hard to do,.but worth the effort for the same reason it's worth travelling far.to triangulate a point.you can also take more explicit measures to prevent yourself from.automatically adopting conventional opinions. the most general is.to cultivate an attitude of skepticism. when you hear someone say.something, stop and ask yourself "is that true?" don't say it out.loud. i'm not suggesting that you impose on everyone who talks to.you the burden of proving what they say, but rather that you take.upon yourself the burden of evaluating what they say.treat it as a puzzle. you know that some accepted ideas will later.turn out to be wrong. see if you can guess which. the end goal is.not to find flaws in the things you're told, but to find the new.ideas that had been concealed by the broken ones. so this game.should be an exciting quest for novelty, not a boring protocol for.intellectual hygiene. and you'll be surprised, when you start asking."is this true?", how often the answer is not an immediate yes. if.you have any imagination, you're more likely to have too many leads.to follow than too few.more generally your goal should be not to let anything into your.head unexamined, and things don't always enter your head in the.form of statements. some of the most powerful influences are implicit..how do you even notice these? by standing back and watching how.other people get their ideas.when you stand back at a sufficient distance, you can see ideas.spreading through groups of people like waves. the most obvious are.in fashion: you notice a few people wearing a certain kind of shirt,.and then more and more, until half the people around you are wearing.the same shirt. you may not care much what you wear, but there are.intellectual fashions too, and you definitely don't want to participate.in those. not just because you want sovereignty over your own.thoughts, but because unfashionable.ideas are disproportionately likely to lead somewhere interesting..the best place to find undiscovered ideas is where no one else is.looking..[4].___________.to go beyond this general advice, we need to look at the internal.structure of independent-mindedness  at the individual muscles.we need to exercise, as it were. it seems to me that it has three.components: fastidiousness about truth, resistance to being told.what to think, and curiosity.fastidiousness about truth means more than just not believing things.that are false. it means being careful about degree of belief. for.most people, degree of belief rushes unexamined toward the extremes:.the unlikely becomes impossible, and the probable becomes certain..[5].to the independent-minded, this seems unpardonably sloppy..they're willing to have anything in their heads, from highly.speculative hypotheses to (apparent) tautologies, but on subjects.they care about, everything has to be labelled with a carefully.considered degree of belief..[6]the independent-minded thus have a horror of ideologies, which.require one to accept a whole collection of beliefs at once, and.to treat them as articles of faith. to an independent-minded person.that would seem revolting, just as it would seem to someone fastidious.about food to take a bite of a submarine sandwich filled with a.large variety of ingredients of indeterminate age and provenance.without this fastidiousness about truth, you can't be truly.independent-minded. it's not enough just to have resistance to being.told what to think. those kind of people reject conventional ideas.only to replace them with the most random conspiracy theories. and.since these conspiracy theories have often been manufactured to.capture them, they end up being less independent-minded than ordinary.people, because they're subject to a much more exacting master than.mere convention..[7]can you increase your fastidiousness about truth? i would think so..in my experience, merely thinking about something you're fastidious.about causes that fastidiousness to grow. if so, this is one of.those rare virtues we can have more of merely by wanting it. and.if it's like other forms of fastidiousness, it should also be.possible to encourage in children. i certainly got a strong dose.of it from my father..[8]the second component of independent-mindedness, resistance to being.told what to think, is the most visible of the three. but even this.is often misunderstood. the big mistake people make about it is to.think of it as a merely negative quality. the language we use.reinforces that idea. you're unconventional. you don't care.what other people think. but it's not just a kind of immunity. in.the most independent-minded people, the desire not to be told what.to think is a positive force. it's not mere skepticism, but an.active delight in ideas that subvert.the conventional wisdom, the more counterintuitive the better.some of the most novel ideas seemed at the time almost like practical.jokes. think how often your reaction to a novel idea is to laugh..i don't think it's because novel ideas are funny per se, but because.novelty and humor share a certain kind of surprisingness. but while.not identical, the two are close enough that there is a definite.correlation between having a sense of humor and being independent-minded. just as there is between being humorless and being conventional-minded..[9]i don't think we can significantly increase our resistance to being.told what to think. it seems the most innate of the three components.of independent-mindedness; people who have this quality as adults.usually showed all too visible signs of it as children. but if we.can't increase our resistance to being told what to think, we can.at least shore it up, by surrounding ourselves with other.independent-minded people.the third component of independent-mindedness, curiosity, may be.the most interesting. to the extent that we can give a brief answer.to the question of where novel ideas come from, it's curiosity. that's.what people are usually feeling before having them.in my experience, independent-mindedness and curiosity predict one.another perfectly. everyone i know who's independent-minded is.deeply curious, and everyone i know who's conventional-minded isn't..except, curiously, children. all small children are curious. perhaps.the reason is that even the conventional-minded have to be curious.in the beginning, in order to learn what the conventions are. whereas.the independent-minded are the gluttons of curiosity, who keep.eating even after they're full..[10]the three components of independent-mindedness work in concert:.fastidiousness about truth and resistance to being told what to.think leave space in your brain, and curiosity finds new ideas to.fill it.interestingly, the three components can substitute for one another.in much the same way muscles can. if you're sufficiently fastidious.about truth, you don't need to be as resistant to being told what.to think, because fastidiousness alone will create sufficient gaps.in your knowledge. and either one can compensate for curiosity,.because if you create enough space in your brain, your discomfort.at the resulting vacuum will add force to your curiosity. or curiosity.can compensate for them: if you're sufficiently curious, you don't.need to clear space in your brain, because the new ideas you discover.will push out the conventional ones you acquired by default.because the components of independent-mindedness are so interchangeable,.you can have them to varying degrees and still get the same result..so there is not just a single model of independent-mindedness. some.independent-minded people are openly subversive, and others are.quietly curious. they all know the secret handshake though.is there a way to cultivate curiosity? to start with, you want to.avoid situations that suppress it. how much does the work you're.currently doing engage your curiosity? if the answer is "not much,".maybe you should change something.the most important active step you can take to cultivate your.curiosity is probably to seek out the topics that engage it. few.adults are equally curious about everything, and it doesn't seem.as if you can choose which topics interest you. so it's up to you.to find them. or invent them, if.necessary.another way to increase your curiosity is to indulge it, by.investigating things you're interested in. curiosity is unlike.most other appetites in this respect: indulging it tends to increase.rather than to sate it. questions lead to more questions.curiosity seems to be more individual than fastidiousness about.truth or resistance to being told what to think. to the degree.people have the latter two, they're usually pretty general, whereas.different people can be curious about very different things. so.perhaps curiosity is the compass here. perhaps, if your goal is to.discover novel ideas, your motto should not be "do what you love".so much as "do what you're curious about."notes[1].one convenient consequence of the fact that no one identifies.as conventional-minded is that you can say what you like about.conventional-minded people without getting in too much trouble..when i wrote "the four quadrants of.conformism" i expected a firestorm of rage from the.aggressively conventional-minded, but in fact it was quite muted..they sensed that there was something about the essay that they.disliked intensely, but they had a hard time finding a specific.passage to pin it on.[2].when i ask myself what in my life is like high school, the.answer is twitter. it's not just full of conventional-minded people,.as anything its size will inevitably be, but subject to violent.storms of conventional-mindedness that remind me of descriptions.of jupiter. but while it probably is a net loss to spend time there,.it has at least made me think more about the distinction between.independent- and conventional-mindedness, which i probably wouldn't.have done otherwise.[3].the decrease in independent-mindedness in growing startups is.still an open problem, but there may be solutions.founders can delay the problem by making a conscious effort only.to hire independent-minded people. which of course also has the.ancillary benefit that they have better ideas.another possible solution is to create policies that somehow disrupt.the force of conformism, much as control rods slow chain reactions,.so that the conventional-minded aren't as dangerous. the physical.separation of lockheed's skunk works may have had this as a side.benefit. recent examples suggest employee forums like slack may not.be an unmitigated good.the most radical solution would be to grow revenues without growing.the company. you think hiring that junior pr person will be cheap,.compared to a programmer, but what will be the effect on the average.level of independent-mindedness in your company? (the growth in.staff relative to faculty seems to have had a similar effect on.universities.) perhaps the rule about outsourcing work that's not.your "core competency" should be augmented by one about outsourcing.work done by people who'd ruin your culture as employees.some investment firms already seem to be able to grow revenues.without growing the number of employees. automation plus the ever.increasing articulation of the "tech stack" suggest this may one.day be possible for product companies.[4].there are intellectual fashions in every field, but their.influence varies. one of the reasons politics, for example, tends.to be boring is that it's so extremely subject to them. the threshold.for having opinions about politics is much lower than the one for having.opinions about set theory. so while there are some ideas in politics,.in practice they tend to be swamped by waves of intellectual fashion.[5].the conventional-minded are often fooled by the strength of.their opinions into believing that they're independent-minded. but.strong convictions are not a sign of independent-mindedness. rather.the opposite.[6].fastidiousness about truth doesn't imply that an independent-minded.person won't be dishonest, but that he won't be deluded. it's sort.of like the definition of a gentleman as someone who is never.unintentionally rude.[7].you see this especially among political extremists. they think.themselves nonconformists, but actually they're niche conformists..their opinions may be different from the average person's, but they.are often more influenced by their peers' opinions than the average.person's are.[8].if we broaden the concept of fastidiousness about truth so that.it excludes pandering, bogusness, and pomposity as well as falsehood.in the strict sense, our model of independent-mindedness can expand.further into the arts.[9].this correlation is far from perfect, though. gödel and dirac.don't seem to have been very strong in the humor department. but.someone who is both "neurotypical" and humorless is very likely to.be conventional-minded.[10].exception: gossip. almost everyone is curious about gossip..thanks to trevor blackwell, paul buchheit, patrick collison, jessica.livingston, robert morris, harj taggar, and peter thiel for reading.drafts of this.italian translation<eot><sot>early work.october 2020
one of the biggest things holding people back from doing great work.is the fear of making something lame. and this fear is not an.irrational one. many great projects go through a stage early on.where they don't seem very impressive, even to their creators. you.have to push through this stage to reach the great work that lies.beyond. but many people don't. most people don't even reach the.stage of making something they're embarrassed by, let alone continue.past it. they're too frightened even to start.imagine if we could turn off the fear of making something lame..imagine how much more we'd do.is there any hope of turning it off? i think so. i think the habits.at work here are not very deeply rooted.making new things is itself a new thing for us as a species. it has.always happened, but till the last few centuries it happened so.slowly as to be invisible to individual humans. and since we didn't.need customs for dealing with new ideas, we didn't develop any.we just don't have enough experience with early versions of ambitious.projects to know how to respond to them. we judge them as we would.judge more finished work, or less ambitious projects. we don't.realize they're a special case.or at least, most of us don't. one reason i'm confident we can do.better is that it's already starting to happen. there are already.a few places that are living in the future in this respect. silicon.valley is one of them: an unknown person working on a strange-sounding.idea won't automatically be dismissed the way they would back home..in silicon valley, people have learned how dangerous that is.the right way to deal with new ideas is to treat them as a challenge.to your imagination  not just to have lower standards, but to.switch polarity entirely, from listing.the reasons an idea won't.work to trying to think of ways it could. that's what i do when i.meet people with new ideas. i've become quite good at it, but i've.had a lot of practice. being a partner at y combinator means being.practically immersed in strange-sounding ideas proposed by unknown.people. every six months you get thousands of new ones thrown at.you and have to sort through them, knowing that in a world with a.power-law distribution of outcomes, it will be painfully obvious.if you miss the needle in this haystack. optimism becomes.urgent.but i'm hopeful that, with time, this kind of optimism can become.widespread enough that it becomes a social custom, not just a trick.used by a few specialists. it is after all an extremely lucrative.trick, and those tend to spread quickly.of course, inexperience is not the only reason people are too harsh.on early versions of ambitious projects. they also do it to seem.clever. and in a field where the new ideas are risky, like startups,.those who dismiss them are in fact more likely to be right. just.not when their predictions are.weighted by outcome.but there is another more sinister reason people dismiss new ideas..if you try something ambitious, many of those around you will hope,.consciously or unconsciously, that you'll fail. they worry that if.you try something ambitious and succeed, it will put you above them..in some countries this is not just an individual failing but part.of the national culture.i wouldn't claim that people in silicon valley overcome these.impulses because they're morally better..[1].the reason many hope.you'll succeed is that they hope to rise with you. for investors.this incentive is particularly explicit. they want you to succeed.because they hope you'll make them rich in the process. but many.other people you meet can hope to benefit in some way from your.success. at the very least they'll be able to say, when you're.famous, that they've known you since way back.but even if silicon valley's encouraging attitude.is rooted in self-interest, it has over time actually grown into a.sort of benevolence. encouraging startups has been practiced for.so long that it has become a custom. now it just seems that that's.what one does with startups.maybe silicon valley is too optimistic. maybe it's too easily fooled.by impostors. many less optimistic journalists want to believe that..but the lists of impostors they cite are suspiciously short, and.plagued with asterisks..[2] if you use revenue as the test, silicon.valley's optimism seems better tuned than the rest of the world's..and because it works, it will spread.there's a lot more to new ideas than new startup ideas, of course..the fear of making something lame holds people back in every field..but silicon valley shows how quickly customs can evolve to support.new ideas. and that in turn proves that dismissing new ideas is not.so deeply rooted in human nature that it can't be unlearnt..___________.unfortunately, if you want to do new things, you'll face a force.more powerful than other people's skepticism: your own skepticism..you too will judge your early work too harshly. how do you avoid.that?this is a difficult problem, because you don't want to completely.eliminate your horror of making something lame. that's what steers.you toward doing good work. you just want to turn it off temporarily,.the way a painkiller temporarily turns off pain.people have already discovered several techniques that work. hardy.mentions two in a mathematician's apology:.good work is not done by "humble" men. it is one of the first.duties of a professor, for example, in any subject, to exaggerate.a little both the importance of his subject and his importance.in it..if you overestimate the importance of what you're working on, that.will compensate for your mistakenly harsh judgment of your initial.results. if you look at something that's 20% of the way to a goal.worth 100 and conclude that it's 10% of the way to a goal worth.200, your estimate of its expected value is correct even though.both components are wrong.it also helps, as hardy suggests, to be slightly overconfident..i've noticed in many fields that the most successful people are.slightly overconfident. on the face of it this seems implausible..surely it would be optimal to have exactly the right estimate of.one's abilities. how could it be an advantage to be mistaken?.because this error compensates for other sources of error in the.opposite direction: being slightly overconfident armors you against.both other people's skepticism and your own.ignorance has a similar effect. it's safe to make the mistake of.judging early work as finished work if you're a sufficiently lax.judge of finished work. i doubt it's possible to cultivate this.kind of ignorance, but empirically it's a real advantage, especially.for the young.another way to get through the lame phase of ambitious projects is.to surround yourself with the right people  to create an eddy in.the social headwind. but it's not enough to collect people who are.always encouraging. you'd learn to discount that. you need colleagues.who can actually tell an ugly duckling from a baby swan. the people.best able to do this are those working on similar projects of their.own, which is why university departments and research labs work so.well. you don't need institutions to collect colleagues. they.naturally coalesce, given the chance. but it's very much worth.accelerating this process by seeking out other people trying to do.new things.teachers are in effect a special case of colleagues. it's a teacher's.job both to see the promise of early work and to encourage you to.continue. but teachers who are good at this are unfortunately quite.rare, so if you have the opportunity to learn from one, take it..[3]for some it might work to rely on sheer discipline: to tell yourself.that you just have to press on through the initial crap phase and.not get discouraged. but like a lot of "just tell yourself" advice,.this is harder than it sounds. and it gets still harder as you get.older, because your standards rise. the old do have one compensating.advantage though: they've been through this before.it can help if you focus less on where you are and more on the rate.of change. you won't worry so much about doing bad work if you can.see it improving. obviously the faster it improves, the easier this.is. so when you start something new, it's good if you can spend a.lot of time on it. that's another advantage of being young: you.tend to have bigger blocks of time.another common trick is to start by considering new work to be of.a different, less exacting type. to start a painting saying that.it's just a sketch, or a new piece of software saying that it's.just a quick hack. then you judge your initial results by a lower.standard. once the project is rolling you can sneakily convert it.to something more..[4]this will be easier if you use a medium that lets you work fast and.doesn't require too much commitment up front. it's easier to convince.yourself that something is just a sketch when you're drawing in a.notebook than when you're carving stone. plus you get initial results.faster..[5].[6]it will be easier to try out a risky project if you think of it as.a way to learn and not just as a way to make something. then even.if the project truly is a failure, you'll still have gained by it..if the problem is sharply enough defined, failure itself is.knowledge: if the theorem you're trying to prove turns out to.be false, or you use a structural member of a certain size and.it fails under stress, you've learned something, even if it.isn't what you wanted to learn..[7]one motivation that works particularly well for me is curiosity..i like to try new things just to see how they'll turn out. we started.y combinator in this spirit, and it was one of main things that.kept me going while i was working on.bel. having worked for so long.with various dialects of lisp, i was very curious to see what its.inherent shape was: what you'd end up with if you followed the.axiomatic approach all the way.but it's a bit strange that you have to play mind games with yourself.to avoid being discouraged by lame-looking early efforts. the thing.you're trying to trick yourself into believing is in fact the truth..a lame-looking early version of an ambitious project truly is more.valuable than it seems. so the ultimate solution may be to teach.yourself that.one way to do it is to study the histories of people who've.done great work. what were they thinking early on? what was the.very first thing they did? it can sometimes be hard to get an.accurate answer to this question, because people are often embarrassed.by their earliest work and make little effort to publish it. (they.too misjudge it.) but when you can get an accurate picture of the.first steps someone made on the path to some great work, they're.often pretty feeble..[8]perhaps if you study enough such cases, you can teach yourself to.be a better judge of early work. then you'll be immune both to other.people's skepticism and your own fear of making something lame..you'll see early work for what it is.curiously enough, the solution to the problem of judging early work.too harshly is to realize that our attitudes toward it are themselves.early work. holding everything to the same standard is a crude.version 1. we're already evolving better customs, and we can already.see signs of how big the payoff will be..notes[1].this assumption may be too conservative. there is some evidence.that historically the bay area has attracted a.different sort of person than,.say, new york city.[2].one of their great favorites is theranos. but the most conspicuous.feature of theranos's cap table is the absence of silicon valley.firms. journalists were fooled by theranos, but silicon valley.investors weren't.[3].i made two mistakes about teachers when i was younger.  i.cared more about professors' research than their reputations as.teachers, and i was also wrong about what it meant to be a good.teacher. i thought it simply meant to be good at explaining things.[4].patrick collison points out that you can go past treating.something as a hack in the sense of a prototype and onward to the.sense of the word that means something closer to a practical joke:.i think there may be something related to being a hack that can.be powerful  the idea of making the tenuousness and implausibility.a feature. "yes, it's a bit ridiculous, right?  i'm just trying.to see how far such a naive approach can get." yc seemed to me.to have this characteristic..[5].much of the advantage of switching from physical to digital.media is not the software per se but that it lets you start something.new with little upfront commitment.[6].john carmack adds:.the value of a medium without a vast gulf between the early work.and the final work is exemplified in game mods. the original.quake game was a golden age for mods, because everything was very.flexible, but so crude due to technical limitations, that quick.hacks to try out a gameplay idea weren't all that far from the.official game. many careers were born from that, but as the.commercial game quality improved over the years, it became almost.a full time job to make a successful mod that would be appreciated.by the community. this was dramatically reversed with minecraft.and later roblox, where the entire esthetic of the experience was.so explicitly crude that innovative gameplay concepts became the.overriding value. these "crude" game mods by single authors are.now often bigger deals than massive professional teams' work..[7].lisa randall suggests that we.treat new things as experiments. that way there's no such thing.as failing, since you learn something no matter what. you treat.it like an experiment in the sense that if it really rules something.out, you give up and move on, but if there's some way to vary it.to make it work better, go ahead and do that.[8].michael nielsen points out that the internet has made this.easier, because you can see programmers' first commits, musicians'.first videos, and so on.thanks to trevor blackwell, john carmack, patrick collison, jessica.livingston, michael nielsen, and lisa randall for reading drafts.of this.<eot><sot>modeling a wealth tax.august 2020
some politicians are proposing to introduce wealth taxes in addition.to income and capital gains taxes. let's try modeling the effects of various levels.of wealth tax to see what they would mean in practice for a startup.founder.suppose you start a successful startup in your twenties, and then.live for another 60 years. how much of your stock will a wealth tax.consume?if the wealth tax applies to all your assets, it's easy to.calculate its effect. a wealth tax of 1% means you get to keep.99% of your stock each year. after 60 years the proportion.of stock you'll have left will be .99^60, or .547. so a.straight 1% wealth tax means the government will over the.course of your life take 45% of your stock.(losing shares does not, obviously, mean becoming net.poorer unless the value per share is increasing by less than the.wealth tax rate.)here's how much stock the government would take over 60.years at various levels of wealth tax:.wealth taxgovernment takes.0.1%6%0.5%26%.1.0%45%.2.0%70%.3.0%84%.4.0%91%5.0%95%.a wealth tax will usually have a threshold at which it starts..how much difference would a high threshold make? to model that,.we need to make some assumptions about the initial value of.your stock and the growth rate.suppose your stock is initially.worth $2 million, and the company's trajectory is as follows:.the value of your stock grows 3x for 2 years, then 2x for 2 years,.then 50% for 2 years, after.which you just get a typical public company growth rate,.which we'll call 8%..[1].suppose the wealth tax threshold is.$50 million. how much stock does the government take now?.wealth taxgovernment takes.0.1%5%0.5%23%.1.0%41%.2.0%65%.3.0%79%.4.0%88%5.0%93%.it may at first seem surprising that such apparently small tax rates.produce such dramatic effects. a 2% wealth tax with a $50 million.threshold takes about two thirds of a successful founder's stock.the reason wealth taxes have such dramatic effects is that they're.applied over and over to the same money. income tax.happens every year, but only to that year's income. whereas if you.live for 60 years after acquiring some asset, a wealth tax will tax.that same asset 60 times. a wealth tax compounds.note[1].in practice, eventually some of this 8% would come in the form of.dividends, which are taxed as income at issue, so this model actually.represents the most optimistic case for the founder.<eot><sot>the four quadrants of conformism.july 2020
one of the most revealing ways to classify people is by the degree.and aggressiveness of their conformism. imagine a cartesian coordinate.system whose horizontal axis runs from conventional-minded on the.left to independent-minded on the right, and whose vertical axis.runs from passive at the bottom to aggressive at the top. the.resulting four quadrants define four types of people. starting in.the upper left and going counter-clockwise: aggressively.conventional-minded, passively conventional-minded, passively.independent-minded, and aggressively independent-minded.i think that you'll find all four types in most societies, and that.which quadrant people fall into depends more on their own personality.than the beliefs prevalent in their society..[1]young children offer some of the best evidence for both points..anyone who's been to primary school has seen the four types, and.the fact that school rules are so arbitrary is strong evidence that.which quadrant people fall into depends more on them than the rules.the kids in the upper left quadrant, the aggressively conventional-minded.ones, are the tattletales. they believe not only that rules must.be obeyed, but that those who disobey them must be punished.the kids in the lower left quadrant, the passively conventional-minded,.are the sheep. they're careful to obey the rules, but when other.kids break them, their impulse is to worry that those kids will be.punished, not to ensure that they will.the kids in the lower right quadrant, the passively independent-minded,.are the dreamy ones. they don't care much about rules and probably.aren't 100% sure what the rules even are.and the kids in the upper right quadrant, the aggressively.independent-minded, are the naughty ones. when they see a rule,.their first impulse is to question it. merely being told what to.do makes them inclined to do the opposite.when measuring conformism, of course, you have to say with respect.to what, and this changes as kids get older. for younger kids it's.the rules set by adults. but as kids get older, the source of rules.becomes their peers. so a pack of teenagers who all flout school.rules in the same way are not independent-minded; rather the opposite.in adulthood we can recognize the four types by their distinctive.calls, much as you could recognize four species of birds. the call.of the aggressively conventional-minded is "crush <outgroup>!" (it's.rather alarming to see an exclamation point after a variable, but.that's the whole problem with the aggressively conventional-minded.).the call of the passively conventional-minded is "what will the.neighbors think?" the call of the passively independent-minded is."to each his own." and the call of the aggressively independent-minded.is "eppur si muove."the four types are not equally common. there are more passive people.than aggressive ones, and far more conventional-minded people than.independent-minded ones. so the passively conventional-minded are.the largest group, and the aggressively independent-minded the.smallest.since one's quadrant depends more on one's personality than the.nature of the rules, most people would occupy the same quadrant.even if they'd grown up in a quite different society.princeton professor robert george recently wrote:.i sometimes ask students what their position on slavery would.have been had they been white and living in the south before.abolition. guess what? they all would have been abolitionists!.they all would have bravely spoken out against slavery, and.worked tirelessly against it..he's too polite to say so, but of course they wouldn't. and indeed,.our default assumption should not merely be that his students would,.on average, have behaved the same way people did at the time, but.that the ones who are aggressively conventional-minded today would.have been aggressively conventional-minded then too. in other words,.that they'd not only not have fought against slavery, but that.they'd have been among its staunchest defenders.i'm biased, i admit, but it seems to me that aggressively.conventional-minded people are responsible for a disproportionate.amount of the trouble in the world, and that a lot of the customs.we've evolved since the enlightenment have been designed to protect.the rest of us from them. in particular, the retirement of the.concept of heresy and its replacement by the principle of freely.debating all sorts of different ideas, even ones that are currently.considered unacceptable, without any punishment for those who try.them out to see if they work..[2]why do the independent-minded need to be protected, though? because.they have all the new ideas. to be a successful scientist, for.example, it's not enough just to be right. you have to be right.when everyone else is wrong. conventional-minded people can't do.that. for similar reasons, all successful startup ceos are not.merely independent-minded, but aggressively so. so it's no coincidence.that societies prosper only to the extent that they have customs.for keeping the conventional-minded at bay..[3]in the last few years, many of us have noticed that the customs.protecting free inquiry have been weakened. some say we're overreacting. that they haven't been weakened very much, or that they've been.weakened in the service of a greater good. the latter i'll dispose.of immediately. when the conventional-minded get the upper hand,.they always say it's in the service of a greater good.  it just.happens to be a different, incompatible greater good each time.as for the former worry, that the independent-minded are being.oversensitive, and that free inquiry hasn't been shut down that.much, you can't judge that unless you are yourself independent-minded..you can't know how much of the space of ideas is being lopped off.unless you have them, and only the independent-minded have the ones.at the edges. precisely because of this, they tend to be very.sensitive to changes in how freely one can explore ideas. they're.the canaries in this coalmine.the conventional-minded say, as they always do, that they don't.want to shut down the discussion of all ideas, just the bad ones.you'd think it would be obvious just from that sentence what a.dangerous game they're playing. but i'll spell it out. there are.two reasons why we need to be able to discuss even "bad" ideas.the first is that any process for deciding which ideas to ban is.bound to make mistakes. all the more so because no one intelligent.wants to undertake that kind of work, so it ends up being done by.the stupid. and when a process makes a lot of mistakes, you need.to leave a margin for error. which in this case means you need to.ban fewer ideas than you'd like to. but that's hard for the.aggressively conventional-minded to do, partly because they enjoy.seeing people punished, as they have since they were children, and.partly because they compete with one another. enforcers of orthodoxy.can't allow a borderline idea to exist, because that gives other.enforcers an opportunity to one-up them in the moral purity department,.and perhaps even to turn enforcer upon them. so instead of getting.the margin for error we need, we get the opposite: a race to the.bottom in which any idea that seems at all bannable ends up being.banned..[4]the second reason it's dangerous to ban the discussion of ideas is.that ideas are more closely related than they look. which means if.you restrict the discussion of some topics, it doesn't only affect.those topics. the restrictions propagate back into any topic that.yields implications in the forbidden ones. and that is not an edge.case. the best ideas do exactly that: they have consequences.in fields far removed from their origins. having ideas in a world.where some ideas are banned is like playing soccer on a pitch that.has a minefield in one corner. you don't just play the same game.you would have, but on a different shaped pitch. you play a much.more subdued game even on the ground that's safe.in the past, the way the independent-minded protected themselves.was to congregate in a handful of places   first in courts, and.later in universities  where they could to some extent make their.own rules. places where people work with ideas tend to have customs.protecting free inquiry, for the same reason wafer fabs have powerful.air filters, or recording studios good sound insulation. for the.last couple centuries at least, when the aggressively conventional-minded.were on the rampage for whatever reason, universities were the.safest places to be.that may not work this time though, due to the unfortunate fact.that the latest wave of intolerance began in universities. it began.in the mid 1980s, and by 2000 seemed to have died down, but it has.recently flared up again with the arrival of social media. this.seems, unfortunately, to have been an own goal by silicon valley..though the people who run silicon valley are almost all independent-minded,.they've handed the aggressively conventional-minded a tool such as.they could only have dreamed of.on the other hand, perhaps the decline in the spirit of free inquiry.within universities is as much the symptom of the departure of the.independent-minded as the cause. people who would have become.professors 50 years ago have other options now. now they can become.quants or start startups. you have to be independent-minded to.succeed at either of those. if these people had been professors,.they'd have put up a stiffer resistance on behalf of academic.freedom. so perhaps the picture of the independent-minded fleeing.declining universities is too gloomy. perhaps the universities are.declining because so many have already left..[5]though i've spent a lot of time thinking about this situation, i.can't predict how it plays out. could some universities reverse the.current trend and remain places where the independent-minded want.to congregate? or will the independent-minded gradually abandon.them? i worry a lot about what we might lose if that happened.but i'm hopeful long term. the independent-minded are good at.protecting themselves. if existing institutions are compromised,.they'll create new ones. that may require some imagination. but.imagination is, after all, their specialty..notes[1].i realize of course that if people's personalities vary in any.two ways, you can use them as axes and call the resulting four.quadrants personality types. so what i'm really claiming is that.the axes are orthogonal and that there's significant variation in.both.[2].the aggressively conventional-minded aren't responsible for all.the trouble in the world. another big source of trouble is the sort.of charismatic leader who gains power by appealing to them. they.become much more dangerous when such leaders emerge.[3].i never worried about writing things that offended the.conventional-minded when i was running y combinator. if yc were a.cookie company, i'd have faced a difficult moral choice..conventional-minded people eat cookies too. but they don't start.successful startups. so if i deterred them from applying to yc, the.only effect was to save us work reading applications.[4].there has been progress in one area: the punishments for talking.about banned ideas are less severe than in the past. there's little.danger of being killed, at least in richer countries. the aggressively.conventional-minded are mostly satisfied with getting people fired.[5].many professors are independent-minded  especially in math,.the hard sciences, and engineering, where you have to be to succeed..but students are more representative of the general population, and.thus mostly conventional-minded. so when professors and students.are in conflict, it's not just a conflict between generations but.also between different types of people.thanks to sam altman, trevor blackwell, nicholas christakis, patrick.collison, sam gichuru, jessica livingston, patrick mckenzie, geoff.ralston, and harj taggar for reading drafts of this.german translationkorean translationserbian translation<eot><sot>orthodox privilege.july 2020
."few people are capable of expressing with equanimity opinions which differ from the prejudices of their social environment. most people are even incapable of forming such opinions." einstein.there has been a lot of talk about privilege lately. although the.concept is overused, there is something to it, and in particular.to the idea that privilege makes you blind  that you can't see.things that are visible to someone whose life is very different.from yours.but one of the most pervasive examples of this kind of blindness.is one that i haven't seen mentioned explicitly. i'm going to call.it orthodox privilege: the more conventional-minded someone is, the.more it seems to them that it's safe for everyone to express their.opinions.it's safe for them to express their opinions, because the source.of their opinions is whatever it's currently acceptable to believe..so it seems to them that it must be safe for everyone. they literally.can't imagine a true statement that would get you in trouble.and yet at every point in history, there were.true things that would.get you in trouble to say..is ours the first where this.isn't so? what an amazing coincidence that would be.surely it should at least be the default assumption that our time.is not unique, and that there are true things you can't say now,.just as there have always been. you would think. but even in the.face of such overwhelming historical evidence, most people will go.with their gut on this one.in the most extreme cases, people suffering from orthodox.privilege will not only deny that there's anything true that.you can't say, but will accuse you of heresy merely for saying there is..though if there's more than one heresy current in.your time, these accusations will be weirdly non-deterministic:.you must either be an xist or a yist.frustrating as it is to deal with these people, it's important to.realize that they're in earnest. they're not pretending they think.it's impossible for an idea to be both unorthodox and true. the.world really looks that way to them.indeed, this is a uniquely tenacious form of privilege. people can.overcome the blindness induced by most forms of privilege by learning.more about whatever they're not. but they can't overcome orthodox.privilege just by learning more. they'd have to become more.independent-minded. if that happens at all, it doesn't happen on.the time scale of one conversation.it may be possible to convince some people that orthodox privilege.must exist even though they can't sense it, just as one can with,.say, dark matter. there may be some who could be convinced, for.example, that it's very unlikely that this is the first point in.history at which there's nothing true you can't say, even if they.can't imagine specific examples.but in general i don't think it will work to say."check your privilege" about this type of privilege, because those.in its demographic don't realize they're in it. it doesn't seem to.conventional-minded people that they're conventional-minded. it.just seems to them that they're right. indeed, they tend to be.particularly sure of it.perhaps the solution is to appeal to politeness. if someone says.they can hear a high-pitched noise that you can't, it's only polite.to take them at their word, instead of demanding evidence that's.impossible to produce, or simply denying that they hear anything..imagine how rude that would seem. similarly, if someone says they.can think of things that are true but that cannot be said, it's.only polite to take them at their word, even if you can't think of.any yourself..thanks to sam altman, trevor blackwell, patrick collison, antonio garcia-martinez,.jessica livingston, robert morris, michael nielsen, geoff ralston, max roser, and.harj taggar for reading drafts of this.<eot><sot>coronavirus and credibility.april 2020
i recently saw a.video.of tv journalists and politicians confidently.saying that the coronavirus would be no worse than the flu. what.struck me about it was not just how mistaken they seemed, but how.daring. how could they feel safe saying such things?the answer, i realized, is that they didn't think they could get.caught. they didn't realize there was any danger in making false.predictions. these people constantly make false predictions, and.get away with it, because the things they make predictions about.either have mushy enough outcomes that they can bluster their way.out of trouble, or happen so far in the future that few remember.what they said.an epidemic is different. it falsifies your predictions rapidly and.unequivocally.but epidemics are rare enough that these people clearly.didn't realize this was even a possibility. instead they just.continued to use their ordinary m.o., which, as the epidemic has.made clear, is to talk confidently about things they don't.understand.an event like this is thus a uniquely powerful way of taking people's.measure. as warren buffett said, "it's only when the tide goes out.that you learn who's been swimming naked." and the tide has just.gone out like never before.now that we've seen the results, let's remember what we saw, because.this is the most accurate test of credibility we're ever likely to have. i hope.finnish translationgerman translationfrench translation<eot><sot>how to write usefully.february 2020
what should an essay be? many people would say persuasive. that's.what a lot of us were taught essays should be. but i think we can.aim for something more ambitious: that an essay should be useful.to start with, that means it should be correct. but it's not enough.merely to be correct. it's easy to make a statement correct by.making it vague. that's a common flaw in academic writing, for.example. if you know nothing at all about an issue, you can't go.wrong by saying that the issue is a complex one, that there are.many factors to be considered, that it's a mistake to take too.simplistic a view of it, and so on.though no doubt correct, such statements tell the reader nothing..useful writing makes claims that are as strong as they can be made.without becoming false.for example, it's more useful to say that pike's peak is near the.middle of colorado than merely somewhere in colorado. but if i say.it's in the exact middle of colorado, i've now gone too far, because.it's a bit east of the middle.precision and correctness are like opposing forces. it's easy to.satisfy one if you ignore the other. the converse of vaporous.academic writing is the bold, but false, rhetoric of demagogues..useful writing is bold, but true.it's also two other things: it tells people something important,.and that at least some of them didn't already know.telling people something they didn't know doesn't always mean.surprising them. sometimes it means telling them something they.knew unconsciously but had never put into words. in fact those may.be the more valuable insights, because they tend to be more.fundamental.let's put them all together. useful writing tells people something.true and important that they didn't already know, and tells them.as unequivocally as possible.notice these are all a matter of degree. for example, you can't.expect an idea to be novel to everyone. any insight that you have.will probably have already been had by at least one of the world's.7 billion people. but it's sufficient if an idea is novel to a lot.of readers.ditto for correctness, importance, and strength. in effect the four.components are like numbers you can multiply together to get a score.for usefulness. which i realize is almost awkwardly reductive, but.nonetheless true._____.how can you ensure that the things you say are true and novel and.important? believe it or not, there is a trick for doing this. i.learned it from my friend robert morris, who has a horror of saying.anything dumb. his trick is not to say anything unless he's sure.it's worth hearing. this makes it hard to get opinions out of him,.but when you do, they're usually right.translated into essay writing, what this means is that if you write.a bad sentence, you don't publish it. you delete it and try again..often you abandon whole branches of four or five paragraphs. sometimes.a whole essay.you can't ensure that every idea you have is good, but you can.ensure that every one you publish is, by simply not publishing the.ones that aren't.in the sciences, this is called publication bias, and is considered.bad. when some hypothesis you're exploring gets inconclusive results,.you're supposed to tell people about that too. but with essay.writing, publication bias is the way to go.my strategy is loose, then tight. i write the first draft of an.essay fast, trying out all kinds of ideas. then i spend days rewriting.it very carefully.i've never tried to count how many times i proofread essays, but.i'm sure there are sentences i've read 100 times before publishing.them. when i proofread an essay, there are usually passages that.stick out in an annoying way, sometimes because they're clumsily.written, and sometimes because i'm not sure they're true. the.annoyance starts out unconscious, but after the tenth reading or.so i'm saying "ugh, that part" each time i hit it. they become like.briars that catch your sleeve as you walk past. usually i won't.publish an essay till they're all gone  till i can read through.the whole thing without the feeling of anything catching.i'll sometimes let through a sentence that seems clumsy, if i can't.think of a way to rephrase it, but i will never knowingly let through.one that doesn't seem correct. you never have to. if a sentence.doesn't seem right, all you have to do is ask why it doesn't, and.you've usually got the replacement right there in your head.this is where essayists have an advantage over journalists. you.don't have a deadline. you can work for as long on an essay as you.need to get it right. you don't have to publish the essay at all,.if you can't get it right. mistakes seem to lose courage in the.face of an enemy with unlimited resources. or that's what it feels.like. what's really going on is that you have different expectations.for yourself. you're like a parent saying to a child "we can sit.here all night till you eat your vegetables." except you're the.child too.i'm not saying no mistake gets through. for example, i added condition.(c) in "a way to detect bias".after readers pointed out that i'd.omitted it. but in practice you can catch nearly all of them.there's a trick for getting importance too. it's like the trick i.suggest to young founders for getting startup ideas: to make something.you yourself want. you can use yourself as a proxy for the reader..the reader is not completely unlike you, so if you write about.topics that seem important to you, they'll probably seem important.to a significant number of readers as well.importance has two factors. it's the number of people something.matters to, times how much it matters to them. which means of course.that it's not a rectangle, but a sort of ragged comb, like a riemann.sum.the way to get novelty is to write about topics you've thought about.a lot. then you can use yourself as a proxy for the reader in this.department too. anything you notice that surprises you, who've.thought about the topic a lot, will probably also surprise a.significant number of readers. and here, as with correctness and.importance, you can use the morris technique to ensure that you.will. if you don't learn anything from writing an essay, don't.publish it.you need humility to measure novelty, because acknowledging the.novelty of an idea means acknowledging your previous ignorance of.it. confidence and humility are often seen as opposites, but in.this case, as in many others, confidence helps you to be humble..if you know you're an expert on some topic, you can freely admit.when you learn something you didn't know, because you can be confident.that most other people wouldn't know it either.the fourth component of useful writing, strength, comes from two.things: thinking well, and the skillful use of qualification. these.two counterbalance each other, like the accelerator and clutch in.a car with a manual transmission. as you try to refine the expression.of an idea, you adjust the qualification accordingly. something.you're sure of, you can state baldly with no qualification at all,.as i did the four components of useful writing. whereas points that.seem dubious have to be held at arm's length with perhapses.as you refine an idea, you're pushing in the direction of less.qualification. but you can rarely get it down to zero. sometimes.you don't even want to, if it's a side point and a fully refined.version would be too long.some say that qualifications weaken writing. for example, that you.should never begin a sentence in an essay with "i think," because.if you're saying it, then of course you think it. and it's true.that "i think x" is a weaker statement than simply "x." which is.exactly why you need "i think." you need it to express your degree.of certainty.but qualifications are not scalars. they're not just experimental.error. there must be 50 things they can express: how broadly something.applies, how you know it, how happy you are it's so, even how it.could be falsified. i'm not going to try to explore the structure.of qualification here. it's probably more complex than the whole.topic of writing usefully. instead i'll just give you a practical.tip: don't underestimate qualification. it's an important skill in.its own right, not just a sort of tax you have to pay in order to.avoid saying things that are false. so learn and use its full range..it may not be fully half of having good ideas, but it's part of.having them.there's one other quality i aim for in essays: to say things as.simply as possible. but i don't think this is a component of.usefulness. it's more a matter of consideration for the reader. and.it's a practical aid in getting things right; a mistake is more.obvious when expressed in simple language. but i'll admit that the.main reason i write simply is not for the reader's sake or because.it helps get things right, but because it bothers me to use more.or fancier words than i need to. it seems inelegant, like a program.that's too long.i realize florid writing works for some people. but unless you're.sure you're one of them, the best advice is to write as simply as.you can._____.i believe the formula i've given you, importance + novelty +.correctness + strength, is the recipe for a good essay. but i should.warn you that it's also a recipe for making people mad.the root of the problem is novelty. when you tell people something.they didn't know, they don't always thank you for it. sometimes the.reason people don't know something is because they don't want to.know it. usually because it contradicts some cherished belief. and.indeed, if you're looking for novel ideas, popular but mistaken.beliefs are a good place to find them. every popular mistaken belief.creates a dead zone of ideas around.it that are relatively unexplored because they contradict it.the strength component just makes things worse. if there's anything.that annoys people more than having their cherished assumptions.contradicted, it's having them flatly contradicted.plus if you've used the morris technique, your writing will seem.quite confident. perhaps offensively confident, to people who.disagree with you. the reason you'll seem confident is that you are.confident: you've cheated, by only publishing the things you're.sure of.  it will seem to people who try to disagree with you that.you never admit you're wrong. in fact you constantly admit you're.wrong. you just do it before publishing instead of after.and if your writing is as simple as possible, that just makes things.worse. brevity is the diction of command. if you watch someone.delivering unwelcome news from a position of inferiority, you'll.notice they tend to use lots of words, to soften the blow. whereas.to be short with someone is more or less to be rude to them.it can sometimes work to deliberately phrase statements more weakly.than you mean. to put "perhaps" in front of something you're actually.quite sure of. but you'll notice that when writers do this, they.usually do it with a wink.i don't like to do this too much. it's cheesy to adopt an ironic.tone for a whole essay. i think we just have to face the fact that.elegance and curtness are two names for the same thing.you might think that if you work sufficiently hard to ensure that.an essay is correct, it will be invulnerable to attack. that's sort.of true. it will be invulnerable to valid attacks. but in practice.that's little consolation.in fact, the strength component of useful writing will make you.particularly vulnerable to misrepresentation. if you've stated an.idea as strongly as you could without making it false, all anyone.has to do is to exaggerate slightly what you said, and now it is.false.much of the time they're not even doing it deliberately. one of the.most surprising things you'll discover, if you start writing essays,.is that people who disagree with you rarely disagree with what.you've actually written. instead they make up something you said.and disagree with that.for what it's worth, the countermove is to ask someone who does.this to quote a specific sentence or passage you wrote that they.believe is false, and explain why. i say "for what it's worth".because they never do. so although it might seem that this could.get a broken discussion back on track, the truth is that it was.never on track in the first place.should you explicitly forestall likely misinterpretations? yes, if.they're misinterpretations a reasonably smart and well-intentioned.person might make. in fact it's sometimes better to say something.slightly misleading and then add the correction than to try to get.an idea right in one shot. that can be more efficient, and can also.model the way such an idea would be discovered.but i don't think you should explicitly forestall intentional.misinterpretations in the body of an essay. an essay is a place to.meet honest readers. you don't want to spoil your house by putting.bars on the windows to protect against dishonest ones. the place.to protect against intentional misinterpretations is in end-notes..but don't think you can predict them all. people are as ingenious.at misrepresenting you when you say something they don't want to.hear as they are at coming up with rationalizations for things they.want to do but know they shouldn't. i suspect it's the same skill._____.as with most other things, the way to get better at writing essays.is to practice. but how do you start? now that we've examined the.structure of useful writing, we can rephrase that question more.precisely. which constraint do you relax initially? the answer is,.the first component of importance: the number of people who care.about what you write.if you narrow the topic sufficiently, you can probably find something.you're an expert on. write about that to start with. if you only.have ten readers who care, that's fine. you're helping them, and.you're writing. later you can expand the breadth of topics you write.about.the other constraint you can relax is a little surprising: publication..writing essays doesn't have to mean publishing them. that may seem.strange now that the trend is to publish every random thought, but.it worked for me. i wrote what amounted to essays in notebooks for.about 15 years. i never published any of them and never expected.to. i wrote them as a way of figuring things out. but when the web.came along i'd had a lot of practice.incidentally,.steve.wozniak did the same thing. in high school he.designed computers on paper for fun. he couldn't build them because.he couldn't afford the components. but when intel launched 4k drams.in 1975, he was ready._____.how many essays are there left to write though? the answer to that.question is probably the most exciting thing i've learned about.essay writing. nearly all of them are left to write.although the essay.is an old form, it hasn't been assiduously.cultivated. in the print era, publication was expensive, and there.wasn't enough demand for essays to publish that many. you could.publish essays if you were already well known for writing something.else, like novels. or you could write book reviews that you took.over to express your own ideas. but there was not really a direct.path to becoming an essayist. which meant few essays got written,.and those that did tended to be about a narrow range of subjects.now, thanks to the internet, there's a path. anyone can publish.essays online. you start in obscurity, perhaps, but at least you.can start. you don't need anyone's permission.it sometimes happens that an area of knowledge sits quietly for.years, till some change makes it explode. cryptography did this to.number theory. the internet is doing it to the essay.the exciting thing is not that there's a lot left to write, but.that there's a lot left to discover. there's a certain kind of idea.that's best discovered by writing essays. if most essays are still.unwritten, most such ideas are still undiscovered.notes[1] put railings on the balconies, but don't put bars on the windows.[2] even now i sometimes write essays that are not meant for.publication. i wrote several to figure out what y combinator should.do, and they were really helpful.thanks to trevor blackwell, daniel gackle, jessica livingston, and.robert morris for reading drafts of this.spanish translationjapanese translation<eot><sot>being a noob.january 2020
when i was young, i thought old people had everything figured out..now that i'm old, i know this isn't true.i constantly feel like a noob. it seems like i'm always talking to.some startup working in a new field i know nothing about, or reading.a book about a topic i don't understand well enough, or visiting some new.country where i don't know how things work.it's not pleasant to feel like a noob. and the word "noob" is.certainly not a compliment. and yet today i realized something.encouraging about being a noob: the more of a noob you are locally,.the less of a noob you are globally.for example, if you stay in your home country, you'll feel less.of a noob than if you move to farawavia, where everything works.differently. and yet you'll know more if you move..so the feeling of being a noob is inversely correlated with actual.ignorance.but if the feeling of being a noob is good for us, why do we dislike.it? what evolutionary purpose could such an aversion serve?i think the answer is that there are two sources of feeling like a.noob: being stupid, and doing something novel. our dislike of feeling.like a noob is our brain telling us "come on, come on, figure this.out." which was the right thing to be thinking for most of human.history. the life of hunter-gatherers was complex, but it didn't.change as much as life does now. they didn't suddenly have to figure.out what to do about cryptocurrency. so it made sense to be biased.toward competence at existing problems over the discovery of new.ones. it made sense for humans to dislike the feeling of being a.noob, just as, in a world where food was scarce, it made sense for.them to dislike the feeling of being hungry.now that too much food is more of a problem than too little, our.dislike of feeling hungry leads us astray. and i think our dislike.of feeling like a noob does too.though it feels unpleasant, and people will sometimes ridicule you.for it, the more you feel like a noob, the better.japanese translationarabic translationfrench translationkorean translationpolish translationchinese translationserbian translationfrench translation<eot><sot>haters.january 2020
(i originally intended this for startup founders, who are often.surprised by the attention they get as their companies grow, but.it applies equally to anyone who becomes famous.)if you become sufficiently famous, you'll acquire some fans who.like you too much. these people are sometimes called "fanboys," and.though i dislike that term, i'm going to have to use it here.  we.need some word for them, because this is a distinct phenomenon from.someone simply liking your work.a fanboy is obsessive and uncritical. liking you becomes part of.their identity, and they create an image of you in their own head.that is much better than reality. everything you do is good, because.you do it. if you do something bad, they find a way to see it as.good. and their love for you is not, usually, a quiet, private one..they want everyone to know how great you are.well, you may be thinking, i could do without this kind of obsessive.fan, but i know there are all kinds of people in the world, and if.this is the worst consequence of fame, that's not so bad.unfortunately this is not the worst consequence of fame. as well.as fanboys, you'll have haters.a hater is obsessive and uncritical. disliking you becomes part of.their identity, and they create an image of you in their own head.that is much worse than reality. everything you do is bad, because.you do it. if you do something good, they find a way to see it as.bad. and their dislike for you is not, usually, a quiet, private.one. they want everyone to know how awful you are.if you're thinking of checking, i'll save you the trouble. the.second and fifth paragraphs are identical except for "good" being.switched to "bad" and so on.i spent years puzzling about haters.  what are they, and where do.they come from? then one day it dawned on me. haters are just fanboys.with the sign switched.note that by haters, i don't simply mean trolls. i'm not talking about.people who say bad things about you and then move on. i'm talking.about the much smaller group of people for whom this becomes a.kind of obsession and who do it repeatedly over a long period.like fans, haters seem to be an automatic consequence of fame..anyone sufficiently famous will have them. and like fans, haters.are energized by the fame of whoever they hate. they hear a song.by some pop singer. they don't like it much. if the singer were an.obscure one, they'd just forget about it. but instead they keep.hearing her name, and this seems to drive some people crazy..everyone's always going on about this singer, but she's no good!.she's a fraud!that word "fraud" is an important one. it's the spectral signature.of a hater to regard the object of their hatred as a.fraud. they.can't deny their fame. indeed, their fame is if anything exaggerated.in the hater's mind. they notice every mention of the singer's name,.because every mention makes them angrier. in their own minds they.exaggerate both the singer's fame and her lack of talent, and the.only way to reconcile those two ideas is to conclude that she has.tricked everyone.what sort of people become haters? can anyone become one? i'm not.sure about this, but i've noticed some patterns. haters are generally.losers in a very specific sense: although they are occasionally.talented, they have never achieved much. and indeed, anyone.successful enough to have achieved significant fame would be unlikely.to regard another famous person as a fraud on that account, because.anyone famous knows how random fame is.but haters are not always complete losers. they are not always the.proverbial guy living in his mom's basement. many are, but some.have some amount of talent. in fact i suspect that a sense of.frustrated talent is what drives some people to become haters..they're not just saying "it's unfair that so-and-so is famous," but."it's unfair that so-and-so is famous, and not me."could a hater be cured if they achieved something impressive? my.guess is that's a moot point, because they.never will. i've been.able to observe for long enough that i'm fairly confident the pattern.works both ways: not only do people who do great work never become.haters, haters never do great work. although i dislike the word."fanboy," it's evocative of something important about both haters.and fanboys. it implies that the fanboy is so slavishly predictable in his admiration.that he's diminished as a result, that he's less than a man.haters seem even more diminished. i can imagine being a fanboy..i can think of people whose work i admire so much that i could abase.myself before them out of sheer gratitude. if p. g.  wodehouse were.still alive, i could see myself being a wodehouse fanboy. but i.could not imagine being a hater.knowing that haters are just fanboys with the sign bit flipped makes.it much easier to deal with them. we don't need a separate theory.of haters. we can just use existing techniques for dealing with.obsessive fans.the most important of which is simply not to think much about them..if you're like most people who become famous enough to acquire.haters, your initial reaction will be one of mystification. why.does this guy seem to have it in for me? where does his obsessive.energy come from, and what makes him so appallingly nasty? what did.i do to set him off? is it something i can fix?the mistake here is to think of the hater as someone you have a.dispute with. when you have a dispute with someone, it's usually a.good idea to try to understand why they're upset and then fix things.if you can. disputes are distracting. but it's a false analogy to.think of a hater as someone you have a dispute with.  it's an.understandable mistake, if you've never encountered haters before..but when you realize that you're dealing with a hater, and what a.hater is, it's clear that it's a waste of time even to think about.them. if you have obsessive fans, do you spend any time wondering.what makes them love you so much? no, you just think "some.people are kind of crazy," and that's the end of it.since haters are equivalent to fanboys, that's the way to deal with.them too. there may have been something that set them off. but it's.not something that would have set off a normal person, so there's.no reason to spend any time thinking about it. it's not you, it's.them.notes[1] there are of course some people who are genuine frauds. how can.you distinguish between x calling y a fraud because x is a hater,.and because y is a fraud? look at neutral opinion. actual frauds.are usually pretty conspicuous. thoughtful people are rarely taken.in by them. so if there are some thoughtful people who like y, you.can usually assume y is not a fraud.[2] i would make an exception for teenagers, who sometimes act in.such extreme ways that they are literally not themselves. i can.imagine a teenage kid being a hater and then growing out of it. but.not anyone over 25.[3] i have a much worse memory for misdeeds than my wife jessica,.who is a connoisseur of character, but i don't wish it were better..most disputes are a waste of time even if you're in the right, and.it's easy to bury the hatchet with someone if you can't remember.why you were mad at them.[4] a competent hater will not merely attack you individually but.will try to get mobs after you. in some cases you may want to refute.whatever bogus claim they made in order to do so. but err on the.side of not, because ultimately it probably won't matter.thanks to austen allred, trevor blackwell, patrick collison,.christine ford, daniel gackle, jessica livingston, robert morris,.elon musk, harj taggar, and peter thiel for reading drafts of this.japanese translationarabic translationpolish translation<eot><sot>the two kinds of moderate.december 2019
there are two distinct ways to be politically moderate: on purpose.and by accident. intentional moderates are trimmers, deliberately.choosing a position mid-way between the extremes of right and left..accidental moderates end up in the middle, on average, because they.make up their own minds about each question, and the far right and.far left are roughly equally wrong.you can distinguish intentional from accidental moderates by the.distribution of their opinions. if the far left opinion on some.matter is 0 and the far right opinion 100, an intentional moderate's.opinion on every question will be near 50. whereas an accidental.moderate's opinions will be scattered over a broad range, but will,.like those of the intentional moderate, average to about 50.intentional moderates are similar to those on the far left and the.far right in that their opinions are, in a sense, not their own..the defining quality of an ideologue, whether on the left or the.right, is to acquire one's opinions in bulk. you don't get to pick.and choose. your opinions about taxation can be predicted from your.opinions about sex. and although intentional moderates.might seem to be the opposite of ideologues, their beliefs (though.in their case the word "positions" might be more accurate) are also.acquired in bulk. if the median opinion shifts to the right or left,.the intentional moderate must shift with it. otherwise they stop.being moderate.accidental moderates, on the other hand, not only choose their own.answers, but choose their own questions. they may not care at all.about questions that the left and right both think are terribly.important. so you can only even measure the politics of an accidental.moderate from the intersection of the questions they care about and.those the left and right care about, and this can.sometimes be vanishingly small.it is not merely a manipulative rhetorical trick to say "if you're.not with us, you're against us," but often simply false.moderates are sometimes derided as cowards, particularly by.the extreme left. but while it may be accurate to call intentional.moderates cowards, openly being an accidental moderate requires the.most courage of all, because you get attacked from both right and.left, and you don't have the comfort of being an orthodox member.of a large group to sustain you.nearly all the most impressive people i know are accidental moderates..if i knew a lot of professional athletes, or people in the entertainment.business, that might be different. being on the far left or far.right doesn't affect how fast you run or how well you sing. but.someone who works with ideas has to be independent-minded to do it.well.or more precisely, you have to be independent-minded about the ideas.you work with. you could be mindlessly doctrinaire in your politics.and still be a good mathematician. in the 20th century, a lot of.very smart people were marxists  just no one who was smart about.the subjects marxism involves. but if the ideas you use in your.work intersect with the politics of your time, you have two choices:.be an accidental moderate, or be mediocre.notes[1] it's possible in theory for one side to be entirely right and.the other to be entirely wrong. indeed, ideologues must always.believe this is the case. but historically it rarely has been.[2] for some reason the far right tend to ignore moderates rather.than despise them as backsliders. i'm not sure why. perhaps it.means that the far right is less ideological than the far left. or.perhaps that they are more confident, or more resigned, or simply.more disorganized. i just don't know.[3] having heretical opinions doesn't mean you have to express.them openly. it may be.easier to have them if you don't..thanks to austen allred, trevor blackwell, patrick collison, jessica livingston,.amjad masad, ryan petersen, and harj taggar for reading drafts of this.japanese translation<eot><sot>fashionable problems.december 2019
i've seen the same pattern in many different fields: even though.lots of people have worked hard in the field, only a small fraction.of the space of possibilities has been explored, because they've.all worked on similar things.even the smartest, most imaginative people are surprisingly.conservative when deciding what to work on. people who would never.dream of being fashionable in any other way get sucked into working.on fashionable problems.if you want to try working on unfashionable problems, one of the.best places to look is in fields that people think have already been.fully explored: essays, lisp, venture funding  you may notice a.pattern here. if you can find a new approach into a big but apparently.played out field, the value of whatever you discover will be.multiplied by its enormous surface area.the best protection against getting drawn into working on the same.things as everyone else may be to genuinely.love what you're doing..then you'll continue to work on it even if you make the same mistake.as other people and think that it's too marginal to matter.japanese translationarabic translationfrench translation<eot><sot>having kids.december 2019
before i had kids, i was afraid of having kids. up to that point i.felt about kids the way the young augustine felt about living.virtuously. i'd have been sad to think i'd never have children..but did i want them now? no.if i had kids, i'd become a parent, and parents, as i'd known since.i was a kid, were uncool. they were dull and responsible and had.no fun.  and while it's not surprising that kids would believe that,.to be honest i hadn't seen much as an adult to change my mind..whenever i'd noticed parents with kids, the kids seemed to be.terrors, and the parents pathetic harried creatures, even when they.prevailed.when people had babies, i congratulated them enthusiastically,.because that seemed to be what one did. but i didn't feel it at.all.  "better you than me," i was thinking.now when people have babies i congratulate them enthusiastically and.i mean it. especially the first one. i feel like they just got the best gift in the world.what changed, of course, is that i had kids. something i dreaded.turned out to be wonderful.partly, and i won't deny it, this is because of serious chemical.changes that happened almost instantly when our first child was.born.  it was like someone flipped a switch. i suddenly felt.protective not just toward our child, but toward all children. as i was.driving my wife and new son home from the hospital, i approached a.crosswalk full of pedestrians, and i found myself thinking "i have.to be really careful of all these people. every one of them is.someone's child!"so to some extent you can't trust me when i say having kids is.great.  to some extent i'm like a religious cultist telling you.that you'll be happy if you join the cult too  but only because.joining the cult will alter your mind in a way that will make you.happy to be a cult member.but not entirely. there were some things.about having kids that i clearly got wrong before i had them.for example, there was a huge amount of selection bias in my.observations of parents and children. some parents may have noticed.that i wrote "whenever i'd noticed parents with kids." of course.the times i noticed kids were when things were going wrong. i only.noticed them when they made noise. and where was i when i noticed.them?  ordinarily i never went to places with kids, so the only.times i encountered them were in shared bottlenecks like airplanes..which is not exactly a representative sample. flying with a toddler.is something very few parents enjoy.what i didn't notice, because they tend to be much quieter, were.all the great moments parents had with kids. people don't talk about.these much  the magic is hard to put into words, and all other.parents know about them anyway  but one of the great things about.having kids is that there are so many times when you feel there is.nowhere else you'd rather be, and nothing else you'd rather be.doing.  you don't have to be doing anything special. you could just.be going somewhere together, or putting them to bed, or pushing.them on the swings at the park. but you wouldn't trade these moments.for anything. one doesn't tend to associate kids with peace, but.that's what you feel.  you don't need to look any.further than where you are right now.before i had kids, i had moments of this kind of peace, but they.were rarer. with kids it can happen several times a day.my other source of data about kids was my own childhood, and that.was similarly misleading. i was pretty bad, and was always in trouble.for something or other. so it seemed to me that parenthood was.essentially law enforcement.  i didn't realize there were good times.too.i remember my mother telling me once when i was about 30 that she'd.really enjoyed having me and my sister. my god, i thought, this.woman is a saint. she not only endured all the pain we subjected.her to, but actually enjoyed it? now i realize she was simply telling.the truth.she said that one reason she liked having us was that we'd been.interesting to talk to. that took me by surprise when i had kids..you don't just love them. they become your friends too. they're.really interesting. and while i admit small children are disastrously.fond of repetition (anything worth doing once is worth doing fifty.times) it's often genuinely fun to play with them.  that surprised.me too. playing with a 2 year old was fun when i was 2 and definitely.not fun when i was 6. why would it become fun again later? but it.does.there are of course times that are pure drudgery. or worse still,.terror. having kids is one of those intense types of experience.that are hard to imagine unless you've had them. but it is not, as i.implicitly believed before having kids, simply your dna heading for.the lifeboats.some of my worries about having kids were right, though. they.definitely make you less productive. i know having kids makes some.people get their act together, but if your act was already together,.you're going to have less time to do it in. in particular, you're.going to have to work to a schedule. kids have schedules.  i'm not.sure if it's because that's how kids are, or because it's the only.way to integrate their lives with adults', but once you have kids,.you tend to have to work on their schedule.you will have chunks of time to work. but you can't let work spill.promiscuously through your whole life, like i used to before i had.kids. you're going to have to work at the same time every day,.whether inspiration is flowing or not, and there are going to be.times when you have to stop, even if it is.i've been able to adapt to working this way. work, like love, finds.a way. if there are only certain times it can happen, it happens.at those times. so while i don't get as much done as before i had.kids, i get enough done.i hate to say this, because being ambitious has always been a part.of my identity, but having kids may make one less ambitious. it.hurts to see that sentence written down. i squirm to avoid it. but.if there weren't something real there, why would i squirm?  the.fact is, once you have kids, you're probably going to care more.about them than you do about yourself. and attention is a zero-sum.game. only one idea at a time can be the.top idea in your mind..once you have kids, it will often be your kids, and that means it.will less often be some project you're working on.i have some hacks for sailing close to this wind. for example, when.i write essays, i think about what i'd want my kids to know. that.drives me to get things right. and when i was writing.bel, i told.my kids that once i finished it i'd take them to africa. when you.say that sort of thing to a little kid, they treat it as a promise..which meant i had to finish or i'd be taking away their trip to.africa.  maybe if i'm really lucky such tricks could put me net.ahead. but the wind is there, no question.on the other hand, what kind of wimpy ambition do you have if it.won't survive having kids? do you have so little to spare?and while having kids may be warping my present judgement, it hasn't.overwritten my memory. i remember perfectly well what life was like.before. well enough to miss some things a lot, like the.ability to take off for some other country at a moment's notice..that was so great. why did i never do that?see what i did there? the fact is, most of the freedom i had before.kids, i never used. i paid for it in loneliness, but i never used.it.i had plenty of happy times before i had kids. but if i count up.happy moments, not just potential happiness but actual happy moments,.there are more after kids than before. now i practically have it.on tap, almost any bedtime.people's experiences as parents.vary a lot, and i know i've been lucky. but i think the worries i.had before having kids must be pretty common, and judging by other.parents' faces when they see their kids, so must the happiness that.kids bring..note[1] adults are sophisticated enough to see 2 year olds for the.fascinatingly complex characters they are, whereas to most 6 year.olds, 2 year olds are just defective 6 year olds.thanks to trevor blackwell, jessica livingston, and robert morris.for reading drafts of this.arabic translationslovak translation<eot><sot>the lesson to unlearn.december 2019
.the most damaging thing you learned in school wasn't something you.learned in any specific class. it was learning to get good grades.when i was in college, a particularly earnest philosophy grad student.once told me that he never cared what grade he got in a class, only.what he learned in it. this stuck in my mind because it was the.only time i ever heard anyone say such a thing.for me, as for most students, the measurement of what i was learning.completely dominated actual learning in college.  i was fairly.earnest; i was genuinely interested in most of the classes i took,.and i worked hard. and yet i worked by far the hardest when i was.studying for a test.in theory, tests are merely what their name implies: tests of what.you've learned in the class. in theory you shouldn't have to prepare.for a test in a class any more than you have to prepare for a blood.test. in theory you learn from taking the class, from going to the.lectures and doing the reading and/or assignments, and the test.that comes afterward merely measures how well you learned.in practice, as almost everyone reading this will know, things are.so different that hearing this explanation of how classes and tests.are meant to work is like hearing the etymology of a word whose.meaning has changed completely. in practice, the phrase "studying.for a test" was almost redundant, because that was when one really.studied.  the difference between diligent and slack students was.that the former studied hard for tests and the latter didn't.  no.one was pulling all-nighters two weeks into the semester.even though i was a diligent student, almost all the work i did in.school was aimed at getting a good grade on something.to many people, it would seem strange that the preceding sentence.has a "though" in it. aren't i merely stating a tautology? isn't.that what a diligent student is, a straight-a student? that's how.deeply the conflation of learning with grades has infused our.culture.is it so bad if learning is conflated with grades?  yes, it is bad..and it wasn't till decades after college, when i was running y combinator, that i realized how bad it is.i knew of course when i was a student that studying for a test is.far from identical with actual learning. at the very least, you.don't retain knowledge you cram into your head the night before an.exam. but the problem is worse than that. the real problem is that.most tests don't come close to measuring what they're supposed to.if tests truly were tests of learning, things wouldn't be so bad..getting good grades and learning would converge, just a little late..the problem is that nearly all tests given to students are terribly.hackable. most people who've gotten good grades know this, and know.it so well they've ceased even to question it.  you'll see when you.realize how naive it sounds to act otherwise.suppose you're taking a class on medieval history and the final.exam is coming up. the final exam is supposed to be a test of your.knowledge of medieval history, right? so if you have a couple days.between now and the exam, surely the best way to spend the time,.if you want to do well on the exam, is to read the best books you.can find about medieval history. then you'll know a lot about it,.and do well on the exam.no, no, no, experienced students are saying to themselves.  if you.merely read good books on medieval history, most of the stuff you.learned wouldn't be on the test.  it's not good books you want to.read, but the lecture notes and assigned reading in this class..and even most of that you can ignore, because you only have to worry.about the sort of thing that could turn up as a test question..you're looking for sharply-defined chunks of information. if one.of the assigned readings has an interesting digression on some.subtle point, you can safely ignore that, because it's not the sort.of thing that could be turned into a test question.  but if the.professor tells you that there were three underlying causes of the.schism of 1378, or three main consequences of the black death, you'd.better know them. and whether they were in fact the causes or.consequences is beside the point.  for the purposes of this class.they are.at a university there are often copies of old exams floating around,.and these narrow still further what you have to learn. as well as.learning what kind of questions this professor asks, you'll often.get actual exam questions. many professors re-use them.  after.teaching a class for 10 years, it would be hard not to, at least.inadvertently.in some classes, your professor will have had some sort of political.axe to grind, and if so you'll have to grind it too. the need for.this varies. in classes in math or the hard sciences or engineering.it's rarely necessary, but at the other end of the spectrum there.are classes where you couldn't get a good grade without it.getting a good grade in a class on x is so different from learning.a lot about x that you have to choose one or the other, and you.can't blame students if they choose grades.  everyone judges them.by their grades  graduate programs, employers, scholarships, even.their own parents.i liked learning, and i really enjoyed some of the papers and.programs i wrote in college. but did i ever, after turning in a.paper in some class, sit down and write another just for fun? of.course not. i had things due in other classes. if it ever came to.a choice of learning or grades, i chose grades. i hadn't come to.college to do badly.anyone who cares about getting good grades has to play this game,.or they'll be surpassed by those who do. and at elite universities,.that means nearly everyone, since someone who didn't care about.getting good grades probably wouldn't be there in the first place..the result is that students compete to maximize the difference.between learning and getting good grades.why are tests so bad? more precisely, why are they so hackable?.any experienced programmer could answer that. how hackable is.software whose author hasn't paid any attention to preventing it.from being hacked? usually it's as porous as a colander.hackable is the default for any test imposed by an authority. the.reason the tests you're given are so consistently bad  so consistently.far from measuring what they're supposed to measure  is simply.that the people creating them haven't made much effort to prevent.them from being hacked.but you can't blame teachers if their tests are hackable. their job.is to teach, not to create unhackable tests. the real problem is.grades, or more precisely, that grades have been overloaded. if.grades were merely a way for teachers to tell students what they.were doing right and wrong, like a coach giving advice to an athlete,.students wouldn't be tempted to hack tests. but unfortunately after.a certain age grades become more than advice. after a certain age,.whenever you're being taught, you're usually also being judged.i've used college tests as an example, but those are actually the.least hackable. all the tests most students take their whole lives.are at least as bad, including, most spectacularly of all, the test.that gets them into college. if getting into college were merely a.matter of having the quality of one's mind measured by admissions.officers the way scientists measure the mass of an object, we could.tell teenage kids "learn a lot" and leave it at that.  you can tell.how bad college admissions are, as a test, from how unlike high.school that sounds. in practice, the freakishly specific nature of.the stuff ambitious kids have to do in high school is directly.proportionate to the hackability of college admissions.  the classes.you don't care about that are mostly memorization, the random."extracurricular activities" you have to participate in to show.you're "well-rounded," the standardized tests as artificial as.chess, the "essay" you have to write that's presumably meant to hit.some very specific target, but you're not told what.as well as being bad in what it does to kids, this test is also bad.in the sense of being very hackable. so hackable that whole industries.have grown up to hack it. this is the explicit purpose of test-prep.companies and admissions counsellors, but it's also a significant.part of the function of private schools.why is this particular test so hackable? i think because of what.it's measuring. although the popular story is that the way to get.into a good college is to be really smart, admissions officers at.elite colleges neither are, nor claim to be, looking only for that..what are they looking for?  they're looking for people who are not.simply smart, but admirable in some more general sense.  and how.is this more general admirableness measured?  the admissions officers.feel it. in other words, they accept who they like.so what college admissions is a test of is whether you suit the.taste of some group of people. well, of course a test like that is.going to be hackable. and because it's both very hackable and there's.(thought to be) a lot at stake, it's hacked like nothing else..that's why it distorts your life so much for so long.it's no wonder high school students often feel alienated. the shape.of their lives is completely artificial.but wasting your time is not the worst thing the educational system.does to you. the worst thing it does is to train you that the way.to win is by hacking bad tests.  this is a much subtler problem.that i didn't recognize until i saw it happening to other people.when i started advising startup founders at y combinator, especially.young ones, i was puzzled by the way they always seemed to make.things overcomplicated. how, they would ask, do you raise money?.what's the trick for making venture capitalists want to invest in.you? the best way to make vcs want to invest in you, i would explain,.is to actually be a good investment. even if you could trick vcs.into investing in a bad startup, you'd be tricking yourselves too..you're investing time in the same company you're asking them to.invest money in. if it's not a good investment, why are you even.doing it?oh, they'd say, and then after a pause to digest this revelation,.they'd ask: what makes a startup a good investment?so i would explain that what makes a startup promising, not just.in the eyes of investors but in fact, is.growth..ideally in revenue,.but failing that in usage. what they needed to do was get lots of.users.how does one get lots of users? they had all kinds of ideas about.that. they needed to do a big launch that would get them "exposure.".they needed influential people to talk about them. they even knew.they needed to launch on a tuesday, because that's when one gets.the most attention.no, i would explain, that is not how to get lots of users. the way.you get lots of users is to make the product really great. then.people will not only use it but recommend it to their friends, so.your growth will be exponential once you.get it started.at this point i've told the founders something you'd think would.be completely obvious: that they should make a good company by.making a good product. and yet their reaction would be something.like the reaction many physicists must have had when they first.heard about the theory of relativity: a mixture of astonishment at.its apparent genius, combined with a suspicion that anything so.weird couldn't possibly be right. ok, they would say, dutifully..and could you introduce us to such-and-such influential person? and.remember, we want to launch on tuesday.it would sometimes take founders years to grasp these simple lessons..and not because they were lazy or stupid. they just seemed blind.to what was right in front of them.why, i would ask myself, do they always make things so complicated?.and then one day i realized this was not a rhetorical question.why did founders tie themselves in knots doing the wrong things.when the answer was right in front of them? because that was what.they'd been trained to do. their education had taught them that the.way to win was to hack the test. and without even telling them they.were being trained to do this. the younger ones, the recent graduates,.had never faced a non-artificial test. they thought this was just.how the world worked: that the first thing you did, when facing any.kind of challenge, was to figure out what the trick was for hacking.the test. that's why the conversation would always start with how.to raise money, because that read as the test. it came at the end.of yc. it had numbers attached to it, and higher numbers seemed to.be better. it must be the test.there are certainly big chunks of the world where the way to win.is to hack the test. this phenomenon isn't limited to schools.  and.some people, either due to ideology or ignorance, claim that this.is true of startups too. but it isn't. in fact, one of the most.striking things about startups is the degree to which you win by.simply doing good work. there are edge cases, as there are in.anything, but in general you win by getting users, and what users.care about is whether the product does what they want.why did it take me so long to understand why founders made startups.overcomplicated? because i hadn't realized explicitly that schools.train us to win by hacking bad tests. and not just them, but me!.i'd been trained to hack bad tests too, and hadn't realized it till.decades later.i had lived as if i realized it, but without knowing why. for.example, i had avoided working for big companies. but if you'd asked.why, i'd have said it was because they were bogus, or bureaucratic..or just yuck. i never understood how much of my dislike of big.companies was due to the fact that you win by hacking bad tests.similarly, the fact that the tests were unhackable was a lot of.what attracted me to startups. but again, i hadn't realized that.explicitly.i had in effect achieved by successive approximations something.that may have a closed-form solution.  i had gradually undone my.training in hacking bad tests without knowing i was doing it.  could.someone coming out of school banish this demon just by knowing its.name, and saying begone? it seems worth trying.merely talking explicitly about this phenomenon is likely to make.things better, because much of its power comes from the fact that.we take it for granted. after you've noticed it, it seems the.elephant in the room, but it's a pretty well camouflaged elephant..the phenomenon is so old, and so pervasive. and it's simply the.result of neglect. no one meant things to be this way. this is just.what happens when you combine learning with grades, competition,.and the naive assumption of unhackability.it was mind-blowing to realize that two of the things i'd puzzled.about the most  the bogusness of high school, and the difficulty.of getting founders to see the obvious  both had the same cause..it's rare for such a big block to slide into place so late.usually when that happens it has implications in a lot of different.areas, and this case seems no exception. for example, it suggests.both that education could be done better, and how you might fix it..but it also suggests a potential answer to the question all big.companies seem to have: how can we be more like a startup? i'm not.going to chase down all the implications now. what i want to focus.on here is what it means for individuals.to start with, it means that most ambitious kids graduating from.college have something they may want to unlearn.  but it also changes.how you look at the world. instead of looking at all the different.kinds of work people do and thinking of them vaguely as more or.less appealing, you can now ask a very specific question that will.sort them in an interesting way: to what extent do you win at this.kind of work by hacking bad tests?it would help if there was a way to recognize bad tests quickly..is there a pattern here? it turns out there is.tests can be divided into two kinds: those that are imposed by.authorities, and those that aren't.  tests that aren't imposed by.authorities are inherently unhackable, in the sense that no one is.claiming they're tests of anything more than they actually test. a.football match, for example, is simply a test of who wins, not which.team is better. you can tell that from the fact that commentators.sometimes say afterward that the better team won. whereas tests.imposed by authorities are usually proxies for something else. a.test in a class is supposed to measure not just how well you did.on that particular test, but how much you learned in the class..while tests that aren't imposed by authorities are inherently.unhackable, those imposed by authorities have to be made unhackable..usually they aren't.  so as a first approximation, bad tests are.roughly equivalent to tests imposed by authorities.you might actually like to win by hacking bad tests. presumably.some people do. but i bet most people who find themselves doing.this kind of work don't like it. they just take it for granted that.this is how the world works, unless you want to drop out and be.some kind of hippie artisan.i suspect many people implicitly assume that working in a.field with bad tests is the price of making lots of money. but that,.i can tell you, is false. it used to be true. in the mid-twentieth.century, when the economy was.composed of oligopolies,.the only way.to the top was by playing their game. but it's not true now.  there.are now ways to get rich by doing good work, and that's part of the.reason people are so much more excited about getting rich than they.used to be. when i was a kid, you could either become an engineer.and make cool things, or make lots of money by becoming an "executive.".now you can make lots of money by making cool things.hacking bad tests is becoming less important as the link between.work and authority erodes. the erosion of that link is one of the.most important trends happening now, and we see its effects in.almost every kind of work people do. startups are one of the most.visible examples, but we see much the same thing in writing. writers.no longer have to submit to publishers and editors to reach readers;.now they can go direct.the more i think about this question, the more optimistic i get..this seems one of those situations where we don't realize how much.something was holding us back until it's eliminated. and i can.foresee the whole bogus edifice crumbling. imagine what happens as.more and more people start to ask themselves if they want to win.by hacking bad tests, and decide that they don't.  the kinds of.work where you win by hacking bad tests will be starved of talent,.and the kinds where you win by doing good work will see an influx.of the most ambitious people. and as hacking bad tests shrinks in.importance, education will evolve to stop training us to do it..imagine what the world could look like if that happened.this is not just a lesson for individuals to unlearn, but one for.society to unlearn, and we'll be amazed at the energy that's liberated.when we do..notes[1] if using tests only to measure learning sounds impossibly.utopian, that is already the way things work at lambda school..lambda school doesn't have grades. you either graduate or you don't..the only purpose of tests is to decide at each stage of the curriculum.whether you can continue to the next. so in effect the whole school.is pass/fail.[2] if the final exam consisted of a long conversation with the.professor, you could prepare for it by reading good books on medieval.history. a lot of the hackability of tests in schools is due to the.fact that the same test has to be given to large numbers of students.[3] learning is the naive algorithm for getting good grades.[4] hacking has.multiple senses. there's a narrow sense in which.it means to compromise something. that's the sense in which one.hacks a bad test. but there's another, more general sense, meaning.to find a surprising solution to a problem, often by thinking.differently about it. hacking in this sense is a wonderful thing..and indeed, some of the hacks people use on bad tests are impressively.ingenious; the problem is not so much the hacking as that, because.the tests are hackable, they don't test what they're meant to.[5] the people who pick startups at y combinator are similar to.admissions officers, except that instead of being arbitrary, their.acceptance criteria are trained by a very tight feedback loop. if.you accept a bad startup or reject a good one, you will usually know it.within a year or two at the latest, and often within a month.[6] i'm sure admissions officers are tired of reading applications.from kids who seem to have no personality beyond being willing to.seem however they're supposed to seem to get accepted.  what they.don't realize is that they are, in a sense, looking in a mirror..the lack of authenticity in the applicants is a reflection of the.arbitrariness of the application process. a dictator might just as.well complain about the lack of authenticity in the people around.him.[7] by good work, i don't mean morally good, but good in the sense.in which a good craftsman does good work.[8] there are borderline cases where it's hard to say which category.a test falls in. for example, is raising venture capital like college.admissions, or is it like selling to a customer?[9] note that a good test is merely one that's unhackable. good.here doesn't mean morally good, but good in the sense of working.well. the difference between fields with bad tests and good ones.is not that the former are bad and the latter are good, but that.the former are bogus and the latter aren't. but those two measures.are not unrelated.  as tara ploughman said, the path from good to.evil goes through bogus.[10] people who think the recent increase in.economic inequality is.due to changes in tax policy seem very naive to anyone with experience.in startups. different people are getting rich now than used to,.and they're getting much richer than mere tax savings could make.them.[11] note to tiger parents: you may think you're training your kids.to win, but if you're training them to win by hacking bad tests,.you are, as parents so often do, training them to fight the last.war.thanks to austen allred, trevor blackwell, patrick collison,.jessica livingston, robert morris, and harj taggar for reading.drafts of this.russian translationarabic translationswedish translation<eot><sot>novelty and heresy.november 2019
if you discover something new, there's a significant chance you'll be.accused of some form of heresy.to discover new things, you have.to work on ideas that are good but non-obvious; if an idea is.obviously good, other people are probably already working on it..one common way for a good idea to be non-obvious is for it to be hidden in the.shadow of some mistaken assumption that people are very attached to..but anything you discover from working on such an idea will tend to.contradict the mistaken assumption that was concealing it.  and you.will thus get a lot of heat from people attached to the mistaken.assumption. galileo and darwin are famous examples of this phenomenon,.but it's probably always an ingredient in the resistance to new.ideas.so it's particularly dangerous for an organization or society to.have a culture of pouncing on heresy.  when you suppress heresies,.you don't just prevent people from contradicting the mistaken.assumption you're trying to protect. you also suppress any idea.that implies indirectly that it's false..every cherished mistaken assumption has.a dead zone of unexplored ideas around it.  and the more preposterous.the assumption, the bigger the dead zone it creates.there is a positive side to this phenomenon though.  if you're.looking for new ideas, one way to find them is by looking for.heresies.  when you look at the question this way, the depressingly.large dead zones around mistaken assumptions become excitingly large.mines of new ideas.japanese translationrussian translationsimplified chinese translation<eot><sot>the bus ticket theory of genius.november 2019
everyone knows that to do great work you need both natural ability.and determination. but there's a third ingredient that's not as.well understood: an obsessive interest in a particular topic.to explain this point i need to burn my reputation with some group.of people, and i'm going to choose bus ticket collectors.  there.are people who collect old bus tickets. like many collectors, they.have an obsessive interest in the minutiae of what they collect..they can keep track of distinctions between different types of bus.tickets that would be hard for the rest of us to remember.  because.we don't care enough. what's the point of spending so much time.thinking about old bus tickets?which leads us to the second feature of this kind of obsession:.there is no point. a bus ticket collector's love is disinterested..they're not doing it to impress us or to make themselves rich, but.for its own sake.when you look at the lives of people who've done great work, you.see a consistent pattern. they often begin with a bus ticket.collector's obsessive interest in something that would have seemed.pointless to most of their contemporaries. one of the most striking.features of darwin's book about his voyage on the beagle is the.sheer depth of his interest in natural history. his curiosity seems.infinite. ditto for ramanujan, sitting by the hour working out on.his slate what happens to series.it's a mistake to think they were "laying the groundwork" for the.discoveries they made later. there's too much intention in that.metaphor. like bus ticket collectors, they were doing it.because they liked it.but there is a difference between ramanujan and a bus ticket.collector. series matter, and bus tickets don't.if i had to put the recipe for genius into one sentence, that might.be it: to have a disinterested obsession with something that matters.aren't i forgetting about the other two ingredients? less than you.might think. an obsessive interest in a topic is both a proxy for.ability and a substitute for determination.  unless you have.sufficient mathematical aptitude, you won't find series interesting..and when you're obsessively interested in something, you don't need.as much determination: you don't need to push yourself as hard when.curiosity is pulling you.an obsessive interest will even bring you luck, to the extent.anything can. chance, as pasteur said, favors the prepared mind,.and if there's one thing an obsessed mind is, it's prepared.the disinterestedness of this kind of obsession is its most important.feature. not just because it's a filter for earnestness, but because.it helps you discover new ideas.the paths that lead to new ideas tend to look unpromising. if they.looked promising, other people would already have explored them..how do the people who do great work discover these paths that others.overlook?  the popular story is that they simply have better vision:.because they're so talented, they see paths that others miss.  but.if you look at the way great discoveries are made, that's not what.happens. darwin didn't pay closer attention to individual species.than other people because he saw that this would lead to great.discoveries, and they didn't. he was just really, really interested.in such things.darwin couldn't turn it off. neither could ramanujan.  they didn't.discover the hidden paths that they did because they seemed promising,.but because they couldn't help it. that's what allowed them to.follow paths that someone who was merely ambitious would have.ignored.what rational person would decide that the way to write great novels.was to begin by spending several years creating an imaginary elvish.language, like tolkien, or visiting every household in southwestern.britain, like trollope? no one, including tolkien and trollope.the bus ticket theory is similar to carlyle's famous definition of.genius as an infinite capacity for taking pains. but there are two.differences. the bus ticket theory makes it clear that the source.of this infinite capacity for taking pains is not infinite diligence,.as carlyle seems to have meant, but the sort of infinite interest.that collectors have. it also adds an important qualification: an.infinite capacity for taking pains about something that matters.so what  matters? you can never be sure. it's precisely because no.one can tell in advance which paths are promising that you can.discover new ideas by working on what you're interested in.but there are some heuristics you can use to guess whether an.obsession might be one that matters. for example, it's more promising.if you're creating something, rather than just consuming something.someone else creates. it's more promising if something you're.interested in is difficult, especially if it's more difficult for.other people than it is for you. and the obsessions of talented.people are more likely to be promising. when talented people become.interested in random things, they're not truly random.but you can never be sure. in fact, here's an interesting idea.that's also rather alarming if it's true: it may be that to do great.work, you also have to waste a lot of time.in many different areas, reward is proportionate to risk. if that.rule holds here, then the way to find paths that lead to truly great.work is to be willing to expend a lot of effort on things that turn.out to be every bit as unpromising as they seem.i'm not sure if this is true. on one hand, it seems surprisingly.difficult to waste your time so long as you're working hard on.something interesting. so much of what you do ends up being useful..but on the other hand, the rule about the relationship between risk.and reward is so powerful that it seems to hold wherever risk occurs..newton's case, at least, suggests that the risk/reward rule holds.here. he's famous for one particular obsession of his that turned.out to be unprecedentedly fruitful: using math to describe the.world. but he had two other obsessions, alchemy and theology, that.seem to have been complete wastes of time. he ended up net ahead..his bet on what we now call physics paid off so well that it more.than compensated for the other two. but were the other two necessary,.in the sense that he had to take big risks to make such big.discoveries? i don't know.here's an even more alarming idea: might one make all bad bets?  it.probably happens quite often. but we don't know how often, because.these people don't become famous.it's not merely that the returns from following a path are hard to.predict. they change dramatically over time. 1830 was a really good.time to be obsessively interested in natural history. if darwin had.been born in 1709 instead of 1809, we might never have heard of.him.what can one do in the face of such uncertainty?  one solution is.to hedge your bets, which in this case means to follow the obviously.promising paths instead of your own private obsessions. but as with.any hedge, you're decreasing reward when you decrease risk.  if you.forgo working on what you like in order to follow some more.conventionally ambitious path, you might miss something wonderful.that you'd otherwise have discovered. that too must happen all the.time, perhaps even more often than the genius whose bets all fail.the other solution is to let yourself be interested in lots of.different things. you don't decrease your upside if you switch.between equally genuine interests based on which seems to be working.so far. but there is a danger here too: if you work on too many.different projects, you might not get deeply enough into any of.them.one interesting thing about the bus ticket theory is that it may.help explain why different types of people excel at different kinds.of work. interest is much more unevenly distributed than ability..if natural ability is all you need to do great work, and natural.ability is evenly distributed, you have to invent elaborate theories.to explain the skewed distributions we see among those who actually.do great work in various fields. but it may be that much of the.skew has a simpler explanation: different people are interested in.different things.the bus ticket theory also explains why people are less likely to.do great work after they have children. here interest has to compete.not just with external obstacles, but with another interest, and.one that for most people is extremely powerful. it's harder to find.time for work after you have kids, but that's the easy part. the.real change is that you don't want to.but the most exciting implication of the bus ticket theory is that.it suggests ways to encourage great work. if the recipe for genius.is simply natural ability plus hard work, all we can do is hope we.have a lot of ability, and work as hard as we can. but if interest.is a critical ingredient in genius, we may be able, by cultivating.interest, to cultivate genius.for example, for the very ambitious, the bus ticket theory suggests.that the way to do great work is to relax a little. instead of.gritting your teeth and diligently pursuing what all your peers.agree is the most promising line of research, maybe you should try.doing something just for fun. and if you're stuck, that may be the.vector along which to break out.i've always liked hamming's famous double-barrelled question: what.are the most important problems in your field, and why aren't you.working on one of them? it's a great way to shake yourself up. but.it may be overfitting a bit. it might be at least as useful to ask.yourself: if you could take a year off to work on something that.probably wouldn't be important but would be really interesting,.what would it be?the bus ticket theory also suggests a way to avoid slowing down as.you get older. perhaps the reason people have fewer new ideas as.they get older is not simply that they're losing their edge. it may.also be because once you become established, you can no longer mess.about with irresponsible side projects the way you could when you.were young and no one cared what you did.the solution to that is obvious: remain irresponsible. it will be.hard, though, because the apparently random projects you take up.to stave off decline will read to outsiders as evidence of it.  and.you yourself won't know for sure that they're wrong. but it will.at least be more fun to work on what you want.it may even be that we can cultivate a habit of intellectual bus.ticket collecting in kids. the usual plan in education is to start.with a broad, shallow focus, then gradually become more specialized..but i've done the opposite with my kids. i know i can count on their.school to handle the broad, shallow part, so i take them deep.when they get interested in something, however random, i encourage.them to go preposterously, bus ticket collectorly, deep.  i don't.do this because of the bus ticket theory. i do it because i want.them to feel the joy of learning, and they're never going to feel.that about something i'm making them learn. it has to be something.they're interested in. i'm just following the path of least resistance;.depth is a byproduct. but if in trying to show them the joy of.learning i also end up training them to go deep, so much the better.will it have any effect? i have no idea. but that uncertainty may.be the most interesting point of all. there is so much more to learn.about how to do great work. as old as human civilization feels,.it's really still very young if we haven't nailed something so.basic. it's exciting to think there are still discoveries to make.about discovery. if that's the sort of thing you're interested in..notes[1] there are other types of collecting that illustrate this point.better than bus tickets, but they're also more popular. it seemed.just as well to use an inferior example rather than offend more.people by telling them their hobby doesn't matter.[2] i worried a little about using the word "disinterested," since.some people mistakenly believe it means not interested. but anyone.who expects to be a genius will have to know the meaning of such a.basic word, so i figure they may as well start now.[3] think how often genius must have been nipped in the bud by.people being told, or telling themselves, to stop messing about and.be responsible. ramanujan's mother was a huge enabler. imagine if.she hadn't been. imagine if his parents had made him go out and get.a job instead of sitting around at home doing math.on the other hand, anyone quoting the preceding paragraph to justify.not getting a job is probably mistaken.[4] 1709 darwin is to time what the milanese leonardo is to space.[5] "an infinite capacity for taking pains" is a paraphrase of what.carlyle wrote. what he wrote, in his history of frederick the great,.was "... it is the fruit of 'genius' (which means transcendent.capacity of taking trouble, first of all)...." since the paraphrase.seems the name of the idea at this point, i kept it.carlyle's history was published in 1858. in 1785 hérault de séchelles.quoted buffon as saying "le génie n'est qu'une plus grande aptitude.à la patience." (genius is only a greater aptitude for patience.)[6] trollope was establishing the system of postal routes. he himself.sensed the obsessiveness with which he pursued this goal..it is amusing to watch how a passion will grow upon a man. during.those two years it was the ambition of my life to cover the.country with rural letter-carriers..even newton occasionally sensed the degree of his obsessiveness..after computing pi to 15 digits, he wrote in a letter to a friend:.i am ashamed to tell you to how many figures i carried these.computations, having no other business at the time..incidentally, ramanujan was also a compulsive calculator. as kanigel.writes in his excellent biography:.one ramanujan scholar, b. m. wilson, later told how ramanujan's.research into number theory was often "preceded by a table of.numerical results, carried usually to a length from which most.of us would shrink.".[7] working to understand the natural world counts as creating.rather than consuming.newton tripped over this distinction when he chose.to work on theology. his beliefs did not allow him to see it, but.chasing down paradoxes in nature is fruitful in a way that chasing.down paradoxes in sacred texts is not.[8] how much of people's propensity to become interested in a topic.is inborn?  my experience so far suggests the answer is: most of.it. different kids get interested in different things, and it's.hard to make a child interested in something they wouldn't otherwise.be. not in a way that sticks.  the most you can do on behalf of a.topic is to make sure it gets a fair showing  to make it clear to.them, for example, that there's more to math than the dull drills.they do in school. after that it's up to the child.thanks to marc andreessen, trevor blackwell, patrick collison, kevin.lacker, jessica livingston, jackie mcdonough, robert morris, lisa.randall, zak stone, and my 7 year old for reading drafts of this.spanish translationrussian translationkorean translationarmenian translation<eot><sot>general and surprising.september 2017
the most valuable insights are both general and surprising..f = ma for example. but general and surprising is a hard.combination to achieve. that territory tends to be picked.clean, precisely because those insights are so valuable.ordinarily, the best that people can do is one without the.other: either surprising without being general (e.g..gossip), or general without being surprising (e.g..platitudes).where things get interesting is the moderately valuable.insights.  you get those from small additions of whichever.quality was missing.  the more common case is a small.addition of generality: a piece of gossip that's more than.just gossip, because it teaches something interesting about.the world. but another less common approach is to focus on.the most general ideas and see if you can find something new.to say about them. because these start out so general, you.only need a small delta of novelty to produce a useful.insight.a small delta of novelty is all you'll be able to get most.of the time. which means if you take this route, your ideas.will seem a lot like ones that already exist. sometimes.you'll find you've merely rediscovered an idea that did.already exist.  but don't be discouraged.  remember the huge.multiplier that kicks in when you do manage to think of.something even a little new.corollary: the more general the ideas you're talking about,.the less you should worry about repeating yourself.  if you.write enough, it's inevitable you will.  your brain is much.the same from year to year and so are the stimuli that hit.it. i feel slightly bad when i find i've said something.close to what i've said before, as if i were plagiarizing.myself. but rationally one shouldn't.  you won't say.something exactly the same way the second time, and that.variation increases the chance you'll get that tiny but.critical delta of novelty.and of course, ideas beget ideas.  (that sounds.familiar.).an idea with a small amount of novelty could lead to one.with more. but only if you keep going. so it's doubly.important not to let yourself be discouraged by people who.say there's not much new about something you've discovered.."not much new" is a real achievement when you're talking.about the most general ideas. it's not true that there's nothing new under the sun.  there.are some domains where there's almost nothing new.  but.there's a big difference between nothing and almost nothing,.when it's multiplied by the area under the sun..thanks to sam altman, patrick collison, and jessica.livingston for reading drafts of this.japanese translation<eot><sot>charisma / power.january 2017
people who are powerful but uncharismatic will tend to be disliked..their power makes them a target for criticism that they don't have.the charisma to disarm. that was hillary clinton's problem. it also.tends to be a problem for any ceo who is more of a builder than a.schmoozer. and yet the builder-type ceo is (like hillary) probably.the best person for the job.i don't think there is any solution to this problem. it's human.nature. the best we can do is to recognize that it's happening, and.to understand that being a magnet for criticism is sometimes a sign.not that someone is the wrong person for a job, but that they're.the right one.<eot><sot>the risk of discovery.january 2017
because biographies of famous scientists tend to.edit out their mistakes, we underestimate the.degree of risk they were willing to take..and because anything a famous scientist did that.wasn't a mistake has probably now become the.conventional wisdom, those choices don't.seem risky either.biographies of newton, for example, understandably focus.more on physics than alchemy or theology..the impression we get is that his unerring judgment.led him straight to truths no one else had noticed..how to explain all the time he spent on alchemy.and theology?  well, smart people are often kind of.crazy.but maybe there is a simpler explanation. maybe.the smartness and the craziness were not as separate.as we think. physics seems to us a promising thing.to work on, and alchemy and theology obvious wastes.of time. but that's because we know how things.turned out. in newton's day the three problems.seemed roughly equally promising. no one knew yet.what the payoff would be for inventing what we.now call physics; if they had, more people would.have been working on it. and alchemy and theology.were still then in the category marc andreessen would.describe as "huge, if true."newton made three bets. one of them worked. but.they were all risky.japanese translation<eot><sot>how to make pittsburgh a startup hub.april 2016
(this is a talk i gave at an event called opt412 in pittsburgh..much of it will apply to other towns.  but not all, because.as i say in the talk, pittsburgh has some important advantages over.most would-be startup hubs.)what would it take to make pittsburgh into a startup hub, like.silicon valley?  i understand pittsburgh pretty well,.because i grew up here, in monroeville. and i understand silicon.valley pretty well because that's where i live now.  could you get.that kind of startup ecosystem going here?when i agreed to speak here, i didn't think i'd be able to give a.very optimistic talk.  i thought i'd be talking about what pittsburgh.could do to become a startup hub, very much in the subjunctive..instead i'm going to talk about what pittsburgh can do.what changed my mind was an article i read in, of all places, the new.york times food section.  the title was "pittsburgh's youth-driven.food boom."  to most people that might not even sound interesting,.let alone something related to startups.  but it was electrifying.to me to read that title.  i don't think i could pick a more promising.one if i tried.  and when i read the article i got even more excited..it said "people ages 25 to 29 now make up 7.6 percent of all.residents, up from 7 percent about a decade ago."  wow, i thought,.pittsburgh could be the next portland.  it could become the cool.place all the people in their twenties want to go live.when i got here a couple days ago, i could feel the difference.  i.lived here from 1968 to 1984.  i didn't realize it at the time, but.during that whole period the city was in free fall. on top of the.flight to the suburbs that happened everywhere, the steel and nuclear.businesses were both dying. boy are things different now.  it's not.just that downtown seems a lot more prosperous. there is an energy.here that was not here when i was a kid.when i was a kid, this was a place young people left. now it's a.place that attracts them.what does that have to do with startups?  startups are made.of people, and the average age of the people in a typical startup.is right in that 25 to 29 bracket.i've seen how powerful it is for a city to have those people.  five.years ago they shifted the center of gravity of silicon valley from.the peninsula to san francisco.  google and facebook are on the.peninsula, but the next generation of big winners are all in sf..the reason the center of gravity shifted was the talent war, for.programmers especially.  most 25 to 29 year olds want to live in.the city, not down in the boring suburbs.  so whether they like it.or not, founders know they have to be in the city.  i know multiple.founders who would have preferred to live down in the valley proper,.but who made themselves move to sf because they knew otherwise.they'd lose the talent war.so being a magnet for people in their twenties is a very promising.thing to be.  it's hard to imagine a place becoming a startup hub.without also being that.  when i read that statistic about the.increasing percentage of 25 to 29 year olds, i had exactly the same.feeling of excitement i get when i see a startup's graphs start to.creep upward off the x axis.nationally the percentage of 25 to 29 year olds is 6.8%.  that means.you're .8% ahead.  the population is 306,000, so we're talking about.a surplus of about 2500 people.  that's the population of a small.town, and that's just the surplus. so you have a toehold.  now you.just have to expand it.and though "youth-driven food boom" may sound frivolous, it is.anything but.  restaurants and cafes are a big part of the personality.of a city.  imagine walking down a street in paris. what are you.walking past?  little restaurants and cafes.  imagine driving through.some depressing random exurb.  what are you driving past?  starbucks.and mcdonalds and pizza hut.   as gertrude stein said, there is no.there there. you could be anywhere.these independent restaurants and cafes are not just feeding people..they're making there be a there here.so here is my first concrete recommendation for turning pittsburgh.into the next silicon valley: do everything you can to encourage.this youth-driven food boom.  what could the city do?  treat the.people starting these little restaurants and cafes as your users,.and go ask them what they want.  i can guess at least one thing.they might want: a fast permit process.  san francisco has left you.a huge amount of room to beat them in that department.i know restaurants aren't the prime mover though.  the prime mover,.as the times article said, is cheap housing.  that's a big advantage..but that phrase "cheap housing" is a bit misleading.  there are.plenty of places that are cheaper.  what's special about pittsburgh.is not that it's cheap, but that it's a cheap place you'd actually.want to live.part of that is the buildings themselves. i realized a long time.ago, back when i was a poor twenty-something myself, that the best.deals were places that had once been rich, and then became poor..if a place has always been rich, it's nice but too expensive.  if.a place has always been poor, it's cheap but grim.  but if a place.was once rich and then got poor, you can find palaces for cheap..and that's what's bringing people here.  when pittsburgh was rich,.a hundred years ago, the people who lived here built big solid.buildings.  not always in the best taste, but definitely solid.  so.here is another piece of advice for becoming a startup hub: don't.destroy the buildings that are bringing people here.  when cities.are on the way back up, like pittsburgh is now, developers race to.tear down the old buildings.  don't let that happen.  focus on.historic preservation.  big real estate development projects are.not what's bringing the twenty-somethings here.  they're the opposite.of the new restaurants and cafes; they subtract personality from.the city.the empirical evidence suggests you cannot be too strict about.historic preservation.  the tougher cities are about it, the better.they seem to do.but the appeal of pittsburgh is not just the buildings themselves..it's the neighborhoods they're in. like san francisco and new york,.pittsburgh is fortunate in being a pre-car city.  it's not too.spread out. because those 25 to 29 year olds do not like driving..they prefer walking, or bicycling, or taking public transport.  if.you've been to san francisco recently you can't help noticing the.huge number of bicyclists.  and this is not just a fad that the.twenty-somethings have adopted.  in this respect they have discovered.a better way to live.  the beards will go, but not the bikes.  cities.where you can get around without driving are just better period..so i would suggest you do everything you can to capitalize on this..as with historic preservation, it seems impossible to go too far.why not make pittsburgh the most bicycle and pedestrian friendly.city in the country?  see if you can go so far that you make san.francisco seem backward by comparison.  if you do, it's very unlikely.you'll regret it.  the city will seem like a paradise to the young.people you want to attract.  if they do leave to get jobs elsewhere,.it will be with regret at leaving behind such a place.  and what's.the downside?  can you imagine a headline "city ruined by becoming.too bicycle-friendly?"  it just doesn't happen.so suppose cool old neighborhoods and cool little restaurants make.this the next portland.  will that be enough?  it will put you in.a way better position than portland itself, because pittsburgh has.something portland lacks: a first-rate research university.  cmu.plus little cafes means you have more than hipsters drinking lattes..it means you have hipsters drinking lattes while talking about.distributed systems.  now you're getting really close to san.francisco.in fact you're better off than san francisco in one way, because.cmu is downtown, but stanford and berkeley are out in the suburbs.what can cmu do to help pittsburgh become a startup hub?  be an.even better research university.  cmu is one of the best universities.in the world, but imagine what things would be like if it were the.very best, and everyone knew it.  there are a lot of ambitious.people who must go to the best place, wherever it is.  if cmu were it, they would all come here. there would be.kids in kazakhstan dreaming of one day living in pittsburgh.being that kind of talent magnet is the most important contribution.universities can make toward making their city a startup hub.  in.fact it is practically the only contribution they can make.but wait, shouldn't universities be setting up programs with words.like "innovation" and "entrepreneurship" in their names?  no, they.should not.  these kind of things almost always turn out to be.disappointments.  they're pursuing the wrong targets.  the way to.get innovation is not to aim for innovation but to aim for something.more specific, like better batteries or better 3d printing.  and.the way to learn about entrepreneurship is to do it, which you.can't.in school.i know it may disappoint some administrators to hear that the best.thing a university can do to encourage startups is to be a great.university.  it's like telling people who want to lose weight that.the way to do it is to eat less.but if you want to know where startups come from, look at the.empirical evidence.  look at the histories of the most successful.startups, and you'll find they grow organically out of a couple of.founders building something that starts as an interesting side.project.  universities are great at bringing together founders, but.beyond that the best thing they can do is get out of the way.  for.example, by not claiming ownership of "intellectual property" that.students and faculty develop, and by having liberal rules about.deferred admission and leaves of absence.in fact, one of the most effective things a university could do to.encourage startups is an elaborate form of getting out of the way.invented by harvard.  harvard used to have exams for the fall.semester after christmas.  at the beginning of january they had.something called "reading period" when you were supposed to be.studying for exams.  and microsoft and facebook have something in.common that few people realize: they were both started during reading.period.  it's the perfect situation for producing the sort of side.projects that turn into startups. the students are all on campus,.but they don't have to do anything because they're supposed to be.studying for exams.harvard may have closed this window, because a few years ago they.moved exams before christmas and shortened reading period from 11.days to 7.  but if a university really wanted to help its students.start startups, the empirical evidence, weighted by market cap,.suggests the best thing they can do is literally nothing.the culture of pittsburgh is another of its strengths.  it seems.like a city has to be socially liberal to be a startup hub,.and it's pretty clear why. a city has to tolerate strangeness to.be a home for startups, because startups are so strange.  and you.can't choose to allow just the forms of strangeness that will turn.into big startups, because they're all intermingled.  you have to.tolerate all strangeness.that immediately rules out big chunks of the us.  i'm optimistic.it doesn't rule out pittsburgh.  one of the things i remember from.growing up here, though i didn't realize at the time that there was.anything unusual about it, is how well people got along.  i'm still.not sure why.  maybe one reason was that everyone felt like an.immigrant.  when i was a kid in monroeville, people didn't call.themselves american.  they called themselves italian or serbian or.ukranian.  just imagine what it must have been like here a hundred.years ago, when people were pouring in from twenty different.countries.  tolerance was the only option.what i remember about the culture of pittsburgh is that it was.both tolerant and pragmatic.  that's how i'd describe the culture.of silicon valley too.  and it's not a coincidence, because pittsburgh.was the silicon valley of its time.  this was a city where people.built new things.  and while the things people build have changed,.the spirit you need to do that kind of work is the same.so although an influx of latte-swilling hipsters may be annoying.in some ways, i would go out of my way to encourage them.  and more.generally to tolerate strangeness, even unto the degree wacko.californians do.  for pittsburgh that is a conservative choice:.it's a return to the city's roots.unfortunately i saved the toughest part for last. there is one more.thing you need to be a startup hub, and pittsburgh hasn't got it:.investors.  silicon valley has a big investor community because.it's had 50 years to grow one.  new york has a big investor community.because it's full of people who like money a lot and are quick to.notice new ways to get it.  but pittsburgh has neither of these..and the cheap housing that draws other people here has no effect.on investors.if an investor community grows up here, it will happen the same way.it did in silicon valley: slowly and organically.  so i would not.bet on having a big investor community in the short term.  but.fortunately there are three trends that make that less necessary.than it used to be.  one is that startups are increasingly cheap.to start, so you just don't need as much outside money as you used.to.  the second is that thanks to things like kickstarter, a startup.can get to revenue faster.  you can put something on kickstarter.from anywhere.  the third is programs like y combinator.  a startup.from anywhere in the world can go to yc for 3 months, pick up.funding, and then return home if they want.my advice is to make pittsburgh a great place for startups, and.gradually more of them will stick.  some of those will succeed;.some of their founders will become investors; and still more startups.will stick.this is not a fast path to becoming a startup hub. but it is at.least a path, which is something few other cities have.  and it's.not as if you have to make painful sacrifices in the meantime..think about what i've suggested you should do.  encourage local.restaurants, save old buildings, take advantage of density, make.cmu the best, promote tolerance.  these are the things that make.pittsburgh good to live in now.  all i'm saying is that you should.do even more of them.and that's an encouraging thought.  if pittsburgh's path to becoming.a startup hub is to be even more itself, then it has a good chance.of succeeding.  in fact it probably has the best chance of any city.its size.  it will take some effort, and a lot of time, but if any.city can do it, pittsburgh can.thanks to charlie cheever and jessica livingston for reading.drafts of this, and to meg cheever for organizing opt412 and inviting.me to speak.<eot><sot>life is short.january 2016
life is short, as everyone knows. when i was a kid i used to wonder.about this. is life actually short, or are we really complaining.about its finiteness?  would we be just as likely to feel life was.short if we lived 10 times as long?since there didn't seem any way to answer this question, i stopped.wondering about it.  then i had kids.  that gave me a way to answer.the question, and the answer is that life actually is short.having kids showed me how to convert a continuous quantity, time,.into discrete quantities. you only get 52 weekends with your 2 year.old.  if christmas-as-magic lasts from say ages 3 to 10, you only.get to watch your child experience it 8 times.  and while it's.impossible to say what is a lot or a little of a continuous quantity.like time, 8 is not a lot of something.  if you had a handful of 8.peanuts, or a shelf of 8 books to choose from, the quantity would.definitely seem limited, no matter what your lifespan was.ok, so life actually is short.  does it make any difference to know.that?it has for me.  it means arguments of the form "life is too short.for x" have great force.  it's not just a figure of speech to say.that life is too short for something.  it's not just a synonym for.annoying.  if you find yourself thinking that life is too short for.something, you should try to eliminate it if you can.when i ask myself what i've found life is too short for, the word.that pops into my head is "bullshit." i realize that answer is.somewhat tautological.  it's almost the definition of bullshit that.it's the stuff that life is too short for.  and yet bullshit does.have a distinctive character.  there's something fake about it..it's the junk food of experience..[1]if you ask yourself what you spend your time on that's bullshit,.you probably already know the answer.  unnecessary meetings, pointless.disputes, bureaucracy, posturing, dealing with other people's.mistakes, traffic jams, addictive but unrewarding pastimes.there are two ways this kind of thing gets into your life: it's.either forced on you, or it tricks you.  to some extent you have to.put up with the bullshit forced on you by circumstances.  you need.to make money, and making money consists mostly of errands.  indeed,.the law of supply and demand ensures that: the more rewarding some.kind of work is, the cheaper people will do it.  it may be that.less bullshit is forced on you than you think, though.  there has.always been a stream of people who opt out of the default grind and.go live somewhere where opportunities are fewer in the conventional.sense, but life feels more authentic.  this could become more common.you can do it on a smaller scale without moving.  the amount of.time you have to spend on bullshit varies between employers.  most.large organizations (and many small ones) are steeped in it.  but.if you consciously prioritize bullshit avoidance over other factors.like money and prestige, you can probably find employers that will.waste less of your time.if you're a freelancer or a small company, you can do this at the.level of individual customers.  if you fire or avoid toxic customers,.you can decrease the amount of bullshit in your life by more than.you decrease your income.but while some amount of bullshit is inevitably forced on you, the.bullshit that sneaks into your life by tricking you is no one's.fault but your own.  and yet the bullshit you choose may be harder.to eliminate than the bullshit that's forced on you.  things that.lure you into wasting your time have to be really good at.tricking you.  an example that will be familiar to a lot of people.is arguing online.  when someone.contradicts you, they're in a sense attacking you. sometimes pretty.overtly.  your instinct when attacked is to defend yourself.  but.like a lot of instincts, this one wasn't designed for the world we.now live in.  counterintuitive as it feels, it's better most of.the time not to defend yourself.  otherwise these people are literally.taking your life..[2]arguing online is only incidentally addictive. there are more.dangerous things than that. as i've written before, one byproduct.of technical progress is that things we like tend to become more.addictive.  which means we will increasingly have to make a conscious.effort to avoid addictions  to stand outside ourselves and ask "is.this how i want to be spending my time?"as well as avoiding bullshit, one should actively seek out things.that matter.  but different things matter to different people, and.most have to learn what matters to them.  a few are lucky and realize.early on that they love math or taking care of animals or writing,.and then figure out a way to spend a lot of time doing it.  but.most people start out with a life that's a mix of things that.matter and things that don't, and only gradually learn to distinguish.between them.for the young especially, much of this confusion is induced by the.artificial situations they find themselves in. in middle school and.high school, what the other kids think of you seems the most important.thing in the world.  but when you ask adults what they got wrong.at that age, nearly all say they cared too much what other kids.thought of them.one heuristic for distinguishing stuff that matters is to ask.yourself whether you'll care about it in the future.  fake stuff.that matters usually has a sharp peak of seeming to matter.  that's.how it tricks you.  the area under the curve is small, but its shape.jabs into your consciousness like a pin.the things that matter aren't necessarily the ones people would.call "important."  having coffee with a friend matters.  you won't.feel later like that was a waste of time.one great thing about having small children is that they make you.spend time on things that matter: them. they grab your sleeve as.you're staring at your phone and say "will you play with me?" and.odds are that is in fact the bullshit-minimizing option.if life is short, we should expect its shortness to take us by.surprise. and that is just what tends to happen.  you take things.for granted, and then they're gone.  you think you can always write.that book, or climb that mountain, or whatever, and then you realize.the window has closed.  the saddest windows close when other people.die. their lives are short too.  after my mother died, i wished i'd.spent more time with her.  i lived as if she'd always be there..and in her typical quiet way she encouraged that illusion.  but an.illusion it was. i think a lot of people make the same mistake i.did.the usual way to avoid being taken by surprise by something is to.be consciously aware of it.  back when life was more precarious,.people used to be aware of death to a degree that would now seem a.bit morbid.  i'm not sure why, but it doesn't seem the right answer.to be constantly reminding oneself of the grim reaper hovering at.everyone's shoulder.  perhaps a better solution is to look at the.problem from the other end. cultivate a habit of impatience about.the things you most want to do. don't wait before climbing that.mountain or writing that book or visiting your mother.  you don't.need to be constantly reminding yourself why you shouldn't wait..just don't wait.i can think of two more things one does when one doesn't have much.of something: try to get more of it, and savor what one has.  both.make sense here.how you live affects how long you live.  most people could do better..me among them.but you can probably get even more effect by paying closer attention.to the time you have.  it's easy to let the days rush by.  the."flow" that imaginative people love so much has a darker cousin.that prevents you from pausing to savor life amid the daily slurry.of errands and alarms.  one of the most striking things i've read.was not in a book, but the title of one: james salter's burning.the days.it is possible to slow time somewhat. i've gotten better at it..kids help.  when you have small children, there are a lot of moments.so perfect that you can't help noticing.it does help too to feel that you've squeezed everything out of.some experience.  the reason i'm sad about my mother is not just.that i miss her but that i think of all the things we could have.done that we didn't.  my oldest son will be 7 soon.  and while i.miss the 3 year old version of him, i at least don't have any regrets.over what might have been.  we had the best time a daddy and a 3.year old ever had.relentlessly prune bullshit, don't wait to do things that matter,.and savor the time you have.  that's what you do when life is short.notes[1].at first i didn't like it that the word that came to mind was.one that had other meanings.  but then i realized the other meanings.are fairly closely related.  bullshit in the sense of things you.waste your time on is a lot like intellectual bullshit.[2].i chose this example deliberately as a note to self.  i get.attacked a lot online.  people tell the craziest lies about me..and i have so far done a pretty mediocre job of suppressing the.natural human inclination to say "hey, that's not true!"thanks to jessica livingston and geoff ralston for reading drafts.of this.korean translationjapanese translationchinese translation<eot><sot>economic inequality.january 2016
since the 1970s, economic inequality in the us has increased.dramatically. and in particular, the rich have gotten a lot richer..nearly everyone who writes about the topic says that economic inequality.should be decreased.i'm interested in this question because i was one of the founders of.a company called y combinator that helps people start startups..almost by definition, if a startup succeeds, its founders become.rich. which means by helping startup founders i've been helping to.increase economic inequality.  if economic inequality should be.decreased, i shouldn't be helping founders. no one should.be.but that doesn't sound right. what's going on here? what's going.on is that while economic inequality is a single measure (or more.precisely, two: variation in income, and variation in wealth), it.has multiple causes. many of these causes are bad, like tax loopholes.and drug addiction. but some are good, like larry page and.sergey brin starting the company you use to find things online.if you want to understand economic inequality — and more importantly,.if you actually want to fix the bad aspects of it — you have to.tease apart the components.  and yet the trend in nearly everything.written about the subject is to do the opposite: to squash together.all the aspects of economic inequality as if it were a single.phenomenon.sometimes this is done for ideological reasons.  sometimes it's.because the writer only has very high-level data and so draws.conclusions from that, like the proverbial drunk who looks for his.keys under the lamppost, instead of where he dropped them, because the.light is better there.  sometimes it's because the writer doesn't.understand critical aspects of inequality, like the role of technology.in wealth creation.  much of the time, perhaps most of the time,.writing about economic inequality combines all three.___the most common mistake people make about economic inequality is.to treat it as a single phenomenon.  the most naive version of which.is the one based on the pie fallacy: that the rich get rich by.taking money from the poor.usually this is an assumption people start from rather than a.conclusion they arrive at by examining the evidence.  sometimes the.pie fallacy is stated explicitly:....those at the top are grabbing an increasing fraction of the.nation's income — so much of a larger share that what's left over.for the rest is diminished.....[1].other times it's more unconscious. but the unconscious form is very.widespread.  i think because we grow up in a world where the pie.fallacy is actually true.  to kids, wealth is a fixed pie.that's shared out, and if one person gets more, it's at the expense.of another.  it takes a conscious effort to remind oneself that the.real world doesn't work that way.in the real world you can create wealth as well as taking it from.others.  a woodworker creates wealth.  he makes a chair, and you.willingly give him money in return for it.  a high-frequency trader.does not.  he makes a dollar only when someone on the other end of.a trade loses a dollar.if the rich people in a society got that way by taking wealth from.the poor, then you have the degenerate case of economic inequality,.where the cause of poverty is the same as the cause of wealth.  but.instances of inequality don't have to be instances of the degenerate.case.  if one woodworker makes 5 chairs and another makes none, the.second woodworker will have less money, but not because anyone took.anything from him.even people sophisticated enough to know about the pie fallacy are.led toward it by the custom of describing economic inequality as a.ratio of one quantile's income or wealth to another's.  it's so.easy to slip from talking about income shifting from one quantile.to another, as a figure of speech, into believing that is literally.what's happening.except in the degenerate case, economic inequality can't be described.by a ratio or even a curve.  in the general case it consists of.multiple ways people become poor, and multiple ways people become.rich.  which means to understand economic inequality in a country,.you have to go find individual people who are poor or rich and.figure out why..[2]if you want to understand change in economic inequality, you.should ask what those people would have done when it was different..this is one way i know the rich aren't all getting richer simply.from some new system for transferring wealth to them from.everyone else.  when you use the would-have method with startup.founders, you find what most would have done.back in 1960, when.economic inequality was lower, was to join big companies or become.professors.  before mark zuckerberg started facebook, his default.expectation was that he'd end up working at microsoft.  the reason.he and most other startup founders are richer than they would have.been in the mid 20th century is not because of some right turn the.country took during the reagan administration, but because progress.in technology has made it much easier to start a new company that.grows fast.traditional economists seem strangely averse to studying individual.humans. it seems to be a rule with them that everything has to start.with statistics.  so they give you very precise numbers about.variation in wealth and income, then follow it with the most naive.speculation about the underlying causes.but while there are a lot of people who get rich through rent-seeking.of various forms, and a lot who get rich by playing zero-sum games,.there are also a significant number.who get rich by creating wealth.  and creating wealth, as a source.of economic inequality, is different from taking it — not just.morally, but also practically, in the sense that it is harder to.eradicate.  one reason is that variation in productivity is.accelerating.  the rate at which individuals can create wealth.depends on the technology available to them, and that grows.exponentially. the other reason creating wealth is such a tenacious.source of inequality is that it can expand to accommodate a lot of.people.___i'm all for shutting down the crooked ways to get rich.  but that.won't eliminate great variations in wealth, because as long as you leave.open the option of getting rich by creating wealth, people who want.to get rich will do that instead.most people who get rich tend to be fairly driven. whatever their.other flaws, laziness is usually not one of them.  suppose new.policies make it hard to make a fortune in finance. does it seem.plausible that the people who currently go into finance to make.their fortunes will continue to do so, but be content to work for.ordinary salaries? the reason they go into finance is not because.they love finance but because they want to get rich. if the only.way left to get rich is to start startups, they'll start startups..they'll do well at it too, because determination is the main factor.in the success of a startup..[3].and while it would probably be.a good thing for the world if people who wanted to get rich switched.from playing zero-sum games to creating wealth, that would not only.not eliminate great variations in wealth, but might even.exacerbate them..in a zero-sum game there is at least a limit to the upside.  plus.a lot of the new startups would create new technology that further.accelerated variation in productivity.variation in productivity is far from the only source of economic.inequality, but it is the irreducible core of it, in the sense that.you'll have that left when you eliminate all other sources. and if.you do, that core will be big, because it will have expanded to.include the efforts of all the refugees.  plus it will have a large.baumol penumbra around it: anyone who could get rich by creating.wealth on their own account will have to be paid enough to prevent.them from doing it.you can't prevent great variations in wealth without preventing people.from getting rich, and you can't do that without preventing them.from starting startups.so let's be clear about that. eliminating great variations in wealth would.mean eliminating startups.  and that doesn't seem a wise move..especially since it would only mean you eliminated.startups in your own country.  ambitious people already move halfway.around the world to further their careers, and startups can operate.from anywhere nowadays.  so if you made it impossible to get rich.by creating wealth in your country, people who wanted to do that.would just leave and do it somewhere else. which would.certainly get you a lower gini coefficient, along with a lesson in.being careful what you ask for..[4]i think rising economic inequality is the inevitable fate of countries.that don't choose something worse. we had a 40 year stretch in the.middle of the 20th century that convinced some people otherwise..but as i explained in the refragmentation,.that was an anomaly — a.unique combination of circumstances that compressed american society.not just economically but culturally too..[5]and while some of the growth in economic inequality we've seen since.then has been due to bad behavior of various kinds, there has.simultaneously been a huge increase in individuals' ability to.create wealth.  startups are almost entirely a product of this.period. and even within the startup world, there has been a qualitative.change in the last 10 years.  technology has decreased the cost of.starting a startup so much that founders now have the upper hand.over investors.  founders get less diluted, and it is now common.for them to retain.board control as well.  both further increase.economic inequality, the former because founders own more stock,.and the latter because, as investors have learned, founders tend.to be better at running their companies than investors.while the surface manifestations change, the underlying forces are.very, very old.  the acceleration of productivity we see in silicon.valley has been happening for thousands of years.  if you look at.the history of stone tools, technology was already accelerating in.the mesolithic.  the acceleration would have been too slow to.perceive in one lifetime.  such is the nature of the leftmost part.of an exponential curve.  but it was the same curve.you do not want to design your society in a way that's incompatible.with this curve. the evolution of technology is one of the most.powerful forces in history.louis brandeis said "we may have democracy, or we may have wealth.concentrated in the hands of a few, but we can't have both." that.sounds plausible.  but if i have to choose between ignoring him and.ignoring an exponential curve that has been operating for thousands.of years, i'll bet on the curve.  ignoring any trend that has been.operating for thousands of years is dangerous.  but exponential.growth, especially, tends to bite you.___if accelerating variation in productivity is always going to produce.some baseline growth in economic inequality, it would be a good.idea to spend some time thinking about that future.  can you have.a healthy society with great variation in wealth?  what would it.look like?notice how novel it feels to think about that.  the public conversation.so far has been exclusively about the need to decrease economic.inequality.  we've barely given a thought to how to live with it.i'm hopeful we'll be able to.  brandeis was a product of the gilded.age, and things have changed since then. it's harder to hide.wrongdoing now.  and to get rich now you don't have to buy politicians.the way railroad or oil magnates did..[6].the great concentrations.of wealth i see around me in silicon valley don't seem to be.destroying democracy.there are lots of things wrong with the us that have economic.inequality as a symptom. we should fix those things.  in the process.we may decrease economic inequality. but we can't start from the.symptom and hope to fix the underlying causes..[7]the most obvious is poverty. i'm sure most of those who want to.decrease economic inequality want to do it mainly to help the poor,.not to hurt the rich..[8].indeed, a good number are merely being.sloppy by speaking of decreasing economic inequality when what they.mean is decreasing poverty.  but this is a situation where it would.be good to be precise about what we want.  poverty and economic.inequality are not identical.  when the city is turning off your.water.because you can't pay the bill, it doesn't make any difference.what larry page's net worth is compared to yours.  he might only.be a few times richer than you, and it would still be just as much.of a problem that your water was getting turned off.closely related to poverty is lack of social mobility.  i've seen.this myself: you don't have to grow up rich or even upper middle.class to get rich as a startup founder, but few successful founders.grew up desperately poor.  but again, the problem here is not simply.economic inequality.  there is an enormous difference in wealth.between the household larry page grew up in and that of a successful.startup founder, but that didn't prevent him from joining their.ranks.  it's not economic inequality per se that's blocking social.mobility, but some specific combination of things that go wrong.when kids grow up sufficiently poor.one of the most important principles in silicon valley is that "you.make what you measure."  it means that if you pick some number to.focus on, it will tend to improve, but that you have to choose the.right number, because only the one you choose will improve; another.that seems conceptually adjacent might not.  for example, if you're.a university president and you decide to focus on graduation rates,.then you'll improve graduation rates.  but only graduation rates,.not how much students learn.  students could learn less, if to.improve graduation rates you made classes easier.economic inequality is sufficiently far from identical with the.various problems that have it as a symptom that we'll probably only.hit whichever of the two we aim at.  if we aim at economic inequality,.we won't fix these problems.  so i say let's aim at the problems.for example, let's attack poverty, and if necessary damage wealth.in the process. that's much more likely to work than attacking.wealth in the hope that you will thereby fix poverty..[9].and if.there are people getting rich by tricking consumers or lobbying the.government for anti-competitive regulations or tax loopholes, then.let's stop them. not because it's causing economic inequality, but.because it's stealing..[10]if all you have is statistics, it seems like that's what you need.to fix. but behind a broad statistical measure like economic.inequality there are some things that are good and some that are.bad, some that are historical trends with immense momentum and.others that are random accidents.  if we want to fix the world.behind the statistics, we have to understand it, and focus our.efforts where they'll do the most good.notes[1].stiglitz, joseph. the price of inequality. norton, 2012. p..32.[2].particularly since economic inequality is a matter of outliers,.and outliers are disproportionately likely to have gotten where.they are by ways that have little do with the sort of things.economists usually think about, like wages and productivity, but.rather by, say, ending up on the wrong side of the "war on drugs."[3].determination is the most important factor in deciding between.success and failure, which in startups tend to be sharply differentiated..but it takes more than determination to create one of the hugely.successful startups.  though most founders start out excited about.the idea of getting rich, purely mercenary founders will usually.take one of the big acquisition offers most successful startups get.on the way up.  the founders who go on to the next stage tend to.be driven by a sense of mission.  they have the same attachment to.their companies that an artist or writer has to their work.  but.it is very hard to predict at the outset which founders will do.that. it's not simply a function of their initial attitude.  starting.a company changes people.[4].after reading a draft of this essay, richard florida told me.how he had once talked to a group of europeans "who said.they wanted to make europe more entrepreneurial and more.like silicon valley. i said by definition this will give you more.inequality.  they thought i was insane — they could not process.it."[5].economic inequality has been decreasing globally.  but this.is mainly due to the erosion of the kleptocracies that formerly.dominated all the poorer countries.  once the playing field is.leveler politically, we'll see economic inequality start to rise.again. the us is the bellwether.  the situation we face here, the.rest of the world will sooner or later.[6].some people still get rich by buying politicians.  my point is that.it's no longer a precondition.[7].as well as problems that have economic inequality as a symptom,.there are those that have it as a cause.  but in most if not all,.economic inequality is not the primary cause.  there is usually.some injustice that is allowing economic inequality to turn into.other forms of inequality, and that injustice is what we need to.fix.  for example, the police in the us treat the poor worse than.the rich.  but the solution is not to make people richer. it's to.make the police treat people more equitably.  otherwise they'll.continue to maltreat people who are weak in other ways.[8].some who read this essay will say that i'm clueless or even.being deliberately misleading by focusing so much on the richer end.of economic inequality — that economic inequality is really about.poverty. but that is exactly the point i'm making, though sloppier.language than i'd use to make it.  the real problem is poverty, not.economic inequality.  and if you conflate them you're aiming at the.wrong target.others will say i'm clueless or being misleading by focusing on.people who get rich by creating wealth — that startups aren't the.problem, but corrupt practices in finance, healthcare, and so on..once again, that is exactly my point.  the problem is not economic.inequality, but those specific abuses.it's a strange task to write an essay about why something isn't the.problem, but that's the situation you find yourself in when so many.people mistakenly think it is.[9].particularly since many causes of poverty are only partially.driven by people trying to make money from them. for example,.america's abnormally high incarceration rate is a major cause of.poverty.  but although for-profit prison companies and.prison guard unions both spend.a lot lobbying for harsh sentencing laws, they.are not the original source of them.[10].incidentally, tax loopholes are definitely not a product.of some power shift due to recent increases in economic inequality..the golden age of economic equality in the mid 20th century was.also the golden age of tax avoidance. indeed, it was so widespread.and so effective that i'm skeptical whether economic inequality was.really so low then as we think.  in a period when people are trying.to hide wealth from the government, it will tend to be hidden from.statistics too. one sign of the potential magnitude of the problem.is the discrepancy between government receipts as a percentage of.gdp, which have remained more or less constant during the entire.period from the end of world war ii to the present, and tax rates,.which have varied dramatically..thanks to sam altman, tiffani ashley bell, patrick collison, ron.conway, richard florida, ben horowitz, jessica livingston, robert.morris, tim o'reilly, max roser, and alexia tsotsis for reading.drafts of this.note: this is a new version from which i.removed a pair of metaphors that made a lot of people mad,.essentially by macroexpanding them.  if anyone wants to see.the old version, i put it here.related:the short versiona reply to ezra kleina reply to russell okungfrench translation<eot><sot>the refragmentation.january 2016
one advantage of being old is that you can see change happen in.your lifetime.  a lot of the change i've seen is fragmentation.  us.politics is much more polarized than it used to be.  culturally we.have ever less common ground. the creative class flocks to a handful.of happy cities, abandoning the rest.  and increasing economic.inequality means the spread between rich and poor is growing too..i'd like to propose a hypothesis: that all these trends are instances.of the same phenomenon.  and moreover, that the cause is not some.force that's pulling us apart, but rather the erosion of forces.that had been pushing us together.worse still, for those who worry about these trends, the forces.that were pushing us together were an anomaly, a one-time combination.of circumstances that's unlikely to be repeated — and indeed, that.we would not want to repeat.the two forces were war (above all world war ii), and the rise of.large corporations.the effects of world war ii were both economic and social..economically, it decreased variation in income.  like all modern.armed forces, america's were socialist economically.  from each.according to his ability, to each according to his need.  more or.less.  higher ranking members of the military got more (as higher.ranking members of socialist societies always do), but what they.got was fixed according to their rank.  and the flattening effect.wasn't limited to those under arms, because the us economy was.conscripted too.  between 1942 and 1945 all wages were set by the.national war labor board. like the military, they defaulted to.flatness.  and this national standardization of wages was so pervasive.that its effects could still be seen years after the war ended..[1]business owners weren't supposed to be making money either.  fdr.said "not a single war millionaire" would be permitted.  to ensure.that, any increase in a company's profits over prewar levels was.taxed at 85%.  and when what was left after corporate taxes reached.individuals, it was taxed again at a marginal rate of 93%..[2]socially too the war tended to decrease variation.  over 16 million.men and women from all sorts of different backgrounds were brought.together in a way of life that was literally uniform.  service rates.for men born in the early 1920s approached 80%. and working toward.a common goal, often under stress, brought them still closer together.though strictly speaking world war ii lasted less than 4 years for.the us, its effects lasted longer.  wars make central governments.more powerful, and world war ii was an extreme case of this.  in.the us, as in all the other allied countries, the federal government.was slow to give up the new powers it had acquired.  indeed, in.some respects the war didn't end in 1945; the enemy just switched.to the soviet union.  in tax rates, federal power, defense spending,.conscription, and nationalism, the decades after the war looked more.like wartime than prewar peacetime..[3].and the social effects.lasted too.  the kid pulled into the army from behind a mule team.in west virginia didn't simply go back to the farm afterward..something else was waiting for him, something that looked a lot.like the army.if total war was the big political story of the 20th century, the.big economic story was the rise of a new kind of company.  and this.too tended to produce both social and economic cohesion..[4]the 20th century was the century of the big, national corporation..general electric, general foods, general motors.  developments in.finance, communications, transportation, and manufacturing enabled.a new type of company whose goal was above all scale.  version 1.of this world was low-res: a duplo world of a few giant companies.dominating each big market..[5]the late 19th and early 20th centuries had been a time of consolidation,.led especially by j. p. morgan.  thousands of companies run by their.founders were merged into a couple hundred giant ones run by.professional managers. economies of scale ruled the day.  it seemed.to people at the time that this was the final state of things.  john.d. rockefeller said in 1880.the day of combination is here to stay. individualism has gone,.never to return..he turned out to be mistaken, but he seemed right for the next.hundred years.the consolidation that began in the late 19th century continued for.most of the 20th.  by the end of world war ii, as michael lind.writes, "the major sectors of the economy were either organized.as government-backed cartels or dominated by a few oligopolistic.corporations."for consumers this new world meant the same choices everywhere, but.only a few of them.  when i grew up there were only 2 or 3 of most.things, and since they were all aiming at the middle of the market.there wasn't much to differentiate them.one of the most important instances of this phenomenon was in tv..here there were 3 choices: nbc, cbs, and abc. plus public tv for.eggheads and communists.  the programs that the 3 networks offered were.indistinguishable.  in fact, here there was a triple pressure toward.the center. if one show did try something daring, local affiliates.in conservative markets would make them stop. plus since tvs were.expensive, whole families watched the same shows together, so they.had to be suitable for everyone.and not only did everyone get the same thing, they got it at the.same time.  it's difficult to imagine now, but every night tens of.millions of families would sit down together in front of their tv.set watching the same show, at the same time, as their next door.neighbors.  what happens now with the super bowl used to happen.every night. we were literally in sync..[6]in a way mid-century tv culture was good. the view it gave of the.world was like you'd find in a children's book, and it probably had.something of the effect that (parents hope) children's books have.in making people behave better.  but, like children's books, tv was.also misleading.  dangerously misleading, for adults. in his.autobiography, robert macneil talks of seeing gruesome images that.had just come in from vietnam and thinking, we can't show these to.families while they're having dinner.i know how pervasive the common culture was, because i tried to opt.out of it, and it was practically impossible to find alternatives..when i was 13 i realized, more from internal evidence than any.outside source, that the ideas we were being fed on tv were crap,.and i stopped watching it..[7].but it wasn't just tv.  it seemed.like everything around me was crap.  the politicians all saying the.same things, the consumer brands making almost identical products.with different labels stuck on to indicate how prestigious they.were meant to be, the balloon-frame houses with fake "colonial".skins, the cars with several feet of gratuitous metal on each end.that started to fall apart after a couple years, the "red delicious".apples that were red but only nominally.apples. and in retrospect, it was crap..[8]but when i went looking for alternatives to fill this void, i found.practically nothing.  there was no internet then.  the only place.to look was in the chain bookstore in our local shopping mall..[9].there i found a copy of the atlantic.  i wish i could say it became.a gateway into a wider world, but in fact i found it boring and.incomprehensible.  like a kid tasting whisky for the first time and.pretending to like it, i preserved that magazine as carefully as.if it had been a book. i'm sure i still have it somewhere.  but.though it was evidence that there was, somewhere, a world that.wasn't red delicious, i didn't find it till college.it wasn't just as consumers that the big companies made us similar..they did as employers too.  within companies there were powerful.forces pushing people toward a single model of how to look and act..ibm was particularly notorious for this, but they were only a little.more extreme than other big companies.  and the models of how to.look and act varied little between companies. meaning everyone.within this world was expected to seem more or less the same.  and.not just those in the corporate world, but also everyone who aspired.to it — which in the middle of the 20th century meant most people.who weren't already in it.  for most of the 20th century, working-class.people tried hard to look middle class.  you can see it in old.photos.  few adults aspired to look dangerous in 1950.but the rise of national corporations didn't just compress us.culturally.  it compressed us economically too, and on both ends.along with giant national corporations, we got giant national labor.unions.  and in the mid 20th century the corporations cut deals.with the unions where they paid over market price for labor.  partly.because the unions were monopolies..[10].partly because, as.components of oligopolies themselves, the corporations knew they.could safely pass the cost on to their customers, because their.competitors would have to as well.  and partly because in mid-century.most of the giant companies were still focused on finding new ways.to milk economies of scale.  just as startups rightly pay aws a.premium over the cost of running their own servers so they can focus.on growth, many of the big national corporations were willing to.pay a premium for labor..[11]as well as pushing incomes up from the bottom, by overpaying unions,.the big companies of the 20th century also pushed incomes down at.the top, by underpaying their top management. economist j. k..galbraith wrote in 1967 that "there are few corporations in which.it would be suggested that executive salaries are at a maximum.".[12]to some extent this was an illusion.  much of the de facto pay of.executives never showed up on their income tax returns, because it.took the form of perks.  the higher the rate of income tax, the.more pressure there was to pay employees upstream of it.  (in the.uk, where taxes were even higher than in the us, companies would.even pay their kids' private school tuitions.)  one of the most.valuable things the big companies of the mid 20th century gave their.employees was job security, and this too didn't show up in tax.returns or income statistics. so the nature of employment in these.organizations tended to yield falsely low numbers about economic.inequality.  but even accounting for that, the big companies paid.their best people less than market price.  there was no market; the.expectation was that you'd work for the same company for decades.if not your whole career..[13]your work was so illiquid there was little chance of getting market.price. but that same illiquidity also encouraged you not to seek.it.  if the company promised to employ you till you retired and.give you a pension afterward, you didn't want to extract as much.from it this year as you could. you needed to take care of the.company so it could take care of you.  especially when you'd been.working with the same group of people for decades.  if you tried.to squeeze the company for more money, you were squeezing the.organization that was going to take care of them.  plus if.you didn't put the company first you wouldn't be promoted, and if.you couldn't switch ladders, promotion on this one was the only way.up..[14]to someone who'd spent several formative years in the armed forces,.this situation didn't seem as strange as it does to us now.  from.their point of view, as big company executives, they were high-ranking.officers.  they got paid a lot more than privates.  they got to.have expense account lunches at the best restaurants and fly around.on the company's gulfstreams.  it probably didn't occur to most of.them to ask if they were being paid market price.the ultimate way to get market price is to work for yourself, by.starting your own company.  that seems obvious to any ambitious.person now.  but in the mid 20th century it was an alien concept..not because starting one's own company seemed too ambitious, but.because it didn't seem ambitious enough. even as late as the 1970s,.when i grew up, the ambitious plan was to get lots of education at.prestigious institutions, and then join some other prestigious.institution and work one's way up the hierarchy.  your prestige was.the prestige of the institution you belonged to.  people did start.their own businesses of course, but educated people rarely did,.because in those days there was practically zero concept of starting.what we now call a startup:.a business that starts small and grows.big.  that was much harder to do in the mid 20th century.  starting.one's own business meant starting a business that would start small.and stay small. which in those days of big companies often meant.scurrying around trying to avoid being trampled by elephants.  it.was more prestigious to be one of the executive class riding the.elephant.by the 1970s, no one stopped to wonder where the big prestigious.companies had come from in the first place.  it seemed like they'd.always been there, like the chemical elements.  and indeed, there.was a double wall between ambitious kids in the 20th century and.the origins of the big companies.  many of the big companies were.roll-ups that didn't have clear founders.  and when they did, the.founders didn't seem like us.  nearly all of them had been uneducated,.in the sense of not having been to college.  they were what shakespeare.called rude mechanicals.  college trained one to be a member of the.professional classes.  its graduates didn't expect to do the sort.of grubby menial work that andrew carnegie or henry ford started.out doing..[15]and in the 20th century there were more and more college graduates..they increased from about 2% of the population in 1900 to about 25%.in 2000. in the middle of the century our two big forces intersect,.in the form of the gi bill, which sent 2.2 million world war ii.veterans to college.  few thought of it in these terms, but the.result of making college the canonical path for the ambitious was.a world in which it was socially acceptable to work for henry ford,.but not to be henry ford..[16]i remember this world well. i came of age just as it was starting.to break up. in my childhood it was still dominant. not quite so.dominant as it had been.  we could see from old tv shows and yearbooks.and the way adults acted that people in the 1950s and 60s had been.even more conformist than us.  the mid-century model was already.starting to get old. but that was not how we saw it at the time..we would at most have said that one could be a bit more daring in.1975 than 1965.  and indeed, things hadn't changed much yet.but change was coming soon. and when the duplo economy started to.disintegrate, it disintegrated in several different ways at once..vertically integrated companies literally dis-integrated because.it was more efficient to.  incumbents faced new competitors as (a).markets went global and (b) technical innovation started to trump.economies of scale, turning size from an asset into a liability..smaller companies were increasingly able to survive as formerly.narrow channels to consumers broadened.  markets themselves started.to change faster, as whole new categories of products appeared. and.last but not least, the federal government, which had previously.smiled upon j. p. morgan's world as the natural state of things,.began to realize it wasn't the last word after all.what j. p. morgan was to the horizontal axis, henry ford was to the.vertical.  he wanted to do everything himself. the giant plant he.built at river rouge between 1917 and 1928 literally took in iron.ore at one end and sent cars out the other.  100,000 people worked.there. at the time it seemed the future. but that is not how car.companies operate today.  now much of the design and manufacturing.happens in a long supply chain, whose products the car companies.ultimately assemble and sell.  the reason car companies operate.this way is that it works better.  each company in the supply chain.focuses on what they know best. and they each have to do it well.or they can be swapped out for another supplier.why didn't henry ford realize that networks of cooperating companies.work better than a single big company? one reason is that supplier.networks take a while to evolve. in 1917, doing everything himself.seemed to ford the only way to get the scale he needed. and the.second reason is that if you want to solve a problem using a network.of cooperating companies, you have to be able to coordinate their.efforts, and you can do that much better with computers.  computers.reduce the transaction costs that coase argued are the raison d'etre.of corporations. that is a fundamental change.in the early 20th century, big companies were synonymous with.efficiency.  in the late 20th century they were synonymous with.inefficiency.  to some extent this was because the companies.themselves had become sclerotic.  but it was also because our.standards were higher.it wasn't just within existing industries that change occurred..the industries themselves changed.  it became possible to make lots.of new things, and sometimes the existing companies weren't the.ones who did it best.microcomputers are a classic example. the market was pioneered by.upstarts like apple. when it got big enough, ibm decided it was.worth paying attention to.  at the time ibm completely dominated.the computer industry. they assumed that all they had to do, now.that this market was ripe, was to reach out and pick it.  most.people at the time would have agreed with them.  but what happened.next illustrated how much more complicated the world had become..ibm did launch a microcomputer.  though quite successful, it did.not crush apple.  but even more importantly, ibm itself ended up.being supplanted by a supplier coming in from the side — from.software, which didn't even seem to be the same business.  ibm's.big mistake was to accept a non-exclusive license for dos.  it must.have seemed a safe move at the time.  no other computer manufacturer.had ever been able to outsell them. what difference did it make if.other manufacturers could offer dos too?  the result of that.miscalculation was an explosion of inexpensive pc clones.  microsoft.now owned the pc standard, and the customer.  and the microcomputer.business ended up being apple vs microsoft.basically, apple bumped ibm and then microsoft stole its wallet..that sort of thing did not happen to big companies in mid-century..but it was going to happen increasingly often in the future.change happened mostly by itself in the computer business.  in other.industries, legal obstacles had to be removed first.  many of the.mid-century oligopolies had been anointed by the federal government.with policies (and in wartime, large orders) that kept out competitors..this didn't seem as dubious to government officials at the time as.it sounds to us. they felt a two-party system ensured sufficient.competition in politics.  it ought to work for business too.gradually the government realized that anti-competitive policies.were doing more harm than good, and during the carter administration.it started to remove them. the word used for this process was.misleadingly narrow: deregulation.  what was really happening was.de-oligopolization.  it happened to one industry after another..two of the most visible to consumers were air travel and long-distance.phone service, which both became dramatically cheaper after.deregulation.deregulation also contributed to the wave of hostile takeovers in.the 1980s.  in the old days the only limit on the inefficiency of.companies, short of actual bankruptcy, was the inefficiency of their.competitors.  now companies had to face absolute rather than relative.standards.  any public company that didn't generate sufficient.returns on its assets risked having its management replaced with.one that would.  often the new managers did this by breaking companies.up into components that were more valuable separately..[17]version 1 of the national economy consisted of a few big blocks.whose relationships were negotiated in back rooms by a handful of.executives, politicians, regulators, and labor leaders.  version 2.was higher resolution: there were more companies, of more different.sizes, making more different things, and their relationships changed.faster. in this world there were still plenty of back room negotiations,.but more was left to market forces.  which further accelerated the.fragmentation.it's a little misleading to talk of versions when describing a.gradual process, but not as misleading as it might seem.  there was.a lot of change in a few decades, and what we ended up with was.qualitatively different.  the companies in the s&p 500 in 1958 had.been there an average of 61 years. by 2012 that number was 18 years..[18]the breakup of the duplo economy happened simultaneously with the.spread of computing power. to what extent were computers a precondition?.it would take a book to answer that. obviously the spread of computing.power was a precondition for the rise of startups.  i suspect it.was for most of what happened in finance too.  but was it a.precondition for globalization or the lbo wave?  i don't know, but.i wouldn't discount the possibility.  it may be that the refragmentation.was driven by computers in the way the industrial revolution was.driven by steam engines.  whether or not computers were a precondition,.they have certainly accelerated it.the new fluidity of companies changed people's relationships with.their employers. why climb a corporate ladder that might be yanked.out from under you?  ambitious people started to think of a career.less as climbing a single ladder than as a series of jobs that might.be at different companies. more movement (or even potential movement).between companies introduced more competition in salaries.  plus.as companies became smaller it became easier to estimate how much.an employee contributed to the company's revenue.  both changes.drove salaries toward market price. and since people vary dramatically.in productivity, paying market price meant salaries started to.diverge.by no coincidence it was in the early 1980s that the term "yuppie".was coined.  that word is not much used now, because the phenomenon.it describes is so taken for granted, but at the time it was a label.for something novel. yuppies were young professionals who made lots.of money.  to someone in their twenties today, this wouldn't seem.worth naming.  why wouldn't young professionals make lots of money?.but until the 1980s, being underpaid early in your career was part.of what it meant to be a professional.  young professionals were.paying their dues, working their way up the ladder.  the rewards.would come later.  what was novel about yuppies was that they wanted.market price for the work they were doing now.the first yuppies did not work for startups. that was still in the.future.  nor did they work for big companies. they were professionals.working in fields like law, finance, and consulting.  but their example.rapidly inspired their peers.  once they saw that new bmw 325i, they.wanted one too.underpaying people at the beginning of their career only works if.everyone does it. once some employer breaks ranks, everyone else.has to, or they can't get good people.  and once started this process.spreads through the whole economy, because at the beginnings of.people's careers they can easily switch not merely employers but.industries.but not all young professionals benefitted. you had to produce to.get paid a lot.  it was no coincidence that the first yuppies worked.in fields where it was easy to measure that.more generally, an idea was returning whose name sounds old-fashioned.precisely because it was so rare for so long: that you could make.your fortune.  as in the past there were multiple ways to do it..some made their fortunes by creating wealth, and others by playing.zero-sum games. but once it became possible to make one's fortune,.the ambitious had to decide whether or not to.  a physicist who.chose physics over wall street in 1990 was making a sacrifice that.a physicist in 1960 didn't have to think about.the idea even flowed back into big companies.  ceos of big companies.make more now than they used to, and i think much of the reason is.prestige.  in 1960, corporate ceos had immense prestige.  they were.the winners of the only economic game in town. but if they made as.little now as they did then, in real dollar terms, they'd seem like.small fry compared to professional athletes and whiz kids making.millions from startups and hedge funds. they don't like that idea,.so now they try to get as much as they can, which is more than they.had been getting..[19]meanwhile a similar fragmentation was happening at the other end.of the economic scale.  as big companies' oligopolies became less.secure, they were less able to pass costs on to customers and thus.less willing to overpay for labor.  and as the duplo world of a few.big blocks fragmented into many companies of different sizes — some.of them overseas — it became harder for unions to enforce their.monopolies.  as a result workers' wages also tended toward market.price. which (inevitably, if unions had been doing their job) tended.to be lower.  perhaps dramatically so, if automation had decreased.the need for some kind of work.and just as the mid-century model induced social as well as economic.cohesion, its breakup brought social as well as economic fragmentation..people started to dress and act differently.  those who would later.be called the "creative class" became more mobile. people who didn't.care much for religion felt less pressure to go to church for.appearances' sake, while those who liked it a lot opted for.increasingly colorful forms. some switched from meat loaf to tofu,.and others to hot pockets. some switched from driving ford sedans.to driving small imported cars, and others to driving suvs.  kids.who went to private schools or wished they did started to dress."preppy," and kids who wanted to seem rebellious made a conscious.effort to look disreputable.  in a hundred ways people spread apart..[20]almost four decades later, fragmentation is still increasing.  has.it been net good or bad?  i don't know; the question may be.unanswerable.  not entirely bad though.  we take for granted the.forms of fragmentation we like, and worry only about the ones we.don't. but as someone who caught the tail end of mid-century.conformism,.i can tell you it was no utopia..[21]my goal here is not to say whether fragmentation has been good or.bad, just to explain why it's happening.  with the centripetal.forces of total war and 20th century oligopoly mostly gone, what.will happen next?  and more specifically, is it possible to reverse.some of the fragmentation we've seen?if it is, it will have to happen piecemeal.  you can't reproduce.mid-century cohesion the way it was originally produced.  it would.be insane to go to war just to induce more national unity.  and.once you understand the degree to which the economic history of the.20th century was a low-res version 1, it's clear you can't reproduce.that either.20th century cohesion was something that happened at least in a.sense naturally.  the war was due mostly to external forces, and.the duplo economy was an evolutionary phase.  if you want cohesion.now, you'd have to induce it deliberately.  and it's not obvious.how.  i suspect the best we'll be able to do is address the symptoms.of fragmentation.  but that may be enough.the form of fragmentation people worry most about lately is economic inequality, and if you want to eliminate.that you're up against a truly formidable headwind that has.been in operation since the stone age. technology.technology is.a lever. it magnifies work.  and the lever not only grows increasingly.long, but the rate at which it grows is itself increasing.which in turn means the variation in the amount of wealth people.can create has not only been increasing, but accelerating.  the.unusual conditions that prevailed in the mid 20th century masked.this underlying trend.  the ambitious had little choice but to join.large organizations that made them march in step with lots of other.people — literally in the case of the armed forces, figuratively.in the case of big corporations. even if the big corporations had.wanted to pay people proportionate to their value, they couldn't.have figured out how.  but that constraint has gone now.  ever since.it started to erode in the 1970s, we've seen the underlying forces.at work again..[22]not everyone who gets rich now does it by creating wealth, certainly..but a significant number do, and the baumol effect means all their.peers get dragged along too..[23].and as long as it's possible to.get rich by creating wealth, the default tendency will be for.economic inequality to increase.  even if you eliminate all the.other ways to get rich.  you can mitigate this with subsidies at.the bottom and taxes at the top, but unless taxes are high enough.to discourage people from creating wealth, you're always going to.be fighting a losing battle against increasing variation in.productivity..[24]that form of fragmentation, like the others, is here to stay.  or.rather, back to stay.  nothing is forever, but the tendency toward.fragmentation should be more forever than most things, precisely.because it's not due to any particular cause.  it's simply a reversion.to the mean. when rockefeller said individualism was gone, he was.right for a hundred years.  it's back now, and that's likely to be.true for longer.i worry that if we don't acknowledge this, we're headed for trouble..if we think 20th century cohesion disappeared because of few policy.tweaks, we'll be deluded into thinking we can get it back (minus.the bad parts, somehow) with a few countertweaks.  and then we'll.waste our time trying to eliminate fragmentation, when we'd be.better off thinking about how to mitigate its consequences..notes[1].lester thurow, writing in 1975, said the wage differentials.prevailing at the end of world war ii had become so embedded that.they "were regarded as 'just' even after the egalitarian pressures.of world war ii had disappeared.  basically, the same differentials.exist to this day, thirty years later." but goldin and margo think.market forces in the postwar period also helped preserve the wartime.compression of wages — specifically increased demand for unskilled.workers, and oversupply of educated ones.(oddly enough, the american custom of having employers pay for.health insurance derives from efforts by businesses to circumvent.nwlb wage controls in order to attract workers.)[2].as always, tax rates don't tell the whole story.  there were.lots of exemptions, especially for individuals.  and in world war.ii the tax codes were so new that the government had little acquired.immunity to tax avoidance.  if the rich paid high taxes during the.war it was more because they wanted to than because they had to.after the war, federal tax receipts as a percentage of gdp were.about the same as they are now. in fact, for the entire period since.the war, tax receipts have stayed close to 18% of gdp, despite.dramatic changes in tax rates.  the lowest point occurred when.marginal income tax rates were highest: 14.1% in 1950.  looking at.the data, it's hard to avoid the conclusion that tax rates have had.little effect on what people actually paid.[3].though in fact the decade preceding the war had been a time.of unprecedented federal power, in response to the depression..which is not entirely a coincidence, because the depression was one.of the causes of the war.  in many ways the new deal was a sort of.dress rehearsal for the measures the federal government took during.wartime.  the wartime versions were much more drastic and more.pervasive though.  as anthony badger wrote, "for many americans the.decisive change in their experiences came not with the new deal but.with world war ii."[4].i don't know enough about the origins of the world wars to.say, but it's not inconceivable they were connected to the rise of.big corporations. if that were the case, 20th century cohesion would.have a single cause.[5].more precisely, there was a bimodal economy consisting, in.galbraith's words, of "the world of the technically dynamic, massively.capitalized and highly organized corporations on the one hand and.the hundreds of thousands of small and traditional proprietors on.the other." money, prestige, and power were concentrated in the.former, and there was near zero crossover.[6].i wonder how much of the decline in families eating together.was due to the decline in families watching tv together afterward.[7].i know when this happened because it was the season dallas.premiered.  everyone else was talking about what was happening on.dallas, and i had no idea what they meant.[8].i didn't realize it till i started doing research for this.essay, but the meretriciousness of the products i grew up with is.a well-known byproduct of oligopoly. when companies can't compete.on price, they compete on tailfins.[9].monroeville mall was at the time of its completion in 1969.the largest in the country. in the late 1970s the movie dawn of.the dead was shot there. apparently the mall was not just the.location of the movie, but its inspiration; the crowds of shoppers.drifting through this huge mall reminded george romero of zombies..my first job was scooping ice cream in the baskin-robbins.[10].labor unions were exempted from antitrust laws by the clayton.antitrust act in 1914 on the grounds that a person's work is not."a commodity or article of commerce." i wonder if that means service.companies are also exempt.[11].the relationships between unions and unionized companies can.even be symbiotic, because unions will exert political pressure to.protect their hosts.  according to michael lind, when politicians.tried to attack the a&p supermarket chain because it was putting.local grocery stores out of business, "a&p successfully defended.itself by allowing the unionization of its workforce in 1938, thereby.gaining organized labor as a constituency." i've seen this phenomenon.myself: hotel unions are responsible for more of the political.pressure against airbnb than hotel companies.[12].galbraith was clearly puzzled that corporate executives would.work so hard to make money for other people (the shareholders).instead of themselves.  he devoted much of the new industrial.state to trying to figure this out.his theory was that professionalism had replaced money as a motive,.and that modern corporate executives were, like (good) scientists,.motivated less by financial rewards than by the desire to do good.work and thereby earn the respect of their peers.  there is something.in this, though i think lack of movement between companies combined.with self-interest explains much of observed behavior.[13].galbraith (p. 94) says a 1952 study of the 800 highest paid.executives at 300 big corporations found that three quarters of.them had been with their company for more than 20 years.[14].it seems likely that in the first third of the 20th century.executive salaries were low partly because companies then were more.dependent on banks, who would have disapproved if executives got.too much.  this was certainly true in the beginning. the first big.company ceos were j. p. morgan's hired hands.companies didn't start to finance themselves with retained earnings.till the 1920s.  till then they had to pay out their earnings in.dividends, and so depended on banks for capital for expansion..bankers continued to sit on corporate boards till the glass-steagall.act in 1933.by mid-century big companies funded 3/4 of their growth from earnings..but the early years of bank dependence, reinforced by the financial.controls of world war ii, must have had a big effect on social.conventions about executive salaries.  so it may be that the lack.of movement between companies was as much the effect of low salaries.as the cause.incidentally, the switch in the 1920s to financing growth with.retained earnings was one cause of the 1929 crash.  the banks now.had to find someone else to lend to, so they made more margin loans.[15].even now it's hard to get them to. one of the things i find.hardest to get into the heads of would-be startup founders is how.important it is to do certain kinds of menial work early in the.life of a company.  doing things that don't.scale is to how henry ford got started as a high-fiber diet is.to the traditional peasant's diet: they had no choice but to do the.right thing, while we have to make a conscious effort.[16].founders weren't celebrated in the press when i was a kid.."our founder" meant a photograph of a severe-looking man with a.walrus mustache and a wing collar who had died decades ago. the.thing to be when i was a kid was an executive. if you weren't.around then it's hard to grasp the cachet that term had. the fancy.version of everything was called the "executive" model.[17].the wave of hostile takeovers in the 1980s was enabled by a.combination of circumstances: court decisions striking down state.anti-takeover laws, starting with the supreme court's 1982 decision.in edgar v. mite corp.; the reagan administration's comparatively.sympathetic attitude toward takeovers; the depository institutions.act of 1982, which allowed banks and savings and loans to buy.corporate bonds; a new sec rule issued in 1982 (rule 415) that made.it possible to bring corporate bonds to market faster; the creation.of the junk bond business by michael milken; a vogue for conglomerates.in the preceding period that caused many companies to be combined.that never should have been; a decade of inflation that left many.public companies trading below the value of their assets; and not.least, the increasing complacency of managements.[18].foster, richard. "creative destruction whips through corporate.america." innosight, february 2012.[19].ceos of big companies may be overpaid. i don't know enough.about big companies to say. but it is certainly not impossible for.a ceo to make 200x as much difference to a company's revenues as.the average employee.  look at what steve jobs did for apple when.he came back as ceo.  it would have been a good deal for the board.to give him 95% of the company.  apple's market cap the day steve.came back in july 1997 was 1.73 billion. 5% of apple now (january.2016) would be worth about 30 billion.  and it would not be if steve.hadn't come back; apple probably wouldn't even exist anymore.merely including steve in the sample might be enough to answer the.question of whether public company ceos in the aggregate are overpaid..and that is not as facile a trick as it might seem, because the.broader your holdings, the more the aggregate is what you care.about.[20].the late 1960s were famous for social upheaval. but that was.more rebellion (which can happen in any era if people are provoked.sufficiently) than fragmentation.  you're not seeing fragmentation.unless you see people breaking off to both left and right.[21].globally the trend has been in the other direction.  while.the us is becoming more fragmented, the world as a whole is becoming.less fragmented, and mostly in good ways.[22].there were a handful of ways to make a fortune in the mid.20th century.  the main one was drilling for oil, which was open.to newcomers because it was not something big companies could.dominate through economies of scale.  how did individuals accumulate.large fortunes in an era of such high taxes?  giant tax loopholes.defended by two of the most powerful men in congress, sam rayburn.and lyndon johnson.but becoming a texas oilman was not in 1950 something one could.aspire to the way starting a startup or going to work on wall street.were in 2000, because (a) there was a strong local component and.(b) success depended so much on luck.[23].the baumol effect induced by startups is very visible in.silicon valley.  google will pay people millions of dollars a year.to keep them from leaving to start or join startups.[24].i'm not claiming variation in productivity is the only cause.of economic inequality in the us. but it's a significant cause, and.it will become as big a cause as it needs to, in the sense that if.you ban other ways to get rich, people who want to get rich will.use this route instead.thanks to sam altman, trevor blackwell, paul buchheit, patrick.collison, ron conway, chris dixon, benedict evans, richard florida,.ben horowitz, jessica livingston, robert morris, tim o'reilly, geoff.ralston, max roser, alexia tsotsis, and qasar younis for reading.drafts of this.  max also told me about several valuable sources.bibliographyallen, frederick lewis. the big change. harper, 1952.averitt, robert. the dual economy. norton, 1968.badger, anthony. the new deal. hill and wang, 1989.bainbridge, john. the super-americans. doubleday, 1961.beatty, jack. collossus. broadway, 2001.brinkley, douglas. wheels for the world. viking, 2003.brownleee, w. elliot. federal taxation in america. cambridge, 1996.chandler, alfred. the visible hand. harvard, 1977.chernow, ron. the house of morgan. simon & schuster, 1990.chernow, ron. titan: the life of john d. rockefeller. random house,.1998.galbraith, john. the new industrial state. houghton mifflin, 1967.goldin, claudia and robert a. margo. "the great compression: the.wage structure in the united states at mid-century." nber working.paper 3817, 1991.gordon, john. an empire of wealth. harpercollins, 2004.klein, maury. the genesis of industrial america, 1870-1920. cambridge,.2007.lind, michael. land of promise. harpercollins, 2012.mickelthwaite, john, and adrian wooldridge. the company. modern.library, 2003.nasaw, david. andrew carnegie. penguin, 2006.sobel, robert. the age of giant corporations. praeger, 1993.thurow, lester. generating inequality: mechanisms of distribution..basic books, 1975.witte, john. the politics and development of the federal income.tax. wisconsin, 1985.related:too many elite american men are obsessed with work and wealth<eot><sot>jessica livingston.november 2015
a few months ago an article about y combinator said that early on.it had been a "one-man show."  it's sadly common to read that sort.of thing.  but the problem with that description is not just that.it's unfair.  it's also misleading.  much of what's most novel about.yc is due to jessica livingston.  if you don't understand her, you.don't understand yc.  so let me tell you a little about jessica.yc had 4 founders.  jessica and i decided one night to start it,.and the next day we recruited my friends robert morris and trevor.blackwell.  jessica and i ran yc day to day, and robert and trevor.read applications and did interviews with us.jessica and i were already dating when we started yc.  at first we.tried to act "professional" about this, meaning we tried to conceal.it.  in retrospect that seems ridiculous, and we soon dropped the.pretense.  and the fact that jessica and i were a couple is a big.part of what made yc what it was.  yc felt like a family.  the.founders early on were mostly young.  we all had dinner together.once a week, cooked for the first couple years by me. our first.building had been a private home.  the overall atmosphere was.shockingly different from a vc's office on sand hill road, in a way.that was entirely for the better.  there was an authenticity that.everyone who walked in could sense.  and that didn't just mean that.people trusted us.  it was the perfect quality to instill in startups..authenticity is one of the most important things yc looks for in.founders, not just because fakers and opportunists are annoying,.but because authenticity is one of the main things that separates.the most successful startups from the rest.early yc was a family, and jessica was its mom.  and the culture.she defined was one of yc's most important innovations.  culture.is important in any organization, but at yc culture wasn't just how.we behaved when we built the product. at yc, the culture was the.product.jessica was also the mom in another sense: she had the last word..everything we did as an organization went through her first — who.to fund, what to say to the public, how to deal with other companies,.who to hire, everything.before we had kids, yc was more or less our life. there was no real.distinction between working hours and not.  we talked about yc all.the time.  and while there might be some businesses that it would.be tedious to let infect your private life, we liked it. we'd started.yc because it was something we were interested in.  and some of the.problems we were trying to solve were endlessly difficult.  how do.you recognize good founders?  you could talk about that for years,.and we did; we still do.i'm better at some things than jessica, and she's better at some.things than me.  one of the things she's best at is judging people..she's one of those rare individuals with x-ray vision for character..she can see through any kind of faker almost immediately.  her.nickname within yc was the social radar, and this special power of.hers was critical in making yc what it is.  the earlier you pick.startups, the more you're picking the founders.  later stage investors.get to try products and look at growth numbers.  at the stage where.yc invests, there is often neither a product nor any numbers.others thought yc had some special insight about the future of.technology.  mostly we had the same sort of insight socrates claimed:.we at least knew we knew nothing.  what made yc successful was being.able to pick good founders.  we thought airbnb was a bad idea.  we.funded it because we liked the founders.during interviews, robert and trevor and i would pepper the applicants.with technical questions.  jessica would mostly watch.  a lot of.the applicants probably read her as some kind of secretary, especially.early on, because she was the one who'd go out and get each new.group and she didn't ask many questions. she was ok with that.  it.was easier for her to watch people if they didn't notice her. but.after the interview, the three of us would turn to jessica and ask."what does the social radar say?".[1]having the social radar at interviews wasn't just how we picked.founders who'd be successful.  it was also how we picked founders.who were good people.  at first we did this because we couldn't.help it.  imagine what it would feel like to have x-ray vision for.character.  being around bad people would be intolerable.  so we'd.refuse to fund founders whose characters we had doubts about even.if we thought they'd be successful.though we initially did this out of self-indulgence, it turned out.to be very valuable to yc.  we didn't realize it in the beginning,.but the people we were picking would become the yc alumni network..and once we picked them, unless they did something really egregious,.they were going to be part of it for life. some now think yc's.alumni network is its most valuable feature. i personally think.yc's advice is pretty good too, but the alumni network is certainly.among the most valuable features.  the level of trust and helpfulness.is remarkable for a group of such size.  and jessica is the main.reason why.(as we later learned, it probably cost us little to reject people.whose characters we had doubts about, because how good founders are.and how well they do are not orthogonal.  if bad founders succeed.at all, they tend to sell early.  the most successful founders are.almost all good.)if jessica was so important to yc, why don't more people realize.it?  partly because i'm a writer, and writers always get disproportionate.attention.  yc's brand was initially my brand, and our applicants.were people who'd read my essays.  but there is another reason:.jessica hates attention.  talking to reporters makes her nervous..the thought of giving a talk paralyzes her.  she was even uncomfortable.at our wedding, because the bride is always the center of attention..[2]it's not just because she's shy that she hates attention, but because.it throws off the social radar. she can't be herself. you can't.watch people when everyone is watching you.another reason attention worries her is that she hates bragging..in anything she does that's publicly visible, her biggest fear.(after the obvious fear that it will be bad) is that it will seem.ostentatious.  she says being too modest is a common problem for.women.  but in her case it goes beyond that.  she has a horror of.ostentation so visceral it's almost a phobia.she also hates fighting. she can't do it; she just shuts down.  and.unfortunately there is a good deal of fighting in being the public.face of an organization.so although jessica more than anyone made yc unique, the very.qualities that enabled her to do it mean she tends to get written.out of yc's history.  everyone buys this story that pg started yc.and his wife just kind of helped.  even yc's haters buy it.  a.couple years ago when people were attacking us for not funding more.female founders (than exist), they all treated yc as identical with.pg.  it would have spoiled the narrative to acknowledge jessica's.central role at yc.jessica was boiling mad that people were accusing her company of.sexism. i've never seen her angrier about anything.  but she did.not contradict them.  not publicly.  in private there was a great.deal of profanity.  and she wrote three separate essays about the.question of female founders.  but she could never bring herself to.publish any of them.  she'd seen the level of vitriol in this debate,.and she shrank from engaging..[3]it wasn't just because she disliked fighting.  she's so sensitive.to character that it repels her even to fight with dishonest people..the idea of mixing it up with linkbait journalists or twitter trolls.would seem to her not merely frightening, but disgusting.but jessica knew her example as a successful female founder would.encourage more women to start companies, so last year she did.something yc had never done before and hired a pr firm to get her.some interviews.  at one of the first she did, the reporter brushed.aside her insights about startups and turned it into a sensationalistic.story about how some guy had tried to chat her up as she was waiting.outside the bar where they had arranged to meet.  jessica was.mortified, partly because the guy had done nothing wrong, but more.because the story treated her as a victim significant only for being.a woman, rather than one of the most knowledgeable investors in the.valley.after that she told the pr firm to stop.you're not going to be hearing in the press about what jessica has.achieved. so let me tell you what jessica has achieved.  y combinator.is fundamentally a nexus of people, like a university. it doesn't.make a product. what defines it is the people.  jessica more than.anyone curated and nurtured that collection of people.  in that.sense she literally made yc.jessica knows more about the qualities of startup founders than.anyone else ever has. her immense data set and x-ray vision are the.perfect storm in that respect.  the qualities of the founders are.the best predictor of how a startup will do.  and startups are in.turn the most important source of growth in mature economies.the person who knows the most about the most important factor in.the growth of mature economies — that is who jessica livingston is..doesn't that sound like someone who should be better known?notes[1].harj taggar reminded me that while jessica didn't ask many.questions, they tended to be important ones:"she was always good at sniffing out any red flags about the team.or their determination and disarmingly asking the right question,.which usually revealed more than the founders realized."[2].or more precisely, while she likes getting attention in the.sense of getting credit for what she has done, she doesn't like.getting attention in the sense of being watched in real time..unfortunately, not just for her but for a lot of people, how much.you get of the former depends a lot on how much you get of the.latter.incidentally, if you saw jessica at a public event, you would never.guess she.hates attention, because (a) she is very polite and (b) when she's.nervous, she expresses it by smiling more.[3].the existence of people like jessica is not just something.the mainstream media needs to learn to acknowledge, but something.feminists need to learn to acknowledge as well.  there are successful.women who don't like to fight.  which means if the public conversation.about women consists of fighting, their voices will be silenced.there's a sort of gresham's law of conversations. if a conversation.reaches a certain level of incivility, the more thoughtful people.start to leave. no one understands female founders better than.jessica.  but it's unlikely anyone will ever hear her speak candidly.about the topic. she ventured a toe in that water a while ago, and.the reaction was so violent that she decided "never again.".thanks to sam altman, paul buchheit, patrick collison,.daniel gackle, carolynn.levy, jon levy, kirsty nathoo, robert morris, geoff ralston, and.harj taggar for reading drafts of this.  and yes, jessica livingston,.who made me cut surprisingly little.<eot><sot>a way to detect bias.october 2015
this will come as a surprise to a lot of people, but in some cases.it's possible to detect bias in a selection process without knowing.anything about the applicant pool.  which is exciting because among.other things it means third parties can use this technique to detect.bias whether those doing the selecting want them to or not.you can use this technique whenever (a) you have at least.a random sample of the applicants that were selected, (b) their.subsequent performance is measured, and (c) the groups of.applicants you're comparing have roughly equal distribution of ability.how does it work?  think about what it means to be biased.  what.it means for a selection process to be biased against applicants.of type x is that it's harder for them to make it through.  which.means applicants of type x have to be better to get selected than.applicants not of type x..[1].which means applicants of type x.who do make it through the selection process will outperform other.successful applicants.  and if the performance of all the successful.applicants is measured, you'll know if they do.of course, the test you use to measure performance must be a valid.one.  and in particular it must not be invalidated by the bias you're.trying to measure..but there are some domains where performance can be measured, and.in those detecting bias is straightforward. want to know if the.selection process was biased against some type of applicant?  check.whether they outperform the others.  this is not just a heuristic.for detecting bias.  it's what bias means.for example, many suspect that venture capital firms are biased.against female founders. this would be easy to detect: among their.portfolio companies, do startups with female founders outperform.those without?  a couple months ago, one vc firm (almost certainly.unintentionally) published a study showing bias of this type. first.round capital found that among its portfolio companies, startups.with female founders outperformed.those without by 63%..[2]the reason i began by saying that this technique would come as a.surprise to many people is that we so rarely see analyses of this.type.  i'm sure it will come as a surprise to first round that they.performed one. i doubt anyone there realized that by limiting their.sample to their own portfolio, they were producing a study not of.startup trends but of their own biases when selecting companies.i predict we'll see this technique used more in the future.  the.information needed to conduct such studies is increasingly available..data about who applies for things is usually closely guarded by the.organizations selecting them, but nowadays data about who gets.selected is often publicly available to anyone who takes the trouble.to aggregate it..notes[1].this technique wouldn't work if the selection process looked.for different things from different types of applicants—for.example, if an employer hired men based on their ability but women.based on their appearance.[2].as paul buchheit points out, first round excluded their most.successful investment, uber, from the study.  and while it.makes sense to exclude outliers from some types of studies,.studies of returns from startup investing, which is all about.hitting outliers, are not one of them..thanks to sam altman, jessica livingston, and geoff ralston for reading.drafts of this.arabic translationswedish translation<eot><sot>write like you talk.october 2015
here's a simple trick for getting more people to read what you.write: write in spoken language.something comes over most people when they start writing. they write.in a different language than they'd use if they were talking to a.friend. the sentence structure and even the words are different..no one uses "pen" as a verb in spoken english. you'd feel like an.idiot using "pen" instead of "write" in a conversation with a friend.the last straw for me was a sentence i read a couple days ago:.the mercurial spaniard himself declared: "after altamira, all is.decadence.".it's from neil oliver's a history of ancient britain. i feel bad.making an example of this book, because it's no worse than lots of.others.  but just imagine calling picasso "the mercurial spaniard" when.talking to a friend.  even one.sentence of this would raise eyebrows in conversation.  and yet.people write whole books of it.ok, so written and spoken language are different. does that make.written language worse?if you want people to read and understand what you write, yes..written language is more complex, which makes it more work to read..it's also more formal and distant, which gives the reader's attention.permission to drift.  but perhaps worst of all, the complex sentences.and fancy words give you, the writer, the false impression that.you're saying more than you actually are.you don't need complex sentences to express complex ideas.  when.specialists in some abstruse topic talk to one another about ideas.in their field, they don't use sentences any more complex than they.do when talking about what to have for lunch.  they use different.words, certainly.  but even those they use no more than necessary..and in my experience, the harder the subject, the more informally.experts speak. partly, i think, because they have less to prove,.and partly because the harder the ideas you're talking about, the.less you can afford to let language get in the way.informal language is the athletic clothing of ideas.i'm not saying spoken language always works best. poetry is as much.music as text, so you can say things you wouldn't say in conversation..and there are a handful of writers who can get away with using fancy.language in prose. and then of course there are cases where writers.don't want to make it easy to understand what they're saying—in.corporate announcements of bad news, for example, or at the more.bogus end of the humanities.  but for nearly everyone else, spoken.language is better.it seems to be hard for most people to write in spoken language..so perhaps the best solution is to write your first draft the way.you usually would, then afterward look at each sentence and ask "is.this the way i'd say this if i were talking to a friend?" if it.isn't, imagine what you would say, and use that instead.  after a.while this filter will start to operate as you write. when you write.something you wouldn't say, you'll hear the clank as it hits the.page.before i publish a new essay, i read it out loud and fix everything.that doesn't sound like conversation. i even fix bits that are.phonetically awkward; i don't know if that's necessary, but it.doesn't cost much.this trick may not always be enough.  i've seen writing so far.removed from spoken language that it couldn't be fixed sentence by.sentence.  for cases like that there's a more drastic solution..after writing the first draft, try explaining to a friend what you.just wrote. then replace the draft with what you said to your friend.people often tell me how much my essays sound like me talking..the fact that this seems worthy of comment shows how rarely people.manage to write in spoken language.  otherwise everyone's writing.would sound like them talking.if you simply manage to write in spoken language, you'll be ahead.of 95% of writers.  and it's so easy to do: just don't let a sentence.through unless it's the way you'd say it to a friend.thanks to patrick collison and jessica livingston for reading drafts of this.japanese translationarabic translation<eot><sot>default alive or default dead?.october 2015
when i talk to a startup that's been operating for more than 8 or.9 months, the first thing i want to know is almost always the same..assuming their expenses remain constant and their revenue growth.is what it has been over the last several months, do they make it to.profitability on the money they have left?  or to put it more.dramatically, by default do they live or die?the startling thing is how often the founders themselves don't know..half the founders i talk to don't know whether they're default alive.or default dead.if you're among that number, trevor blackwell has made a handy.calculator you can use to find out.the reason i want to know first whether a startup is default alive.or default dead is that the rest of the conversation depends on the.answer.  if the company is default alive, we can talk about ambitious.new things they could do.  if it's default dead, we probably need.to talk about how to save it.  we know the current trajectory ends.badly.  how can they get off that trajectory?why do so few founders know whether they're default alive or default.dead?  mainly, i think, because they're not used to asking that..it's not a question that makes sense to ask early on, any more than.it makes sense to ask a 3 year old how he plans to support.himself.  but as the company grows older, the question switches from.meaningless to critical.  that kind of switch often takes people.by surprise.i propose the following solution: instead of starting to ask too.late whether you're default alive or default dead, start asking too.early.  it's hard to say precisely when the question switches.polarity.  but it's probably not that dangerous to start worrying.too early that you're default dead, whereas it's very dangerous to.start worrying too late.the reason is a phenomenon i wrote about earlier: the.fatal pinch..the fatal pinch is default dead + slow growth + not enough.time to fix it.  and the way founders end up in it is by not realizing.that's where they're headed.there is another reason founders don't ask themselves whether they're.default alive or default dead: they assume it will be easy to raise.more money.  but that assumption is often false, and worse still, the.more you depend on it, the falser it becomes.maybe it will help to separate facts from hopes. instead of thinking.of the future with vague optimism, explicitly separate the components..say "we're default dead, but we're counting on investors to save.us." maybe as you say that, it will set off the same alarms in your.head that it does in mine.  and if you set off the alarms sufficiently.early, you may be able to avoid the fatal pinch.it would be safe to be default dead if you could count on investors.saving you.  as a rule their interest is a function of.growth.  if you have steep revenue growth, say over 5x a year, you.can start to count on investors being interested even if you're not.profitable..[1].but investors are so fickle that you can never.do more than start to count on them.  sometimes something about your.business will spook investors even if your growth is great.  so no.matter how good your growth is, you can never safely treat fundraising.as more than a plan a. you should always have a plan b as well: you.should know (as in write down) precisely what you'll need to do to.survive if you can't raise more money, and precisely when you'll.have to switch to plan b if plan a isn't working.in any case, growing fast versus operating cheaply is far from the.sharp dichotomy many founders assume it to be.  in practice there.is surprisingly little connection between how much a startup spends.and how fast it grows.  when a startup grows fast, it's usually.because the product hits a nerve, in the sense of hitting some big.need straight on.  when a startup spends a lot, it's usually because.the product is expensive to develop or sell, or simply because.they're wasteful.if you're paying attention, you'll be asking at this point not just.how to avoid the fatal pinch, but how to avoid being default dead..that one is easy: don't hire too fast.  hiring too fast is by far.the biggest killer of startups that raise money..[2]founders tell themselves they need to hire in order to grow.  but.most err on the side of overestimating this need rather than.underestimating it.  why?  partly because there's so much work to.do.  naive founders think that if they can just hire enough.people, it will all get done.  partly because successful startups have.lots of employees, so it seems like that's what one does in order.to be successful.  in fact the large staffs of successful startups.are probably more the effect of growth than the cause.  and.partly because when founders have slow growth they don't want to.face what is usually the real reason: the product is not appealing.enough.plus founders who've just raised money are often encouraged to.overhire by the vcs who funded them.  kill-or-cure strategies are.optimal for vcs because they're protected by the portfolio effect..vcs want to blow you up, in one sense of the phrase or the other..but as a founder your incentives are different.  you want above all.to survive..[3]here's a common way startups die.  they make something moderately.appealing and have decent initial growth. they raise their first.round fairly easily, because the founders seem smart and the idea.sounds plausible. but because the product is only moderately.appealing, growth is ok but not great.  the founders convince.themselves that hiring a bunch of people is the way to boost growth..their investors agree.  but (because the product is only moderately.appealing) the growth never comes.  now they're rapidly running out.of runway.  they hope further investment will save them. but because.they have high expenses and slow growth, they're now unappealing.to investors. they're unable to raise more, and the company dies.what the company should have done is address the fundamental problem:.that the product is only moderately appealing.  hiring people is.rarely the way to fix that.  more often than not it makes it harder..at this early stage, the product needs to evolve more than to be."built out," and that's usually easier with fewer people..[4]asking whether you're default alive or default dead may save you.from this.  maybe the alarm bells it sets off will counteract the.forces that push you to overhire.  instead you'll be compelled to.seek growth in other ways. for example, by doing.things that don't scale, or by redesigning the product in the.way only founders can..and for many if not most startups, these paths to growth will be.the ones that actually work.airbnb waited 4 months after raising money at the end of y combinator.before they hired their first employee.  in the meantime the founders.were terribly overworked.  but they were overworked evolving airbnb.into the astonishingly successful organism it is now.notes[1].steep usage growth will also interest investors.  revenue.will ultimately be a constant multiple of usage, so x% usage growth.predicts x% revenue growth.  but in practice investors discount.merely predicted revenue, so if you're measuring usage you need a.higher growth rate to impress investors.[2].startups that don't raise money are saved from hiring too.fast because they can't afford to. but that doesn't mean you should.avoid raising money in order to avoid this problem, any more than.that total abstinence is the only way to avoid becoming an alcoholic.[3].i would not be surprised if vcs' tendency to push founders.to overhire is not even in their own interest.  they don't know how.many of the companies that get killed by overspending might have.done well if they'd survived.  my guess is a significant number.[4].after reading a draft, sam altman wrote:"i think you should make the hiring point more strongly.  i think.it's roughly correct to say that yc's most successful companies.have never been the fastest to hire, and one of the marks of a great.founder is being able to resist this urge."paul buchheit adds:"a related problem that i see a lot is premature scaling—founders.take a small business that isn't really working (bad unit economics,.typically) and then scale it up because they want impressive growth.numbers. this is similar to over-hiring in that it makes the business.much harder to fix once it's big, plus they are bleeding cash really.fast.".thanks to sam altman, paul buchheit, joe gebbia, jessica livingston,.and geoff ralston for reading drafts of this.<eot><sot>why it's safe for founders to be nice.august 2015
i recently got an email from a founder that helped me understand.something important: why it's safe for startup founders to be nice.people.i grew up with a cartoon idea of a very successful businessman (in.the cartoon it was always a man): a rapacious, cigar-smoking,.table-thumping guy in his fifties who wins by exercising power, and.isn't too fussy about how.  as i've written before, one of.the things that has surprised me most about startups is.how few of.the most successful founders are like that.  maybe successful people.in other industries are; i don't know; but not startup founders..[1]i knew this empirically, but i never saw the math of why till i got.this founder's email.  in it he said he worried that he was.fundamentally soft-hearted and tended to give away too much for.free. he thought perhaps he needed "a little dose of sociopath-ness."i told him not to worry about it, because so long as he built.something good enough to spread by word of mouth, he'd have a.superlinear growth curve.  if he was bad at extracting money from.people, at worst this curve would be some constant multiple less.than 1 of what it might have been.  but a constant multiple of any.curve is exactly the same shape.  the numbers on the y axis are.smaller, but the curve is just as steep, and when anything grows.at the rate of a successful startup, the y axis will take care of.itself.some examples will make this clear.  suppose your company is making.$1000 a month now, and you've made something so great that it's.growing at 5% a week.  two years from now, you'll be making about.$160k a month.now suppose you're so un-rapacious that you only extract half as.much from your users as you could.  that means two years later.you'll be making $80k a month instead of $160k.  how far behind are.you? how long will it take to catch up with where you'd have been.if you were extracting every penny?  a mere 15 weeks.  after two.years, the un-rapacious founder is only 3.5 months behind the.rapacious one..[2]if you're going to optimize a number, the one to choose is your.growth rate. suppose as before that you only extract half as much.from users as you could, but that you're able to grow 6% a week.instead of 5%.  now how are you doing compared to the rapacious.founder after two years?  you're already ahead—$214k a month.versus $160k—and pulling away fast.  in another year you'll be.making $4.4 million a month to the rapacious founder's $2 million.obviously one case where it would help to be rapacious is when.growth depends on that.  what makes startups different is that.usually it doesn't. startups usually win by making something so.great that people recommend it to their friends.  and being rapacious.not only doesn't help you do that, but probably hurts..[3]the reason startup founders can safely be nice is that making great.things is compounded, and rapacity isn't.so if you're a founder, here's a deal you can make with yourself.that will both make you happy and make your company successful..tell yourself you can be as nice as you want, so long as you work.hard on your growth rate to compensate.  most successful startups.make that tradeoff unconsciously. maybe if you do it consciously.you'll do it even better.notes[1].many think successful startup founders are driven by money..in fact the secret weapon of the most successful founders is that.they aren't.  if they were, they'd have taken one of the acquisition.offers that every fast-growing startup gets on the way up.  what.drives the most successful founders is the same thing that drives.most people who make things: the company is their project.[2].in fact since 2 ≈ 1.05 ^ 15, the un-rapacious founder is.always 15 weeks behind the rapacious one.[3].the other reason it might help to be good at squeezing money.out of customers is that startups usually lose money at first, and.making more per customer makes it easier to get to profitability.before your initial funding runs out.  but while it is very common.for startups to die.from running through their initial funding and then being unable.to raise more, the underlying cause is usually slow growth or.excessive spending rather than insufficient effort to extract money.from existing customers.thanks to sam altman, harj taggar, jessica livingston, and.geoff ralston for reading drafts of this, and to randall bennett.for being such a nice guy.<eot><sot>change your name.august 2015
if you have a us startup called x and you don't have x.com, you.should probably change your name.the reason is not just that people can't find you.  for companies.with mobile apps, especially, having the right domain name is not.as critical as it used to be for getting users.  the problem with.not having the .com of your name is that it signals weakness.  unless.you're so big that your reputation precedes you, a marginal domain.suggests you're a marginal company.  whereas.(as stripe shows).having x.com signals strength even if it has no relation to what you.do.even good founders can be in denial about this.  their denial derives.from two very powerful forces: identity, and lack of imagination.x is what we are, founders think. there's no other name as good..both of which are false.you can fix the first by stepping back from the problem. imagine.you'd called your company something else.  if you had, surely you'd.be just as attached to that name as you are to your current one..the idea of switching to your current name would seem repellent..[1]there's nothing intrinsically great about your current name.  nearly.all your attachment to it comes from it being attached to you..[2]the way to neutralize the second source of denial, your inability.to think of other potential names, is to acknowledge that you're.bad at naming.  naming is a completely separate skill from those.you need to be a good founder.  you can be a great startup founder.but hopeless at thinking of names for your company.once you acknowledge that, you stop believing there is nothing else.you could be called.  there are lots of other potential names that.are as good or better; you just can't think of them.how do you find them? one answer is the default way to solve.problems you're bad at: find someone else who can think of names..but with company names there is another possible.approach.  it turns out almost any word or word pair that is not.an obviously bad name is a sufficiently good one, and the number.of such domains is so large that you can find plenty that are cheap.or even untaken.  so make a list and try to buy some.  that's what.stripe.did.  (their search also turned up parse.com, which their.friends at parse took.)the reason i know that naming companies is a distinct skill orthogonal.to the others you need in a startup is that i happen to have it..back when i was running yc and did more office hours with startups,.i would often help them find new names.  80% of the time we could.find at least one good name in a 20 minute office hour slot.now when i do office hours i have to focus on more important.questions, like what the company is doing.  i tell them when they.need to change their name.  but i know the power of the forces that.have them in their grip, so i know most won't listen..[3]there are of course examples of startups that have succeeded without.having the .com of their name.  there are startups that have succeeded despite any.number of different mistakes.  but this mistake is less excusable.than most.  it's something that can be fixed in a couple days if.you have sufficient discipline to acknowledge the problem.100% of the top 20 yc companies by valuation have the .com of their.name. 94% of the top 50 do. but only 66% of companies in the current.batch have the .com of their name. which suggests there are lessons.ahead for most of the rest, one way or another..notes[1].incidentally, this thought experiment works for.nationality and religion too.[2].the liking you have for a name that has become part of your.identity manifests itself not directly, which would be easy to.discount, but as a collection of specious beliefs about its intrinsic.qualities.  (this too is true of nationality and religion as well.)[3].sometimes founders know it's a problem that they don't have.the .com of their name, but delusion strikes a step later in the belief that they'll.be able to buy it despite having no evidence it's for sale.  don't.believe a domain is for sale unless the owner has already told you.an asking price..thanks to sam altman, jessica livingston, and geoff ralston.for reading drafts of this.<eot><sot>what microsoft is this the altair basic of?.february 2015
one of the most valuable exercises you can try if you want to.understand startups is to look at the most successful companies and.explain why they were not as lame as they seemed when they first.launched.  because they practically all seemed lame at first. not.just small, lame.  not just the first step up a big mountain.  more.like the first step into a swamp.a basic interpreter for the altair?  how could that ever grow into.a giant company?  people sleeping on airbeds in strangers' apartments?.a web site for college students to stalk one another?  a wimpy.little single-board computer for hobbyists that used a tv as a.monitor?  a new search engine, when there were already about 10,.and they were all trying to de-emphasize search?  these ideas didn't.just seem small.  they seemed wrong.  they were the kind of ideas.you could not merely ignore, but ridicule.often the founders themselves didn't know why their ideas were.promising.  they were attracted to these ideas by instinct, because.they were living in the future and.they sensed that something was missing.  but they could not have.put into words exactly how their ugly ducklings were going to grow.into big, beautiful swans.most people's first impulse when they hear about a lame-sounding.new startup idea is to make fun of it.  even a lot of people who.should know better.when i encounter a startup with a lame-sounding idea, i ask "what.microsoft is this the altair basic of?"  now it's a puzzle, and the.burden is on me to solve it.  sometimes i can't think of an answer,.especially when the idea is a made-up one.  but it's remarkable how.often there does turn out to be an answer.  often it's one the.founders themselves hadn't seen yet.intriguingly, there are sometimes multiple answers.  i talked to a.startup a few days ago that could grow into 3 distinct microsofts..they'd probably vary in size by orders of magnitude.  but you can.never predict how big a microsoft is going to be, so in cases like.that i encourage founders to follow whichever path is most immediately.exciting to them.  their instincts got them this far. why stop now?<eot><sot>the ronco principle.january 2015
no one, vc or angel, has invested in more of the top startups than.ron conway.  he knows what happened in every deal in the valley,.half the time because he arranged it.and yet he's a super nice guy.  in fact, nice is not the word..ronco is good. i know of zero instances in which he has behaved.badly.  it's hard even to imagine.when i first came to silicon valley i thought "how lucky that someone.so powerful is so benevolent."  but gradually i realized it wasn't.luck.  it was by being benevolent that ronco became so powerful..all the deals he gets to invest in come to him through referrals..google did. facebook did. twitter was a referral from evan williams.himself.  and the reason so many people refer deals to him is that.he's proven himself to be a good guy.good does not mean being a pushover.  i would not want to face an.angry ronco.  but if ron's angry at you, it's because you did.something wrong.  ron is so old school he's old testament.  he will.smite you in his just wrath, but there's no malice in it.in almost every domain there are advantages to seeming good.  it.makes people trust you.  but actually being good is an expensive.way to seem good.  to an amoral person it might seem to be overkill.in some fields it might be, but apparently not in the startup world..though plenty of investors are jerks, there is a clear trend among.them: the most successful investors are also the most upstanding..[1]it was not always this way.  i would not feel confident saying that.about investors twenty years ago.what changed?  the startup world became more transparent and more.unpredictable.  both make it harder to seem good without actually.being good.it's obvious why transparency has that effect.  when an investor.maltreats a founder now, it gets out.  maybe not all the way to the.press, but other founders hear about it, and that investor.starts to lose deals..[2]the effect of unpredictability is more subtle.  it increases the.work of being inconsistent.  if you're going to be two-faced, you.have to know who you should be nice to and who you can get away.with being nasty to.  in the startup world, things change so rapidly.that you can't tell.  the random college kid you talk to today might.in a couple years be the ceo of the hottest startup in the valley..if you can't tell who to be nice to, you have to be nice to everyone..and probably the only people who can manage that are the people who.are genuinely good.in a sufficiently connected and unpredictable world, you can't seem.good without being good.as often happens, ron discovered how to be the investor of the.future by accident.  he didn't foresee the future of startup.investing, realize it would pay to be upstanding, and force himself.to behave that way. it would feel unnatural to him to behave any.other way.  he was already.living in the future.fortunately that future is not limited to the startup world.  the.startup world is more transparent and unpredictable than most, but.almost everywhere the trend is in that direction.notes[1].i'm not saying that if you sort investors by benevolence.you've also sorted them by returns, but rather that if you do a.scatterplot with benevolence on the x axis and returns on the y,.you'd see a clear upward trend.[2].y combinator in particular, because it aggregates data.from so many startups, has a pretty comprehensive view of.investor behavior..thanks to sam altman and jessica livingston for reading drafts of.this.japanese translation<eot><sot>what doesn't seem like work?.january 2015
my father is a mathematician. for most of my childhood he worked.for westinghouse, modelling nuclear reactors.he was one of those lucky people who know early on what they want to.do.  when you talk to him about his childhood, there's a clear.watershed at about age 12, when he "got interested in maths."he.grew up in the small welsh seacoast town of pwllheli.  as we retraced.his walk to school on google street view, he said that it had been.nice growing up in the country."didn't it get boring when you got to be about 15?" i asked."no," he said, "by then i was interested in maths."in another conversation he told me that what he really liked was.solving problems.  to me the exercises at the end of each chapter.in a math textbook represent work, or at best a way to reinforce.what you learned in that chapter.  to him the problems were the.reward.  the text of each chapter was just some advice about solving.them. he said that as soon as he got a new textbook he'd immediately.work out all the problems — to the slight annoyance of his teacher,.since the class was supposed to work through the book gradually.few people know so early or so certainly what they want to work on..but talking to my father reminded me of a heuristic the rest of us.can use. if something that seems like work to other people doesn't.seem like work to you, that's something you're well suited for..for example, a lot of programmers i know, including me, actually.like debugging.  it's not something people tend to volunteer; one.likes it the way one likes popping zits. but you may have to like.debugging to like programming, considering the degree to which.programming consists of it.the stranger your tastes seem to other people, the stronger evidence.they probably are of what you should do. when i was in college i.used to write papers for my friends.  it was quite interesting to.write a paper for a class i wasn't taking.  plus they were always.so relieved.it seemed curious that the same task could be painful to one person.and pleasant to another, but i didn't realize at the time what this.imbalance implied, because i wasn't looking for it.  i didn't realize.how hard it can be to decide what you should work on, and that you.sometimes have to figure it out from subtle clues, like a detective.solving a case in a mystery novel.  so i bet it would help a lot.of people to ask themselves about this explicitly. what seems like.work to other people that doesn't seem like work to you?.thanks to sam altman, trevor blackwell, jessica livingston,.robert morris, and my father for reading drafts of this.robert morris: all about programmingfrench translation<eot><sot>don't talk to corp dev.january 2015
corporate development, aka corp dev, is the group within companies.that buys other companies. if you're talking to someone from corp.dev, that's why, whether you realize it yet or not.it's usually a mistake to talk to corp dev unless (a) you want to.sell your company right now and (b) you're sufficiently likely to.get an offer at an acceptable price.  in practice that means startups.should only talk to corp dev when they're either doing really well.or really badly.  if you're doing really badly, meaning the company.is about to die, you may as well talk to them, because you have.nothing to lose. and if you're doing really well, you can safely.talk to them, because you both know the price will have to be high,.and if they show the slightest sign of wasting your time, you'll.be confident enough to tell them to get lost.the danger is to companies in the middle.  particularly to young.companies that are growing fast, but haven't been doing it for long.enough to have grown big yet.  it's usually a mistake for a promising.company less than a year old even to talk to corp dev.but it's a mistake founders constantly make.  when someone from.corp dev wants to meet, the founders tell themselves they should.at least find out what they want.  besides, they don't want to.offend big company by refusing to meet.well, i'll tell you what they want.  they want to talk about buying.you.  that's what the title "corp dev" means.   so before agreeing.to meet with someone from corp dev, ask yourselves, "do we want to.sell the company right now?"  and if the answer is no, tell them."sorry, but we're focusing on growing the company."  they won't be.offended.  and certainly the founders of big company won't be.offended. if anything they'll think more highly of you.  you'll.remind them of themselves.  they didn't sell either; that's why.they're in a position now to buy other companies..[1]most founders who get contacted by corp dev already know what it.means.  and yet even when they know what corp dev does and know.they don't want to sell, they take the meeting.  why do they do it?.the same mix of denial and wishful thinking that underlies most.mistakes founders make. it's flattering to talk to someone who wants.to buy you.  and who knows, maybe their offer will be surprisingly.high.  you should at least see what it is, right?no.  if they were going to send you an offer immediately by email,.sure, you might as well open it.  but that is not how conversations.with corp dev work.  if you get an offer at all, it will be at the.end of a long and unbelievably distracting process.  and if the.offer is surprising, it will be surprisingly low.distractions are the thing you can least afford in a startup.  and.conversations with corp dev are the worst sort of distraction,.because as well as consuming your attention they undermine your.morale.  one of the tricks to surviving a grueling process is not.to stop and think how tired you are.  instead you get into a sort.of flow..[2].imagine what it would do to you if at mile 20 of a.marathon, someone ran up beside you and said "you must feel really.tired.  would you like to stop and take a rest?"  conversations.with corp dev are like that but worse, because the suggestion of.stopping gets combined in your mind with the imaginary high price.you think they'll offer.and then you're really in trouble.  if they can, corp dev people.like to turn the tables on you. they like to get you to the point.where you're trying to convince them to buy instead of them trying.to convince you to sell.  and surprisingly often they succeed.this is a very slippery slope, greased with some of the most powerful.forces that can work on founders' minds, and attended by an experienced.professional whose full time job is to push you down it.their tactics in pushing you down that slope are usually fairly.brutal. corp dev people's whole job is to buy companies, and they.don't even get to choose which.  the only way their performance is.measured is by how cheaply they can buy you, and the more ambitious.ones will stop at nothing to achieve that. for example, they'll.almost always start with a lowball offer, just to see if you'll.take it. even if you don't, a low initial offer will demoralize you.and make you easier to manipulate.and that is the most innocent of their tactics. just wait till.you've agreed on a price and think you have a done deal, and then.they come back and say their boss has vetoed the deal and won't do.it for more than half the agreed upon price. happens all the time..if you think investors can behave badly, it's nothing compared to.what corp dev people can do.  even corp dev people at companies.that are otherwise benevolent.i remember once complaining to a.friend at google about some nasty trick their corp dev people had.pulled on a yc startup."what happened to don't be evil?" i asked."i don't think corp dev got the memo," he replied.the tactics you encounter in m&a conversations can be like nothing.you've experienced in the otherwise comparatively.upstanding world.of silicon valley.  it's as if a chunk of genetic material from the.old-fashioned robber baron business world got incorporated into the.startup world..[3]the simplest way to protect yourself is to use the trick that john.d. rockefeller, whose grandfather was an alcoholic, used to protect.himself from becoming one.  he once told a sunday school class.boys, do you know why i never became a drunkard?  because i never.took the first drink..do you want to sell your company right now?  not eventually, right.now.  if not, just don't take the first meeting.  they won't be.offended.  and you in turn will be guaranteed to be spared one of.the worst experiences that can happen to a startup.if you do want to sell, there's another set of.techniques.for doing.that.  but the biggest mistake founders make in dealing with corp.dev is not doing a bad job of talking to them when they're ready.to, but talking to them before they are.  so if you remember only.the title of this essay, you already know most of what you need to.know about m&a in the first year.notes[1].i'm not saying you should never sell.  i'm saying you should.be clear in your own mind about whether you want to sell or not,.and not be led by manipulation or wishful thinking into trying to.sell earlier than you otherwise would have.[2].in a startup, as in most competitive sports, the task at hand.almost does this for you; you're too busy to feel tired.  but when.you lose that protection, e.g. at the final whistle, the fatigue.hits you like a wave.  to talk to corp dev is to let yourself feel.it mid-game.[3].to be fair, the apparent misdeeds of corp dev people are magnified.by the fact that they function as the face of a large organization.that often doesn't know its own mind.  acquirers can be surprisingly.indecisive about acquisitions, and their flakiness is indistinguishable.from dishonesty by the time it filters down to you.thanks to marc andreessen, jessica livingston, geoff.ralston, and qasar younis for reading drafts of this.<eot><sot>let the other 95% of great programmers in.december 2014
american technology companies want the government to make immigration.easier because they say they can't find enough programmers in the.us.  anti-immigration people say that instead of letting foreigners.take these jobs, we should train more americans to be programmers..who's right?the technology companies are right. what the anti-immigration people.don't understand is that there is a huge variation in ability between.competent programmers and exceptional ones, and while you can train.people to be competent, you can't train them to be exceptional..exceptional programmers have an aptitude for and.interest in.programming that is not merely the product of training..[1]the us has less than 5% of the world's population.  which means if.the qualities that make someone a great programmer are evenly.distributed, 95% of great programmers are born outside the us.the anti-immigration people have to invent some explanation to.account for all the effort technology companies have expended trying.to make immigration easier.  so they claim it's because they want.to drive down salaries.  but if you talk to startups, you find.practically every one over a certain size has gone through legal.contortions to get programmers into the us, where they then.paid them the same as they'd have paid an american.  why would they.go to extra trouble to get programmers for the same price?  the.only explanation is that they're telling the truth: there are just.not enough great programmers to go around..[2]i asked the ceo of a startup with about 70 programmers how many.more he'd hire if he could get all the great programmers he wanted..he said "we'd hire 30 tomorrow morning."  and this is one of the.hot startups that always win recruiting battles. it's the same all.over silicon valley.  startups are that constrained for talent.it would be great if more americans were trained as programmers,.but no amount of training can flip a ratio as overwhelming as 95.to 5. especially since programmers are being trained in other.countries too.  barring some cataclysm, it will always be true that.most great programmers are born outside the us.  it will always be.true that most people who are great at anything are born outside.the us..[3]exceptional performance implies immigration.  a country with only.a few percent of the world's population will be exceptional in some.field only if there are a lot of immigrants working in it.but this whole discussion has taken something for granted: that if.we let more great programmers into the us, they'll want to come..that's true now, and we don't realize how lucky we are that it is..if we want to keep this option open, the best way to do it is to.take advantage of it: the more of the world's great programmers are.here, the more the rest will want to come here.and if we don't, the us could be seriously fucked. i realize that's.strong language, but the people dithering about this don't seem to.realize the power of the forces at work here.  technology gives the.best programmers huge leverage.  the world market in programmers.seems to be becoming dramatically more liquid.  and since good.people like good colleagues, that means the best programmers could.collect in just a few hubs.  maybe mostly in one hub.what if most of the great programmers collected in one hub, and it.wasn't here?  that scenario may seem unlikely now, but it won't be.if things change as much in the next 50 years as they did in the.last 50.we have the potential to ensure that the us remains a technology.superpower just by letting in a few thousand great programmers a.year.  what a colossal mistake it would be to let that opportunity.slip.  it could easily be the defining mistake this generation of.american politicians later become famous for.  and unlike other.potential mistakes on that scale, it costs nothing to fix.so please, get on with it..notes[1].how much better is a great programmer than an ordinary one?.so much better that you can't even measure the difference directly..a great programmer doesn't merely do the same work faster.  a great.programmer will invent things an ordinary programmer would never.even think of.  this doesn't mean a great programmer is infinitely.more valuable, because any invention has a finite market value..but it's easy to imagine cases where a great programmer might invent.things worth 100x or even 1000x an average programmer's salary.[2].there are a handful of consulting firms that rent out big.pools of foreign programmers they bring in on h1-b visas.  by all.means crack down on these.  it should be easy to write legislation.that distinguishes them, because they are so different from technology.companies.  but it is dishonest of the anti-immigration people to.claim that companies like google and facebook are driven by the.same motives.  an influx of inexpensive but mediocre programmers.is the last thing they'd want; it would destroy them.[3].though this essay talks about programmers, the group of people.we need to import is broader, ranging from designers to programmers.to electrical engineers.  the best one could do as a general term.might be "digital talent." it seemed better to make the argument a.little too narrow than to confuse everyone with a neologism..thanks to sam altman, john collison, patrick collison, jessica.livingston, geoff ralston, fred wilson, and qasar younis for reading.drafts of this.spanish translation<eot><sot>how to be an expert in a changing world.december 2014
if the world were static, we could have monotonically increasing.confidence in our beliefs.  the more (and more varied) experience.a belief survived, the less likely it would be false.  most people.implicitly believe something like this about their opinions.  and.they're justified in doing so with opinions about things that don't.change much, like human nature.  but you can't trust your opinions.in the same way about things that change, which could include.practically everything else.when experts are wrong, it's often because they're experts on an.earlier version of the world.is it possible to avoid that?  can you protect yourself against.obsolete beliefs?  to some extent, yes. i spent almost a decade.investing in early stage startups, and curiously enough protecting.yourself against obsolete beliefs is exactly what you have to do.to succeed as a startup investor.  most really good startup ideas.look like bad ideas at first, and many of those look bad specifically.because some change in the world just switched them from bad to.good.  i spent a lot of time learning to recognize such ideas, and.the techniques i used may be applicable to ideas in general.the first step is to have an explicit belief in change.  people who.fall victim to a monotonically increasing confidence in their.opinions are implicitly concluding the world is static.  if you.consciously remind yourself it isn't, you start to look for change.where should one look for it?  beyond the moderately useful.generalization that human nature doesn't change much, the unfortunate.fact is that change is hard to predict.  this is largely a tautology.but worth remembering all the same: change that matters usually.comes from an unforeseen quarter.so i don't even try to predict it.  when i get asked in interviews.to predict the future, i always have to struggle to come up with.something plausible-sounding on the fly, like a student who hasn't.prepared for an exam..[1].but it's not out of laziness that i haven't.prepared.  it seems to me that beliefs about the future are so.rarely correct that they usually aren't worth the extra rigidity.they impose, and that the best strategy is simply to be aggressively.open-minded.  instead of trying to point yourself in the right.direction, admit you have no idea what the right direction is, and.try instead to be super sensitive to the winds of change.it's ok to have working hypotheses, even though they may constrain.you a bit, because they also motivate you.  it's exciting to chase.things and exciting to try to guess answers.  but you have to be.disciplined about not letting your hypotheses harden into anything.more..[2]i believe this passive m.o. works not just for evaluating new ideas.but also for having them.  the way to come up with new ideas is not.to try explicitly to, but to try to solve problems and simply not.discount weird hunches you have in the process.the winds of change originate in the unconscious minds of domain.experts.  if you're sufficiently expert in a field, any weird idea.or apparently irrelevant question that occurs to you is ipso facto.worth exploring..[3].within y combinator, when an idea is described.as crazy, it's a compliment—in fact, on average probably a.higher compliment than when an idea is described as good.startup investors have extraordinary incentives for correcting.obsolete beliefs.  if they can realize before other investors that.some apparently unpromising startup isn't, they can make a huge.amount of money.  but the incentives are more than just financial..investors' opinions are explicitly tested: startups come to them.and they have to say yes or no, and then, fairly quickly, they learn.whether they guessed right.  the investors who say no to a google.(and there were several) will remember it for the rest of their.lives.anyone who must in some sense bet on ideas rather than merely.commenting on them has similar incentives.  which means anyone who.wants such incentives can have them, by turning their comments into.bets: if you write about a topic in some fairly durable and public.form, you'll find you worry much more about getting things right.than most people would in a casual conversation..[4]another trick i've found to protect myself against obsolete beliefs.is to focus initially on people rather than ideas. though the nature.of future discoveries is hard to predict, i've found i can predict.quite well what sort of people will make them.  good new ideas come.from earnest, energetic, independent-minded people.betting on people over ideas saved me countless times as an investor..we thought airbnb was a bad idea, for example. but we could tell.the founders were earnest, energetic, and independent-minded..(indeed, almost pathologically so.)  so we suspended disbelief and.funded them.this too seems a technique that should be generally applicable..surround yourself with the sort of people new ideas come from.  if.you want to notice quickly when your beliefs become obsolete, you.can't do better than to be friends with the people whose discoveries.will make them so.it's hard enough already not to become the prisoner of your own.expertise, but it will only get harder, because change is accelerating..that's not a recent trend; change has been accelerating since the.paleolithic era.  ideas beget ideas.  i don't expect that to change..but i could be wrong..notes[1].my usual trick is to talk about aspects of the present that.most people haven't noticed yet.[2].especially if they become well enough known that people start.to identify them with you.  you have to be extra skeptical about.things you want to believe, and once a hypothesis starts to be.identified with you, it will almost certainly start to be in that.category.[3].in practice "sufficiently expert" doesn't require one to be.recognized as an expert—which is a trailing indicator in any.case.  in many fields a year of focused work plus caring a lot would.be enough.[4].though they are public and persist indefinitely, comments on.e.g. forums and places like twitter seem empirically to work like.casual conversation.  the threshold may be whether what you write.has a title..thanks to sam altman, patrick collison, and robert morris.for reading drafts of this.spanish translationarabic translation<eot><sot>how you know.december 2014
i've read villehardouin's chronicle of the fourth crusade at least.two times, maybe three.  and yet if i had to write down everything.i remember from it, i doubt it would amount to much more than a.page.  multiply this times several hundred, and i get an uneasy.feeling when i look at my bookshelves. what use is it to read all.these books if i remember so little from them?a few months ago, as i was reading constance reid's excellent.biography of hilbert, i figured out if not the answer to this.question, at least something that made me feel better about it..she writes:.hilbert had no patience with mathematical lectures which filled.the students with facts but did not teach them how to frame a.problem and solve it. he often used to tell them that "a perfect.formulation of a problem is already half its solution.".that has always seemed to me an important point, and i was even.more convinced of it after hearing it confirmed by hilbert.but how had i come to believe in this idea in the first place?  a.combination of my own experience and other things i'd read.  none.of which i could at that moment remember!  and eventually i'd forget.that hilbert had confirmed it too.  but my increased belief in the.importance of this idea would remain something i'd learned from.this book, even after i'd forgotten i'd learned it.reading and experience train your model of the world.  and even if.you forget the experience or what you read, its effect on your model.of the world persists.  your mind is like a compiled program you've.lost the source of.  it works, but you don't know why.the place to look for what i learned from villehardouin's chronicle.is not what i remember from it, but my mental models of the crusades,.venice, medieval culture, siege warfare, and so on.  which doesn't.mean i couldn't have read more attentively, but at least the harvest.of reading is not so miserably small as it might seem.this is one of those things that seem obvious in retrospect.  but.it was a surprise to me and presumably would be to anyone else who.felt uneasy about (apparently) forgetting so much they'd read.realizing it does more than make you feel a little better about.forgetting, though.  there are specific implications.for example, reading and experience are usually "compiled" at the.time they happen, using the state of your brain at that time.  the.same book would get compiled differently at different points in.your life.  which means it is very much worth reading important.books multiple times.  i always used to feel some misgivings about.rereading books.  i unconsciously lumped reading together with work.like carpentry, where having to do something again is a sign you.did it wrong the first time.  whereas now the phrase "already read".seems almost ill-formed.intriguingly, this implication isn't limited to books.  technology.will increasingly make it possible to relive our experiences.  when.people do that today it's usually to enjoy them again (e.g. when.looking at pictures of a trip) or to find the origin of some bug in.their compiled code (e.g. when stephen fry succeeded in remembering.the childhood trauma that prevented him from singing).  but as.technologies for recording and playing back your life improve, it.may become common for people to relive experiences without any goal.in mind, simply to learn from them again as one might when rereading.a book.eventually we may be able not just to play back experiences but.also to index and even edit them. so although not knowing how you.know things may seem part of being human, it may not be..thanks to sam altman, jessica livingston, and robert morris for reading.drafts of this.japanese translation<eot><sot>the fatal pinch.december 2014
many startups go through a point a few months before they die where.although they have a significant amount of money in the bank, they're.also losing a lot each month, and revenue growth is either nonexistent.or mediocre.  the company has, say, 6 months of runway.  or to put.it more brutally, 6 months before they're out of business.  they.expect to avoid that by raising more from investors..[1]that last sentence is the fatal one.there may be nothing founders are so prone to delude themselves.about as how interested investors will be in giving them additional.funding.  it's hard to convince investors the first time too, but.founders expect that.  what bites them the second time is a confluence.of three forces:.the company is spending more now than it did the first time.it raised money. investors have much higher standards for companies that have.already raised money. the company is now starting to read as a failure. the first.time it raised money, it was neither a success nor a failure; it.was too early to ask. now it's possible to ask that question, and.the default answer is failure, because at this point that is the.default outcome..i'm going to call the situation i described in the first paragraph "the fatal pinch." i try to resist.coining phrases, but making up a name for this situation may snap.founders into realizing when they're in it.one of the things that makes the fatal pinch so dangerous is.that it's self-reinforcing.  founders overestimate their chances.of raising more money, and so are slack about reaching.profitability, which further decreases their chances of raising.money.now that you know about the fatal pinch, how do you avoid it?  y combinator tells.founders who raise money to act as if it's the last they'll ever.get.  because the self-reinforcing nature of this situation works.the other way too: the less you need further investment, the easier.it is to get.what do you do if you're already in the fatal pinch?  the.first step is to re-evaluate the probability of raising more money..i will now, by an amazing feat of clairvoyance, do this for you:.the probability is zero..[2]three options remain: you can shut down the company, you can increase.how much you make, and you can decrease how much you spend.you should shut down the company if you're certain it will.fail no matter what you do.  then at least you can give back the.money you have left, and save yourself however many months you would.have spent riding it down.companies rarely have to fail though.  what i'm really doing.here is giving you the option of admitting you've already given up.if you don't want to shut down the company, that leaves increasing.revenues and decreasing expenses.  in most startups, expenses =.people, and decreasing expenses = firing people..[3].deciding to.fire people is usually hard, but there's one case in which it.shouldn't be: when there are people you already know you should.fire but you're in denial about it.  if so, now's the time.if that makes you profitable, or will enable you to make it to.profitability on the money you have left, you've avoided the immediate.danger.otherwise you have three options: you either have to fire good.people, get some or all of the employees to take less salary for a.while, or increase revenues.getting people to take less salary is a weak solution that will.only work when the problem isn't too bad.  if your current trajectory.won't quite get you to profitability but you can get over the threshold.by cutting salaries a little,.you might be able to make the case to everyone for doing it..otherwise you're probably just postponing the problem, and that.will be obvious to the people whose salaries you're proposing to.cut..[4]which leaves two options, firing good people and making more money..while trying to balance them, keep in mind the eventual goal: to be.a successful product company in the sense of having a single thing.lots of people use.you should lean more toward firing people if the source of your.trouble is overhiring. if you went out and hired 15 people before.you even knew what you were building, you've created a broken.company.  you need to figure out what you're building, and it will.probably be easier to do that with a handful of people than 15..plus those 15 people might not even be the ones you need for whatever.you end up building.  so the solution may be to shrink and then.figure out what direction to grow in.  after all, you're not doing.those 15 people any favors if you fly the company into ground with.them aboard.  they'll all lose their jobs eventually, along with.all the time they expended on this doomed company.whereas if you only have a handful of people, it may be better to.focus on trying to make more money.  it may seem facile to suggest.a startup make more money, as if that could be done for the asking..usually a startup is already trying as hard as it can to sell.whatever it sells.  what i'm suggesting here is not so much to try.harder to make money but to try to make money in a different way..for example, if you have only one person selling while the rest are.writing code, consider having everyone work on selling.  what good.will more code do you when you're out of business?.if you have to write code to close a certain deal, go ahead;.that follows from everyone working on selling.  but only work on.whatever will get you the most revenue the soonest.another way to make money differently is to sell different things,.and in particular to do more consultingish work.  i say consultingish.because there is a long slippery slope from making products to pure.consulting, and you don't have to go far down it before you start.to offer something really attractive to customers. although your.product may not be very appealing yet, if you're a startup your.programmers will often be way better than the ones your customers.have.  or you may have expertise in some new field they.don't understand.  so if you change your sales conversations.just a little from "do you want to buy our product?" to "what do.you need that you'd pay a lot for?" you may find it's suddenly a.lot easier to extract money from customers.be ruthlessly mercenary when you start doing this, though. you're.trying to save your company from death here, so make customers pay.a lot, quickly. and to the extent you can, try to avoid the.worst pitfalls of consulting.  the ideal thing might be if you built.a precisely defined derivative version of your product for the.customer, and it was otherwise a straight product sale.  you keep.the ip and no billing by the hour.in the best case, this consultingish work may not be just something.you do to survive, but may turn out to be the thing-that-doesn't-scale that defines your.company.  don't expect it to be, but as you dive into individual.users' needs, keep your eyes open for narrow openings that have.wide vistas beyond.there is usually so much demand for custom work that unless you're.really incompetent there has to be some point down the slope of.consulting at which you can survive.  but i didn't use the term.slippery slope by accident; customers' insatiable demand for custom.work will always be pushing you toward the bottom.  so while you'll.probably survive, the problem now becomes to survive with the least.damage and distraction.the good news is, plenty of successful startups have passed through.near-death experiences and gone on to flourish.  you just have to.realize in time that you're near death.  and if you're in the fatal pinch,.you are..notes[1].there are a handful of companies that can't reasonably expect.to make money for the first year or two, because what they're.building takes so long.  for these companies substitute "progress".for "revenue growth."  you're not one of these companies unless.your initial investors agreed in advance that you were.  and frankly.even these companies wish they weren't, because the illiquidity of."progress" puts them at the mercy of investors.[2].there's a variant of the fatal pinch where your existing.investors help you along by promising to invest more.  or rather,.where you read them as promising to invest more, while they think.they're just mentioning the possibility.  the way to solve this.problem, if you have 8 months of runway or less, is to try to get.the money right now.  then you'll either get the money, in which.case (immediate) problem solved, or at least prevent your investors.from helping you to remain in denial about your fundraising prospects.[3].obviously, if you have significant expenses other than salaries.that you can eliminate, do it now.[4].unless of course the source of the problem is that you're paying.yourselves high salaries.  if by cutting the founders' salaries to.the minimum you need, you can make it to profitability, you should..but it's a bad sign if you needed to read this to realize that..thanks to sam altman, paul buchheit, jessica livingston, and.geoff ralston for reading drafts of this.arabic translation<eot><sot>mean people fail.november 2014
it struck me recently how few of the most successful people i know.are mean.  there are exceptions, but remarkably few.meanness isn't rare.  in fact, one of the things the internet has.shown us is how mean people can be.  a few decades ago, only famous.people and professional writers got to publish their opinions.  now.everyone can, and we can all see the long tail of.meanness that had previously been hidden.and yet while there are clearly a lot of mean people out there,.there are next to none among the most successful people i know..what's going on here?  are meanness and success inversely correlated?part of what's going on, of course, is selection bias.  i only know.people who work in certain fields: startup founders, programmers,.professors. i'm willing to believe that successful people in other.fields are mean.  maybe successful hedge fund managers are mean; i.don't know enough to say.  it seems quite likely that most successful.drug lords are mean.  but there are at least big chunks of the world.that mean people don't rule, and that territory seems to be growing.my wife and y combinator cofounder jessica is one of those rare.people who have x-ray vision for character. being married to her.is like standing next to an airport baggage scanner. she came to.the startup world from investment banking, and she has always been.struck both by how consistently successful startup founders turn.out to be good people, and how consistently bad people fail as.startup founders.why?  i think there are several reasons.  one is that being mean.makes you stupid. that's why i hate fights. you never do your best.work in a fight, because fights are not sufficiently general..winning is always a function of the situation and the people involved..you don't win fights by thinking of big ideas but by thinking of.tricks that work in one particular case.  and yet fighting is just.as much work as thinking about real problems. which is particularly.painful to someone who cares how their brain is used: your brain.goes fast but you get nowhere, like a car spinning its wheels.startups don't win by attacking. they win by transcending. there.are exceptions of course, but usually the way to win is to race.ahead, not to stop and fight.another reason mean founders lose is that they can't get the best.people to work for them. they can hire people who will put up with.them because they need a job. but the best people have other options..a mean person can't convince the best people to work for him unless.he is super convincing. and while having the best people helps any.organization, it's critical for startups.there is also a complementary force at work: if you want to build.great things, it helps to be driven by a spirit of benevolence. the startup founders who end up.richest are not the ones driven by money.  the ones driven by money.take the big acquisition offer that nearly every successful startup.gets en route..[1].the ones who keep going are driven by something.else. they may not say so explicitly, but they're usually trying.to improve the world.  which means people with a desire to improve.the world have a natural advantage..[2]the exciting thing is that startups are not just one random type.of work in which meanness and success are inversely correlated..this kind of work is the future.for most of history success meant control of scarce resources.  one.got that by fighting, whether literally in the case of pastoral.nomads driving hunter-gatherers into marginal lands, or metaphorically.in the case of gilded age financiers contending with one another.to assemble railroad monopolies. for most of history, success meant.success at zero-sum games. and in most of them meanness was not a.handicap but probably an advantage.that is changing. increasingly the games that matter are not zero-sum..increasingly you win not by fighting to get control of a scarce.resource, but by having new ideas and building new things..[3]there have long been games where you won by having new ideas. in.the third century bc, archimedes won by doing that. at least until.an invading roman army killed him. which illustrates why.this change is happening: for new ideas to matter, you need a certain.degree of civil order.  and not just not being at war.  you also.need to prevent the sort of economic violence that nineteenth century.magnates practiced against one another and communist countries.practiced against their citizens.  people need to feel that what.they create can't be stolen..[4]that has always been the case for thinkers, which is why this trend.began with them.  when you think of successful people from history.who weren't ruthless, you get mathematicians and writers and artists..the exciting thing is that their m.o. seems to be spreading.  the.games played by intellectuals are leaking into the real world, and.this is reversing the historical polarity of the relationship between.meanness and success.so i'm really glad i stopped to think about this. jessica and i.have always worked hard to teach our kids not to be mean.  we.tolerate noise and mess and junk food, but not meanness.  and now.i have both an additional reason to crack down on it, and an.additional argument to use when i do: that being mean makes you.fail..notes[1].i'm not saying all founders who take big acquisition offers.are driven only by money, but rather that those who don't aren't..plus one can have benevolent motives for being driven by money — for.example, to take care of one's family, or to be free to work.on projects that improve the world.[2].it's unlikely that every successful startup improves the.world.  but their founders, like parents, truly believe they do..successful founders are in love with their companies.  and while.this sort of love is as blind as the love people have for one.another, it is genuine.[3].peter.thiel would point out that successful founders still.get rich from controlling monopolies, just monopolies they create.rather than ones they capture.  and while this is largely true, it.means a big change in the sort of person who wins.[4].to be fair, the romans didn't mean to kill archimedes.  the.roman commander specifically ordered that he be spared. but he got.killed in the chaos anyway.in sufficiently disordered times, even thinking requires.control of scarce resources, because living at all is a scarce.resource.thanks to sam altman, ron conway, daniel gackle, jessica livingston, robert morris,.geoff ralston, and fred wilson for reading drafts of this.portuguese translationjapanese translationarabic translation<eot><sot>before the startup.want to start a startup?  get funded by.y combinator..october 2014
(this essay is derived from a guest lecture in sam altman's startup class at.stanford.  it's intended for college students, but much of it is.applicable to potential founders at other ages.)one of the advantages of having kids is that when you have to give.advice, you can ask yourself "what would i tell my own kids?"  my.kids are little, but i can imagine what i'd tell them about startups.if they were in college, and that's what i'm going to tell you.startups are very counterintuitive.  i'm not sure why.  maybe it's.just because knowledge about them hasn't permeated our culture yet..but whatever the reason, starting a startup is a task where you.can't always trust your instincts.it's like skiing in that way.  when you first try skiing and you.want to slow down, your instinct is to lean back.  but if you lean.back on skis you fly down the hill out of control.  so part of.learning to ski is learning to suppress that impulse.  eventually.you get new habits, but at first it takes a conscious effort.  at.first there's a list of things you're trying to remember as you.start down the hill.startups are as unnatural as skiing, so there's a similar list for.startups. here i'm going to give you the first part of it — the things.to remember if you want to prepare yourself to start a startup..counterintuitivethe first item on it is the fact i already mentioned: that startups.are so weird that if you trust your instincts, you'll make a lot.of mistakes.  if you know nothing more than this, you may at least.pause before making them.when i was running y combinator i used to joke that our function.was to tell founders things they would ignore.  it's really true..batch after batch, the yc partners warn founders about mistakes.they're about to make, and the founders ignore them, and then come.back a year later and say "i wish we'd listened."why do the founders ignore the partners' advice?  well, that's the.thing about counterintuitive ideas: they contradict your intuitions..they seem wrong.  so of course your first impulse is to disregard.them.  and in fact my joking description is not merely the curse.of y combinator but part of its raison d'etre. if founders' instincts.already gave them the right answers, they wouldn't need us.  you.only need other people to give you advice that surprises you. that's.why there are a lot of ski instructors and not many running.instructors..[1]you can, however, trust your instincts about people.  and in fact.one of the most common mistakes young founders make is not to.do that enough.  they get involved with people who seem impressive,.but about whom they feel some misgivings personally.  later when.things blow up they say "i knew there was something off about him,.but i ignored it because he seemed so impressive."if you're thinking about getting involved with someone — as a.cofounder, an employee, an investor, or an acquirer — and you.have misgivings about them, trust your gut.  if someone seems.slippery, or bogus, or a jerk, don't ignore it.this is one case where it pays to be self-indulgent. work with.people you genuinely like, and you've known long enough to be sure..expertisethe second counterintuitive point is that it's not that important.to know a lot about startups.  the way to succeed in a startup is.not to be an expert on startups, but to be an expert on your users.and the problem you're solving for them..mark zuckerberg didn't succeed because he was an expert on startups..he succeeded despite being a complete noob at startups, because he.understood his users really well.if you don't know anything about, say, how to raise an angel round,.don't feel bad on that account.  that sort of thing you can learn.when you need to, and forget after you've done it.in fact, i worry it's not merely unnecessary to learn in great.detail about the mechanics of startups, but possibly somewhat.dangerous.  if i met an undergrad who knew all about convertible.notes and employee agreements and (god forbid) class ff stock, i.wouldn't think "here is someone who is way ahead of their peers.".it would set off alarms.  because another of the characteristic.mistakes of young founders is to go through the motions of starting.a startup.  they make up some plausible-sounding idea, raise money.at a good valuation, rent a cool office, hire a bunch of people..from the outside that seems like what startups do.  but the next.step after rent a cool office and hire a bunch of people is: gradually.realize how completely fucked they are, because while imitating all.the outward forms of a startup they have neglected the one thing.that's actually essential: making something people want..gamewe saw this happen so often that we made up a name for it: playing.house.  eventually i realized why it was happening.  the reason.young founders go through the motions of starting a startup is.because that's what they've been trained to do for their whole lives.up to that point.  think about what you have to do to get into.college, for example.  extracurricular activities, check.  even in.college classes most of the work is as artificial as running laps.i'm not attacking the educational system for being this way. there.will always be a certain amount of fakeness in the work you do when.you're being taught something, and if you measure their performance.it's inevitable that people will exploit the difference to the point.where much of what you're measuring is artifacts of the fakeness.i confess i did it myself in college. i found that in a lot of.classes there might only be 20 or 30 ideas that were the right shape.to make good exam questions.  the way i studied for exams in these.classes was not (except incidentally) to master the material taught.in the class, but to make a list of potential exam questions and.work out the answers in advance. when i walked into the final, the.main thing i'd be feeling was curiosity about which of my questions.would turn up on the exam.  it was like a game.it's not surprising that after being trained for their whole lives.to play such games, young founders' first impulse on starting a.startup is to try to figure out the tricks for winning at this new.game. since fundraising appears to be the measure of success for.startups (another classic noob mistake), they always want to know what the.tricks are for convincing investors.  we tell them the best way to.convince investors is to make a startup.that's actually doing well, meaning growing fast, and then simply.tell investors so.  then they want to know what the tricks are for.growing fast.  and we have to tell them the best way to do that is.simply to make something people want.so many of the conversations yc partners have with young founders.begin with the founder asking "how do we..." and the partner replying."just..."why do the founders always make things so complicated?  the reason,.i realized, is that they're looking for the trick.so this is the third counterintuitive thing to remember about.startups: starting a startup is where gaming the system stops.working.  gaming the system may continue to work if you go to work.for a big company. depending on how broken the company is, you can.succeed by sucking up to the right people, giving the impression.of productivity, and so on..[2].but that doesn't work with startups..there is no boss to trick, only users, and all users care about is.whether your product does what they want. startups are as impersonal.as physics.  you have to make something people want, and you prosper.only to the extent you do.the dangerous thing is, faking does work to some degree on investors..if you're super good at sounding like you know what you're talking.about, you can fool investors for at least one and perhaps even two.rounds of funding.  but it's not in your interest to.  the company.is ultimately doomed.  all you're doing is wasting your own time.riding it down.so stop looking for the trick. there are tricks in startups, as.there are in any domain, but they are an order of magnitude less.important than solving the real problem. a founder who knows nothing.about fundraising but has made something users love will have an.easier time raising money than one who knows every trick in the.book but has a flat usage graph. and more importantly, the founder.who has made something users love is the one who will go on to.succeed after raising the money.though in a sense it's bad news in that you're deprived of one of.your most powerful weapons, i think it's exciting that gaming the.system stops working when you start a startup.  it's exciting that.there even exist parts of the world where you win by doing good.work.  imagine how depressing the world would be if it were all.like school and big companies, where you either have to spend a lot.of time on bullshit things or lose to people who do..[3].i would.have been delighted if i'd realized in college that there were parts.of the real world where gaming the system mattered less than others,.and a few where it hardly mattered at all.  but there are, and this.variation is one of the most important things to consider when.you're thinking about your future.  how do you win in each type of.work, and what would you like to win by doing?.[4].all-consumingthat brings us to our fourth counterintuitive point: startups are.all-consuming.  if you start a startup, it will take over your life.to a degree you cannot imagine.  and if your startup succeeds, it.will take over your life for a long time: for several years at the.very least, maybe for a decade, maybe for the rest of your working.life.  so there is a real opportunity cost here.larry page may seem to have an enviable life, but there are aspects.of it that are unenviable.  basically at 25 he started running as.fast as he could and it must seem to him that he hasn't stopped to.catch his breath since.  every day new shit happens in the google.empire that only the ceo can deal with, and he, as ceo, has to deal.with it.  if he goes on vacation for even a week, a whole week's.backlog of shit accumulates.  and he has to bear this uncomplainingly,.partly because as the company's daddy he can never show fear or.weakness, and partly because billionaires get less than zero sympathy.if they talk about having difficult lives.  which has the strange.side effect that the difficulty of being a successful startup founder.is concealed from almost everyone except those who've done it.y combinator has now funded several companies that can be called.big successes, and in every single case the founders say the same.thing.  it never gets any easier.  the nature of the problems change..you're worrying about construction delays at your london office.instead of the broken air conditioner in your studio apartment..but the total volume of worry never decreases; if anything it.increases.starting a successful startup is similar to having kids in that.it's like a button you push that changes your life irrevocably..and while it's truly wonderful having kids, there are a lot of.things that are easier to do before you have them than after.  many.of which will make you a better parent when you do have kids. and.since you can delay pushing the button for a while, most people in.rich countries do.yet when it comes to startups, a lot of people seem to think they're.supposed to start them while they're still in college.  are you.crazy?  and what are the universities thinking?  they go out of.their way to ensure their students are well supplied with contraceptives,.and yet they're setting up entrepreneurship programs and startup.incubators left and right.to be fair, the universities have their hand forced here.  a lot.of incoming students are interested in startups.  universities are,.at least de facto, expected to prepare them for their careers.  so.students who want to start startups hope universities can teach.them about startups.  and whether universities can do this or not,.there's some pressure to claim they can, lest they lose applicants.to other universities that do.can universities teach students about startups?  yes and no.  they.can teach students about startups, but as i explained before, this.is not what you need to know.  what you need to learn about are the.needs of your own users, and you can't do that until you actually.start the company..[5].so starting a startup is intrinsically.something you can only really learn by doing it.  and it's impossible.to do that in college, for the reason i just explained: startups.take over your life.  you can't start a startup for real as a.student, because if you start a startup for real you're not a student.anymore. you may be nominally a student for a bit, but you won't even.be that for long..[6]given this dichotomy, which of the two paths should you take?  be.a real student and not start a startup, or start a real startup and.not be a student?  i can answer that one for you. do not start a.startup in college.  how to start a startup is just a subset of a.bigger problem you're trying to solve: how to have a good life..and though starting a startup can be part of a good life for a lot.of ambitious people, age 20 is not the optimal time to do it..starting a startup is like a brutally fast depth-first search.  most.people should still be searching breadth-first at 20.you can do things in your early 20s that you can't do as well before.or after, like plunge deeply into projects on a whim and travel.super cheaply with no sense of a deadline.  for unambitious people,.this sort of thing is the dreaded "failure to launch," but for the.ambitious ones it can be an incomparably valuable sort of exploration..if you start a startup at 20 and you're sufficiently successful,.you'll never get to do it..[7]mark zuckerberg will never get to bum around a foreign country.  he.can do other things most people can't, like charter jets to fly him.to foreign countries. but success has taken a lot of the serendipity.out of his life. facebook is running him as much as he's running.facebook. and while it can be very cool to be in the grip of a.project you consider your life's work, there are advantages to.serendipity too, especially early in life.  among other things it.gives you more options to choose your life's work from.there's not even a tradeoff here. you're not sacrificing anything.if you forgo starting a startup at 20, because you're more likely.to succeed if you wait.  in the unlikely case that you're 20 and.one of your side projects takes off like facebook did, you'll face.a choice of running with it or not, and it may be reasonable to run.with it.  but the usual way startups take off is for the founders.to make them take off, and it's gratuitously.stupid to do that at 20..tryshould you do it at any age?  i realize i've made startups sound.pretty hard.  if i haven't, let me try again: starting a startup.is really hard.  what if it's too hard?  how can you tell if you're.up to this challenge?the answer is the fifth counterintuitive point: you can't tell. your.life so far may have given you some idea what your prospects might.be if you tried to become a mathematician, or a professional football.player.  but unless you've had a very strange life you haven't done.much that was like being a startup founder..starting a startup will change you a lot.  so what you're trying.to estimate is not just what you are, but what you could grow into,.and who can do that?for the past 9 years it was my job to predict whether people would.have what it took to start successful startups.  it was easy to.tell how smart they were, and most people reading this will be over.that threshold.  the hard part was predicting how tough and ambitious they would become.  there.may be no one who has more experience at trying to predict that,.so i can tell you how much an expert can know about it, and the.answer is: not much.  i learned to keep a completely open mind about.which of the startups in each batch would turn out to be the stars.the founders sometimes think they know. some arrive feeling sure.they will ace y combinator just as they've aced every one of the (few,.artificial, easy) tests they've faced in life so far.  others arrive.wondering how they got in, and hoping yc doesn't discover whatever.mistake caused it to accept them.  but there is little correlation.between founders' initial attitudes and how well their companies.do.i've read that the same is true in the military — that the.swaggering recruits are no more likely to turn out to be really.tough than the quiet ones. and probably for the same reason: that.the tests involved are so different from the ones in their previous.lives.if you're absolutely terrified of starting a startup, you probably.shouldn't do it.  but if you're merely unsure whether you're up to.it, the only way to find out is to try.  just not now..ideasso if you want to start a startup one day, what should you do in.college?  there are only two things you need initially: an idea and.cofounders.  and the m.o. for getting both is the same.  which leads.to our sixth and last counterintuitive point: that the way to get.startup ideas is not to try to think of startup ideas.i've written a whole essay on this,.so i won't repeat it all here.  but the short version is that if.you make a conscious effort to think of startup ideas, the ideas.you come up with will not merely be bad, but bad and plausible-sounding,.meaning you'll waste a lot of time on them before realizing they're.bad.the way to come up with good startup ideas is to take a step back..instead of making a conscious effort to think of startup ideas,.turn your mind into the type that startup ideas form in without any.conscious effort.  in fact, so unconsciously that you don't even.realize at first that they're startup ideas.this is not only possible, it's how apple, yahoo, google, and.facebook all got started.  none of these companies were even meant.to be companies at first.  they were all just side projects.  the.best startups almost have to start as side projects, because great.ideas tend to be such outliers that your conscious mind would reject.them as ideas for companies.ok, so how do you turn your mind into the type that startup ideas.form in unconsciously?  (1) learn a lot about things that matter,.then (2) work on problems that interest you (3) with people you.like and respect.  the third part, incidentally, is how you get.cofounders at the same time as the idea.the first time i wrote that paragraph, instead of "learn a lot about.things that matter," i wrote "become good at some technology." but.that prescription, though sufficient, is too narrow.  what was.special about brian chesky and joe gebbia was not that they were.experts in technology.  they were good at design, and perhaps even.more importantly, they were good at organizing groups and making.projects happen.  so you don't have to work on technology per se,.so long as you work on problems demanding enough to stretch you.what kind of problems are those?  that is very hard to answer in.the general case.  history is full of examples of young people who.were working on important problems that no.one else at the time thought were important, and in particular.that their parents didn't think were important.  on the other hand,.history is even fuller of examples of parents who thought their.kids were wasting their time and who were right.  so how do you.know when you're working on real stuff?.[8]i know how i know.  real problems are interesting, and i am.self-indulgent in the sense that i always want to work on interesting.things, even if no one else cares about them (in fact, especially.if no one else cares about them), and find it very hard to make.myself work on boring things, even if they're supposed to be.important.my life is full of case after case where i worked on something just.because it seemed interesting, and it turned out later to be useful.in some worldly way.  y.combinator itself was something i only did because it seemed.interesting. so i seem to have some sort of internal compass that.helps me out.  but i don't know what other people have in their.heads. maybe if i think more about this i can come up with heuristics.for recognizing genuinely interesting problems, but for the moment.the best i can offer is the hopelessly question-begging advice that.if you have a taste for genuinely interesting problems, indulging.it energetically is the best way to prepare yourself for a startup..and indeed, probably also the best way to live..[9]but although i can't explain in the general case what counts as an.interesting problem, i can tell you about a large subset of them..if you think of technology as something that's spreading like a.sort of fractal stain, every moving point on the edge represents.an interesting problem.  so one guaranteed way to turn your mind.into the type that has good startup ideas is to get yourself to the.leading edge of some technology — to cause yourself, as paul.buchheit put it, to "live in the future." when you reach that point,.ideas that will seem to other people uncannily prescient will seem.obvious to you.  you may not realize they're startup ideas, but.you'll know they're something that ought to exist.for example, back at harvard in the mid 90s a fellow grad student.of my friends robert and trevor wrote his own voice over ip software..he didn't mean it to be a startup, and he never tried to turn it.into one.  he just wanted to talk to his girlfriend in taiwan without.paying for long distance calls, and since he was an expert on.networks it seemed obvious to him that the way to do it was turn.the sound into packets and ship it over the internet. he never did.any more with his software than talk to his girlfriend, but this.is exactly the way the best startups get started.so strangely enough the optimal thing to do in college if you want.to be a successful startup founder is not some sort of new, vocational.version of college focused on "entrepreneurship." it's the classic.version of college as education for its own sake. if you want to.start a startup after college, what you should do in college is.learn powerful things.  and if you have genuine intellectual.curiosity, that's what you'll naturally tend to do if you just.follow your own inclinations..[10]the component of entrepreneurship that really matters is domain.expertise.  the way to become larry page was to become an expert.on search. and the way to become an expert on search was to be.driven by genuine curiosity, not some ulterior motive.at its best, starting a startup is merely an ulterior motive for.curiosity.  and you'll do it best if you introduce the ulterior.motive toward the end of the process.so here is the ultimate advice for young would-be startup founders,.boiled down to two words: just learn..notes[1].some founders listen more than others, and this tends to be a.predictor of success. one of the things i.remember about the airbnbs during yc is how intently they listened.[2].in fact, this is one of the reasons startups are possible.  if.big companies weren't plagued by internal inefficiencies, they'd.be proportionately more effective, leaving less room for startups.[3].in a startup you have to spend a lot of time on schleps, but this sort of work is merely.unglamorous, not bogus.[4].what should you do if your true calling is gaming the system?.management consulting.[5].the company may not be incorporated, but if you start to get.significant numbers of users, you've started it, whether you realize.it yet or not.[6].it shouldn't be that surprising that colleges can't teach.students how to be good startup founders, because they can't teach.them how to be good employees either.the way universities "teach" students how to be employees is to.hand off the task to companies via internship programs.  but you.couldn't do the equivalent thing for startups, because by definition.if the students did well they would never come back.[7].charles darwin was 22 when he received an invitation to travel.aboard the hms beagle as a naturalist.  it was only because he was.otherwise unoccupied, to a degree that alarmed his family, that he.could accept it. and yet if he hadn't we probably would not know.his name.[8].parents can sometimes be especially conservative in this.department.  there are some whose definition of important problems.includes only those on the critical path to med school.[9].i did manage to think of a heuristic for detecting whether you.have a taste for interesting ideas: whether you find known boring.ideas intolerable.  could you endure studying literary theory, or.working in middle management at a large company?[10].in fact, if your goal is to start a startup, you can stick.even more closely to the ideal of a liberal education than past.generations have. back when students focused mainly on getting a.job after college, they thought at least a little about how the.courses they took might look to an employer.  and perhaps even.worse, they might shy away from taking a difficult class lest they.get a low grade, which would harm their all-important gpa.  good.news: users don't care what your gpa.was.  and i've never heard of investors caring either.  y combinator.certainly never asks what classes you took in college or what grades.you got in them..thanks to sam altman, paul buchheit, john collison, patrick.collison, jessica livingston, robert morris, geoff ralston, and.fred wilson for reading drafts of this.arabic translation<eot><sot>how to raise money.want to start a startup?  get funded by.y combinator..september 2013
most startups that raise money do it more than once.  a typical.trajectory might be (1) to get started with a few tens of thousands.from something like y combinator or individual angels, then.(2) raise a few hundred thousand to a few million to build the company,.and then (3) once the company is clearly succeeding, raise one or.more later rounds to accelerate growth.reality can be messier.  some companies raise money twice in phase.2.  others skip phase 1 and go straight to phase 2.  and at y combinator.we get an increasing number of companies that have already.raised amounts in the hundreds of thousands.  but the three phase.path is at least the one about which individual startups' paths.oscillate.this essay focuses on phase 2 fundraising.  that's the type the.startups we fund are doing on demo day, and this essay is the advice.we give them..forcesfundraising is hard in both senses: hard like lifting a heavy weight,.and hard like solving a puzzle.  it's hard like lifting a weight.because it's intrinsically hard to convince people to part with.large sums of money.  that problem is irreducible; it should be.hard.  but much of the other kind of difficulty can be eliminated..fundraising only seems a puzzle because it's an alien world to most.founders, and i hope to fix that by supplying a map through it.to founders, the behavior of investors is often opaque — partly.because their motivations are obscure, but partly because they.deliberately mislead you.  and the misleading ways of investors.combine horribly with the wishful thinking of inexperienced founders..at yc we're always warning founders about this danger, and investors.are probably more circumspect with yc startups than with other.companies they talk to, and even so we witness a constant series.of explosions as these two volatile components combine..[1]if you're an inexperienced founder, the only way to survive is by.imposing external constraints on yourself.  you can't trust your.intuitions.  i'm going to give you a set of rules here that will.get you through this process if anything will.  at certain moments.you'll be tempted to ignore them.  so rule number zero is: these.rules exist for a reason.  you wouldn't need a rule to keep you.going in one direction if there weren't powerful forces pushing you.in another.the ultimate source of the forces acting on you are the forces.acting on investors.  investors are pinched between two kinds of.fear: fear of investing in startups that fizzle, and fear of missing.out on startups that take off.  the cause of all this fear is the.very thing that makes startups such attractive investments: the.successful ones grow very fast.  but that fast growth means investors.can't wait around.  if you wait till a startup is obviously a.success, it's too late.  to get the really high returns, you have.to invest in startups when it's still unclear how they'll do.  but.that in turn makes investors nervous they're about to invest in a.flop.  as indeed they often are.what investors would like to do, if they could, is wait.  when a.startup is only a few months old, every week that passes gives you.significantly more information about them.  but if you wait too.long, other investors might take the deal away from you.  and of.course the other investors are all subject to the same forces.  so.what tends to happen is that they all wait as long as they can,.then when some act the rest have to..don't raise money unless you want it and it wants you.such a high proportion of successful startups raise money that it.might seem fundraising is one of the defining qualities of a startup..actually it isn't.  rapid growth is what.makes a company a startup.  most companies in a position to grow.rapidly find that (a) taking outside money helps them grow faster,.and (b) their growth potential makes it easy to attract such money..it's so common for both (a) and (b) to be true of a successful.startup that practically all do raise outside money.  but there may.be cases where a startup either wouldn't want to grow faster, or.outside money wouldn't help them to, and if you're one of them,.don't raise money.the other time not to raise money is when you won't be able to.  if.you try to raise money before you can convince.investors, you'll not only waste your time, but also burn your.reputation with those investors..be in fundraising mode or not.one of the things that surprises founders most about fundraising.is how distracting it is.  when you start fundraising, everything.else grinds to a halt.  the problem is not the time fundraising.consumes but that it becomes the top idea in.your mind.  a startup can't endure that level of distraction.for long.  an early stage startup grows mostly because the founders.make it grow, and if the founders look away,.growth usually drops sharply.because fundraising is so distracting, a startup should either be.in fundraising mode or not.  and when you do decide to raise money,.you should focus your whole attention on it so you can get it done.quickly and get back to work..[2]you can take money from investors when you're not in fundraising.mode.  you just can't expend any attention on it.  there are two.things that take attention: convincing investors, and negotiating.with them.  so when you're not in fundraising mode, you should take.money from investors only if they require no convincing, and are.willing to invest on terms you'll take without negotiation.  for.example, if a reputable investor is willing to invest on a convertible.note, using standard paperwork, that is either uncapped or capped.at a good valuation, you can take that without having to think..[3].the terms will be whatever they turn out to be in your next.equity round.  and "no convincing" means just that: zero time spent.meeting with investors or preparing materials for them.  if an.investor says they're ready to invest, but they need you to come.in for one meeting to meet some of the partners, tell them no, if.you're not in fundraising mode, because that's fundraising..[4].tell them politely; tell them you're focusing on the company right.now, and that you'll get back to them when you're fundraising; but.do not get sucked down the slippery slope.investors will try to lure you into fundraising when you're not..it's great for them if they can, because they can thereby get a.shot at you before everyone else.  they'll send you emails saying.they want to meet to learn more about you.  if you get cold-emailed.by an associate at a vc firm, you shouldn't meet even if you are.in fundraising mode.  deals don't happen that way..[5].but even.if you get an email from a partner you should try to delay meeting.till you're in fundraising mode.  they may say they just want to.meet and chat, but investors never just want to meet and chat.  what.if they like you?  what if they start to talk about giving you.money?  will you be able to resist having that conversation?  unless.you're experienced enough at fundraising to have a casual conversation.with investors that stays casual, it's safer to tell them that you'd.be happy to later, when you're fundraising, but that right now you.need to focus on the company..[6]companies that are successful at raising money in phase 2 sometimes.tack on a few investors after leaving fundraising mode.  this is.fine; if fundraising went well, you'll be able to do it without.spending time convincing them or negotiating about terms..get introductions to investors.before you can talk to investors, you have to be introduced to them..if you're presenting at a demo day, you'll be introduced to a whole.bunch simultaneously.  but even if you are, you should supplement.these with intros you collect yourself.do you have to be introduced?  in phase 2, yes.  some investors.will let you email them a business plan, but you can tell from the.way their sites are organized that they don't really want startups.to approach them directly.intros vary greatly in effectiveness.  the best type of intro is.from a well-known investor who has just invested in you.  so when.you get an investor to commit, ask them to introduce you to other.investors they respect..[7].the next best type of intro is from a.founder of a company they've funded.  you can also get intros from.other people in the startup community, like lawyers and reporters.there are now sites like angellist, fundersclub, and wefunder that.can introduce you to investors.  we recommend startups treat them.as auxiliary sources of money.  raise money first from leads you.get yourself.  those will on average be better investors.  plus.you'll have an easier time raising money on these sites once you.can say you've already raised some from well-known investors..hear no till you hear yes.treat investors as saying no till they unequivocally say yes, in.the form of a definite offer with no contingencies.i mentioned earlier that investors prefer to wait if they can..what's particularly dangerous for founders is the way they wait..essentially, they lead you on.  they seem like they're about to.invest right up till the moment they say no.  if they even say no..some of the worse ones never actually do say no; they just stop.replying to your emails.  they hope that way to get a free option.on investing.  if they decide later that they want to invest — usually.because they've heard you're a hot deal — they can pretend they.just got distracted and then restart the conversation as if they'd.been about to..[8]that's not the worst thing investors will do.  some will use language.that makes it sound as if they're committing, but which doesn't.actually commit them.  and wishful thinking founders are happy to.meet them half way..[9]fortunately, the next rule is a tactic for neutralizing this behavior..but to work it depends on you not being tricked by the no that.sounds like yes.  it's so common for founders to be misled/mistaken.about this that we designed a protocol to fix the.problem.  if you believe an investor has committed, get them to.confirm it.  if you and they have different views of reality, whether.the source of the discrepancy is their sketchiness or your wishful.thinking, the prospect of confirming a commitment in writing will.flush it out.  and till they confirm, regard them as saying no..do breadth-first search weighted by expected value.when you talk to investors your m.o. should be breadth-first search,.weighted by expected value.  you should always talk to investors.in parallel rather than serially.  you can't afford the time it.takes to talk to investors serially, plus if you only talk to one.investor at a time, they don't have the pressure of other investors.to make them act.  but you shouldn't pay the same attention to every.investor, because some are more promising prospects than others..the optimal solution is to talk to all potential investors in.parallel, but give higher priority to the more promising ones..[10]expected value = how likely an investor is to say yes, multiplied.by how good it would be if they did.  so for example, an eminent.investor who would invest a lot, but will be hard to convince, might.have the same expected value as an obscure angel who won't invest.much, but will be easy to convince.  whereas an obscure angel who.will only invest a small amount, and yet needs to meet multiple.times before making up his mind, has very low expected value.  meet.such investors last, if at all..[11]doing breadth-first search weighted by expected value will save you.from investors who never explicitly say no but merely drift away,.because you'll drift away from them at the same rate.  it protects.you from investors who flake in much the same way that a distributed.algorithm protects you from processors that fail.  if some investor.isn't returning your emails, or wants to have lots of meetings but.isn't progressing toward making you an offer, you automatically.focus less on them.  but you have to be disciplined about assigning.probabilities.  you can't let how much you want an investor influence.your estimate of how much they want you..know where you stand.how do you judge how well you're doing with an investor, when.investors habitually seem more positive than they are?  by looking.at their actions rather than their words.  every investor has some.track they need to move along from the first conversation to wiring.the money, and you should always know what that track consists of,.where you are on it, and how fast you're moving forward.never leave a meeting with an investor without asking what happens.next.  what more do they need in order to decide?  do they need.another meeting with you?  to talk about what?  and how soon?  do.they need to do something internally, like talk to their partners,.or investigate some issue?  how long do they expect it to take?.don't be too pushy, but know where you stand.  if investors are.vague or resist answering such questions, assume the worst; investors.who are seriously interested in you will usually be happy to talk.about what has to happen between now and wiring the money, because.they're already running through that in their heads..[12]if you're experienced at negotiations, you already know how to ask.such questions..[13].if you're not, there's a trick you can use.in this situation.  investors know you're inexperienced at raising.money.  inexperience there doesn't make you unattractive.  being a.noob at technology would, if you're starting a technology startup,.but not being a noob at fundraising.  larry and sergey were noobs.at fundraising.  so you can just confess that you're inexperienced.at this and ask how their process works and where you are in it..[14].get the first commitment.the biggest factor in most investors' opinions of you is the opinion.of other investors.  once you start getting.investors to commit, it becomes increasingly easy to get more to..but the other side of this coin is that it's often hard to get the.first commitment.getting the first substantial offer can be half the total difficulty.of fundraising.  what counts as a substantial offer depends on who.it's from and how much it is.  money from friends and family doesn't.usually count, no matter how much.  but if you get $50k from a well.known vc firm or angel investor, that will usually be enough to set.things rolling..[15].close committed money.it's not a deal till the money's in the bank.  i often hear.inexperienced founders say things like "we've raised $800,000,".only to discover that zero of it is in the bank so far.  remember.the twin fears that torment investors?  the fear of missing out.that makes them jump early, and the fear of jumping onto a turd.that results?  this is a market where people are exceptionally prone.to buyer's remorse.  and it's also one that furnishes them plenty.of excuses to gratify it.  the public markets snap startup investing.around like a whip.  if the chinese economy blows up tomorrow, all.bets are off.  but there are lots of surprises for individual.startups too, and they tend to be concentrated around fundraising..tomorrow a big competitor could appear, or you could get c&ded, or.your cofounder could quit..[16]even a day's delay can bring news that causes an investor to change.their mind.  so when someone commits, get the money.  knowing where.you stand doesn't end when they say they'll invest.  after they say.yes, know what the timetable is for getting the money, and then.babysit that process till it happens.  institutional investors have.people in charge of wiring money, but you may have to hunt angels.down in person to collect a check.inexperienced investors are the ones most likely to get buyer's.remorse.  established ones have learned to treat saying yes as like.diving off a diving board, and they also have more brand to preserve..but i've heard of cases of even top-tier vc firms welching on deals..avoid investors who don't "lead."since getting the first offer is most of the difficulty of fundraising,.that should be part of your calculation of expected value when you.start.  you have to estimate not just the probability that an.investor will say yes, but the probability that they'd be the first.to say yes, and the latter is not simply a constant fraction of the.former.  some investors are known for deciding quickly, and those.are extra valuable early on.conversely, an investor who will only invest once other investors.have is worthless initially.  and while most investors are influenced.by how interested other investors are in you, there are some who.have an explicit policy of only investing after other investors.have.  you can recognize this contemptible subspecies of investor.because they often talk about "leads."  they say that they don't.lead, or that they'll invest once you have a lead.  sometimes they.even claim to be willing to lead themselves, by which they mean.they won't invest till you get $x from other investors.  (it's great.if by "lead" they mean they'll invest unilaterally, and in addition.will help you raise more.  what's lame is when they use the term.to mean they won't invest unless you can raise more elsewhere.).[17]where does this term "lead" come from?  up till a few years ago,.startups raising money in phase 2 would usually raise equity rounds.in which several investors invested at the same time using the same.paperwork.  you'd negotiate the terms with one "lead" investor, and.then all the others would sign the same documents and all the money.change hands at the closing.series a rounds still work that way, but things now work differently.for most fundraising prior to the series a.  now there are rarely.actual rounds before the a round, or leads for them.  now startups.simply raise money from investors one at a time till they feel they.have enough.since there are no longer leads, why do investors use that term?.because it's a more legitimate-sounding way of saying what they.really mean.  all they really mean is that their interest in you.is a function of other investors' interest in you.  i.e. the spectral.signature of all mediocre investors.  but when phrased in terms of.leads, it sounds like there is something structural and therefore.legitimate about their behavior.when an investor tells you "i want to invest in you, but i don't.lead," translate that in your mind to "no, except yes if you turn.out to be a hot deal."  and since that's the default opinion of any.investor about any startup, they've essentially just told you.nothing.when you first start fundraising, the expected value of an investor.who won't "lead" is zero, so talk to such investors last if at all..have multiple plans.many investors will ask how much you're planning to raise. this.question makes founders feel they should be planning to raise a.specific amount.  but in fact you shouldn't.  it's a mistake to.have fixed plans in an undertaking as unpredictable as fundraising.so why do investors ask how much you plan to raise?  for much the.same reasons a salesperson in a store will ask "how much were you.planning to spend?" if you walk in looking for a gift for a friend..you probably didn't have a precise amount in mind; you just want.to find something good, and if it's inexpensive, so much the better..the salesperson asks you this not because you're supposed to have.a plan to spend a specific amount, but so they can show you only.things that cost the most you'll pay.similarly, when investors ask how much you plan to raise, it's not.because you're supposed to have a plan.  it's to see whether you'd.be a suitable recipient for the size of investment they like to.make, and also to judge your ambition, reasonableness, and how far.you are along with fundraising.if you're a wizard at fundraising, you can say "we plan to raise.a $7 million series a round, and we'll be accepting termsheets next.tuesday."  i've known a handful of founders who could pull that off.without having vcs laugh in their faces.  but if you're in the.inexperienced but earnest majority, the solution is analogous to.the solution i recommend for pitching.your startup: do the right thing and then just tell investors what.you're doing.and the right strategy, in fundraising, is to have multiple plans.depending on how much you can raise.  ideally you should be able.to tell investors something like: we can make it to profitability.without raising any more money, but if we raise a few hundred.thousand we can hire one or two smart friends, and if we raise a.couple million, we can hire a whole engineering team, etc.different plans match different investors.  if you're talking to a.vc firm that only does series a rounds (though there are few of.those left), it would be a waste of time talking about any but your.most expensive plan.  whereas if you're talking to an angel who.invests $20k at a time and you haven't raised any money yet, you.probably want to focus on your least expensive plan.if you're so fortunate as to have to think about the upper limit.on what you should raise, a good rule of thumb is to multiply the.number of people you want to hire times $15k times 18 months.  in.most startups, nearly all the costs are a function of the number.of people, and $15k per month is the conventional total cost.(including benefits and even office space) per person.  $15k per.month is high, so don't actually spend that much.  but it's ok to.use a high estimate when fundraising to add a margin for error.  if.you have additional expenses, like manufacturing, add in those at.the end.  assuming you have none and you think you might hire 20.people, the most you'd want to raise is 20 x $15k x 18 = $5.4.million..[18].underestimate how much you want.though you can focus on different plans when talking to different.types of investors, you should on the whole err on the side of.underestimating the amount you hope to raise.for example, if you'd like to raise $500k, it's better to say.initially that you're trying to raise $250k.  then when you reach.$150k you're more than half done.  that sends two useful signals.to investors: that you're doing well, and that they have to decide.quickly because you're running out of room.  whereas if you'd said.you were raising $500k, you'd be less than a third done at $150k..if fundraising stalled there for an appreciable time, you'd start.to read as a failure.saying initially that you're raising $250k doesn't limit you to.raising that much.  when you reach your initial target and you still.have investor interest, you can just decide to raise more.  startups.do that all the time.  in fact, most startups that are very successful.at fundraising end up raising more than they originally intended.i'm not saying you should lie, but that you should lower your.expectations initially.  there is almost no downside in starting.with a low number.  it not only won't cap the amount you raise, but.will on the whole tend to increase it.a good metaphor here is angle of attack.  if you try to fly at too.steep an angle of attack, you just stall.  if you say right out of.the gate that you want to raise a $5 million series a round, unless.you're in a very strong position, you not only won't get that but.won't get anything. better to start at a low angle of attack, build.up speed, and then gradually increase the angle if you want..be profitable if you can.you will be in a much stronger position if your collection of plans.includes one for raising zero dollars — i.e. if you can make.it to profitability without raising any additional money.  ideally.you want to be able to say to investors "we'll succeed no matter.what, but raising money will help us do it faster."there are many analogies between fundraising and dating, and this.is one of the strongest.  no one wants you if you seem desperate..and the best way not to seem desperate is not to be desperate..that's one reason we urge startups during yc to keep expenses low.and to try to make it to ramen.profitability before demo day.  though it sounds slightly.paradoxical, if you want to raise money, the best thing you can do.is get yourself to the point where you don't need to.there are almost two distinct modes of fundraising: one in which.founders who need money knock on doors seeking it, knowing that.otherwise the company will die or at the very least people will.have to be fired, and one in which founders who don't need money.take some to grow faster than they could merely on their own revenues..to emphasize the distinction i'm going to name them: type a fundraising.is when you don't need money, and type b fundraising is when you.do.inexperienced founders read about famous startups doing what was.type a fundraising, and decide they should raise money too, since.that seems to be how startups work. except when they raise money.they don't have a clear path to profitability and are thus doing.type b fundraising.  and they are then surprised how difficult and.unpleasant it is.of course not all startups can make it to ramen profitability in a.few months.  and some that don't still manage to have the upper.hand over investors, if they have some other advantage like.extraordinary growth numbers or exceptionally formidable founders..but as time passes it gets increasingly difficult to fundraise from.a position of strength without being profitable..[19].don't optimize for valuation.when you raise money, what should your valuation be?  the most.important thing to understand about valuation is that it's not that.important.founders who raise money at high valuations tend to be unduly proud.of it.  founders are often competitive people, and since valuation.is usually the only visible number attached to a startup, they end.up competing to raise money at the highest valuation.  this is.stupid, because fundraising is not the test that matters.  the real.test is revenue.  fundraising is just a means to that end.  being.proud of how well you did at fundraising is like being proud of.your college grades.not only is fundraising not the test that matters, valuation is not.even the thing to optimize about fundraising.  the number one thing.you want from phase 2 fundraising is to get the money you need, so.you can get back to focusing on the real test, the success of your.company.  number two is good investors. valuation is at best third.the empirical evidence shows just how unimportant it is.  dropbox.and airbnb are the most successful companies we've funded so far,.and they raised money after y combinator at premoney valuations of.$4 million and $2.6 million respectively. prices are so much higher.now that if you can raise money at all you'll probably raise it at.higher valuations than dropbox and airbnb.  so let that satisfy.your competitiveness.  you're doing better than dropbox and airbnb!.at a test that doesn't matter.when you start fundraising, your initial valuation (or valuation.cap) will be set by the deal you make with the first investor who.commits.  you can increase the price for later investors, if you.get a lot of interest, but by default the valuation you got from.the first investor becomes your asking price.so if you're raising money from multiple investors, as most companies.do in phase 2, you have to be careful to avoid raising the first.from an over-eager investor at a price you won't be able to.sustain.  you can of course lower your price if you need to (in.which case you should give the same terms to investors who invested.earlier at a higher price), but you may lose a bunch of leads in.the process of realizing you need to do this.what you can do if you have eager first investors is raise money.from them on an uncapped convertible note with an mfn clause.  this.is essentially a way of saying that the valuation cap of the note.will be determined by the next investors you raise money from.it will be easier to raise money at a lower valuation.  it shouldn't.be, but it is.  since phase 2 prices vary at most 10x and the big.successes generate returns of at least 100x, investors should pick.startups entirely based on their estimate of the probability that.the company will be a big success and hardly at all on price.  but.although it's a mistake for investors to care about price, a.significant number do.  a startup that investors seem to like but.won't invest in at a cap of $x will have an easier time at $x/2..[20].yes/no before valuation.some investors want to know what your valuation is before they even.talk to you about investing.  if your valuation has already been.set by a prior investment at a specific valuation or cap, you can.tell them that number.  but if it isn't set because you haven't.closed anyone yet, and they try to push you to name a price, resist.doing so.  if this would be the first investor you've closed, then.this could be the tipping point of fundraising. that means closing.this investor is the first priority, and you need to get the.conversation onto that instead of being dragged sideways into a.discussion of price.fortunately there is a way to avoid naming a price in this situation..and it is not just a negotiating trick; it's how you (both) should.be operating.  tell them that valuation is not the most important.thing to you and that you haven't thought much about it, that you.are looking for investors you want to partner with and who want to.partner with you, and that you should talk first about whether they.want to invest at all.  then if they decide they do want to invest,.you can figure out a price. but first things first.since valuation isn't that important and getting fundraising rolling.is, we usually tell founders to give the first investor who commits.as low a price as they need to.  this is a safe technique so long.as you combine it with the next one..[21].beware "valuation sensitive" investors.occasionally you'll encounter investors who describe themselves as."valuation sensitive."  what this means in practice is that they.are compulsive negotiators who will suck up a lot of your time.trying to push your price down.  you should therefore never approach.such investors first. while you shouldn't chase high valuations,.you also don't want your valuation to be set artificially low because.the first investor who committed happened to be a compulsive.negotiator.  some such investors have value, but the time to approach.them is near the end of fundraising, when you're in a position to.say "this is the price everyone else has paid; take it or leave it".and not mind if they leave it.  this way, you'll not only get market.price, but it will also take less time.ideally you know which investors have a reputation for being."valuation sensitive" and can postpone dealing with them till last,.but occasionally one you didn't know about will pop up early on..the rule of doing breadth first search weighted by expected value.already tells you what to do in this case: slow down your interactions.with them.there are a handful of investors who will try to invest at a lower.valuation even when your price has already been set.  lowering your.price is a backup plan you resort to when you discover you've let.the price get set too high to close all the money you need.  so.you'd only want to talk to this sort of investor if you were about.to do that anyway.  but since investor meetings have to be arranged.at least a few days in advance and you can't predict when you'll.need to resort to lowering your price, this means in practice that.you should approach this type of investor last if at all.if you're surprised by a lowball offer, treat it as a backup offer.and delay responding to it.  when someone makes an offer in good.faith, you have a moral obligation to respond in a reasonable time..but lowballing you is a dick move that should be met with the.corresponding countermove..accept offers greedily.i'm a little leery of using the term "greedily" when writing about.fundraising lest non-programmers misunderstand me, but a greedy.algorithm is simply one that doesn't try to look into the future..a greedy algorithm takes the best of the options in front of it.right now.  and that is how startups should approach fundraising.in phases 2 and later.  don't try to look into the future because.(a) the future is unpredictable, and indeed in this business you're.often being deliberately misled about it and (b) your first priority.in fundraising should be to get it finished and get back to work.anyway.if someone makes you an acceptable offer, take it.  if you have.multiple incompatible offers, take the best.  don't reject an.acceptable offer in the hope of getting a better one in the future.these simple rules cover a wide variety of cases.  if you're raising.money from many investors, roll them up as they say yes.  as you.start to feel you've raised enough, the threshold for acceptable.will start to get higher.in practice offers exist for stretches of time, not points.  so.when you get an acceptable offer that would be incompatible with.others (e.g. an offer to invest most of the money you need), you.can tell the other investors you're talking to that you have an.offer good enough to accept, and give them a few days to make their.own.  this could lose you some that might have made an offer if.they had more time.  but by definition you don't care; the initial.offer was acceptable.some investors will try to prevent others from having time to decide.by giving you an "exploding" offer, meaning one that's only valid.for a few days.  offers from the very best investors explode less.frequently and less rapidly — fred wilson never gives exploding.offers, for example — because they're confident you'll pick.them.  but lower-tier investors sometimes give offers with very.short fuses, because they believe no one who had other options would.choose them.  a deadline of three working days is acceptable.  you.shouldn't need more than that if you've been talking to investors.in parallel.  but a deadline any shorter is a sign you're dealing.with a sketchy investor.  you can usually call their bluff, and you.may need to..[22]it might seem that instead of accepting offers greedily, your goal.should be to get the best investors as partners.  that is certainly.a good goal, but in phase 2 "get the best investors" only rarely.conflicts with "accept offers greedily," because the best investors.don't usually take any longer to decide than the others.  the only.case where the two strategies give conflicting advice is when you.have to forgo an offer from an acceptable investor to see if you'll.get an offer from a better one.  if you talk to investors in parallel.and push back on exploding offers with excessively short deadlines,.that will almost never happen.  but if it does, "get the best.investors" is in the average case bad advice.  the best investors.are also the most selective, because they get their pick of all the.startups.  they reject nearly everyone they talk to, which means.in the average case it's a bad trade to exchange a definite offer.from an acceptable investor for a potential offer from a better.one.(the situation is different in phase 1.  you can't apply to all the.incubators in parallel, because some offset their schedules to.prevent this.  in phase 1, "accept offers greedily" and "get the.best investors" do conflict, so if you want to apply to multiple.incubators, you should do it in such a way that the ones you want.most decide first.)sometimes when you're raising money from multiple investors, a.series a will emerge out of those conversations, and these rules.even cover what to do in that case.  when an investor starts to.talk to you about a series a, keep taking smaller investments till.they actually give you a termsheet.  there's no practical difficulty..if the smaller investments are on convertible notes, they'll just.convert into the series a round.  the series a investor won't like.having all these other random investors as bedfellows, but if it.bothers them so much they should get on with giving you a termsheet..till they do, you don't know for sure they will, and the greedy.algorithm tells you what to do..[23].don't sell more than 25% in phase 2.if you do well, you will probably raise a series a round eventually..i say probably because things are changing with series a rounds..startups may start to skip them.  but only one company we've funded.has so far, so tentatively assume the path to huge passes through.an a round..[24]which means you should avoid doing things in earlier rounds that.will mess up raising an a round.  for example, if you've sold more.than about 40% of your company total, it starts to get harder to.raise an a round, because vcs worry there will not be enough stock.left to keep the founders motivated.our rule of thumb is not to sell more than 25% in phase 2, on top.of whatever you sold in phase 1, which should be less than 15%.  if.you're raising money on uncapped notes, you'll have to guess what.the eventual equity round valuation might be.  guess conservatively.(since the goal of this rule is to avoid messing up the series a,.there's obviously an exception if you end up raising a series a in.phase 2, as a handful of startups do.).have one person handle fundraising.if you have multiple founders, pick one to handle fundraising so.the other(s) can keep working on the company.  and since the danger.of fundraising is not the time taken up by the actual meetings but.that it becomes the top idea in your mind, the founder who handles.fundraising should make a conscious effort to insulate the other.founder(s) from the details of the process..[25](if the founders mistrust one another, this could cause some friction..but if the founders mistrust one another, you have worse problems.to worry about than how to organize fundraising.)the founder who handles fundraising should be the ceo, who should.in turn be the most formidable of the founders.  even if the ceo.is a programmer and another founder is a salesperson?  yes.  if you.happen to be that type of founding team, you're effectively a single.founder when it comes to fundraising.it's ok to bring all the founders to meet an investor who will.invest a lot, and who needs this meeting as the final step before.deciding.  but wait till that point.  introducing an investor to.your cofounder(s) should be like introducing a girl/boyfriend to.your parents — something you do only when things reach a certain.stage of seriousness.even if there are still one or more founders focusing on the company.during fundraising, growth will slow.  but try to get as much growth.as you can, because fundraising is a segment of time, not a point,.and what happens to the company during that time affects the outcome..if your numbers grow significantly between two investor meetings,.investors will be hot to close, and if your numbers are flat or.down they'll start to get cold feet..you'll need an executive summary and (maybe) a deck.traditionally phase 2 fundraising consists of presenting a slide.deck in person to investors.  sequoia describes what such a deck.should contain, and.since they're the customer you can take their word for it.i say "traditionally" because i'm ambivalent about decks, and (though.perhaps this is wishful thinking) they seem to be on the way out..a lot of the most successful startups we fund never make decks in.phase 2.  they just talk to investors and explain what they plan.to do.  fundraising usually takes off fast for the startups that.are most successful at it, and they're thus able to excuse themselves.by saying that they haven't had time to make a deck.you'll also want an executive summary, which should be no more than.a page long and describe in the most matter of fact language what.you plan to do, why it's a good idea, and what progress you've made.so far.  the point of the summary is to remind the investor (who.may have met many startups that day) what you talked about.assume that if you give someone a copy of your deck or executive.summary, it will be passed on to whoever you'd least like to have.it.  but don't refuse on that account to give copies to investors.you meet.  you just have to treat such leaks as a cost of doing.business.  in practice it's not that high a cost.  though founders.are rightly indignant when their plans get leaked to competitors,.i can't think of a startup whose outcome has been affected by it.sometimes an investor will ask you to send them your deck and/or.executive summary before they decide whether to meet with you.  i.wouldn't do that.  it's a sign they're not really interested..stop fundraising when it stops working.when do you stop fundraising?  ideally when you've raised enough..but what if you haven't raised as much as you'd like?  when do you.give up?it's hard to give general advice about this, because there have.been cases of startups that kept trying to raise money even when.it seemed hopeless, and miraculously succeeded. but what i usually.tell founders is to stop fundraising when you start to get a lot.of air in the straw.  when you're drinking through a straw, you can.tell when you get to the end of the liquid because you start to get.a lot of air in the straw.  when your fundraising options run out,.they usually run out in the same way.  don't keep sucking on the.straw if you're just getting air.  it's not going to get better..don't get addicted to fundraising.fundraising is a chore for most founders, but some find it more.interesting than working on their startup.  the work at an early.stage startup often consists of unglamorous schleps.  whereas fundraising, when it's.going well, can be quite the opposite.  instead of sitting in your.grubby apartment listening to users complain about bugs in your.software, you're being offered millions of dollars by famous investors.over lunch at a nice restaurant..[26]the danger of fundraising is particularly acute for people who are.good at it.  it's always fun to work on something you're good at..if you're one of these people, beware.  fundraising is not what.will make your company successful.  listening to users complain.about bugs in your software is what will make you successful.  and.the big danger of getting addicted to fundraising is not merely.that you'll spend too long on it or raise too much money.  it's.that you'll start to think of yourself as being already successful,.and lose your taste for the schleps you need to undertake to actually.be successful.  startups can be destroyed by this.when i see a startup with young founders that is fabulously successful.at fundraising, i mentally decrease my estimate of the probability.that they'll succeed.  the press may be writing about them as if.they'd been anointed as the next google, but i'm thinking "this is.going to end badly.".don't raise too much.though only a handful of startups have to worry about this, it is.possible to raise too much.  the dangers of raising too much are.subtle but insidious.  one is that it will set impossibly high.expectations.  if you raise an excessive amount of money, it will.be at a high valuation, and the danger of raising money at too high.a valuation is that you won't be able to increase it sufficiently.the next time you raise money.a company's valuation is expected to rise each time it raises money..if not it's a sign of a company in trouble, which makes you.unattractive to investors.  so if you raise money in phase 2 at a.post-money valuation of $30 million, the pre-money valuation of.your next round, if you want to raise one, is going to have to be.at least $50 million.  and you have to be doing really, really well.to raise money at $50 million.it's very dangerous to let the competitiveness of your current round.set the performance threshold you have to meet to raise your next.one, because the two are only loosely coupled.but the money itself may be more dangerous than the valuation.  the.more you raise, the more you spend, and spending a lot of money can.be disastrous for an early stage startup.  spending a lot makes it.harder to become profitable, and perhaps even worse, it makes you.more rigid, because the main way to spend money is people, and the.more people you have, the harder it is to change directions.  so.if you do raise a huge amount of money, don't spend it.  (you will.find that advice almost impossible to follow, so hot will be the.money burning a hole in your pocket, but i feel obliged at least.to try.).be nice.startups raising money occasionally alienate investors by seeming.arrogant.  sometimes because they are arrogant, and sometimes because.they're noobs clumsily attempting to mimic the toughness they've.observed in experienced founders.it's a mistake to behave arrogantly to investors.  while there are.certain situations in which certain investors like certain kinds.of arrogance, investors vary greatly in this respect, and a flick.of the whip that will bring one to heel will make another roar with.indignation.  the only safe strategy is never to seem arrogant at.all.that will require some diplomacy if you follow the advice i've given.here, because the advice i've given is essentially how to play.hardball back.  when you refuse to meet an investor because you're.not in fundraising mode, or slow down your interactions with an.investor who moves too slow, or treat a contingent offer as the no.it actually is and then, by accepting offers greedily, end up leaving.that investor out, you're going to be doing things investors don't.like.  so you must cushion the blow with soft words.  at yc we tell.startups they can blame us.  and now that i've written this, everyone.else can blame me if they want.  that plus the inexperience card.should work in most situations: sorry, we think you're great, but.pg said startups shouldn't ___, and since we're new to fundraising,.we feel like we have to play it safe.the danger of behaving arrogantly is greatest when you're doing.well.  when everyone wants you, it's hard not to let it go to your.head.  especially if till recently no one wanted you.  but restrain.yourself.  the startup world is a small place, and startups have.lots of ups and downs.  this is a domain where it's more true than.usual that pride goeth before a fall..[27]be nice when investors reject you as well.  the best investors are.not wedded to their initial opinion of you.  if they reject you in.phase 2 and you end up doing well, they'll often invest in phase.3.  in fact investors who reject you are some of your warmest leads.for future fundraising.  any investor who spent significant time.deciding probably came close to saying yes.  often you have some.internal champion who only needs a little more evidence to convince.the skeptics.  so it's wise not merely to be nice to investors who.reject you, but (unless they behaved badly) to treat it as the.beginning of a relationship..the bar will be higher next time.assume the money you raise in phase 2 will be the last you ever.raise.  you must make it to profitability on this money if you can.over the past several years, the investment community has evolved.from a strategy of anointing a small number of winners early and.then supporting them for years to a strategy of spraying money at.early stage startups and then ruthlessly culling them at the next.stage.  this is probably the optimal strategy for investors.  it's.too hard to pick winners early on.  better to let the market do it.for you.  but it often comes as a surprise to startups how much.harder it is to raise money in phase 3.when your company is only a couple months old, all it has to be is.a promising experiment that's worth funding to see how it turns.out.  the next time you raise money, the experiment has to have.worked.  you have to be on a trajectory that leads to going public..and while there are some ideas where the proof that the experiment.worked might consist of e.g. query response times, usually the proof.is profitability.  usually phase 3 fundraising has to be type a.fundraising.in practice there are two ways startups hose themselves between.phases 2 and 3.  some are just too slow to become profitable.  they.raise enough money to last for two years.  there doesn't seem any.particular urgency to be profitable.  so they don't make any effort.to make money for a year.  but by that time, not making money has.become habitual.  when they finally decide to try, they find they.can't.the other way companies hose themselves is by letting their expenses.grow too fast.  which almost always means hiring too many people..you usually shouldn't go out and hire 8 people as soon as you raise.money at phase 2.  usually you want to wait till you have growth.(and thus usually revenues) to justify them.  a lot of vcs will.encourage you to hire aggressively.  vcs generally tell you to spend.too much, partly because as money people they err on the side of.solving problems by spending money, and partly because they want.you to sell them more of your company in subsequent rounds.  don't.listen to them..don't make things complicated.i realize it may seem odd to sum up this huge treatise by saying.that my overall advice is not to make fundraising too complicated,.but if you go back and look at this list you'll see it's basically.a simple recipe with a lot of implications and edge cases.  avoid.investors till you decide to raise money, and then when you do,.talk to them all in parallel, prioritized by expected value, and.accept offers greedily.  that's fundraising in one sentence.  don't.introduce complicated optimizations, and don't let investors introduce.complications either.fundraising is not what will make you successful.  it's just a means.to an end.  your primary goal should be to get it over with and get.back to what will make you successful — making things and talking.to users — and the path i've described will for most startups.be the surest way to that destination.be good, take care of yourselves, and don't leave the path..notes[1].the worst explosions happen when unpromising-seeming startups.encounter mediocre investors.  good investors don't lead startups.on; their reputations are too valuable.  and startups that seem.promising can usually get enough money from good investors that.they don't have to talk to mediocre ones.  it is the unpromising-seeming.startups that have to resort to raising money from mediocre investors..and it's particularly damaging when these investors flake, because.unpromising-seeming startups are usually more desperate for money.(not all unpromising-seeming startups do badly.  some are merely.ugly ducklings in the sense that they violate current startup.fashions.)[2].one yc founder told me:.i think in general we've done ok at fundraising, but i managed.to screw up twice at the exact same thing — trying to focus.on building the company and fundraising at the same time..[3].there is one subtle danger you have to watch out for here, which.i warn about later: beware of getting too high a valuation from an.eager investor, lest that set an impossibly high target when raising.additional money.[4].if they really need a meeting, then they're not ready to invest,.regardless of what they say. they're still deciding, which means.you're being asked to come in and convince them. which is fundraising.[5].associates at vc firms regularly cold email startups.  naive.founders think "wow, a vc is interested in us!"  but an associate.is not a vc.  they have no decision-making power.  and while they.may introduce startups they like to partners at their firm, the.partners discriminate against deals that come to them this way.   i.don't know of a single vc investment that began with an associate.cold-emailing a startup.  if you want to approach a specific firm,.get an intro to a partner from someone they respect.it's ok to talk to an associate if you get an intro to a vc firm.or they see you at a demo day and they begin by having an associate.vet you.  that's not a promising lead and should therefore get low.priority, but it's not as completely worthless as a cold email.because the title "associate" has gotten a bad reputation, a few.vc firms have started to give their associates the title "partner,".which can make things very confusing.  if you're a yc startup you.can ask us who's who; otherwise you may have to do some research.online.  there may be a special title for actual partners.  if.someone speaks for the firm in the press or a blog on the firm's.site, they're probably a real partner.  if they're on boards of.directors they're probably a real partner.there are titles between "associate" and "partner," including."principal" and "venture partner."  the meanings of these titles.vary too much to generalize.[6].for similar reasons, avoid casual conversations with potential.acquirers.  they can lead to distractions even more dangerous than.fundraising.  don't even take a meeting with a potential acquirer.unless you want to sell your company right now.[7].joshua reeves specifically suggests asking each investor to.intro you to two more investors.don't ask investors who say no for introductions to other investors..that will in many cases be an anti-recommendation.[8].this is not always as deliberate as its sounds.  a lot of the.delays and disconnects between founders and investors are induced.by the customs of the venture business, which have evolved the way.they have because they suit investors' interests.[9].one yc founder who read a draft of this essay wrote:.this is the most important section. i think it might bear stating.even more clearly. "investors will deliberately affect more.interest than they have to preserve optionality. if an investor.seems very interested in you, they still probably won't invest..the solution for this is to assume the worst — that an investor.is just feigning interest — until you get a definite commitment.".[10].though you should probably pack investor meetings as closely.as you can, jeff byun mentions one reason not to: if you pack.investor meetings too closely, you'll have less time for your pitch.to evolve.some founders deliberately schedule a handful of lame investors.first, to get the bugs out of their pitch.[11].there is not an efficient market in this respect.  some of the.most useless investors are also the highest maintenance.[12].incidentally, this paragraph is sales 101.  if you want to see.it in action, go talk to a car dealer.[13].i know one very smooth founder who used to end investor meetings.with "so, can i count you in?" delivered as if it were "can you.pass the salt?"   unless you're very smooth (if you're not sure...),.do not do this yourself.  there is nothing more unconvincing, for.an investor, than a nerdy founder trying to deliver the lines meant.for a smooth one.investors are fine with funding nerds.  so if you're a nerd, just.try to be a good nerd, rather than doing a bad imitation of a smooth.salesman.[14].ian hogarth suggests a good way to tell how serious potential.investors are: the resources they expend on you after the first.meeting.  an investor who's seriously interested will already be.working to help you even before they've committed.[15].in principle you might have to think about so-called "signalling.risk."  if a prestigious vc makes a small seed investment in you,.what if they don't want to invest the next time you raise money?.other investors might assume that the vc knows you well, since.they're an existing investor, and if they don't want to invest in.your next round, that must mean you suck.  the reason i say "in.principle" is that in practice signalling hasn't been much of a.problem so far.  it rarely arises, and in the few cases where it.does, the startup in question usually is doing badly and is doomed.anyway.if you have the luxury of choosing among seed investors, you can.play it safe by excluding vc firms.  but it isn't critical to.[16].sometimes a competitor will deliberately threaten you with a.lawsuit just as you start fundraising, because they know you'll.have to disclose the threat to potential investors and they hope.this will make it harder for you to raise money.  if this happens.it will probably frighten you more than investors.  experienced.investors know about this trick, and know the actual lawsuits rarely.happen. so if you're attacked in this way, be forthright with.investors.  they'll be more alarmed if you seem evasive than if you.tell them everything.[17].a related trick is to claim that they'll only invest contingently.on other investors doing so because otherwise you'd be "undercapitalized.".this is almost always bullshit.  they can't estimate your minimum.capital needs that precisely.[18].you won't hire all those 20 people at once, and you'll probably.have some revenues before 18 months are out.  but those too are.acceptable or at least accepted additions to the margin for error.[19].type a fundraising is so much better that it might even be.worth doing something different if it gets you there sooner.  one.yc founder told me that if he were a first-time founder again he'd."leave ideas that are up-front capital intensive to founders with.established reputations."[20].i don't know whether this happens because they're innumerate,.or because they believe they have zero ability to predict startup.outcomes (in which case this behavior at least wouldn't be irrational)..in either case the implications are similar.[21].if you're a yc startup and you have an investor who for some.reason insists that you decide the price, any yc partner can estimate.a market price for you.[22].you should respond in kind when investors behave upstandingly.too.  when an investor makes you a clean offer with no deadline,.you have a moral obligation to respond promptly.[23].tell the investors talking to you about an a round about the.smaller investments you raise as you raise them.  you owe them such.updates on your cap table, and this is also a good way to pressure.them to act.  they won't like you raising other money and may.pressure you to stop, but they can't legitimately ask you to commit.to them till they also commit to you.  if they want you to stop.raising money, the way to do it is to give you a series a termsheet.with a no-shop clause.you can relent a little if the potential series a investor has a.great reputation and they're clearly working fast to get you a.termsheet, particularly if a third party like yc is involved to.ensure there are no misunderstandings.  but be careful.[24].the company is weebly, which made it to profitability on a.seed investment of $650k.  they did try to raise a series a in the.fall of 2008 but (no doubt partly because it was the fall of 2008).the terms they were offered were so bad that they decided to skip.raising an a round.[25].another advantage of having one founder take fundraising.meetings is that you never have to negotiate in real time, which.is something inexperienced founders should avoid.  one yc founder.told me:.investors are professional negotiators and can negotiate on the.spot very easily.  if only one founder is in the room, you can.say "i need to circle back with my co-founder" before making any.commitments. i used to do this all the time..[26].you'll be lucky if fundraising feels pleasant enough to become.addictive.  more often you have to worry about the other.extreme — becoming demoralized when investors reject you.  as.one (very successful) yc founder wrote after reading a draft of.this:.it's hard to mentally deal with the sheer scale of rejection in.fundraising and if you are not in the right mindset you will fail..users may love you but these supposedly smart investors may not.understand you at all. at this point for me, rejection still.rankles but i've come to accept that investors are just not super.thoughtful for the most part and you need to play the game according.to certain somewhat depressing rules (many of which you are.listing) in order to win..[27].the actual sentence in the king james bible is "pride goeth.before destruction, and an haughty spirit before a fall."thanks to slava akhmechet, sam altman, nate blecharczyk,.adora cheung, bill clerico, john collison, patrick collison, parker.conrad, ron conway, travis deyle, jason freedman, joe gebbia, mattan.griffel, kevin hale, jacob heller, ian hogarth, justin kan, professor.moriarty, nikhil nirmel, david petersen, geoff ralston, joshua.reeves, yuri sagalov, emmett shear, rajat suri, garry tan, and nick.tomarello for reading drafts of this.russian translation<eot><sot>investor herd dynamics.want to start a startup?  get funded by.y combinator..august 2013
the biggest component in most investors' opinion of you is the.opinion of other investors.  which is of course a recipe for.exponential growth.  when one investor wants to invest in you, that.makes other investors want to, which makes others want to, and so.on.sometimes inexperienced founders mistakenly conclude that manipulating.these forces is the essence of fundraising.  they hear stories about.stampedes to invest in successful startups, and think it's therefore.the mark of a successful startup to have this happen.  but actually.the two are not that highly correlated.  lots of startups that cause.stampedes end up flaming out (in extreme cases, partly as a result.of the stampede), and lots of very successful startups were only.moderately popular with investors the first time they raised money.so the point of this essay is not to explain how to create a stampede,.but merely to explain the forces that generate them.  these forces.are always at work to some degree in fundraising, and they can cause.surprising situations.  if you understand them, you can at least.avoid being surprised.one reason investors like you more when other investors like you.is that you actually become a better investment.  raising money.decreases the risk of failure.  indeed, although investors hate it,.you are for this reason justified in raising your valuation for.later investors.  the investors who invested when you had no money.were taking more risk, and are entitled to higher returns.  plus a.company that has raised money is literally more valuable.  after.you raise the first million dollars, the company is at least a.million dollars more valuable, because it's the same company as.before, plus it has a million dollars in the bank..[1]beware, though, because later investors so hate to have the price.raised on them that they resist even this self-evident reasoning..only raise the price on an investor you're comfortable with losing,.because some will angrily refuse..[2]the second reason investors like you more when you've had some.success at fundraising is that it makes you more confident, and an.investors' opinion of you is the foundation.of their opinion of your company.  founders are often surprised how.quickly investors seem to know when they start to succeed at raising.money.  and while there are in fact lots of ways for such information.to spread among investors, the main vector is probably the founders.themselves.  though they're often clueless about technology, most.investors are pretty good at reading people.  when fundraising is.going well, investors are quick to sense it in your increased.confidence.  (this is one case where the average founder's inability.to remain poker-faced works to your advantage.)but frankly the most important reason investors like you more when.you've started to raise money is that they're bad at judging startups..judging startups is hard even for the best investors.  the mediocre.ones might as well be flipping coins.  so when mediocre investors.see that lots of other people want to invest in you, they assume.there must be a reason.  this leads to the phenomenon known in the.valley as the "hot deal," where you have more interest from investors.than you can handle.the best investors aren't influenced much by the opinion of other.investors.  it would only dilute their own judgment to average it.together with other people's.  but they are indirectly influenced.in the practical sense that interest from other investors imposes.a deadline.  this is the fourth way in which offers beget offers..if you start to get far along the track toward an offer with one.firm, it will sometimes provoke other firms, even good ones, to.make up their minds, lest they lose the deal.unless you're a wizard at negotiation (and if you're not sure,.you're not) be very careful about exaggerating this to push a good.investor to decide.  founders try this sort of thing all the time,.and investors are very sensitive to it.  if anything oversensitive..but you're safe so long as you're telling the truth.  if you're.getting far along with investor b, but you'd rather raise money.from investor a, you can tell investor a that this is happening..there's no manipulation in that.  you're genuinely in a bind, because.you really would rather raise money from a, but you can't safely.reject an offer from b when it's still uncertain what a will decide.do not, however, tell a who b is.  vcs will sometimes ask which.other vcs you're talking to, but you should never tell them.  angels.you can sometimes tell about other angels, because angels cooperate.more with one another. but if vcs ask, just point out that they.wouldn't want you telling other firms about your conversations, and.you feel obliged to do the same for any firm you talk to.  if they.push you, point out that you're inexperienced at fundraising — which.is always a safe card to play — and you feel you have to be.extra cautious..[3]while few startups will experience a stampede of interest, almost.all will at least initially experience the other side of this.phenomenon, where the herd remains clumped together at a distance..the fact that investors are so much influenced by other investors'.opinions means you always start out in something of a hole.  so.don't be demoralized by how hard it is to get the first commitment,.because much of the difficulty comes from this external force.  the.second will be easier.notes[1].an accountant might say that a company that has raised a million.dollars is no richer if it's convertible debt, but in practice money.raised as convertible debt is little different from money raised.in an equity round.[2].founders are often surprised by this, but investors can get.very emotional.  or rather indignant; that's the main emotion i've.observed; but it is very common, to the point where it sometimes.causes investors to act against their own interests.  i know of one.investor who invested in a startup at a $15 million valuation cap..earlier he'd had an opportunity to invest at a $5 million cap, but.he refused because a friend who invested earlier had been able to.invest at a $3 million cap.[3].if an investor pushes you hard to tell them about your conversations.with other investors, is this someone you want as an investor?.thanks to paul buchheit, jessica livingston, geoff ralston, and garry tan.for reading drafts of this.russian translation<eot><sot>how to convince investors.want to start a startup?  get funded by.y combinator..august 2013
when people hurt themselves lifting heavy things, it's usually.because they try to lift with their back.  the right way to lift.heavy things is to let your legs do the work.  inexperienced founders.make the same mistake when trying to convince investors.  they try.to convince with their pitch.  most would be better off if they let.their startup do the work — if they started by understanding why.their startup is worth investing in, then simply explained this.well to investors.investors are looking for startups that will be very successful..but that test is not as simple as it sounds.  in startups, as in a.lot of other domains, the distribution of outcomes follows a power.law, but in startups the curve is startlingly steep.  the big.successes are so big they.dwarf the rest.  and since there are only.a handful each year (the conventional wisdom is 15), investors treat."big success" as if it were binary.  most are interested in you if.you seem like you have a chance, however small, of being one of the.15 big successes, and otherwise not..[1](there are a handful of angels who'd be interested in a company.with a high probability of being moderately successful.  but angel.investors like big successes too.)how do you seem like you'll be one of the big successes?  you need.three things: formidable founders, a promising market, and (usually).some evidence of success so far.formidablethe most important ingredient is formidable founders.  most investors.decide in the first few minutes whether you seem like a winner or.a loser, and once their opinion is set it's hard to change. [2].every startup has reasons both to invest and not to invest.  if.investors think you're a winner they focus on the former, and if.not they focus on the latter.  for example, it might be a rich.market, but with a slow sales cycle.  if investors are impressed.with you as founders, they say they want to invest because it's a.rich market, and if not, they say they can't invest because of the.slow sales cycle.they're not necessarily trying to mislead you.  most investors are.genuinely unclear in their own minds why they like or dislike.startups.  if you seem like a winner, they'll like your idea more..but don't be too smug about this weakness of theirs, because you.have it too; almost everyone does.there is a role for ideas of course.  they're fuel for the fire.that starts with liking the founders.  once investors like you,.you'll see them reaching for ideas: they'll be saying "yes, and you.could also do x."  (whereas when they don't like you, they'll be.saying "but what about y?")but the foundation of convincing investors is to seem formidable,.and since this isn't a word most people use in conversation much,.i should explain what it means.  a formidable person is one who.seems like they'll get what they want, regardless of whatever.obstacles are in the way.  formidable is close to confident, except.that someone could be confident and mistaken.  formidable is roughly.justifiably confident.there are a handful of people who are really good at seeming.formidable — some because they actually are very formidable and.just let it show, and others because they are more or less con.artists..[3].but most founders, including many who will go on.to start very successful companies, are not that good at seeming.formidable the first time they try fundraising.  what should they.do?.[4]what they should not do is try to imitate the swagger of more.experienced founders.  investors are not always that good at judging.technology, but they're good at judging confidence.  if you try to.act like something you're not, you'll just end up in an uncanny.valley.  you'll depart from sincere, but never arrive at convincing.truththe way to seem most formidable as an inexperienced founder is to.stick to the truth.   how formidable you seem isn't a constant.  it.varies depending on what you're saying.  most people can seem.confident when they're saying "one plus one is two," because they.know it's true.  the most diffident person would be puzzled and.even slightly contemptuous if they told a vc "one plus one is two".and the vc reacted with skepticism.  the magic ability of people.who are good at seeming formidable is that they can do this with.the sentence "we're going to make a billion dollars a year."  but.you can do the same, if not with that sentence with some fairly.impressive ones, so long as you convince yourself first.that's the secret.  convince yourself that your startup is worth.investing in, and then when you explain this to investors they'll.believe you.  and by convince yourself, i don't mean play mind games.with yourself to boost your confidence.  i mean truly evaluate.whether your startup is worth investing in.  if it isn't, don't try.to raise money..[5].but if it is, you'll be telling the truth.when you tell investors it's worth investing in, and they'll sense.that.  you don't have to be a smooth presenter if you understand.something well and tell the truth about it.to evaluate whether your startup is worth investing in, you have.to be a domain expert.  if you're not a domain expert, you can be.as convinced as you like about your idea, and it will seem to.investors no more than an instance of the dunning-kruger effect..which in fact it will usually be.  and investors can tell fairly.quickly whether you're a domain expert by how well you answer their.questions.  know everything about your market..[6]why do founders persist in trying to convince investors of things.they're not convinced of themselves?  partly because we've all been.trained to.when my friends robert morris and trevor blackwell were in grad.school, one of their fellow students was on the receiving end of a.question from their faculty advisor that we still quote today.  when.the unfortunate fellow got to his last slide, the professor burst.out:.which one of these conclusions do you actually believe?.one of the artifacts of the way schools are organized is that we.all get trained to talk even when we have nothing to say.  if you.have a ten page paper due, then ten pages you must write, even if.you only have one page of ideas.  even if you have no ideas.  you.have to produce something.  and all too many startups go into.fundraising in the same spirit.  when they think it's time to raise.money, they try gamely to make the best case they can for their.startup.  most never think of pausing beforehand to ask whether.what they're saying is actually convincing, because they've all.been trained to treat the need to present as a given — as an area.of fixed size, over which however much truth they have must needs.be spread, however thinly.the time to raise money is not when you need it, or when you reach.some artificial deadline like a demo day.  it's when you can convince.investors, and not before..[7]and unless you're a good con artist, you'll never convince investors.if you're not convinced yourself.  they're far better at detecting.bullshit than you are at producing it, even if you're producing it.unknowingly.  if you try to convince investors before you've convinced.yourself, you'll be wasting both your time.but pausing first to convince yourself will do more than save you.from wasting your time.  it will force you to organize your thoughts..to convince yourself that your startup is worth investing in, you'll.have to figure out why it's worth investing in.   and if you can.do that you'll end up with more than added confidence.  you'll also.have a provisional roadmap of how to succeed.marketnotice i've been careful to talk about whether a startup is worth.investing in, rather than whether it's going to succeed.  no one.knows whether a startup is going to succeed.  and it's a good thing.for investors that this is so, because if you could know in advance.whether a startup would succeed, the stock price would already be.the future price, and there would be no room for investors to make.money.  startup investors know that every investment is a bet, and.against pretty long odds.so to prove you're worth investing in, you don't have to prove.you're going to succeed, just that you're a sufficiently good bet..what makes a startup a sufficiently good bet?  in addition to.formidable founders, you need a plausible path to owning a big piece.of a big market.  founders think of startups as ideas, but investors.think of them as markets.  if there are x number of customers who'd.pay an average of $y per year for what you're making, then the total.addressable market, or tam, of your company is $xy.  investors don't.expect you to collect all that money, but it's an upper bound on.how big you can get.your target market has to be big, and it also has to be capturable.by you.  but the market doesn't have to be big yet, nor do you.necessarily have to be in it yet.  indeed, it's often better to.start in a small market that will either turn into a big one or.from which you can move into a big one.  there just has to be some.plausible sequence of hops that leads to dominating a big market a.few years down the line.the standard of plausibility varies dramatically depending on the.age of the startup.  a three month old company at demo day only.needs to be a promising experiment that's worth funding to see how.it turns out.  whereas a two year old company raising a series a.round needs to be able to show the experiment worked..[8]but every company that gets really big is "lucky" in the sense that.their growth is due mostly to some external wave they're riding,.so to make a convincing case for becoming huge, you have to identify.some specific trend you'll benefit from.  usually you can find this.by asking "why now?"  if this is such a great idea, why hasn't.someone else already done it?  ideally the answer is that it only.recently became a good idea, because something changed, and no one.else has noticed yet.microsoft for example was not going to grow huge selling basic.interpreters.  but by starting there they were perfectly poised to.expand up the stack of microcomputer software as microcomputers.grew powerful enough to support one. and microcomputers turned out.to be a really huge wave, bigger than even the most optimistic.observers would have predicted in 1975.but while microsoft did really well and there is thus a temptation.to think they would have seemed a great bet a few months in, they.probably didn't.  good, but not great.  no company, however successful,.ever looks more than a pretty good bet a few months in. microcomputers.turned out to be a big deal, and microsoft both executed well and.got lucky.  but it was by no means obvious that this was how things.would play out.  plenty of companies seem as good a bet a few months.in.  i don't know about startups in general, but at least half the.startups we fund could make as good a case as microsoft could have.for being on a path to dominating a large market.  and who can.reasonably expect more of a startup than that?rejectionif you can make as good a case as microsoft could have, will you.convince investors?  not always.  a lot of vcs would have rejected.microsoft..[9].certainly some rejected google.  and getting.rejected will put you in a slightly awkward position, because as.you'll see when you start fundraising, the most common question.you'll get from investors will be "who else is investing?" what do.you say if you've been fundraising for a while and no one has.committed yet?.[10]the people who are really good at acting formidable often solve.this problem by giving investors the impression that while no.investors have committed yet, several are about to.  this is arguably.a permissible tactic.  it's slightly dickish of investors to care.more about who else is investing than any other aspect of your.startup, and misleading them about how far along you are with other.investors seems the complementary countermove.  it's arguably an.instance of scamming a scammer. but i don't recommend this approach.to most founders, because most founders wouldn't be able to carry.it off.  this is the single most common lie told to investors, and.you have to be really good at lying to tell members of some profession.the most common lie they're told.if you're not a master of negotiation (and perhaps even if you are).the best solution is to tackle the problem head-on, and to explain.why investors have turned you down and why they're mistaken.  if.you know you're on the right track, then you also know why investors.were wrong to reject you. experienced investors are well aware that.the best ideas are also the scariest.  they all know about the vcs.who rejected google.  if instead of seeming evasive and ashamed.about having been turned down (and thereby implicitly agreeing with.the verdict) you talk candidly about what scared investors about.you, you'll seem more confident, which they like, and you'll probably.also do a better job of presenting that aspect of your startup.  at.the very least, that worry will now be out in the open instead of.being a gotcha left to be discovered by the investors you're currently.talking to, who will be proud of and thus attached to their discovery..[11]this strategy will work best with the best investors, who are both.hard to bluff and who already believe most other investors are.conventional-minded drones doomed always to miss the big outliers..raising money is not like applying to college, where you can assume.that if you can get into mit, you can also get into foobar state..because the best investors are much smarter than the rest, and the.best startup ideas look initially like.bad ideas, it's not uncommon.for a startup to be rejected by all the vcs except the best ones..that's what happened to dropbox.  y combinator started in boston,.and for the first 3 years we ran alternating batches in boston and.silicon valley.  because boston investors were so few and so timid,.we used to ship boston batches out for a second demo day in silicon.valley.  dropbox was part of a boston batch, which means all those.boston investors got the first look at dropbox, and none of them.closed the deal.  yet another backup and syncing thing, they all.thought.  a couple weeks later, dropbox raised a series a round.from sequoia..[12]differentnot understanding that investors view investments as bets combines.with the ten page paper mentality to prevent founders from even.considering the possibility of being certain of what they're saying..they think they're trying to convince investors of something very.uncertain — that their startup will be huge — and convincing anyone.of something like that must obviously entail some wild feat of.salesmanship.  but in fact when you raise money you're trying to.convince investors of something so much less speculative — whether.the company has all the elements of a good bet — that you can.approach the problem in a qualitatively different way.  you can.convince yourself, then convince them.and when you convince them, use the same matter-of-fact language.you used to convince yourself.  you wouldn't use vague, grandiose.marketing-speak among yourselves.  don't use it with investors.either.  it not only doesn't work on them, but seems a mark of.incompetence.  just be concise.  many investors explicitly use that.as a test, reasoning (correctly) that if you can't explain your.plans concisely, you don't really understand them.  but even investors.who don't have a rule about this will be bored and frustrated by.unclear explanations..[13]so here's the recipe for impressing investors when you're not already.good at seeming formidable:.make something worth investing in. understand why it's worth investing in. explain that clearly to investors..if you're saying something you know is true, you'll seem confident.when you're saying it.  conversely, never let pitching draw you.into bullshitting.  as long as you stay on the territory of truth,.you're strong.  make the truth good, then just tell it.notes[1].there's no reason to believe this number is a constant.  in.fact it's our explicit goal at y combinator to increase it, by.encouraging people to start startups who otherwise wouldn't have.[2].or more precisely, investors decide whether you're a loser.or possibly a winner.  if you seem like a winner, they may then,.depending on how much you're raising, have several more meetings.with you to test whether that initial impression holds up.but if you seem like a loser they're done, at least for the next.year or so.  and when they decide you're a loser they usually decide.in way less than the 50 minutes they may have allotted for the first.meeting.  which explains the astonished stories one always hears.about vc inattentiveness.  how could these people make investment.decisions well when they're checking their messages during startups'.presentations?  the solution to that mystery is that they've already.made the decision.[3].the two are not mutually exclusive.  there are people who are.both genuinely formidable, and also really good at acting that way.[4].how can people who will go on to create giant companies not.seem formidable early on?  i think the main reason is that their.experience so far has trained them to keep their wings folded, as.it were.  family, school, and jobs encourage cooperation, not.conquest.  and it's just as well they do, because even being genghis.khan is probably 99% cooperation.  but the result is that most.people emerge from the tube of their upbringing in their early.twenties compressed into the shape of the tube.  some find they.have wings and start to spread them.  but this takes a few years..in the beginning even they don't know yet what they're capable of.[5].in fact, change what you're doing.  you're investing your own.time in your startup.  if you're not convinced that what you're.working on is a sufficiently good bet, why are you even working on.that?[6].when investors ask you a question you don't know the answer.to, the best response is neither to bluff nor give up, but instead.to explain how you'd figure out the answer.  if you can work out a.preliminary answer on the spot, so much the better, but explain.that's what you're doing.[7].at yc we try to ensure startups are ready to raise money on.demo day by encouraging them to ignore investors and instead focus.on their companies till about a week before.  that way most reach.the stage where they're sufficiently convincing well before demo.day.  but not all do, so we also give any startup that wants to the.option of deferring to a later demo day.[8].founders are often surprised by how much harder it is to raise.the next round.  there is a qualitative difference in investors'.attitudes.  it's like the difference between being judged as a kid.and as an adult.  the next time you raise money, it's not enough.to be promising.  you have to be delivering results.so although it works well to show growth graphs at either stage,.investors treat them differently.  at three months, a growth graph.is mostly evidence that the founders are effective.  at two years,.it has to be evidence of a promising market and a company tuned to.exploit it.[9].by this i mean that if the present day equivalent of the 3.month old microsoft presented at a demo day, there would be investors.who turned them down.  microsoft itself didn't raise outside money,.and indeed the venture business barely existed when they got started.in 1975.[10].the best investors rarely care who else is investing, but.mediocre investors almost all do.  so you can use this question as.a test of investor quality.[11].to use this technique, you'll have to find out why investors.who rejected you did so, or at least what they claim was the reason..that may require asking, because investors don't always volunteer.a lot of detail.  make it clear when you ask that you're not trying.to dispute their decision — just that if there is some weakness in.your plans, you need to know about it.  you won't always get a real.reason out of them, but you should at least try.[12].dropbox wasn't rejected by all the east coast vcs.  there was.one firm that wanted to invest but tried to lowball them.[13].alfred lin points out that it's doubly important for the.explanation of a startup to be clear and concise, because it has.to convince at one remove: it has to work not just on the partner.you talk to, but when that partner re-tells it to colleagues.we consciously optimize for this at yc.  when we work with founders.create a demo day pitch, the last step is to imagine how an investor.would sell it to colleagues..thanks to marc andreessen, sam altman, patrick collison, ron conway,.chris dixon, alfred lin, ben horowitz, steve huffman, jessica.livingston, greg mcadoo, andrew mason, geoff ralston, yuri sagalov,.emmett shear, rajat suri, garry tan, albert wenger, fred wilson,.and qasar younis for reading drafts of this.<eot><sot>do things that don't scale.want to start a startup?  get funded by.y combinator..july 2013
one of the most common types of advice we give at y combinator is.to do things that don't scale.  a lot of would-be founders believe.that startups either take off or don't.  you build something, make.it available, and if you've made a better mousetrap, people beat a.path to your door as promised.  or they don't, in which case the.market must not exist..[1]actually startups take off because the founders make them take off..there may be a handful that just grew by themselves, but usually.it takes some sort of push to get them going.  a good metaphor would.be the cranks that car engines had before they got electric starters..once the engine was going, it would keep going, but there was a.separate and laborious process to get it going.recruitthe most common unscalable thing founders have to do at the start.is to recruit users manually.  nearly all startups have to.  you.can't wait for users to come to you.  you have to go out and get.them.stripe is one of the most successful startups we've funded, and the.problem they solved was an urgent one.   if anyone could have sat.back and waited for users, it was stripe.  but in fact they're.famous within yc for aggressive early user acquisition.startups building things for other startups have a big pool of.potential users in the other companies we've funded, and none took.better advantage of it than stripe.  at yc we use the term "collison.installation" for the technique they invented.  more diffident.founders ask "will you try our beta?" and if the answer is yes,.they say "great, we'll send you a link."  but the collison brothers.weren't going to wait. when anyone agreed to try stripe they'd say."right then, give me your laptop" and set them up on the spot.there are two reasons founders resist going out and recruiting users.individually.  one is a combination of shyness and laziness.  they'd.rather sit at home writing code than go out and talk to a bunch of.strangers and probably be rejected by most of them.  but for a.startup to succeed, at least one founder (usually the ceo) will.have to spend a lot of time on sales and marketing..[2]the other reason founders ignore this path is that the absolute.numbers seem so small at first.  this can't be how the big, famous.startups got started, they think. the mistake they make is to.underestimate the power of compound growth.  we encourage every.startup to measure their progress by weekly growth.rate.  if you have 100 users, you need to get 10 more next week.to grow 10% a week.  and while 110 may not seem much better than.100, if you keep growing at 10% a week you'll be surprised how big.the numbers get.  after a year you'll have 14,000 users, and after.2 years you'll have 2 million.you'll be doing different things when you're acquiring users a.thousand at a time, and growth has to slow down eventually.  but.if the market exists you can usually start by recruiting users.manually and then gradually switch to less manual methods..[3]airbnb is a classic example of this technique.  marketplaces are.so hard to get rolling that you should expect to take heroic measures.at first. in airbnb's case, these consisted of going door to door.in new york, recruiting new users and helping existing ones improve.their listings.  when i remember the airbnbs during yc, i picture.them with rolly bags, because when they showed up for tuesday dinners.they'd always just flown back from somewhere.fragileairbnb now seems like an unstoppable juggernaut, but early on it.was so fragile that about 30 days of going out and engaging in.person with users made the difference between success and failure.that initial fragility was not a unique feature of airbnb.  almost.all startups are fragile initially.  and that's one of the biggest.things inexperienced founders and investors (and reporters and.know-it-alls on forums) get wrong about them.  they unconsciously.judge larval startups by the standards of established ones.  they're.like someone looking at a newborn baby and concluding "there's no.way this tiny creature could ever accomplish anything."it's harmless if reporters and know-it-alls dismiss your startup..they always get things wrong.   it's even ok if investors dismiss.your startup; they'll change their minds when they see growth.  the.big danger is that you'll dismiss your startup yourself.  i've seen.it happen.  i often have to encourage founders who don't see the.full potential of what they're building.  even bill gates made that.mistake.  he returned to harvard for the fall semester after starting.microsoft.  he didn't stay long, but he wouldn't have returned at.all if he'd realized microsoft was going to be even a fraction of.the size it turned out to be..[4]the question to ask about an early stage startup is not "is this.company taking over the world?"  but "how big could this company.get if the founders did the right things?"  and the right things.often seem both laborious and inconsequential at the time. microsoft.can't have seemed very impressive when it was just a couple guys.in albuquerque writing basic interpreters for a market of a few.thousand hobbyists (as they were then called), but in retrospect.that was the optimal path to dominating microcomputer software..and i know brian chesky and joe gebbia didn't feel like they were.en route to the big time as they were taking "professional" photos.of their first hosts' apartments.  they were just trying to survive..but in retrospect that too was the optimal path to dominating a big.market.how do you find users to recruit manually?  if you build something.to solve your own problems, then.you only have to find your peers, which is usually straightforward..otherwise you'll have to make a more deliberate effort to locate.the most promising vein of users.  the usual way to do that is to.get some initial set of users by doing a comparatively untargeted.launch, and then to observe which kind seem most enthusiastic, and.seek out more like them.  for example, ben silbermann noticed that.a lot of the earliest pinterest users were interested in design,.so he went to a conference of design bloggers to recruit users, and.that worked well..[5]delightyou should take extraordinary measures not just to acquire users,.but also to make them happy.  for as long as they could (which.turned out to be surprisingly long), wufoo sent each new user a.hand-written thank you note.  your first users should feel that.signing up with you was one of the best choices they ever made..and you in turn should be racking your brains to think of new ways.to delight them.why do we have to teach startups this?  why is it counterintuitive.for founders?  three reasons, i think.one is that a lot of startup founders are trained as engineers,.and customer service is not part of the training of engineers..you're supposed to build things that are robust and elegant, not.be slavishly attentive to individual users like some kind of.salesperson.  ironically, part of the reason engineering is.traditionally averse to handholding is that its traditions date.from a time when engineers were less powerful — when they were.only in charge of their narrow domain of building things, rather.than running the whole show.  you can be ornery when you're scotty,.but not when you're kirk.another reason founders don't focus enough on individual customers.is that they worry it won't scale.  but when founders of larval.startups worry about this, i point out that in their current state.they have nothing to lose.  maybe if they go out of their way to.make existing users super happy, they'll one day have too many to.do so much for.  that would be a great problem to have.  see if you.can make it happen.  and incidentally, when it does, you'll find.that delighting customers scales better than you expected.  partly.because you can usually find ways to make anything scale more than.you would have predicted, and partly because delighting customers.will by then have permeated your culture.i have never once seen a startup lured down a blind alley by trying.too hard to make their initial users happy.but perhaps the biggest thing preventing founders from realizing.how attentive they could be to their users is that they've never.experienced such attention themselves.  their standards for customer.service have been set by the companies they've been customers of,.which are mostly big ones.  tim cook doesn't send you a hand-written.note after you buy a laptop.  he can't.  but you can.  that's one.advantage of being small: you can provide a level of service no big.company can..[6]once you realize that existing conventions are not the upper bound.on user experience, it's interesting in a very pleasant way to think.about how far you could go to delight your users.experiencei was trying to think of a phrase to convey how extreme your attention.to users should be, and i realized steve jobs had already done it:.insanely great.  steve wasn't just using "insanely" as a synonym.for "very."  he meant it more literally — that one should focus.on quality of execution to a degree that in everyday life would be.considered pathological.all the most successful startups we've funded have, and that probably.doesn't surprise would-be founders.  what novice founders don't get.is what insanely great translates to in a larval startup.  when.steve jobs started using that phrase, apple was already an established.company.  he meant the mac (and its documentation and even.packaging — such is the nature of obsession) should be insanely.well designed and manufactured.  that's not hard for engineers to.grasp.  it's just a more extreme version of designing a robust and.elegant product.what founders have a hard time grasping (and steve himself might.have had a hard time grasping) is what insanely great morphs into.as you roll the time slider back to the first couple months of a.startup's life.  it's not the product that should be insanely great,.but the experience of being your user.  the product is just one.component of that.  for a big company it's necessarily the dominant.one.  but you can and should give users an insanely great experience.with an early, incomplete, buggy product, if you make up the.difference with attentiveness.can, perhaps, but should?  yes.  over-engaging with early users is.not just a permissible technique for getting growth rolling.  for.most successful startups it's a necessary part of the feedback loop.that makes the product good.  making a better mousetrap is not an.atomic operation.  even if you start the way most successful startups.have, by building something you yourself need, the first thing you.build is never quite right.  and except in domains with big penalties.for making mistakes, it's often better not to aim for perfection.initially.  in software, especially, it usually works best to get.something in front of users as soon as it has a quantum of utility,.and then see what they do with it.  perfectionism is often an excuse.for procrastination, and in any case your initial model of users.is always inaccurate, even if you're one of them..[7]the feedback you get from engaging directly with your earliest users.will be the best you ever get.  when you're so big you have to.resort to focus groups, you'll wish you could go over to your users'.homes and offices and watch them use your stuff like you did when.there were only a handful of them.firesometimes the right unscalable trick is to focus on a deliberately.narrow market.  it's like keeping a fire contained at first to get.it really hot before adding more logs.that's what facebook did.  at first it was just for harvard students..in that form it only had a potential market of a few thousand people,.but because they felt it was really for them, a critical mass of.them signed up.  after facebook stopped being for harvard students,.it remained for students at specific colleges for quite a while..when i interviewed mark zuckerberg at startup school, he said that.while it was a lot of work creating course lists for each school,.doing that made students feel the site was their natural home.any startup that could be described as a marketplace usually has.to start in a subset of the market, but this can work for other.startups as well.  it's always worth asking if there's a subset of.the market in which you can get a critical mass of users quickly..[8]most startups that use the contained fire strategy do it unconsciously..they build something for themselves and their friends, who happen.to be the early adopters, and only realize later that they could.offer it to a broader market.  the strategy works just as well if.you do it unconsciously.  the biggest danger of not being consciously.aware of this pattern is for those who naively discard part of it..e.g. if you don't build something for yourself and your friends,.or even if you do, but you come from the corporate world and your.friends are not early adopters, you'll no longer have a perfect.initial market handed to you on a platter.among companies, the best early adopters are usually other startups..they're more open to new things both by nature and because, having.just been started, they haven't made all their choices yet.  plus.when they succeed they grow fast, and you with them.  it was one.of many unforeseen advantages of the yc model (and specifically of.making yc big) that b2b startups now have an instant market of.hundreds of other startups ready at hand.merakifor hardware startups there's a variant of.doing things that don't scale that we call "pulling a meraki.".although we didn't fund meraki, the founders were robert morris's.grad students, so we know their history.  they got started by doing.something that really doesn't scale: assembling their routers.themselves.hardware startups face an obstacle that software startups don't..the minimum order for a factory production run is usually several.hundred thousand dollars.  which can put you in a catch-22: without.a product you can't generate the growth you need to raise the money.to manufacture your product.  back when hardware startups had to.rely on investors for money, you had to be pretty convincing to.overcome this.  the arrival of crowdfunding (or more precisely,.preorders) has helped a lot.  but even so i'd advise startups to.pull a meraki initially if they can.  that's what pebble did.  the.pebbles.assembled.the first several hundred watches themselves. if.they hadn't gone through that phase, they probably wouldn't have.sold $10 million worth of watches when they did go on kickstarter.like paying excessive attention to early customers, fabricating.things yourself turns out to be valuable for hardware startups..you can tweak the design faster when you're the factory, and you.learn things you'd never have known otherwise.  eric migicovsky of.pebble said one of the things he learned was "how valuable it was to.source good screws."   who knew?consultsometimes we advise founders of b2b startups to take over-engagement.to an extreme, and to pick a single user and act as if they were.consultants building something just for that one user.   the initial.user serves as the form for your mold; keep tweaking till you fit.their needs perfectly, and you'll usually find you've made something.other users want too.  even if there aren't many of them, there are.probably adjacent territories that have more.  as long as you can.find just one user who really needs something and can act on that.need, you've got a toehold in making something people want, and.that's as much as any startup needs initially..[9]consulting is the canonical example of work that doesn't scale..but (like other ways of bestowing one's favors liberally) it's safe.to do it so long as you're not being paid to.  that's where companies.cross the line.  so long as you're a product company that's merely.being extra attentive to a customer, they're very grateful even if.you don't solve all their problems.  but when they start paying you.specifically for that attentiveness — when they start paying.you by the hour — they expect you to do everything.another consulting-like technique for recruiting initially lukewarm.users is to use your software yourselves on their behalf.  we.did that at viaweb.  when we approached merchants asking if they.wanted to use our software to make online stores, some said no, but.they'd let us make one for them.  since we would do anything to get.users, we did.  we felt pretty lame at the time.  instead of.organizing big strategic e-commerce partnerships, we were trying.to sell luggage and pens and men's shirts.  but in retrospect it.was exactly the right thing to do, because it taught us how it would.feel to merchants to use our software.  sometimes the feedback loop.was near instantaneous: in the middle of building some merchant's.site i'd find i needed a feature we didn't have, so i'd spend a.couple hours implementing it and then resume building the site.manualthere's a more extreme variant where you don't just use your software,.but are your software.  when you only have a small number of users,.you can sometimes get away with doing by hand things that you plan.to automate later.  this lets you launch faster, and when you do.finally automate yourself out of the loop, you'll know exactly what.to build because you'll have muscle memory from doing it yourself.when manual components look to the user like software, this technique.starts to have aspects of a practical joke.  for example, the way.stripe delivered "instant" merchant accounts to its first users was.that the founders manually signed them up for traditional merchant.accounts behind the scenes.some startups could be entirely manual at first. if you can find.someone with a problem that needs solving and you can solve it.manually, go ahead and do that for as long as you can, and then.gradually automate the bottlenecks.  it would be a little frightening.to be solving users' problems in a way that wasn't yet automatic,.but less frightening than the far more common case of having something.automatic that doesn't yet solve anyone's problems.bigi should mention one sort of initial tactic that usually doesn't.work: the big launch.  i occasionally meet founders who seem to.believe startups are projectiles rather than powered aircraft, and.that they'll make it big if and only if they're launched with.sufficient initial velocity.  they want to launch simultaneously.in 8 different publications, with embargoes.  and on a tuesday, of.course, since they read somewhere that's the optimum day to launch.something.it's easy to see how little launches matter.  think of some successful.startups.  how many of their launches do you remember?.all you need from a launch is some initial core of users.  how well.you're doing a few months later will depend more on how happy you.made those users than how many there were of them..[10]so why do founders think launches matter?  a combination of solipsism.and laziness.  they think what they're building is so great that.everyone who hears about it will immediately sign up.  plus it would.be so much less work if you could get users merely by broadcasting.your existence, rather than recruiting them one at a time.  but.even if what you're building really is great, getting users will.always be a gradual process — partly because great things.are usually also novel, but mainly because users have other things.to think about.partnerships too usually don't work.  they don't work for startups.in general, but they especially don't work as a way to get growth.started.  it's a common mistake among inexperienced founders to.believe that a partnership with a big company will be their big.break.  six months later they're all saying the same thing: that.was way more work than we expected, and we ended up getting practically.nothing out of it..[11]it's not enough just to do something extraordinary initially.  you.have to make an extraordinary effort initially.  any strategy.that omits the effort — whether it's expecting a big launch to.get you users, or a big partner — is ipso facto suspect.vectorthe need to do something unscalably laborious to get started is so.nearly universal that it might be a good idea to stop thinking of.startup ideas as scalars.  instead we should try thinking of them.as pairs of what you're going to build, plus the unscalable thing(s).you're going to do initially to get the company going.it could be interesting to start viewing startup ideas this way,.because now that there are two components you can try to be imaginative.about the second as well as the first.  but in most cases the second.component will be what it usually is — recruit users manually.and give them an overwhelmingly good experience — and the main.benefit of treating startups as vectors will be to remind founders.they need to work hard in two dimensions..[12]in the best case, both components of the vector contribute to your.company's dna: the unscalable things you have to do to get started.are not merely a necessary evil, but change the company permanently.for the better.  if you have to be aggressive about user acquisition.when you're small, you'll probably still be aggressive when you're.big.  if you have to manufacture your own hardware, or use your.software on users's behalf, you'll learn things you couldn't have.learned otherwise.  and most importantly, if you have to work hard.to delight users when you only have a handful of them, you'll keep.doing it when you have a lot.notes[1].actually emerson never mentioned mousetraps specifically.  he.wrote "if a man has good corn or wood, or boards, or pigs, to sell,.or can make better chairs or knives, crucibles or church organs,.than anybody else, you will find a broad hard-beaten road to his.house, though it be in the woods."[2].thanks to sam altman for suggesting i make this explicit..and no, you can't avoid doing sales by hiring someone to do it for.you.  you have to do sales yourself initially.  later you can hire.a real salesperson to replace you.[3].the reason this works is that as you get bigger, your size.helps you grow.  patrick collison wrote "at some point, there was.a very noticeable change in how stripe felt. it tipped from being.this boulder we had to push to being a train car that in fact had.its own momentum."[4].one of the more subtle ways in which yc can help founders.is by calibrating their ambitions, because we know exactly how a.lot of successful startups looked when they were just getting.started.[5].if you're building something for which you can't easily get.a small set of users to observe — e.g. enterprise software — and.in a domain where you have no connections, you'll have to rely on.cold calls and introductions.  but should you even be working on.such an idea?[6].garry tan pointed out an interesting trap founders fall into.in the beginning.  they want so much to seem big that they imitate.even the flaws of big companies, like indifference to individual.users.  this seems to them more "professional."  actually it's.better to embrace the fact that you're small and use whatever.advantages that brings.[7].your user model almost couldn't be perfectly accurate, because.users' needs often change in response to what you build for them..build them a microcomputer, and suddenly they need to run spreadsheets.on it, because the arrival of your new microcomputer causes someone.to invent the spreadsheet.[8].if you have to choose between the subset that will sign up.quickest and those that will pay the most, it's usually best to.pick the former, because those are probably the early adopters..they'll have a better influence on your product, and they won't.make you expend as much effort on sales.  and though they have less.money, you don't need that much to maintain your target growth rate.early on.[9].yes, i can imagine cases where you could end up making.something that was really only useful for one user.  but those are.usually obvious, even to inexperienced founders.  so if it's not.obvious you'd be making something for a market of one, don't worry.about that danger.[10].there may even be an inverse correlation between launch.magnitude and success.  the only launches i remember are famous.flops like the segway and google wave.  wave is a particularly.alarming example, because i think it was actually a great idea that.was killed partly by its overdone launch.[11].google grew big on the back of yahoo, but that wasn't a.partnership.  yahoo was their customer.[12].it will also remind founders that an idea where the second.component is empty — an idea where there is nothing you can do.to get going, e.g. because you have no way to find users to recruit.manually — is probably a bad idea, at least for those founders.thanks to sam altman, paul buchheit, patrick collison, kevin.hale, steven levy, jessica livingston, geoff ralston, and garry tan for reading.drafts of this.japanese translationrussian translationfrench translationarabic translationitalian translationkorean translation<eot><sot>startup investing trends.june 2013
(this talk was written for an audience of investors.)y combinator has now funded 564 startups including the current.batch, which has 53.  the total valuation of the 287 that have.valuations (either by raising an equity round, getting acquired,.or dying) is about $11.7 billion, and the 511 prior to the current.batch have collectively raised about $1.7 billion..[1]as usual those numbers are dominated by a few big winners.  the top.10 startups account for 8.6 of that 11.7 billion.  but there is a.peloton of younger startups behind them.  there are about 40 more.that have a shot at being really big.things got a little out of hand last summer when we had 84 companies.in the batch, so we tightened up our filter to decrease the batch.size..[2].several journalists have tried to interpret that as.evidence for some macro story they were telling, but the reason had.nothing to do with any external trend.  the reason was that we.discovered we were using an n² algorithm, and we needed to buy.time to fix it.  fortunately we've come up with several techniques.for sharding yc, and the problem now seems to be fixed.  with a new.more scaleable model and only 53 companies, the current batch feels.like a walk in the park.  i'd guess we can grow another 2 or 3x.before hitting the next bottleneck..[3]one consequence of funding such a large number of startups is that.we see trends early.  and since fundraising is one of the main.things we help startups with, we're in a good position to notice.trends in investing.i'm going to take a shot at describing where these trends are.leading.  let's start with the most basic question: will the future.be better or worse than the past?  will investors, in the aggregate,.make more money or less?i think more.  there are multiple forces at work, some of which.will decrease returns, and some of which will increase them.  i.can't predict for sure which forces will prevail, but i'll describe.them and you can decide for yourself.there are two big forces driving change in startup funding: it's.becoming cheaper to start a startup, and startups are becoming a.more normal thing to do.when i graduated from college in 1986, there were essentially two.options: get a job or go to grad school.  now there's a third: start.your own company..that's a big change.  in principle it was possible to start your.own company in 1986 too, but it didn't seem like a real possibility..it seemed possible to start a consulting company, or a niche product.company, but it didn't seem possible to start a company that would.become big..[4]that kind of change, from 2 paths to 3, is the sort of big social.shift that only happens once every few generations.  i think we're.still at the beginning of this one.  it's hard to predict how big.a deal it will be.  as big a deal as the industrial revolution?.maybe.  probably not.  but it will be a big enough deal that it.takes almost everyone by surprise, because those big social shifts.always do.one thing we can say for sure is that there will be a lot more.startups.  the monolithic, hierarchical companies of the mid 20th.century are being replaced by networks.of smaller companies.  this process is not just something happening.now in silicon valley.  it started decades ago, and it's happening.as far afield as the car industry.  it has a long way to run..[5].the other big driver of change is that startups are becoming cheaper.to start.  and in fact the two forces are related: the decreasing.cost of starting a startup is one of the reasons startups are.becoming a more normal thing to do.the fact that startups need less money means founders will increasingly.have the upper hand over investors.  you still need just as much.of their energy and imagination, but they don't need as much of.your money.  because founders have the upper hand, they'll retain.an increasingly large share of the stock in, and control of, their.companies.  which means investors will get less stock and less.control.does that mean investors will make less money?  not necessarily,.because there will be more good startups.  the total amount of.desirable startup stock available to investors will probably increase,.because the number of desirable startups will probably grow faster.than the percentage they sell to investors shrinks.there's a rule of thumb in the vc business that there are about 15.companies a year that will be really successful.  although a lot.of investors unconsciously treat this number as if it were some.sort of cosmological constant, i'm certain it isn't.   there are.probably limits on the rate at which technology can develop, but.that's not the limiting factor now.  if it were, each successful.startup would be founded the month it became possible, and that is.not the case. right now the limiting factor on the number of big.hits is the number of sufficiently good founders starting companies,.and that number can and will increase.  there are still a lot of.people who'd make great founders who never end up starting a company..you can see that from how randomly some of the most successful.startups got started.  so many of the biggest startups almost didn't.happen that there must be a lot of equally good startups that.actually didn't happen.there might be 10x or even 50x more good founders out there.  as.more of them go ahead and start startups, those 15 big hits a year.could easily become 50 or even 100..[6]what about returns, though?  are we heading for a world in which.returns will be pinched by increasingly high valuations?  i think.the top firms will actually make more money than they have in the.past.  high returns don't come from investing at low valuations..they come from investing in the companies that do really well.  so.if there are more of those to be had each year, the best pickers.should have more hits.this means there should be more variability in the vc business..the firms that can recognize and attract the best startups will do.even better, because there will be more of them to recognize and.attract.  whereas the bad firms will get the leftovers, as they do.now, and yet pay a higher price for them.nor do i think it will be a problem that founders keep control of.their companies for longer.  the empirical evidence on that is.already clear: investors make more money as founders' bitches than.their bosses.  though somewhat humiliating, this is actually good.news for investors, because it takes less time to serve founders.than to micromanage them.what about angels?  i think there is a lot of opportunity there..it used to suck to be an angel investor.  you couldn't get access.to the best deals, unless you got lucky like andy bechtolsheim, and.when you did invest in a startup, vcs might try to strip you of.your stock when they arrived later.  now an angel can go to something.like demo day or angellist and have access to the same deals vcs.do.  and the days when vcs could wash angels out of the cap table.are long gone.i think one of the biggest unexploited opportunities in startup.investing right now is angel-sized investments made quickly.  few.investors understand the cost that raising money from them imposes.on startups.  when the company consists only of the founders,.everything grinds to a halt during fundraising, which can easily.take 6 weeks.  the current high cost of fundraising means there is.room for low-cost investors to undercut the rest.  and in this.context, low-cost means deciding quickly.  if there were a reputable.investor who invested $100k on good terms and promised to decide.yes or no within 24 hours, they'd get access to almost all the best.deals, because every good startup would approach them first.  it.would be up to them to pick, because every bad startup would approach.them first too, but at least they'd see everything.  whereas if an.investor is notorious for taking a long time to make up their mind.or negotiating a lot about valuation, founders will save them for.last.  and in the case of the most promising startups, which tend.to have an easy time raising money, last can easily become never.will the number of big hits grow linearly with the total number of.new startups?  probably not, for two reasons.  one is that the.scariness of starting a startup in the old days was a pretty effective.filter.  now that the cost of failing is becoming lower, we should.expect founders to do it more.  that's not a bad thing.  it's common.in technology for an innovation that decreases the cost of failure.to increase the number of failures and yet leave you net ahead.the other reason the number of big hits won't grow proportionately.to the number of startups is that there will start to be an increasing.number of idea clashes.  although the finiteness of the number of.good ideas is not the reason there are only 15 big hits a year, the.number has to be finite, and the more startups there are, the more.we'll see multiple companies doing the same thing at the same time..it will be interesting, in a bad way, if idea clashes become a lot.more common..[7]mostly because of the increasing number of early failures, the startup.business of the future won't simply be the same shape, scaled up..what used to be an obelisk will become a pyramid.  it will be a.little wider at the top, but a lot wider at the bottom.what does that mean for investors?  one thing it means is that there.will be more opportunities for investors at the earliest stage,.because that's where the volume of our imaginary solid is growing.fastest.  imagine the obelisk of investors that corresponds to.the obelisk of startups.  as it widens out into a pyramid to match.the startup pyramid, all the contents are adhering to the top,.leaving a vacuum at the bottom.that opportunity for investors mostly means an opportunity for new.investors, because the degree of risk an existing investor or firm.is comfortable taking is one of the hardest things for them to.change.  different types of investors are adapted to different.degrees of risk, but each has its specific degree of risk deeply.imprinted on it, not just in the procedures they follow but in the.personalities of the people who work there.i think the biggest danger for vcs, and also the biggest opportunity,.is at the series a stage.  or rather, what used to be the series a.stage before series as turned into de facto series b rounds.right now, vcs often knowingly invest too much money at the series.a stage.  they do it because they feel they need to get a big chunk.of each series a company to compensate for the opportunity cost of.the board seat it consumes.  which means when there is a lot of.competition for a deal, the number that moves is the valuation (and.thus amount invested) rather than the percentage of the company.being sold.  which means, especially in the case of more promising.startups, that series a investors often make companies take more.money than they want.some vcs lie and claim the company really needs that much.  others.are more candid, and admit their financial models require them to.own a certain percentage of each company.  but we all know the.amounts being raised in series a rounds are not determined by asking.what would be best for the companies.  they're determined by vcs.starting from the amount of the company they want to own, and the.market setting the valuation and thus the amount invested.like a lot of bad things, this didn't happen intentionally.  the.vc business backed into it as their initial assumptions gradually.became obsolete.  the traditions and financial models of the vc.business were established when founders needed investors more.  in.those days it was natural for founders to sell vcs a big chunk of.their company in the series a round.  now founders would prefer to.sell less, and vcs are digging in their heels because they're not.sure if they can make money buying less than 20% of each series a.company.the reason i describe this as a danger is that series a investors.are increasingly at odds with the startups they supposedly serve,.and that tends to come back to bite you eventually.  the reason i.describe it as an opportunity is that there is now a lot of potential.energy built up, as the market has moved away from vcs' traditional.business model.  which means the first vc to break ranks and start.to do series a rounds for as much equity as founders want to sell.(and with no "option pool" that comes only from the founders' shares).stands to reap huge benefits.what will happen to the vc business when that happens?  hell if i.know.  but i bet that particular firm will end up ahead.  if one.top-tier vc firm started to do series a rounds that started from.the amount the company needed to raise and let the percentage.acquired vary with the market, instead of the other way around,.they'd instantly get almost all the best startups.  and that's where.the money is.you can't fight market forces forever.  over the last decade we've.seen the percentage of the company sold in series a rounds creep.inexorably downward.  40% used to be common.  now vcs are fighting.to hold the line at 20%.  but i am daily waiting for the line to.collapse.  it's going to happen.  you may as well anticipate it,.and look bold.who knows, maybe vcs will make more money by doing the right thing..it wouldn't be the first time that happened.  venture capital is a.business where occasional big successes generate hundredfold returns..how much confidence can you really have in financial models for.something like that anyway?  the.big successes only have to get a tiny bit less occasional to.compensate for a 2x decrease in the stock sold in series a rounds.if you want to find new opportunities for investing, look for things.founders complain about.  founders are your customers, and the.things they complain about are unsatisfied demand.  i've given two.examples of things founders complain about most—investors who.take too long to make up their minds, and excessive dilution in.series a rounds—so those are good places to look now.  but.the more general recipe is: do something founders want..notes[1].i realize revenue and not fundraising is the proper test of.success for a startup.  the reason we quote statistics about.fundraising is because those are the numbers we have.  we couldn't.talk meaningfully about revenues without including the numbers from.the most successful startups, and we don't have those.  we often.discuss revenue growth with the earlier stage startups, because.that's how we gauge their progress, but when companies reach a.certain size it gets presumptuous for a seed investor to do that.in any case, companies' market caps do eventually become a function.of revenues, and post-money valuations of funding rounds are at.least guesses by pros about where those market caps will end up.the reason only 287 have valuations is that the rest have mostly.raised money on convertible notes, and although convertible notes.often have valuation caps, a valuation cap is merely an upper bound.on a valuation.[2].we didn't try to accept a particular number.  we have no way.of doing that even if we wanted to.  we just tried to be significantly.pickier.[3].though you never know with bottlenecks, i'm guessing the next.one will be coordinating efforts among partners.[4].i realize starting a company doesn't have to mean starting a.startup.  there will be lots of people starting normal companies.too.  but that's not relevant to an audience of investors.geoff ralston reports that in silicon valley it seemed thinkable.to start a startup in the mid 1980s.  it would have started there..but i know it didn't to undergraduates on the east coast.[5].this trend is one of the main causes of the increase in.economic inequality in the us since the mid twentieth century.  the.person who would in 1950 have been the general manager of the x.division of megacorp is now the founder of the x company, and owns.significant equity in it.[6].if congress passes the founder.visa in a non-broken form, that alone could in principle get.us up to 20x, since 95% of the world's population lives outside the.us.[7].if idea clashes got bad enough, it could change what it means.to be a startup.  we currently advise startups mostly to ignore.competitors.  we tell them startups are competitive like running,.not like soccer; you don't have to go and steal the ball away from.the other team.  but if idea clashes became common enough, maybe.you'd start to have to.  that would be unfortunate.thanks to sam altman, paul buchheit, dalton caldwell,.patrick collison, jessica.livingston, andrew mason, geoff ralston, and garry tan for reading.drafts of this.<eot><sot>how to get startup ideas.want to start a startup?  get funded by.y combinator..november 2012
the way to get startup ideas is not to try to think of startup.ideas.  it's to look for problems, preferably problems you have.yourself.the very best startup ideas tend to have three things in common:.they're something the founders themselves want, that they themselves.can build, and that few others realize are worth doing.  microsoft,.apple, yahoo, google, and facebook all began this way..problemswhy is it so important to work on a problem you have?  among other.things, it ensures the problem really exists.  it sounds obvious.to say you should only work on problems that exist.  and yet by far.the most common mistake startups make is to solve problems no one.has.i made it myself.  in 1995 i started a company to put art galleries.online.  but galleries didn't want to be online.  it's not how the.art business works.  so why did i spend 6 months working on this.stupid idea?  because i didn't pay attention to users.  i invented.a model of the world that didn't correspond to reality, and worked.from that.  i didn't notice my model was wrong until i tried.to convince users to pay for what we'd built.  even then i took.embarrassingly long to catch on.  i was attached to my model of the.world, and i'd spent a lot of time on the software.  they had to.want it!why do so many founders build things no one wants?  because they.begin by trying to think of startup ideas.  that m.o. is doubly.dangerous: it doesn't merely yield few good ideas; it yields bad.ideas that sound plausible enough to fool you into working on them.at yc we call these "made-up" or "sitcom" startup ideas.  imagine.one of the characters on a tv show was starting a startup.  the.writers would have to invent something for it to do.  but coming.up with good startup ideas is hard.  it's not something you can do.for the asking.  so (unless they got amazingly lucky) the writers.would come up with an idea that sounded plausible, but was actually.bad.for example, a social network for pet owners.  it doesn't sound.obviously mistaken.  millions of people have pets.  often they care.a lot about their pets and spend a lot of money on them.  surely.many of these people would like a site where they could talk to.other pet owners.  not all of them perhaps, but if just 2 or 3.percent were regular visitors, you could have millions of users..you could serve them targeted offers, and maybe charge for premium.features..[1]the danger of an idea like this is that when you run it by your.friends with pets, they don't say "i would never use this." they.say "yeah, maybe i could see using something like that." even when.the startup launches, it will sound plausible to a lot of people..they don't want to use it themselves, at least not right now, but.they could imagine other people wanting it.  sum that reaction.across the entire population, and you have zero users..[2].wellwhen a startup launches, there have to be at least some users who.really need what they're making — not just people who could see.themselves using it one day, but who want it urgently.  usually.this initial group of users is small, for the simple reason that.if there were something that large numbers of people urgently needed.and that could be built with the amount of effort a startup usually.puts into a version one, it would probably already exist.  which.means you have to compromise on one dimension: you can either build.something a large number of people want a small amount, or something.a small number of people want a large amount.  choose the latter..not all ideas of that type are good startup ideas, but nearly all.good startup ideas are of that type.imagine a graph whose x axis represents all the people who might.want what you're making and whose y axis represents how much they.want it.  if you invert the scale on the y axis, you can envision.companies as holes.  google is an immense crater: hundreds of.millions of people use it, and they need it a lot.  a startup just.starting out can't expect to excavate that much volume.  so you.have two choices about the shape of hole you start with.  you can.either dig a hole that's broad but shallow, or one that's narrow.and deep, like a well.made-up startup ideas are usually of the first type.  lots of people.are mildly interested in a social network for pet owners.nearly all good startup ideas are of the second type.  microsoft.was a well when they made altair basic.  there were only a couple.thousand altair owners, but without this software they were programming.in machine language.  thirty years later facebook had the same.shape.  their first site was exclusively for harvard students, of.which there are only a few thousand, but those few thousand users.wanted it a lot.when you have an idea for a startup, ask yourself: who wants this.right now?  who wants this so much that they'll use it even when.it's a crappy version one made by a two-person startup they've never.heard of?  if you can't answer that, the idea is probably bad..[3]you don't need the narrowness of the well per se.  it's depth you.need; you get narrowness as a byproduct of optimizing for depth.(and speed).  but you almost always do get it.  in practice the.link between depth and narrowness is so strong that it's a good.sign when you know that an idea will appeal strongly to a specific.group or type of user.but while demand shaped like a well is almost a necessary condition.for a good startup idea, it's not a sufficient one.  if mark.zuckerberg had built something that could only ever have appealed.to harvard students, it would not have been a good startup idea..facebook was a good idea because it started with a small market.there was a fast path out of.  colleges are similar enough that if.you build a facebook that works at harvard, it will work at any.college. so you spread rapidly through all the colleges.  once you.have all the college students, you get everyone else simply by.letting them in.similarly for microsoft: basic for the altair; basic for other.machines; other languages besides basic; operating systems;.applications; ipo..selfhow do you tell whether there's a path out of an idea?  how do you.tell whether something is the germ of a giant company, or just a.niche product?  often you can't. the founders of airbnb didn't.realize at first how big a market they were tapping.  initially.they had a much narrower idea.  they were going to let hosts rent.out space on their floors during conventions.  they didn't foresee.the expansion of this idea; it forced itself upon them gradually..all they knew at first is that they were onto something.  that's.probably as much as bill gates or mark zuckerberg knew at first.occasionally it's obvious from the beginning when there's a path.out of the initial niche.  and sometimes i can see a path that's.not immediately obvious; that's one of our specialties at yc.  but.there are limits to how well this can be done, no matter how much.experience you have.  the most important thing to understand about.paths out of the initial idea is the meta-fact that these are hard.to see.so if you can't predict whether there's a path out of an idea, how.do you choose between ideas?  the truth is disappointing but.interesting: if you're the right sort of person, you have the right.sort of hunches.  if you're at the leading edge of a field that's.changing fast, when you have a hunch that something is worth doing,.you're more likely to be right.in zen and the art of motorcycle maintenance, robert pirsig says:.you want to know how to paint a perfect painting? it's easy.  make.yourself perfect and then just paint naturally..i've wondered about that passage since i read it in high school..i'm not sure how useful his advice is for painting specifically,.but it fits this situation well.  empirically, the way to have good.startup ideas is to become the sort of person who has them.being at the leading edge of a field doesn't mean you have to be.one of the people pushing it forward.  you can also be at the leading.edge as a user.  it was not so much because he was a programmer.that facebook seemed a good idea to mark zuckerberg as because he.used computers so much.  if you'd asked most 40 year olds in 2004.whether they'd like to publish their lives semi-publicly on the.internet, they'd have been horrified at the idea.  but mark already.lived online; to him it seemed natural.paul buchheit says that people at the leading edge of a rapidly.changing field "live in the future."  combine that with pirsig and.you get:.live in the future, then build what's missing..that describes the way many if not most of the biggest startups got.started.  neither apple nor yahoo nor google nor facebook were even.supposed to be companies at first.  they grew out of things their.founders built because there seemed a gap in the world.if you look at the way successful founders have had their ideas,.it's generally the result of some external stimulus hitting a.prepared mind.  bill gates and paul allen hear about the altair and.think "i bet we could write a basic interpreter for it." drew houston.realizes he's forgotten his usb stick and thinks "i really need to.make my files live online." lots of people heard about the altair..lots forgot usb sticks.  the reason those stimuli caused those.founders to start companies was that their experiences had prepared.them to notice the opportunities they represented.the verb you want to be using with respect to startup ideas is not."think up" but "notice." at yc we call ideas that grow naturally.out of the founders' own experiences "organic" startup ideas.  the.most successful startups almost all begin this way.that may not have been what you wanted to hear.  you may have.expected recipes for coming up with startup ideas, and instead i'm.telling you that the key is to have a mind that's prepared in the.right way.  but disappointing though it may be, this is the truth..and it is a recipe of a sort, just one that in the worst case takes.a year rather than a weekend.if you're not at the leading edge of some rapidly changing field,.you can get to one.  for example, anyone reasonably smart can.probably get to an edge of programming (e.g. building mobile apps).in a year.  since a successful startup will consume at least 3-5.years of your life, a year's preparation would be a reasonable.investment.  especially if you're also looking for a cofounder..[4]you don't have to learn programming to be at the leading edge of a.domain that's changing fast.  other domains change fast.  but while.learning to hack is not necessary, it is for the forseeable future.sufficient. as marc andreessen put it, software is eating the world,.and this trend has decades left to run.knowing how to hack also means that when you have ideas, you'll be.able to implement them.  that's not absolutely necessary (jeff bezos.couldn't) but it's an advantage.  it's a big advantage, when you're.considering an idea like putting a college facebook online, if.instead of merely thinking "that's an interesting idea," you can.think instead "that's an interesting idea.  i'll try building an.initial version tonight."  it's even better when you're both a.programmer and the target user, because then the cycle of generating.new versions and testing them on users can happen inside one head..noticingonce you're living in the future in some respect, the way to notice.startup ideas is to look for things that seem to be missing.  if.you're really at the leading edge of a rapidly changing field, there.will be things that are obviously missing.  what won't be obvious.is that they're startup ideas.  so if you want to find startup.ideas, don't merely turn on the filter "what's missing?" also turn.off every other filter, particularly "could this be a big company?".there's plenty of time to apply that test later.  but if you're.thinking about that initially, it may not only filter out lots.of good ideas, but also cause you to focus on bad ones.most things that are missing will take some time to see.  you almost.have to trick yourself into seeing the ideas around you.but you know the ideas are out there.  this is not one of those.problems where there might not be an answer.  it's impossibly.unlikely that this is the exact moment when technological progress.stops.  you can be sure people are going to build things in the.next few years that will make you think "what did i do before x?"and when these problems get solved, they will probably seem flamingly.obvious in retrospect.  what you need to do is turn off the filters.that usually prevent you from seeing them.  the most powerful is.simply taking the current state of the world for granted.  even the.most radically open-minded of us mostly do that.  you couldn't get.from your bed to the front door if you stopped to question everything.but if you're looking for startup ideas you can sacrifice some of.the efficiency of taking the status quo for granted and start to.question things.  why is your inbox overflowing?  because you get.a lot of email, or because it's hard to get email out of your inbox?.why do you get so much email?  what problems are people trying to.solve by sending you email?  are there better ways to solve them?.and why is it hard to get emails out of your inbox?  why do you.keep emails around after you've read them?  is an inbox the optimal.tool for that?pay particular attention to things that chafe you.  the advantage.of taking the status quo for granted is not just that it makes life.(locally) more efficient, but also that it makes life more tolerable..if you knew about all the things we'll get in the next 50 years but.don't have yet, you'd find present day life pretty constraining,.just as someone from the present would if they were sent back 50.years in a time machine.  when something annoys you, it could be.because you're living in the future.when you find the right sort of problem, you should probably be.able to describe it as obvious, at least to you.  when we started.viaweb, all the online stores were built by hand, by web designers.making individual html pages.  it was obvious to us as programmers.that these sites would have to be generated by software..[5]which means, strangely enough, that coming up with startup ideas.is a question of seeing the obvious.  that suggests how weird this.process is: you're trying to see things that are obvious, and yet.that you hadn't seen.since what you need to do here is loosen up your own mind, it may.be best not to make too much of a direct frontal attack on the.problem — i.e. to sit down and try to think of ideas.  the best.plan may be just to keep a background process running, looking for.things that seem to be missing.  work on hard problems, driven.mainly by curiosity, but have a second self watching over your.shoulder, taking note of gaps and anomalies..[6]give yourself some time.  you have a lot of control over the rate.at which you turn yours into a prepared mind, but you have less.control over the stimuli that spark ideas when they hit it.  if.bill gates and paul allen had constrained themselves to come up.with a startup idea in one month, what if they'd chosen a month.before the altair appeared?  they probably would have worked on a.less promising idea.  drew houston did work on a less promising.idea before dropbox: an sat prep startup.  but dropbox was a much.better idea, both in the absolute sense and also as a match for his.skills..[7]a good way to trick yourself into noticing ideas is to work on.projects that seem like they'd be cool.  if you do that, you'll.naturally tend to build things that are missing.  it wouldn't seem.as interesting to build something that already existed.just as trying to think up startup ideas tends to produce bad ones,.working on things that could be dismissed as "toys" often produces.good ones.  when something is described as a toy, that means it has.everything an idea needs except being important.  it's cool; users.love it; it just doesn't matter.  but if you're living in the future.and you build something cool that users love, it may matter more.than outsiders think.  microcomputers seemed like toys when apple.and microsoft started working on them.  i'm old enough to remember.that era; the usual term for people with their own microcomputers.was "hobbyists."  backrub seemed like an inconsequential science.project.  the facebook was just a way for undergrads to stalk one.another.at yc we're excited when we meet startups working on things that.we could imagine know-it-alls on forums dismissing as toys.  to us.that's positive evidence an idea is good.if you can afford to take a long view (and arguably you can't afford.not to), you can turn "live in the future and build what's missing".into something even better:.live in the future and build what seems interesting..schoolthat's what i'd advise college students to do, rather than trying.to learn about "entrepreneurship."  "entrepreneurship" is something.you learn best by doing it.  the examples of the most successful.founders make that clear.  what you should be spending your time.on in college is ratcheting yourself into the future.  college is.an incomparable opportunity to do that.  what a waste to sacrifice.an opportunity to solve the hard part of starting a startup — becoming.the sort of person who can have organic startup ideas — by.spending time learning about the easy part.  especially since.you won't even really learn about it, any more than you'd learn.about sex in a class.  all you'll learn is the words for things.the clash of domains is a particularly fruitful source of ideas..if you know a lot about programming and you start learning about.some other field, you'll probably see problems that software could.solve.  in fact, you're doubly likely to find good problems in.another domain: (a) the inhabitants of that domain are not as likely.as software people to have already solved their problems with.software, and (b) since you come into the new domain totally ignorant,.you don't even know what the status quo is to take it for granted.so if you're a cs major and you want to start a startup, instead.of taking a class on entrepreneurship you're better off taking a.class on, say, genetics.  or better still, go work for a biotech.company.  cs majors normally get summer jobs at computer hardware.or software companies.  but if you want to find startup ideas, you.might do better to get a summer job in some unrelated field..[8]or don't take any extra classes, and just build things.  it's no.coincidence that microsoft and facebook both got started in january..at harvard that is (or was) reading period, when students have no.classes to attend because they're supposed to be studying for finals..[9]but don't feel like you have to build things that will become startups.  that's.premature optimization. just build things.  preferably with other.students.  it's not just the classes that make a university such a.good place to crank oneself into the future.  you're also surrounded.by other people trying to do the same thing.  if you work together.with them on projects, you'll end up producing not just organic.ideas, but organic ideas with organic founding teams — and that,.empirically, is the best combination.beware of research.  if an undergrad writes something all his friends.start using, it's quite likely to represent a good startup idea..whereas a phd dissertation is extremely unlikely to.  for some.reason, the more a project has to count as research, the less likely.it is to be something that could be turned into a startup..[10].i think the reason is that the subset of ideas that count as research.is so narrow that it's unlikely that a project that satisfied that.constraint would also satisfy the orthogonal constraint of solving.users' problems.  whereas when students (or professors) build.something as a side-project, they automatically gravitate toward.solving users' problems — perhaps even with an additional energy.that comes from being freed from the constraints of research..competitionbecause a good idea should seem obvious, when you have one you'll.tend to feel that you're late.  don't let that deter you.  worrying.that you're late is one of the signs of a good idea.  ten minutes.of searching the web will usually settle the question.  even if you.find someone else working on the same thing, you're probably not.too late.  it's exceptionally rare for startups to be killed by.competitors — so rare that you can almost discount the possibility..so unless you discover a competitor with the sort of lock-in that.would prevent users from choosing you, don't discard the idea.if you're uncertain, ask users.  the question of whether you're too.late is subsumed by the question of whether anyone urgently needs.what you plan to make.  if you have something that no competitor.does and that some subset of users urgently need, you have a.beachhead..[11]the question then is whether that beachhead is big enough. or more.importantly, who's in it: if the beachhead consists of people doing.something lots more people will be doing in the future, then it's.probably big enough no matter how small it is.  for example, if.you're building something differentiated from competitors by the.fact that it works on phones, but it only works on the newest phones,.that's probably a big enough beachhead.err on the side of doing things where you'll face competitors..inexperienced founders usually give competitors more credit than.they deserve.  whether you succeed depends far more on you than on.your competitors.  so better a good idea with competitors than a.bad one without.you don't need to worry about entering a "crowded market" so long.as you have a thesis about what everyone else in it is overlooking..in fact that's a very promising starting point.  google was that.type of idea.  your thesis has to be more precise than "we're going.to make an x that doesn't suck" though. you have to be able to.phrase it in terms of something the incumbents are overlooking..best of all is when you can say that they didn't have the courage.of their convictions, and that your plan is what they'd have done.if they'd followed through on their own insights.  google was that.type of idea too.  the search engines that preceded them shied away.from the most radical implications of what they were doing — particularly.that the better a job they did, the faster users would.leave.a crowded market is actually a good sign, because it means both.that there's demand and that none of the existing solutions are.good enough.  a startup can't hope to enter a market that's obviously.big and yet in which they have no competitors.  so any startup that.succeeds is either going to be entering a market with existing.competitors, but armed with some secret weapon that will get them.all the users (like google), or entering a market that looks small.but which will turn out to be big (like microsoft)..[12].filtersthere are two more filters you'll need to turn off if you want to.notice startup ideas: the unsexy filter and the schlep filter.most programmers wish they could start a startup by just writing.some brilliant code, pushing it to a server, and having users pay.them lots of money.  they'd prefer not to deal with tedious problems.or get involved in messy ways with the real world.  which is a.reasonable preference, because such things slow you down.  but this.preference is so widespread that the space of convenient startup.ideas has been stripped pretty clean.  if you let your mind wander.a few blocks down the street to the messy, tedious ideas, you'll.find valuable ones just sitting there waiting to be implemented.the schlep filter is so dangerous that i wrote a separate essay.about the condition it induces, which i called.schlep blindness..i gave stripe as an example of a startup that benefited from turning.off this filter, and a pretty striking example it is.  thousands.of programmers were in a position to see this idea; thousands of.programmers knew how painful it was to process payments before.stripe.  but when they looked for startup ideas they didn't see.this one, because unconsciously they shrank from having to deal.with payments.  and dealing with payments is a schlep for stripe,.but not an intolerable one.  in fact they might have had net less.pain; because the fear of dealing with payments kept most people.away from this idea, stripe has had comparatively smooth sailing.in other areas that are sometimes painful, like user acquisition..they didn't have to try very hard to make themselves heard by users,.because users were desperately waiting for what they were building.the unsexy filter is similar to the schlep filter, except it keeps.you from working on problems you despise rather than ones you fear..we overcame this one to work on viaweb. there were interesting.things about the architecture of our software, but we weren't.interested in ecommerce per se.  we could see the problem was one.that needed to be solved though.turning off the schlep filter is more important than turning off.the unsexy filter, because the schlep filter is more likely to be.an illusion.  and even to the degree it isn't, it's a worse form.of self-indulgence.  starting a successful startup is going to be.fairly laborious no matter what.  even if the product doesn't entail.a lot of schleps, you'll still have plenty dealing with investors,.hiring and firing people, and so on.  so if there's some idea you.think would be cool but you're kept away from by fear of the schleps.involved, don't worry: any sufficiently good idea will have as many.the unsexy filter, while still a source of error, is not as entirely.useless as the schlep filter.  if you're at the leading edge of a.field that's changing rapidly, your ideas about what's sexy will.be somewhat correlated with what's valuable in practice.  particularly.as you get older and more experienced.  plus if you find an idea.sexy, you'll work on it more enthusiastically..[13].recipeswhile the best way to discover startup ideas is to become the sort.of person who has them and then build whatever interests you,.sometimes you don't have that luxury.  sometimes you need an idea.now.  for example, if you're working on a startup and your initial.idea turns out to be bad.for the rest of this essay i'll talk about tricks for coming up.with startup ideas on demand.  although empirically you're better.off using the organic strategy, you could succeed this way. you.just have to be more disciplined.  when you use the organic method,.you don't even notice an idea unless it's evidence that something.is truly missing.  but when you make a conscious effort to think.of startup ideas, you have to replace this natural constraint with.self-discipline.  you'll see a lot more ideas, most of them bad,.so you need to be able to filter them.one of the biggest dangers of not using the organic method is the.example of the organic method.  organic ideas feel like inspirations..there are a lot of stories about successful startups that began.when the founders had what seemed a crazy idea but "just knew" it.was promising.  when you feel that about an idea you've had while.trying to come up with startup ideas, you're probably mistaken.when searching for ideas, look in areas where you have some expertise..if you're a database expert, don't build a chat app for teenagers.(unless you're also a teenager).  maybe it's a good idea, but you.can't trust your judgment about that, so ignore it.  there have to.be other ideas that involve databases, and whose quality you can.judge.  do you find it hard to come up with good ideas involving.databases?  that's because your expertise raises your standards..your ideas about chat apps are just as bad, but you're giving.yourself a dunning-kruger pass in that domain.the place to start looking for ideas is things you need.  there.must be things you need..[14]one good trick is to ask yourself whether in your previous job you.ever found yourself saying "why doesn't someone make x?  if someone.made x we'd buy it in a second." if you can think of any x people.said that about, you probably have an idea.  you know there's demand,.and people don't say that about things that are impossible to build.more generally, try asking yourself whether there's something unusual.about you that makes your needs different from most other people's..you're probably not the only one.  it's especially good if you're.different in a way people will increasingly be.if you're changing ideas, one unusual thing about you is the idea.you'd previously been working on.  did you discover any needs while.working on it?  several well-known startups began this way.  hotmail.began as something its founders wrote to talk about their previous.startup idea while they were working at their day jobs..[15]a particularly promising way to be unusual is to be young.  some.of the most valuable new ideas take root first among people in their.teens and early twenties.  and while young founders are at a.disadvantage in some respects, they're the only ones who really.understand their peers.  it would have been very hard for someone.who wasn't a college student to start facebook.  so if you're a.young founder (under 23 say), are there things you and your friends.would like to do that current technology won't let you?the next best thing to an unmet need of your own is an unmet need.of someone else.  try talking to everyone you can about the gaps.they find in the world.  what's missing?  what would they like to.do that they can't?  what's tedious or annoying, particularly in.their work?  let the conversation get general; don't be trying too.hard to find startup ideas.  you're just looking for something to.spark a thought.  maybe you'll notice a problem they didn't consciously.realize they had, because you know how to solve it.when you find an unmet need that isn't your own, it may be somewhat.blurry at first.  the person who needs something may not know exactly.what they need.  in that case i often recommend that founders act.like consultants — that they do what they'd do if they'd been.retained to solve the problems of this one user.  people's problems.are similar enough that nearly all the code you write this way will.be reusable, and whatever isn't will be a small price to start out.certain that you've reached the bottom of the well..[16]one way to ensure you do a good job solving other people's problems.is to make them your own.  when rajat suri of e la carte decided.to write software for restaurants, he got a job as a waiter to learn.how restaurants worked.  that may seem like taking things to extremes,.but startups are extreme.  we love it when founders do such things.in fact, one strategy i recommend to people who need a new idea is.not merely to turn off their schlep and unsexy filters, but to seek.out ideas that are unsexy or involve schleps.  don't try to start.twitter.  those ideas are so rare that you can't find them by looking.for them.  make something unsexy that people will pay you for.a good trick for bypassing the schlep and to some extent the unsexy.filter is to ask what you wish someone else would build, so that.you could use it.  what would you pay for right now?since startups often garbage-collect broken companies and industries,.it can be a good trick to look for those that are dying, or deserve.to, and try to imagine what kind of company would profit from their.demise.  for example, journalism is in free fall at the moment..but there may still be money to be made from something like journalism..what sort of company might cause people in the future to say "this.replaced journalism" on some axis?but imagine asking that in the future, not now.  when one company.or industry replaces another, it usually comes in from the side..so don't look for a replacement for x; look for something that.people will later say turned out to be a replacement for x.  and.be imaginative about the axis along which the replacement occurs..traditional journalism, for example, is a way for readers to get.information and to kill time, a way for writers to make money and.to get attention, and a vehicle for several different types of.advertising.  it could be replaced on any of these axes (it has.already started to be on most).when startups consume incumbents, they usually start by serving.some small but important market that the big players ignore.  it's.particularly good if there's an admixture of disdain in the big.players' attitude, because that often misleads them.  for example,.after steve wozniak built the computer that became the apple i, he.felt obliged to give his then-employer hewlett-packard the option.to produce it.  fortunately for him, they turned it down, and one.of the reasons they did was that it used a tv for a monitor, which.seemed intolerably déclassé to a high-end hardware company like hp.was at the time..[17]are there groups of.scruffy.but sophisticated users like the early.microcomputer "hobbyists" that are currently being ignored by the.big players?  a startup with its sights set on bigger things can.often capture a small market easily by expending an effort that.wouldn't be justified by that market alone.similarly, since the most successful startups generally ride some.wave bigger than themselves, it could be a good trick to look for.waves and ask how one could benefit from them.  the prices of gene.sequencing and 3d printing are both experiencing moore's law-like.declines.  what new things will we be able to do in the new world.we'll have in a few years?  what are we unconsciously ruling out.as impossible that will soon be possible?.organicbut talking about looking explicitly for waves makes it clear that.such recipes are plan b for getting startup ideas.  looking for.waves is essentially a way to simulate the organic method.  if.you're at the leading edge of some rapidly changing field, you don't.have to look for waves; you are the wave.finding startup ideas is a subtle business, and that's why most.people who try fail so miserably.  it doesn't work well simply to.try to think of startup ideas.  if you do that, you get bad ones.that sound dangerously plausible.  the best approach is more indirect:.if you have the right sort of background, good startup ideas will.seem obvious to you.  but even then, not immediately.  it takes.time to come across situations where you notice something missing..and often these gaps won't seem to be ideas for companies, just.things that would be interesting to build.  which is why it's good.to have the time and the inclination to build things just because.they're interesting.live in the future and build what seems interesting.  strange as.it sounds, that's the real recipe..notes[1].this form of bad idea has been around as long as the web.  it.was common in the 1990s, except then people who had it used to say.they were going to create a portal for x instead of a social network.for x.  structurally the idea is stone soup: you post a sign saying."this is the place for people interested in x," and all those people.show up and you make money from them.  what lures founders into.this sort of idea are statistics about the millions of people who.might be interested in each type of x.  what they forget is that.any given person might have 20 affinities by this standard, and no.one is going to visit 20 different communities regularly.[2].i'm not saying, incidentally, that i know for sure a social.network for pet owners is a bad idea.  i know it's a bad idea the.way i know randomly generated dna would not produce a viable organism..the set of plausible sounding startup ideas is many times larger.than the set of good ones, and many of the good ones don't even.sound that plausible.  so if all you know about a startup idea is.that it sounds plausible, you have to assume it's bad.[3].more precisely, the users' need has to give them sufficient.activation energy to start using whatever you make, which can vary.a lot.  for example, the activation energy for enterprise software.sold through traditional channels is very high, so you'd have to.be a lot better to get users to switch.  whereas the activation.energy required to switch to a new search engine is low.  which in.turn is why search engines are so much better than enterprise.software.[4].this gets harder as you get older.  while the space of ideas.doesn't have dangerous local maxima, the space of careers does..there are fairly high walls between most of the paths people take.through life, and the older you get, the higher the walls become.[5].it was also obvious to us that the web was going to be a big.deal.  few non-programmers grasped that in 1995, but the programmers.had seen what guis had done for desktop computers.[6].maybe it would work to have this second self keep a journal,.and each night to make a brief entry listing the gaps and anomalies.you'd noticed that day.  not startup ideas, just the raw gaps and.anomalies.[7].sam altman points out that taking time to come up with an.idea is not merely a better strategy in an absolute sense, but also.like an undervalued stock in that so few founders do it.there's comparatively little competition for the best ideas, because.few founders are willing to put in the time required to notice them..whereas there is a great deal of competition for mediocre ideas,.because when people make up startup ideas, they tend to make up the.same ones.[8].for the computer hardware and software companies, summer jobs.are the first phase of the recruiting funnel.  but if you're good.you can skip the first phase.  if you're good you'll have no trouble.getting hired by these companies when you graduate, regardless of.how you spent your summers.[9].the empirical evidence suggests that if colleges want to help.their students start startups, the best thing they can do is leave.them alone in the right way.[10].i'm speaking here of it startups; in biotech things are different.[11].this is an instance of a more general rule: focus on users,.not competitors.  the most important information about competitors.is what you learn via users anyway.[12].in practice most successful startups have elements of both..and you can describe each strategy in terms of the other by adjusting.the boundaries of what you call the market.  but it's useful to.consider these two ideas separately.[13].i almost hesitate to raise that point though.  startups are.businesses; the point of a business is to make money; and with that.additional constraint, you can't expect you'll be able to spend all.your time working on what interests you most.[14].the need has to be a strong one.  you can retroactively.describe any made-up idea as something you need.  but do you really.need that recipe site or local event aggregator as much as drew.houston needed dropbox, or brian chesky and joe gebbia needed airbnb?quite often at yc i find myself asking founders "would you use this.thing yourself, if you hadn't written it?" and you'd be surprised.how often the answer is no.[15].paul buchheit points out that trying to sell something bad.can be a source of better ideas:"the best technique i've found for dealing with yc companies that.have bad ideas is to tell them to go sell the product asap (before.wasting time building it). not only do they learn that nobody.wants what they are building, they very often come back with a.real idea that they discovered in the process of trying to sell.the bad idea."[16].here's a recipe that might produce the next facebook, if.you're college students.  if you have a connection to one of the.more powerful sororities at your school, approach the queen bees.thereof and offer to be their personal it consultants, building.anything they could imagine needing in their social lives that.didn't already exist.  anything that got built this way would be.very promising, because such users are not just the most demanding.but also the perfect point to spread from.i have no idea whether this would work.[17].and the reason it used a tv for a monitor is that steve wozniak.started out by solving his own problems.  he, like most of his.peers, couldn't afford a monitor.thanks to sam altman, mike arrington, paul buchheit, john collison,.patrick collison, garry tan, and harj taggar for reading drafts of.this, and marc andreessen, joe gebbia, reid hoffman, shel kaphan,.mike moritz and kevin systrom for answering my questions about.startup history.japanese translationitalian translationspanish translation<eot><sot>the hardware renaissance.want to start a startup?  get funded by.y combinator..october 2012
one advantage of y combinator's early, broad focus is that we.see trends before most other people.  and one of the most conspicuous.trends in the last batch was the large number of hardware startups..out of 84 companies, 7 were making hardware.  on the whole.they've done better than the companies that weren't.they've faced resistance from investors of course.  investors have.a deep-seated bias against hardware.  but investors' opinions are.a trailing indicator.  the best founders are better at seeing the.future than the best investors, because the best founders are making.it.there is no one single force driving this trend.  hardware does.well on crowdfunding sites.  the spread of tablets makes it.possible to build new things controlled.by and even incorporating.them.  electric motors.have improved..wireless connectivity of various types can now be taken for granted..it's getting more straightforward to get things manufactured..arduinos, 3d printing, laser cutters, and more accessible cnc milling are making hardware easier to prototype..retailers are less of a bottleneck as customers increasingly buy.online.one question i can answer is why hardware is suddenly cool..it always was cool..physical things are great.  they just haven't.been as great a way to start a rapidly growing business.as software.  but that rule may not be permanent.  it's not even.that old; it only dates from about 1990.  maybe the advantage.of software will turn out to have been temporary.  hackers love to.build hardware, and customers love to buy it.  so if the ease of.shipping hardware even approached the ease of shipping software,.we'd see a lot more hardware startups.it wouldn't be the first time something was a bad idea till it.wasn't.  and it wouldn't be the first time investors learned that.lesson from founders.so if you want to work on hardware, don't be deterred from doing.it because you worry investors will discriminate against you.  and.in particular, don't be deterred from applying to y combinator.with a hardware idea, because we're especially interested in hardware.startups.we know there's room for the next steve jobs..but there's almost certainly also room for the first.<your name here>..thanks to sam altman, trevor blackwell, david cann, sanjay dastoor,.paul gerhardt, cameron robertson, harj taggar, and garry tan for reading drafts of this.a hardware renaissance while software eats the world?<eot><sot>startup = growth.want to start a startup?  get funded by.y combinator..september 2012
a startup is a company designed to grow fast.  being newly founded.does not in itself make a company a startup.  nor is it necessary.for a startup to work on technology, or take venture funding, or.have some sort of "exit."  the only essential thing is growth..everything else we associate with startups follows from growth.if you want to start one it's important to understand that. startups.are so hard that you can't be pointed off to the side and hope to.succeed.  you have to know that growth is what you're after.  the.good news is, if you get growth, everything else tends to fall into.place.  which means you can use growth like a compass to make almost.every decision you face..redwoodslet's start with a distinction that should be obvious but is often.overlooked: not every newly founded company is a startup.  millions.of companies are started every year in the us.  only a tiny fraction.are startups.  most are service businesses — restaurants, barbershops,.plumbers, and so on.  these are not startups, except in a few unusual.cases.  a barbershop isn't designed to grow fast.  whereas a search.engine, for example, is.when i say startups are designed to grow fast, i mean it in two.senses.  partly i mean designed in the sense of intended, because.most startups fail.  but i also mean startups are different by.nature, in the same way a redwood seedling has a different destiny.from a bean sprout.that difference is why there's a distinct word, "startup," for.companies designed to grow fast.  if all companies were essentially.similar, but some through luck or the efforts of their founders.ended up growing very fast, we wouldn't need a separate word.  we.could just talk about super-successful companies and less successful.ones.  but in fact startups do have a different sort of dna from.other businesses.  google is not just a barbershop whose founders.were unusually lucky and hard-working.  google was different from.the beginning.to grow rapidly, you need to make something you can sell to a big.market.  that's the difference between google and a barbershop.  a.barbershop doesn't scale.for a company to grow really big, it must (a) make something lots.of people want, and (b) reach and serve all those people.  barbershops.are doing fine in the (a) department.  almost everyone needs their.hair cut.  the problem for a barbershop, as for any retail.establishment, is (b).  a barbershop serves customers in person,.and few will travel far for a haircut.  and even if they did, the.barbershop couldn't accomodate them..[1]writing software is a great way to solve (b), but you can still end.up constrained in (a).  if you write software to teach tibetan to.hungarian speakers, you'll be able to reach most of the people who.want it, but there won't be many of them.   if you make software.to teach english to chinese speakers, however, you're in startup.territory.most businesses are tightly constrained in (a) or (b).  the distinctive.feature of successful startups is that they're not..ideasit might seem that it would always be better to start a startup.than an ordinary business.  if you're going to start a company, why.not start the type with the most potential?  the catch is that this.is a (fairly) efficient market.   if you write software to teach.tibetan to hungarians, you won't have much competition.  if you.write software to teach english to chinese speakers, you'll face.ferocious competition, precisely because that's such a larger prize..[2]the constraints that limit ordinary companies also protect them..that's the tradeoff.  if you start a barbershop, you only have to.compete with other local barbers.  if you start a search engine you.have to compete with the whole world.the most important thing that the constraints on a normal business.protect it from is not competition, however, but the difficulty of.coming up with new ideas.  if you open a bar in a particular.neighborhood, as well as limiting your potential and protecting you.from competitors, that geographic constraint also helps define your.company.  bar + neighborhood is a sufficient idea for a small.business.  similarly for companies constrained in (a).  your niche.both protects and defines you.whereas if you want to start a startup, you're probably going to.have to think of something fairly novel.  a startup has to make.something it can deliver to a large market, and ideas of that type.are so valuable that all the obvious ones are already taken.that space of ideas has been so thoroughly picked over that a startup.generally has to work on something everyone else has overlooked..i was going to write that one has to make a conscious effort to.find ideas everyone else has overlooked.  but that's not how most.startups get started.  usually successful startups happen because.the founders are sufficiently different from other people that ideas.few others can see seem obvious to them.  perhaps later they step.back and notice they've found an idea in everyone else's blind spot,.and from that point make a deliberate effort to stay there..[3].but at the moment when successful startups get started, much of the.innovation is unconscious.what's different about successful founders is that they can see.different problems.  it's a particularly good combination both to.be good at technology and to face problems that can be solved by.it, because technology changes so rapidly that formerly bad ideas.often become good without anyone noticing.  steve wozniak's problem.was that he wanted his own computer.  that was an unusual problem.to have in 1975.  but technological change was about to make it a.much more common one.  because he not only wanted a computer but.knew how to build them, wozniak was able to make himself one.  and.the problem he solved for himself became one that apple solved for.millions of people in the coming years.  but by the time it was.obvious to ordinary people that this was a big market, apple was.already established.google has similar origins.  larry page and sergey brin wanted to.search the web.  but unlike most people they had the technical.expertise both to notice that existing search engines were not as.good as they could be, and to know how to improve them.  over the.next few years their problem became everyone's problem, as the web.grew to a size where you didn't have to be a picky search expert.to notice the old algorithms weren't good enough.  but as happened.with apple, by the time everyone else realized how important search.was, google was entrenched.that's one connection between startup ideas and technology.  rapid.change in one area uncovers big, soluble problems in other areas..sometimes the changes are advances, and what they change is solubility..that was the kind of change that yielded apple; advances in chip.technology finally let steve wozniak design a computer he could.afford.  but in google's case the most important change was the.growth of the web. what changed there was not solubility but bigness.the other connection between startups and technology is that startups.create new ways of doing things, and new ways of doing things are,.in the broader sense of the word, new technology..when a startup both begins with an.idea exposed by technological change and makes a product consisting.of technology in the narrower sense (what used to be called "high.technology"), it's easy to conflate the two.  but the two connections.are distinct and in principle one could start a startup that was.neither driven by technological change, nor whose product consisted.of technology except in the broader sense..[4]ratehow fast does a company have to grow to be considered a startup?.there's no precise answer to that.  "startup" is a pole, not a.threshold.  starting one is at first no more than a declaration of.one's ambitions.  you're committing not just to starting a company,.but to starting a fast growing one, and you're thus committing to.search for one of the rare ideas of that type.  but at first you.have no more than commitment.  starting a startup is like being an.actor in that respect.  "actor" too is a pole rather than a threshold..at the beginning of his career, an actor is a waiter who goes to.auditions.  getting work makes him a successful actor, but he doesn't.only become an actor when he's successful.so the real question is not what growth rate makes a company a.startup, but what growth rate successful startups tend to have..for founders that's more than a theoretical question, because it's.equivalent to asking if they're on the right path.the growth of a successful startup usually has three phases:.there's an initial period of slow or no growth while the startup.tries to figure out what it's doing. as the startup figures out how to make something lots of people.want and how to reach those people, there's a period of rapid.growth. eventually a successful startup will grow into a big company..growth will slow, partly due to internal limits and partly because.the company is starting to bump up against the limits of the.markets it serves..[5].together these three phases produce an s-curve.  the phase whose.growth defines the startup is the second one, the ascent.  its.length and slope determine how big the company will be.the slope is the company's growth rate.  if there's one number every.founder should always know, it's the company's growth rate.  that's.the measure of a startup.  if you don't know that number, you don't.even know if you're doing well or badly.when i first meet founders and ask what their growth rate is,.sometimes they tell me "we get about a hundred new customers a.month."  that's not a rate.  what matters is not the absolute number.of new customers, but the ratio of new customers to existing ones..if you're really getting a constant number of new customers every.month, you're in trouble, because that means your growth rate is.decreasing.during y combinator we measure growth rate per week, partly because.there is so little time before demo day, and partly because startups.early on need frequent feedback from their users to tweak what.they're doing..[6]a good growth rate during yc is 5-7% a week.  if you can hit 10% a.week you're doing exceptionally well.  if you can only manage 1%,.it's a sign you haven't yet figured out what you're doing.the best thing to measure the growth rate of is revenue.  the next.best, for startups that aren't charging initially, is active users..that's a reasonable proxy for revenue growth because whenever the.startup does start trying to make money, their revenues will probably.be a constant multiple of active users..[7].compasswe usually advise startups to pick a growth rate they think they.can hit, and then just try to hit it every week.  the key word here.is "just." if they decide to grow at 7% a week and they hit that.number, they're successful for that week.  there's nothing more.they need to do.  but if they don't hit it, they've failed in the.only thing that mattered, and should be correspondingly alarmed.programmers will recognize what we're doing here.  we're turning.starting a startup into an optimization problem.  and anyone who.has tried optimizing code knows how wonderfully effective that sort.of narrow focus can be.  optimizing code means taking an existing.program and changing it to use less of something, usually time or.memory.  you don't have to think about what the program should do,.just make it faster.  for most programmers this is very satisfying.work.  the narrow focus makes it a sort of puzzle, and you're.generally surprised how fast you can solve it.focusing on hitting a growth rate reduces the otherwise bewilderingly.multifarious problem of starting a startup to a single problem..you can use that target growth rate to make all your decisions for.you; anything that gets you the growth you need is ipso facto right..should you spend two days at a conference?  should you hire another.programmer?  should you focus more on marketing?  should you spend.time courting some big customer?  should you add x feature? whatever.gets you your target growth rate..[8]judging yourself by weekly growth doesn't mean you can look no more.than a week ahead.  once you experience the pain of missing your.target one week (it was the only thing that mattered, and you failed.at it), you become interested in anything that could spare you such.pain in the future.  so you'll be willing for example to hire another.programmer, who won't contribute to this week's growth but perhaps.in a month will have implemented some new feature that will get you.more users.   but only if (a) the distraction of hiring someone.won't make you miss your numbers in the short term, and (b) you're.sufficiently worried about whether you can keep hitting your numbers.without hiring someone new.it's not that you don't think about the future, just that you think.about it no more than necessary.in theory this sort of hill-climbing could get a startup into.trouble.  they could end up on a local maximum.  but in practice.that never happens.  having to hit a growth number every week forces.founders to act, and acting versus not acting is the high bit of.succeeding.  nine times out of ten, sitting around strategizing is.just a form of procrastination.  whereas founders' intuitions about.which hill to climb are usually better than they realize.  plus the.maxima in the space of startup ideas are not spiky and isolated..most fairly good ideas are adjacent to even better ones.the fascinating thing about optimizing for growth is that it can.actually discover startup ideas.  you can use the need for growth.as a form of evolutionary pressure.  if you start out with some.initial plan and modify it as necessary to keep hitting, say, 10%.weekly growth, you may end up with a quite different company than.you meant to start.  but anything that grows consistently at 10% a.week is almost certainly a better idea than you started with.there's a parallel here to small businesses.  just as the constraint.of being located in a particular neighborhood helps define a bar,.the constraint of growing at a certain rate can help define a.startup.you'll generally do best to follow that constraint wherever it leads.rather than being influenced by some initial vision, just as a.scientist is better off following the truth wherever it leads rather.than being influenced by what he wishes were the case.  when richard.feynman said that the imagination of nature was greater than the.imagination of man, he meant that if you just keep following the.truth you'll discover cooler things than you could ever have made.up. for startups, growth is a constraint much like truth. every.successful startup is at least partly a product of the imagination.of growth..[9].valueit's hard to find something that grows consistently at several.percent a week, but if you do you may have found something surprisingly.valuable.  if we project forward we see why..weeklyyearly.1%1.7x.2%2.8x.5%12.6x.7%33.7x.10%142.0x.a company that grows at 1% a week will grow 1.7x a year, whereas a.company that grows at 5% a week will grow 12.6x.  a company making.$1000 a month (a typical number early in yc) and growing at 1% a.week will 4 years later be making $7900 a month, which is less than.a good programmer makes in salary in silicon valley.  a startup.that grows at 5% a week will in 4 years be making $25 million a.month..[10]our ancestors must rarely have encountered cases of exponential.growth, because our intuitions are no guide here.  what happens.to fast growing startups tends to surprise even the founders.small variations in growth rate produce qualitatively different.outcomes.  that's why there's a separate word for startups, and why.startups do things that ordinary companies don't, like raising money.and getting acquired.  and, strangely enough, it's also why they.fail so frequently.considering how valuable a successful startup can become, anyone.familiar with the concept of expected value would be surprised if.the failure rate weren't high.  if a successful startup could make.a founder $100 million, then even if the chance of succeeding were.only 1%, the expected value of starting one would be $1 million..and the probability of a group of sufficiently smart and determined.founders succeeding on that scale might be significantly over 1%..for the right people — e.g. the young bill gates — the probability.might be 20% or even 50%.  so it's not surprising that so many want.to take a shot at it.  in an efficient market, the number of failed.startups should be proportionate to the size of the successes.  and.since the latter is huge the former should be too..[11]what this means is that at any given time, the great majority of.startups will be working on something that's never going to go.anywhere, and yet glorifying their doomed efforts with the grandiose.title of "startup."this doesn't bother me.  it's the same with other high-beta vocations,.like being an actor or a novelist.  i've long since gotten used to.it.  but it seems to bother a lot of people, particularly those.who've started ordinary businesses.  many are annoyed that these.so-called startups get all the attention, when hardly any of them.will amount to anything.if they stepped back and looked at the whole picture they might be.less indignant.  the mistake they're making is that by basing their.opinions on anecdotal evidence they're implicitly judging by the.median rather than the average.  if you judge by the median startup,.the whole concept of a startup seems like a fraud.  you have to.invent a bubble to explain why founders want to start them or.investors want to fund them.  but it's a mistake to use the median.in a domain with so much variation.  if you look at the average.outcome rather than the median, you can understand why investors.like them, and why, if they aren't median people, it's a rational.choice for founders to start them..dealswhy do investors like startups so much?  why are they so hot to.invest in photo-sharing apps, rather than solid money-making.businesses?  not only for the obvious reason.the test of any investment is the ratio of return to risk.  startups.pass that test because although they're appallingly risky, the.returns when they do succeed are so high.  but that's not the only.reason investors like startups.  an ordinary slower-growing business.might have just as good a ratio of return to risk, if both were.lower.  so why are vcs interested only in high-growth companies?.the reason is that they get paid by getting their capital back,.ideally after the startup ipos, or failing that when it's acquired.the other way to get returns from an investment is in the form of.dividends.  why isn't there a parallel vc industry that invests in.ordinary companies in return for a percentage of their profits?.because it's too easy for people who control a private company to.funnel its revenues to themselves (e.g. by buying overpriced.components from a supplier they control) while making it look like.the company is making little profit.  anyone who invested in private.companies in return for dividends would have to pay close attention.to their books.the reason vcs like to invest in startups is not simply the returns,.but also because such investments are so easy to oversee.  the.founders can't enrich themselves without also enriching the investors..[12]why do founders want to take the vcs' money?  growth, again.  the.constraint between good ideas and growth operates in both directions..it's not merely that you need a scalable idea to grow.  if you have.such an idea and don't grow fast enough, competitors will.  growing.too slowly is particularly dangerous in a business with network.effects, which the best startups usually have to some degree.almost every company needs some amount of funding to get started..but startups often raise money even when they are or could be.profitable.  it might seem foolish to sell stock in a profitable.company for less than you think it will later be worth, but it's.no more foolish than buying insurance.  fundamentally that's how.the most successful startups view fundraising.  they could grow the.company on its own revenues, but the extra money and help supplied.by vcs will let them grow even faster.  raising money lets you.choose your growth rate.money to grow faster is always at the command of the most successful.startups, because the vcs need them more than they need the vcs..a profitable startup could if it wanted just grow on its own revenues..growing slower might be slightly dangerous, but chances are it.wouldn't kill them.  whereas vcs need to invest in startups, and.in particular the most successful startups, or they'll be out of.business.  which means that any sufficiently promising startup will.be offered money on terms they'd be crazy to refuse.  and yet because.of the scale of the successes in the startup business, vcs can still.make money from such investments.  you'd have to be crazy to believe.your company was going to become as valuable as a high growth rate.can make it, but some do.pretty much every successful startup will get acquisition offers.too.  why?  what is it about startups that makes other companies.want to buy them?.[13]fundamentally the same thing that makes everyone else want the stock.of successful startups: a rapidly growing company is valuable.  it's.a good thing ebay bought paypal, for example, because paypal is now.responsible for 43% of their sales and probably more of their growth.but acquirers have an additional reason to want startups.  a rapidly.growing company is not merely valuable, but dangerous.  if it keeps.expanding, it might expand into the acquirer's own territory.  most.product acquisitions have some component of fear.  even if an.acquirer isn't threatened by the startup itself, they might be.alarmed at the thought of what a competitor could do with it.  and.because startups are in this sense doubly valuable to acquirers,.acquirers will often pay more than an ordinary investor would..[14].understandthe combination of founders, investors, and acquirers forms a natural.ecosystem.  it works so well that those who don't understand it are.driven to invent conspiracy theories to explain how neatly things.sometimes turn out.  just as our ancestors did to explain the.apparently too neat workings of the natural world.  but there is.no secret cabal making it all work.if you start from the mistaken assumption that instagram was.worthless, you have to invent a secret boss to force mark zuckerberg.to buy it.  to anyone who knows mark zuckerberg, that is the reductio.ad absurdum of the initial assumption.  the reason he bought instagram.was that it was valuable and dangerous, and what made it so was.growth.if you want to understand startups, understand growth.  growth.drives everything in this world.  growth is why startups usually.work on technology — because ideas for fast growing companies are.so rare that the best way to find new ones is to discover those.recently made viable by change, and technology is the best source.of rapid change.  growth is why it's a rational choice economically.for so many founders to try starting a startup: growth makes the.successful companies so valuable that the expected value is high.even though the risk is too.  growth is why vcs want to invest in.startups: not just because the returns are high but also because.generating returns from capital gains is easier to manage than.generating returns from dividends.  growth explains why the most.successful startups take vc money even if they don't need to: it.lets them choose their growth rate.  and growth explains why.successful startups almost invariably get acquisition offers.  to.acquirers a fast-growing company is not merely valuable but dangerous.too.it's not just that if you want to succeed in some domain, you have.to understand the forces driving it.  understanding growth is what.starting a startup consists of.  what you're really doing (and.to the dismay of some observers, all you're really doing) when you.start a startup is committing to solve a harder type of problem.than ordinary businesses do.  you're committing to search for one.of the rare ideas that generates rapid growth.  because these ideas.are so valuable, finding one is hard.  the startup is the embodiment.of your discoveries so far.  starting a startup is thus very much.like deciding to be a research scientist: you're not committing to.solve any specific problem; you don't know for sure which problems.are soluble; but you're committing to try to discover something no.one knew before.  a startup founder is in effect an economic research.scientist.  most don't discover anything that remarkable, but some.discover relativity..notes[1].strictly speaking it's not lots of customers you need but a big.market, meaning a high product of number of customers times how.much they'll pay.  but it's dangerous to have too few customers.even if they pay a lot, or the power that individual customers have.over you could turn you into a de facto consulting firm.  so whatever.market you're in, you'll usually do best to err on the side of.making the broadest type of product for it.[2].one year at startup school david heinemeier hansson encouraged.programmers who wanted to start businesses to use a restaurant as.a model.  what he meant, i believe, is that it's fine to start.software companies constrained in (a) in the same way a restaurant.is constrained in (b).  i agree.  most people should not try to.start startups.[3].that sort of stepping back is one of the things we focus on at.y combinator.  it's common for founders to have discovered something.intuitively without understanding all its implications.  that's.probably true of the biggest discoveries in any field.[4].i got it wrong in "how to make wealth" when i said that a.startup was a small company that takes on a hard technical.problem.  that is the most common recipe but not the only one.[5].in principle companies aren't limited by the size of the markets.they serve, because they could just expand into new markets.  but.there seem to be limits on the ability of big companies to do that..which means the slowdown that comes from bumping up against the.limits of one's markets is ultimately just another way in which.internal limits are expressed.it may be that some of these limits could be overcome by changing.the shape of the organization — specifically by sharding it.[6].this is, obviously, only for startups that have already launched.or can launch during yc.  a startup building a new database will.probably not do that.  on the other hand, launching something small.and then using growth rate as evolutionary pressure is such a.valuable technique that any company that could start this way.probably should.[7].if the startup is taking the facebook/twitter route and building.something they hope will be very popular but from which they don't.yet have a definite plan to make money, the growth rate has to be.higher, even though it's a proxy for revenue growth, because such.companies need huge numbers of users to succeed at all.beware too of the edge case where something spreads rapidly but the.churn is high as well, so that you have good net growth till you run.through all the potential users, at which point it suddenly stops.[8].within yc when we say it's ipso facto right to do whatever gets.you growth, it's implicit that this excludes trickery like buying.users for more than their lifetime value, counting users as active.when they're really not, bleeding out invites at a regularly.increasing rate to manufacture a perfect growth curve, etc.  even.if you were able to fool investors with such tricks, you'd ultimately.be hurting yourself, because you're throwing off your own compass.[9].which is why it's such a dangerous mistake to believe that.successful startups are simply the embodiment of some brilliant.initial idea.  what you're looking for initially is not so much a.great idea as an idea that could evolve into a great one.   the.danger is that promising ideas are not merely blurry versions of.great ones.  they're often different in kind, because the early.adopters you evolve the idea upon have different needs from the.rest of the market.  for example, the idea that evolves into facebook.isn't merely a subset of facebook; the idea that evolves into.facebook is a site for harvard undergrads.[10].what if a company grew at 1.7x a year for a really long time?.could it not grow just as big as any successful startup?  in principle.yes, of course. if our hypothetical company making $1000 a month.grew at 1% a week for 19 years, it would grow as big as a company.growing at 5% a week for 4 years.  but while such trajectories may.be common in, say, real estate development, you don't see them much.in the technology business.  in technology, companies that grow.slowly tend not to grow as big.[11].any expected value calculation varies from person to person.depending on their utility function for money.  i.e. the first.million is worth more to most people than subsequent millions.  how.much more depends on the person.  for founders who are younger or.more ambitious the utility function is flatter.  which is probably.part of the reason the founders of the most successful startups of.all tend to be on the young side.[12].more precisely, this is the case in the biggest winners, which.is where all the returns come from.  a startup founder could pull.the same trick of enriching himself at the company's expense by.selling them overpriced components.  but it wouldn't be worth it.for the founders of google to do that.  only founders of failing.startups would even be tempted, but those are writeoffs from the.vcs' point of view anyway.[13].acquisitions fall into two categories: those where the acquirer.wants the business, and those where the acquirer just wants the.employees.  the latter type is sometimes called an hr acquisition..though nominally acquisitions and sometimes on a scale that has a.significant effect on the expected value calculation for potential.founders, hr acquisitions are viewed by acquirers as more akin to.hiring bonuses.[14].i once explained this to some founders who had recently arrived.from russia.  they found it novel that if you threatened a company.they'd pay a premium for you.  "in russia they just kill you," they.said, and they were only partly joking.  economically, the fact.that established companies can't simply eliminate new competitors.may be one of the most valuable aspects of the rule of law.  and.so to the extent we see incumbents suppressing competitors via.regulations or patent suits, we should worry, not because it's a.departure from the rule of law per se but from what the rule of law.is aiming at..thanks to sam altman, marc andreessen, paul buchheit, patrick.collison, jessica livingston, geoff ralston, and harj taggar for.reading drafts of this.arabic translationestonian translationportuguese translationitalian translation<eot><sot>black swan farming.want to start a startup?  get funded by.y combinator..september 2012
i've done several types of work over the years but i don't know.another as counterintuitive as startup investing.the two most important things to understand about startup investing,.as a business, are (1) that effectively all the returns are.concentrated in a few big winners, and (2) that the best ideas look.initially like bad ideas.the first rule i knew intellectually, but didn't really grasp till.it happened to us.  the total value of the companies we've funded.is around 10 billion, give or take a few.  but just two companies,.dropbox and airbnb, account for about three quarters of it.in startups, the big winners are big to a degree that violates our.expectations about variation.  i don't know whether these expectations.are innate or learned, but whatever the cause, we are just not.prepared for the 1000x variation in outcomes that one finds in.startup investing.that yields all sorts of strange consequences.  for example, in.purely financial terms, there is probably at most one company in.each yc batch that will have a significant effect on our returns,.and the rest are just a cost of doing business..[1].i haven't.really assimilated that fact, partly because it's so counterintuitive,.and partly because we're not doing this just for financial reasons;.yc would be a pretty lonely place if we only had one company per.batch.  and yet it's true.to succeed in a domain that violates your intuitions, you need to.be able to turn them off the way a pilot does when flying through.clouds..[2].you need to do what you know intellectually to be.right, even though it feels wrong.it's a constant battle for us.  it's hard to make ourselves take.enough risks. when you interview a startup and think "they seem.likely to succeed," it's hard not to fund them.  and yet, financially.at least, there is only one kind of success: they're either going.to be one of the really big winners or not, and if not it doesn't.matter whether you fund them, because even if they succeed the.effect on your returns will be insignificant.  in the same day of.interviews you might meet some smart 19 year olds who aren't even.sure what they want to work on. their chances of succeeding seem.small.  but again, it's not their chances of succeeding that matter.but their chances of succeeding really big.  the probability that.any group will succeed really big is microscopically small, but the.probability that those 19 year olds will might be higher than that.of the other, safer group.the probability that a startup will make it big is not simply a.constant fraction of the probability that they will succeed at all..if it were, you could fund everyone who seemed likely to succeed.at all, and you'd get that fraction of big hits.  unfortunately.picking winners is harder than that.  you have to ignore the elephant.in front of you, the likelihood they'll succeed, and focus instead.on the separate and almost invisibly intangible question of whether.they'll succeed really big.harderthat's made harder by the fact that the best startup ideas seem at.first like bad ideas.  i've written about this before: if a good.idea were obviously good, someone else would already have done it..so the most successful founders tend to work on ideas that few.beside them realize are good.  which is not that far from a description.of insanity, till you reach the point where you see results.the first time peter thiel spoke at yc he drew a venn diagram that.illustrates the situation perfectly.  he drew two intersecting.circles, one labelled "seems like a bad idea" and the other "is a.good idea."  the intersection is the sweet spot for startups.this concept is a simple one and yet seeing it as a venn diagram.is illuminating.  it reminds you that there is an intersection—that.there are good ideas that seem bad.  it also reminds you that the.vast majority of ideas that seem bad are bad.the fact that the best ideas seem like bad ideas makes it even.harder to recognize the big winners.  it means the probability of.a startup making it really big is not merely not a constant fraction.of the probability that it will succeed, but that the startups with.a high probability of the former will seem to have a disproportionately.low probability of the latter.history tends to get rewritten by big successes, so that in retrospect.it seems obvious they were going to make it big.  for that reason.one of my most valuable memories is how lame facebook sounded to.me when i first heard about it.  a site for college students to.waste time?  it seemed the perfect bad idea: a site (1) for a niche.market (2) with no money (3) to do something that didn't matter.one could have described microsoft and apple in exactly the same.terms..[3]harder stillwait, it gets worse.  you not only have to solve this hard problem,.but you have to do it with no indication of whether you're succeeding..when you pick a big winner, you won't know it for two years.meanwhile, the one thing you can measure is dangerously.misleading.  the one thing we can track precisely is how well the.startups in each batch do at fundraising after demo day.  but we.know that's the wrong metric.  there's no correlation between the.percentage of startups that raise money and the metric that does.matter financially, whether that batch of startups contains a big.winner or not.except an inverse one.  that's the scary thing: fundraising is not.merely a useless metric, but positively misleading.  we're in a.business where we need to pick unpromising-looking outliers, and.the huge scale of the successes means we can afford to spread our.net very widely.  the big winners could generate 10,000x returns..that means for each big winner we could pick a thousand companies.that returned nothing and still end up 10x ahead.if we ever got to the point where 100% of the startups we funded.were able to raise money after demo day, it would almost certainly.mean we were being too conservative..[4]it takes a conscious effort not to do that too.  after 15 cycles.of preparing startups for investors and then watching how they do,.i can now look at a group we're interviewing through demo day.investors' eyes.  but those are the wrong eyes to look through!we can afford to take at least 10x as much risk as demo day investors..and since risk is usually proportionate to reward, if you can afford.to take more risk you should.  what would it mean to take 10x more.risk than demo day investors?  we'd have to be willing to fund 10x.more startups than they would.  which means that even if we're.generous to ourselves and assume that yc can on average triple a.startup's expected value, we'd be taking the right amount of risk.if only 30% of the startups were able to raise significant funding.after demo day.i don't know what fraction of them currently raise more after demo.day.  i deliberately avoid calculating that number, because if you.start measuring something you start optimizing it, and i know it's.the wrong thing to optimize..[5].but the percentage is certainly.way over 30%.  and frankly the thought of a 30% success rate at.fundraising makes my stomach clench.  a demo day where only 30% of.the startups were fundable would be a shambles.  everyone would.agree that yc had jumped the shark. we ourselves would feel that.yc had jumped the shark.  and yet we'd all be wrong.for better or worse that's never going to be more than a thought.experiment.  we could never stand it.  how about that for.counterintuitive?  i can lay out what i know to be the right thing.to do, and still not do it.  i can make up all sorts of plausible.justifications.  it would hurt yc's brand (at least among the.innumerate) if we invested in huge numbers of risky startups that.flamed out.  it might dilute the value of the alumni network..perhaps most convincingly, it would be demoralizing for us to be.up to our chins in failure all the time.  but i know the real reason.we're so conservative is that we just haven't assimilated the fact.of 1000x variation in returns.we'll probably never be able to bring ourselves to take risks.proportionate to the returns in this business.  the best we can.hope for is that when we interview a group and find ourselves.thinking "they seem like good founders, but what are investors going.to think of this crazy idea?" we'll continue to be able to say "who.cares what investors think?"  that's what we thought about airbnb,.and if we want to fund more airbnbs we have to stay good at thinking.it.notes[1].i'm not saying that the big winners are all that matters, just.that they're all that matters financially for investors.  since.we're not doing yc mainly for financial reasons, the big winners.aren't all that matters to us.  we're delighted to have funded.reddit, for example. even though we made comparatively little from.it, reddit has had a big effect on the world, and it introduced us.to steve huffman and alexis ohanian, both of whom have become good.friends.nor do we push founders to try to become one of the big winners if.they don't want to. we didn't "swing for the fences" in our own.startup (viaweb, which was acquired for $50 million), and it would.feel pretty bogus to press founders to do something we didn't do..our rule is that it's up to the founders.  some want to take over.the world, and some just want that first few million.  but we invest.in so many companies that we don't have to sweat any one outcome..in fact, we don't have to sweat whether startups have exits at all..the biggest exits are the only ones that matter financially, and.those are guaranteed in the sense that if a company becomes big.enough, a market for its shares will inevitably arise.  since the.remaining outcomes don't have a significant effect on returns, it's.cool with us if the founders want to sell early for a small amount,.or grow slowly and never sell (i.e. become a so-called lifestyle.business), or even shut the company down.  we're sometimes disappointed.when a startup we had high hopes for doesn't do well, but this.disappointment is mostly the ordinary variety that anyone feels.when that happens.[2].without visual cues (e.g. the horizon) you can't distinguish.between gravity and acceleration.  which means if you're flying.through clouds you can't tell what the attitude of.the aircraft is.  you could feel like you're flying straight and.level while in fact you're descending in a spiral.  the solution.is to ignore what your body is telling you and listen only to your.instruments.  but it turns out to be very hard to ignore what your.body is telling you.  every pilot knows about this.problem and yet.it is still a leading cause of accidents.[3].not all big hits follow this pattern though. the reason google.seemed a bad idea was that there were already lots of search engines.and there didn't seem to be room for another.[4].a startup's success at fundraising is a function of two things:.what they're selling and how good they are at selling it.  and while.we can teach startups a lot about how to appeal to investors, even.the most convincing pitch can't sell an idea that investors don't.like.  i was genuinely worried that airbnb, for example, would not.be able to raise money after demo day.  i couldn't convince fred wilson to fund them.  they might not.have raised money at all but for the coincidence that greg mcadoo,.our contact at sequoia, was one of a handful of vcs who understood.the vacation rental business, having spent much of the previous two.years investigating it.[5].i calculated it once for the last batch before a consortium of.investors started offering investment automatically to every startup.we funded, summer 2010.  at the time it was 94% (33 of 35 companies.that tried to raise money succeeded, and one didn't try because.they were already profitable).  presumably it's lower now because.of that investment; in the old days it was raise after demo day or.die.thanks to sam altman, paul buchheit, patrick collison, jessica.livingston, geoff ralston, and harj taggar for reading drafts of.this.<eot><sot>the top of my todo list.april 2012
a palliative care nurse called bronnie ware made a list of the.biggest regrets.of the dying.  her list seems plausible.  i could see.myself — can see myself — making at least 4 of these.5 mistakes.if you had to compress them into a single piece of advice, it might.be: don't be a cog.  the 5 regrets paint a portrait of post-industrial.man, who shrinks himself into a shape that fits his circumstances,.then turns dutifully till he stops.the alarming thing is, the mistakes that produce these regrets are.all errors of omission.  you forget your dreams, ignore your family,.suppress your feelings, neglect your friends, and forget to be.happy.  errors of omission are a particularly dangerous type of.mistake, because you make them by default.i would like to avoid making these mistakes.  but how do you avoid.mistakes you make by default?  ideally you transform your life so.it has other defaults.  but it may not be possible to do that.completely. as long as these mistakes happen by default, you probably.have to be reminded not to make them.  so i inverted the 5 regrets,.yielding a list of 5 commands.don't ignore your dreams; don't work too much; say what you.think; cultivate friendships; be happy..which i then put at the top of the file i use as a todo list.japanese translation<eot><sot>writing and speaking.march 2012
i'm not a very good speaker.  i say "um" a lot. sometimes i have.to pause when i lose my train of thought.  i wish i were a better.speaker.  but i don't wish i were a better speaker like i wish i.were a better writer.  what i really want is to have good ideas,.and that's a much bigger part of being a good writer than being a.good speaker.having good ideas is most of writing well.  if you know what you're.talking about, you can say it in the plainest words and you'll be.perceived as having a good style.  with speaking it's the opposite:.having good ideas is an alarmingly small component of being a good.speaker.i first noticed this at a conference several years ago..there was another speaker who was much better than me..he had all of us roaring with laughter.  i seemed awkward and.halting by comparison.  afterward i put my talk online like i usually.do.  as i was doing it i tried to imagine what a transcript of the.other guy's talk would be like, and it was only then i realized he.hadn't said very much.maybe this would have been obvious to someone who knew more about.speaking, but it was a revelation to me how much less ideas mattered.in speaking than writing..[1]a few years later i heard a talk by someone who was not merely a.better speaker than me, but a famous speaker.  boy was he good.  so.i decided i'd pay close attention to what he said, to learn how he.did it.  after about ten sentences i found myself thinking "i don't.want to be a good speaker."being a really good speaker is not merely orthogonal to having good ideas,.but in many ways pushes you in the opposite direction.  for example,.when i give a talk, i usually write it out beforehand.  i know that's.a mistake; i know delivering a.prewritten.talk makes it harder to.engage with an audience.  the way to get the attention of an audience.is to give them your full attention, and when you're delivering.a prewritten talk, your attention is always divided between the.audience and the talk — even if you've memorized it.  if you want.to engage an audience, it's better to start with no more than an outline.of what you want to say and.ad lib the individual sentences.  but.if you do that, you might spend no more time thinking about each.sentence than it takes to say it..[2].occasionally the stimulation.of talking to a live audience makes you think of new things, but.in general this is not going to generate ideas as well as writing.does, where you can spend as long on each sentence as you want.if you rehearse a prewritten speech enough, you can get.asymptotically close to the sort of engagement you get when speaking.ad lib.  actors do.  but here again there's a tradeoff between.smoothness and ideas.  all the time you spend practicing a talk,.you could instead spend making it better.  actors don't face.that temptation, except in the rare cases where they've written the.script, but any speaker does.  before i give a talk i can usually.be found sitting in a corner somewhere with a copy printed out on.paper, trying to rehearse it in my head.  but i always end up.spending most of the time rewriting it instead.  every talk i give.ends up being given from a manuscript full of things crossed out.and rewritten.  which of course makes me um even more, because i.haven't had any time to practice the new bits..[3]depending on your audience, there are even worse tradeoffs than.these.  audiences like to be flattered; they like jokes; they like.to be swept off their feet by a vigorous stream of words.  as you.decrease the intelligence of the audience, being a good speaker is.increasingly a matter of being a good bullshitter.  that's true in.writing too of course, but the descent is steeper with talks.  any.given person is dumber as a member of an audience than as a reader..just as a speaker ad libbing can only spend as long thinking about.each sentence as it takes to say it, a person hearing a talk can.only spend as long thinking about each sentence as it takes to hear.it.  plus people in an audience are always affected by the reactions.of those around them, and the reactions that spread from person to.person in an audience are disproportionately the more brutish sort,.just as low notes travel through walls better than high ones.  every.audience is an incipient mob, and a good speaker uses that.  part.of the reason i laughed so much at the talk by the good speaker at.that conference was that everyone else did..[4]so are talks useless?  they're certainly inferior to the written.word as a source of ideas.  but that's not all talks are good for..when i go to a talk, it's usually because i'm interested in the.speaker.  listening to a talk is the closest most of us can get to.having a conversation with someone like the president, who doesn't.have time to meet individually with all the people who want to meet.him.talks are also good at motivating me to do things.  it's probably.no coincidence that so many famous speakers are described as.motivational speakers.  that may be what public speaking is really.for.  it's probably what it was originally for.  the emotional.reactions you can elicit with a talk can be a powerful force..i wish i could say that this force was more often used for good than.ill, but i'm not sure.notes[1].i'm not talking here about academic talks, which are a.different type of thing.  while the.audience at an academic talk might appreciate a joke, they will (or.at least should) make a conscious effort to see what new ideas.you're presenting.[2].that's the lower bound.  in practice you can often do better,.because talks are usually about things you've written or talked.about before, and when you ad lib, you end up reproducing some of.those sentences.  like early medieval architecture, impromptu talks.are made of spolia.  which feels a bit dishonest, incidentally,.because you have to deliver these sentences as if you'd just thought.of them.[3].robert morris points out that there is a way in which practicing.talks makes them better: reading a talk out loud can expose awkward.parts.  i agree and in fact i read most things i write out loud at.least once for that reason.[4].for sufficiently small audiences, it may not be true that being.part of an audience makes people dumber.  the real decline seems.to set in when the audience gets too big for the talk to feel like.a conversation — maybe around 10 people..thanks to sam altman and robert morris for reading drafts.of this.<eot><sot>how y combinator started.march 2012
y combinator's 7th birthday was march 11.   as usual we were so.busy we didn't notice till a few days after.  i don't think we've.ever managed to remember our birthday on our birthday..on march 11 2005, jessica and i were walking home from dinner in.harvard square.  jessica was working at an investment bank at the.time, but she didn't like it much, so she had interviewed for a job.as director of marketing at a boston vc fund.  the vc fund was doing.what now seems a comically familiar thing for a vc fund to do:.taking a long time to make up their mind.  meanwhile i had been.telling jessica all the things they should change about the vc.business  essentially the ideas now underlying y combinator:.investors.should be making more, smaller investments, they should be funding.hackers instead of suits, they should be willing to fund younger.founders, etc..at the time i had been thinking about doing some angel investing.  i.had just given a talk to the undergraduate computer club at harvard.about.how to start a.startup, and it.hit me afterward that although i had always.meant to do angel investing, 7 years had now passed since i got.enough money to do it, and i still hadn't started.  i had also.been thinking about ways to work with robert morris and trevor.blackwell again.  a few hours before i had.sent them an email trying to figure out what we could do together..between harvard square and my house the idea gelled.  we'd start.our own investment firm and jessica could work for that instead..as we turned onto walker street we decided to do it.  i agreed to.put $100k into the new fund and jessica agreed to quit her job to.work for it.  over the next couple days i recruited robert.and trevor, who put in another $50k each.  so yc.started with $200k..jessica was so happy to be able to quit her job and start her own.company that i took her picture.when we got home..the company wasn't called y combinator yet. at first we called it.cambridge seed.  but that name never saw the light of day, because.by the time we announced it a few days later, we'd changed the name.to y combinator.  we realized early on that what we were doing could.be national in scope and we didn't want a name that tied us to one.place..initially we only had part of the idea. we were going to do.seed funding with standardized terms.  before yc, seed funding was.very haphazard. you'd get that first $10k from your friend's rich.uncle. the deal terms were often a disaster; often neither the.investor nor the founders nor the lawyer knew what the documents.should look like.  facebook's early history as a florida llc shows.how random things could be in those days.  we were going to be.something there had not been before: a standard source of seed.funding..we modelled yc on the seed funding we ourselves had taken.when we started viaweb.  we started viaweb with $10k we got from.our friend julian weber,.the husband of idelle weber, whose.painting class i took as a grad student at harvard.  julian knew.about business, but you would not describe him as a suit.  among.other things he'd been president of the national lampoon.  he was.also a lawyer, and got all our paperwork set up properly.  in return.for $10k, getting us set up as a company, teaching us what.business was about, and remaining calm in times of crisis, julian.got 10% of viaweb.  i remember thinking once what a good deal.julian got.  and then a second later i realized that without.julian, viaweb would never have made it.  so even though it was a.good deal for him, it was a good deal for us too.  that's why i.knew there was room for something like y combinator..initially we didn't have what turned out to be the most important.idea: funding startups synchronously, instead of asynchronously as.it had always been done before.  or rather we had the idea, but we.didn't realize its significance.  we decided very early.that the first thing we'd do would.be to fund a bunch of startups over the coming summer.  but we.didn't realize initially that this would be the way we'd do all our.investing.  the reason we began by funding a bunch of startups at.once was not that we thought it would be a better way to fund.startups, but simply because we wanted to learn how to be angel.investors, and a summer program for undergrads seemed the fastest.way to do it.  no one takes summer jobs that seriously.  the.opportunity cost for a bunch of undergrads to spend a summer working.on startups was low enough that we wouldn't feel guilty encouraging.them to do it..we knew students would already be making plans for the summer, so.we did what we're always telling startups to do: we launched fast..here are the.initial announcement.and description of what.was at the time called the summer founders program..we got lucky in that the length and structure of a summer program.turns out to be perfect for what we do..the structure of the yc cycle is still almost identical to what.it was that first summer..we also got lucky in who the first batch of founders were.  we never.expected to make any money from that first batch.  we thought of.the money we were investing as a combination of an educational expense.and a charitable donation.  but the.founders in the first batch turned out to be surprisingly good..and great people too.  we're still friends with a lot of them today..it's hard for people to realize now how inconsequential yc seemed at the.time.  i can't blame people who didn't take us seriously, because.we ourselves didn't take that first summer program seriously in the.very beginning.  but as the summer progressed we were increasingly.impressed by how well the startups were doing.  other people started.to be impressed too.  jessica and i invented a term, "the y combinator.effect," to describe the moment when the realization hit someone.that yc was not totally lame.  when people came to yc to speak.at the dinners that first summer, they came in the spirit of someone.coming to address a boy scout troop.  by the time they left the.building they were all saying some variant of "wow, these.companies might actually succeed.".now yc is well enough known that people are no longer surprised.when the companies we fund are legit, but it took a.while for reputation to catch up with reality.  that's one of the.reasons we especially like funding ideas that might be dismissed.as "toys"  because yc itself was dismissed as one initially..when we saw how well it worked to fund companies synchronously,.we decided we'd keep doing that.  we'd fund two batches of.startups a year..we funded the second batch in silicon valley.  that was.a last minute decision.  in retrospect i think what pushed me over.the edge was going to foo camp that fall.  the density of startup.people in the bay area was so much greater than in boston, and the.weather was so nice.  i remembered that from living there in the.90s.  plus i didn't want someone else to copy us and describe it.as the y combinator of silicon valley.  i wanted yc to be the y combinator.of silicon valley.  so doing the winter batch in california.seemed like one of those rare cases where the self-indulgent choice.and the ambitious one were the same..if we'd had enough time to do what we wanted, y combinator would.have been in berkeley.  that was our favorite part of the bay area..but we didn't have time to get a building in berkeley.  we didn't.have time to get our own building anywhere. the only way to get.enough space in time was to convince trevor to let us take over.part of his (as it then seemed) giant building in mountain view..yet again we lucked out, because mountain view turned out to be the.ideal place to put something like yc.  but even then we barely made.it.  the first dinner in california, we had to warn all the founders.not to touch the walls, because the paint was still wet.<eot><sot>defining property.march 2012
as a child i read a book of stories about a famous judge in eighteenth.century japan called ooka tadasuke.  one of the cases he decided.was brought by the owner of a food shop.  a poor student who could.afford only rice was eating his rice while enjoying the delicious.cooking smells coming from the food shop.  the owner wanted the.student to pay for the smells he was enjoying.the student was.stealing his smells!this story often comes to mind when i hear the riaa and mpaa accusing.people of stealing music and movies.it sounds ridiculous to us to treat smells as property.  but i can.imagine scenarios in which one could charge for smells.  imagine.we were living on a moon base where we had to buy air by the.liter.  i could imagine air suppliers adding scents at an extra.charge.the reason it seems ridiculous to us to treat smells as property.is that it wouldn't work to.  it would work on a moon base, though.what counts as property depends on what works to treat as property..and that not only can change, but has changed.  humans may always.(for some definition of human and always) have treated small items.carried on one's person as property.  but hunter gatherers didn't.treat land, for example, as property in the way we do..[1]the reason so many people think of property as having a single.unchanging definition is that its definition changes very slowly..[2].but we are in the midst of such a change now.  the record.labels and movie studios used to distribute what they made like air.shipped through tubes on a moon base.  but with the arrival of.networks, it's as if we've moved to a planet with a breathable.atmosphere.  data moves like smells now.  and through a combination.of wishful thinking and short-term greed, the labels and studios.have put themselves in the position of the food shop owner, accusing.us all of stealing their smells.(the reason i say short-term greed is that the underlying problem.with the labels and studios is that the people who run them are.driven by bonuses rather than equity.  if they were driven by equity.they'd be looking for ways to take advantage of technological change.instead of fighting it.  but building new things takes too long..their bonuses depend on this year's revenues, and the best way to.increase those is to extract more money from stuff they do already.)so what does this mean?  should people not be able to charge for.content?  there's not a single yes or no answer to that question..people should be able to charge for content when it works to charge.for content.but by "works" i mean something more subtle than "when they can get.away with it."  i mean when people can charge for content without.warping society in order to do it.  after all, the companies selling.smells on the moon base could continue to sell them on the earth,.if they lobbied successfully for laws requiring us all to continue.to breathe through tubes down here too, even though we no longer.needed to.the crazy legal measures that the labels and studios have been.taking have a lot of that flavor.  newspapers and magazines are.just as screwed, but they are at least declining gracefully.  the.riaa and mpaa would make us breathe through tubes if they could.ultimately it comes down to common sense.  when you're abusing the.legal system by trying to use mass lawsuits against randomly chosen.people as a form of exemplary punishment, or lobbying for laws.that would break the internet if they passed, that's ipso facto.evidence you're using a definition of property that doesn't work.this is where it's helpful to have working democracies and multiple.sovereign countries.  if the world had a single, autocratic government,.the labels and studios could buy laws making the definition of.property be whatever they wanted.  but fortunately there are still.some countries that are not copyright colonies of the us, and even.in the us, politicians.still seem to be afraid of actual voters, in sufficient numbers..[3]the people running the us may not like it when voters or other.countries refuse to bend to their will, but ultimately it's in all.our interest that there's not a single point of attack for people.trying to warp the law to serve their own purposes.  private property.is an extremely useful idea — arguably one of our greatest inventions..so far, each new definition of it has brought us increasing material.wealth..[4].it seems reasonable to suppose the newest one will.too.  it would be a disaster if we all had to keep running an.obsolete version just because a few powerful people were too lazy.to upgrade.notes[1].if you want to learn more about hunter gatherers i strongly.recommend elizabeth marshall thomas's the.harmless people and the.old way.[2].change in the definition of property is driven mostly by.technological progress, however, and since technological progress.is accelerating, so presumably will the rate of change in the.definition of property.  which means it's all the more important.for societies to be able to respond gracefully to such changes,.because they will come at an ever increasing rate.[3].as far as i know, the term "copyright colony" was first used.by myles.peterson.[4].the state of technology isn't simply a function of.the definition of property.  they each constrain the other.  but.that being so, you can't mess with the definition of property without.affecting (and probably harming) the state of technology.  the.history of the ussr offers a vivid illustration of that.thanks to sam altman and geoff ralston for reading drafts.of this.japanese translation<eot><sot>frighteningly ambitious startup ideas.want to start a startup?  get funded by.y combinator..march 2012
one of the more surprising things i've noticed while working.on y combinator is how frightening the most ambitious startup.ideas are.  in this essay i'm going to demonstrate.this phenomenon by describing some.  any one of them.could make you a billionaire.  that might sound like an attractive.prospect, and yet when i describe these ideas you may.notice you find yourself shrinking away from them.don't worry, it's not a sign of weakness.  arguably it's a sign of.sanity.  the biggest startup ideas are terrifying.  and not just.because they'd be a lot of work.  the biggest ideas seem to threaten.your identity: you wonder if you'd have enough ambition to carry.them through.there's a scene in being john malkovich where the nerdy hero.encounters a very attractive, sophisticated woman.  she says to.him:.here's the thing: if you ever got me, you wouldn't have a clue.what to do with me..that's what these ideas say to us.this phenomenon is one of the most important things you can understand.about startups..[1].you'd expect big startup ideas to be.attractive, but actually they tend to repel you.  and that has a.bunch of consequences.  it means these ideas are invisible to most.people who try to think of startup ideas, because their subconscious.filters them out.  even the most ambitious people are probably best.off approaching them obliquely.1. a new search enginethe best ideas are just on the right side of impossible.  i don't.know if this one is possible, but there are signs it might be..making a new search engine means competing with google, and recently.i've noticed some cracks in their fortress.the point when it became clear to me that microsoft had lost their.way was when they decided to get into the search business.  that.was not a natural move for microsoft.  they did it because they.were afraid of google, and google was in the search business.  but.this meant (a) google was now setting microsoft's agenda, and (b).microsoft's agenda consisted of stuff they weren't good at.microsoft : google :: google : facebook.that does not by itself mean.there's room for a new search engine, but lately when using google.search i've found myself nostalgic for the old days, when.google was true to its own slightly aspy self.  google used to give.me a page of the right answers, fast, with no clutter.  now the.results seem inspired by the scientologist principle that what's.true is what's true for you.  and the pages don't have the.clean, sparse feel they used to.  google search results used to.look like the output of a unix utility.  now if i accidentally put.the cursor in the wrong place, anything might happen.the way to win here is to build the search engine all the hackers.use.  a search engine whose users consisted of the top 10,000 hackers.and no one else would be in a very powerful position despite its.small size, just as google was when it was that search engine.  and.for the first time in over a decade the idea of switching seems.thinkable to me.since anyone capable of starting this company is one of those 10,000.hackers, the route is at least straightforward: make the search.engine you yourself want.  feel free to make it excessively hackerish..make it really good for code search, for example.  would you like.search queries to be turing complete?  anything that gets you those.10,000 users is ipso facto good.don't worry if something you want to do will constrain you in the.long term, because if you don't get that initial core of users,.there won't be a long term.  if you can just build something that.you and your friends genuinely prefer to google, you're already.about 10% of the way to an ipo, just as facebook was (though they.probably didn't realize it) when they got all the harvard undergrads.2. replace emailemail was not designed to be used the way we use it now.  email is.not a messaging protocol.  it's a todo list.  or rather, my inbox.is a todo list, and email is the way things get onto it.  but it.is a disastrously bad todo list.i'm open to different types of solutions to this problem, but i.suspect that tweaking the inbox is not enough, and that email has.to be replaced with a new protocol..this new protocol should be a todo list protocol, not.a messaging protocol, although there is a degenerate case where.what someone wants you to do is: read the following text.as a todo list protocol, the new protocol should give more power.to the recipient than email does.  i want there to be more restrictions.on what someone can put on my todo list.  and when someone can put.something on my todo list, i want them to tell me more about what.they want from me.  do they want me to do something beyond just.reading some text?  how important is it?  (there obviously has to.be some mechanism to prevent people from saying everything is.important.)  when does it have to be done?this is one of those ideas that's like an irresistible force meeting.an immovable object.  on one hand, entrenched protocols are impossible.to replace.  on the other, it seems unlikely that people in.100 years will still be living in the same email hell we do now..and if email is going to get replaced eventually, why not now?if you do it right, you may be able to avoid the usual chicken.and egg problem new protocols face, because some of the most powerful.people in the world will be among the first to switch to it..they're all at the mercy of email too.whatever you build, make it fast.  gmail has become painfully slow..[2].if you made something no better than gmail, but fast, that.alone would let you start to pull users away from gmail.gmail is slow because google can't afford to spend a lot on it..but people will pay for this.  i'd have no problem paying $50 a month..considering how much time i spend in email, it's kind of scary to.think how much i'd be justified in paying.  at least $1000 a month..if i spend several hours a day reading and writing email, that would.be a cheap way to make my life better.3. replace universitiespeople are all over this idea lately, and i think they're onto.something.  i'm reluctant to suggest that an institution that's.been around for a millennium is finished just because of some mistakes.they made in the last few decades, but certainly in the last few.decades us universities seem to have been headed down the wrong.path.  one could do a lot better for a lot less money.i don't think universities will disappear.  they won't be replaced.wholesale.  they'll just lose the de facto monopoly on certain types.of learning that they once had.  there will be many different ways.to learn different things, and some may look quite different from.universities.   y combinator itself is arguably one of them.learning is such a big problem that changing the way people do it.will have a wave of secondary effects.  for example, the name of.the university one went to is treated by a lot of people (correctly.or not) as a credential in its own right.  if learning breaks up.into many little pieces, credentialling may separate from it.  there.may even need to be replacements for campus social life (and oddly.enough, yc even has aspects of that).you could replace high schools too, but there you face bureaucratic.obstacles that would slow down a startup.  universities seem the.place to start.4. internet dramahollywood has been slow to embrace the internet.  that was a.mistake, because i think we can now call a winner in the race between.delivery mechanisms, and it is the internet, not cable.a lot of the reason is the horribleness of cable clients, also known.as tvs.  our family didn't wait for apple tv.  we hated our last.tv so much that a few months ago we replaced it with an imac bolted.to the wall.  it's a little inconvenient to control it with a.wireless mouse, but the overall experience is much better than the.nightmare ui we had to deal with before.some of the attention people currently devote to watching.movies and tv can be stolen by things that seem completely unrelated,.like social networking apps.  more can be stolen by things that are.a little more closely related, like games.  but there will probably.always remain some residual demand for conventional drama, where.you sit passively and watch as a plot happens.  so how do you deliver.drama via the internet?  whatever you make will have to be on a.larger scale than youtube clips.  when people sit down to watch a.show, they want to know what they're going to get: either part.of a series with familiar characters, or a single longer "movie".whose basic premise they know in advance.there are two ways delivery and payment could play out.  either.some company like netflix or apple will be the app store for.entertainment, and you'll reach audiences through them.  or the.would-be app stores will be too overreaching, or too technically.inflexible, and companies will arise to supply payment and streaming.a la carte to the producers of drama.  if that's the way things.play out, there will also be a need for such infrastructure companies.5. the next steve jobsi was talking recently to someone who knew apple well, and i asked.him if the people now running the company would be able to keep.creating new things the way apple had under steve jobs.  his answer.was simply "no."  i already feared that would be the answer.  i.asked more to see how he'd qualify it.  but he didn't qualify it.at all.  no, there will be no more great new stuff beyond whatever's.currently in the pipeline.  apple's.revenues may continue to rise for a long time, but as microsoft.shows, revenue is a lagging indicator in the technology business.so if apple's not going to make the next ipad, who is?  none of the.existing players.  none of them are run by product visionaries, and.empirically you can't seem to get those by hiring them.  empirically.the way you get a product visionary as ceo is for him to found the.company and not get fired.  so the company that creates the next.wave of hardware is probably going to have to be a startup.i realize it sounds preposterously ambitious for a startup to try.to become as big as apple.  but no more ambitious than it was for.apple to become as big as apple, and they did it.  plus a startup.taking on this problem now has an advantage the original apple.didn't: the example of apple.  steve jobs has shown us what's.possible.  that helps would-be successors both directly, as roger.bannister did, by showing how much better you can do than people.did before, and indirectly, as augustus did, by lodging the idea.in users' minds that a single person could unroll the future.for them..[3]now steve is gone there's a vacuum we can all feel.  if a new company.led boldly into the future of hardware, users would follow.  the.ceo of that company, the "next steve jobs," might not measure up.to steve jobs. but he wouldn't have to.  he'd just have to do a.better job than samsung and hp and nokia, and that seems pretty.doable.6. bring back moore's lawthe last 10 years have reminded us what moore's law actually says..till about 2002 you could safely misinterpret it as promising that.clock speeds would double every 18 months.  actually what it says.is that circuit densities will double every 18 months.  it used to.seem pedantic to point that out.  not any more.  intel can no longer.give us faster cpus, just more of them.this moore's law is not as good as the old one.  moore's law used.to mean that if your software was slow, all you had to do was wait,.and the inexorable progress of hardware would solve your problems..now if your software is slow you have to rewrite it to do more.things in parallel, which is a lot more work than waiting.it would be great if a startup could give us something of the old.moore's law back, by writing software that could make a large number.of cpus look to the developer like one very fast cpu.  there are.several ways to approach this problem.  the most ambitious is to.try to do it automatically: to write a compiler that will parallelize.our code for us.  there's a name for this compiler, the sufficiently.smart compiler, and it is a byword for impossibility.  but is.it really impossible?  is there no configuration of the bits in.memory of a present day computer that is this compiler?  if you.really think so, you should try to prove it, because that would be.an interesting result.  and if it's not impossible but simply very.hard, it might be worth trying to write it.  the expected value.would be high even if the chance of succeeding was low.the reason the expected value is so high is web services.  if you.could write software that gave programmers the convenience of the.way things were in the old days, you could offer it to them as a.web service.  and that would in turn mean that you got practically.all the users.imagine there was another processor manufacturer that could still translate.increased circuit densities into increased clock speeds. they'd.take most of intel's business.  and since web services mean that.no one sees their processors anymore, by writing the sufficiently.smart compiler you could create a situation indistinguishable from.you being that manufacturer, at least for the server market.the least ambitious way of approaching the problem is to start from.the other end, and offer programmers more parallelizable lego blocks.to build programs out of, like hadoop and mapreduce.   then the.programmer still does much of the work of optimization.there's an intriguing middle ground where you build a semi-automatic.weapon—where there's a human in the loop.  you make something.that looks to the user like the sufficiently smart compiler, but.inside has people, using highly developed optimization tools to.find and eliminate bottlenecks in users' programs.   these people.might be your employees, or you might create a marketplace for.optimization.an optimization marketplace would be a way to generate the sufficiently.smart compiler piecemeal, because participants would immediately.start writing bots.  it would be a curious state of affairs if you.could get to the point where everything could be done by bots,.because then you'd have made the sufficiently smart compiler, but.no one person would have a complete copy of it.i realize how crazy all this sounds.  in fact, what i like about.this idea is all the different ways in which it's wrong.  the whole.idea of focusing on optimization is counter to the general trend.in software development for the last several decades.  trying to.write the sufficiently smart compiler is by definition a mistake..and even if it weren't, compilers are the sort of software that's.supposed to be created by open source projects, not companies.  plus.if this works it will deprive all the programmers who take pleasure.in making multithreaded apps of so much amusing complexity. the.forum troll i have by now internalized doesn't even know where to.begin in raising objections to this project.  now that's what i.call a startup idea.7. ongoing diagnosisbut wait, here's another that could face even greater resistance:.ongoing, automatic medical diagnosis.one of my tricks for generating startup ideas is to imagine the.ways in which we'll seem backward to future generations.  and i'm.pretty sure that to people 50 or 100 years in the future, it will.seem barbaric that people in our era waited till they had symptoms.to be diagnosed with conditions like heart disease and cancer.for example, in 2004 bill clinton found he was feeling short of.breath.  doctors discovered that several of his arteries were over.90% blocked and 3 days later he had a quadruple bypass.  it seems.reasonable to assume bill clinton has the best medical care available..and yet even he had to wait till his arteries were over 90% blocked.to learn that the number was over 90%.  surely at some point in the.future we'll know these numbers the way we now know something like.our weight.  ditto for cancer.  it will seem preposterous to future.generations that we wait till patients have physical symptoms to.be diagnosed with cancer.  cancer will show up on some sort of radar.screen immediately.(of course, what shows up on the radar screen may be different from.what we think of now as cancer.  i wouldn't be surprised if at any.given time we have ten or even hundreds of microcancers going at.once, none of which normally amount to anything.)a lot of the obstacles to ongoing diagnosis will come from the fact.that it's going against the grain of the medical profession.  the.way medicine has always worked is that patients come to doctors.with problems, and the doctors figure out what's wrong.  a lot of.doctors don't like the idea of going on the medical equivalent of.what lawyers call a "fishing expedition," where you go looking for.problems without knowing what you're looking for.  they call the.things that get discovered this way "incidentalomas," and they are.something of a nuisance.for example, a friend of mine once had her brain scanned as part.of a study.  she was horrified when the doctors running the study.discovered what appeared to be a large tumor.  after further testing,.it turned out to be a harmless cyst.  but it cost her a few days.of terror. a lot of doctors worry that if you start scanning people.with no symptoms, you'll get this on a giant scale: a huge number.of false alarms that make patients panic and require expensive and.perhaps even dangerous tests to resolve.  but i think that's just.an artifact of current limitations.  if people were scanned all the.time and we got better at deciding what was a real problem, my.friend would have known about this cyst her whole life and known.it was harmless, just as we do a birthmark.there is room for a lot of startups here..in addition to the technical obstacles all.startups face, and the bureaucratic obstacles all medical startups.face, they'll be going against thousands of years of medical.tradition.  but it will happen, and it will be a great thing—so.great that people in the future will feel as sorry for us as we do.for the generations that lived before anaesthesia and antibiotics.tacticslet me conclude with some tactical advice.  if you want to take on.a problem as big as the ones i've discussed, don't make a direct.frontal attack on it.  don't say, for example, that you're going.to replace email.  if you do that you raise too many expectations..your employees and investors will constantly be asking "are we there.yet?" and you'll have an army of haters waiting to see you fail..just say you're building todo-list software.  that sounds harmless..people can notice you've replaced email when it's a fait accompli..[4]empirically, the way to do really big things seems to be to start.with deceptively small things.  want to dominate microcomputer.software?  start by writing a basic interpreter for a machine with.a few thousand users.  want to make the universal web site?  start.by building a site for harvard undergrads to stalk one another.empirically, it's not just for other people that you need to start.small.  you need to for your own sake.  neither bill gates nor mark.zuckerberg knew at first how big their companies were going to get..all they knew was that they were onto something.  maybe it's a bad.idea to have really big ambitions initially, because the bigger.your ambition, the longer it's going to take, and the further you.project into the future, the more likely you'll get it wrong.i think the way to use these big ideas is not to try to identify a.precise point in the future and then ask yourself how to get from.here to there, like the popular image of a visionary.  you'll be.better off if you operate like columbus and just head in a general.westerly direction.  don't try to construct the future like a.building, because your current blueprint is almost certainly mistaken..start with something you know works, and when you expand, expand.westward.the popular image of the visionary is someone with a clear view of.the future, but empirically it may be better to have a blurry one.notes[1].it's also one of the most important things vcs fail to.understand about startups.  most expect founders to walk in with a.clear plan for the future, and judge them based on that.  few.consciously realize that in the biggest successes there is the least.correlation between the initial plan and what the startup eventually.becomes.[2].this sentence originally read "gmail is painfully slow.".thanks to paul buchheit for the correction.[3].roger bannister is famous as the first person to run a mile.in under 4 minutes.  but his world record only lasted 46 days.  once.he showed it could be done, lots of others followed.  ten years.later jim ryun ran a 3:59 mile as a high school junior.[4].if you want to be the next apple, maybe you don't even want to start.with consumer electronics.  maybe at first you make something hackers.use.  or you make something popular but apparently unimportant,.like a headset or router.  all you need is a bridgehead..thanks to sam altman, trevor blackwell,.paul buchheit, patrick collison, aaron iba, jessica.livingston, robert morris, harj taggar and garry tan.for reading drafts of this.<eot><sot>a word to the resourceful.want to start a startup?  get funded by.y combinator..january 2012
a year ago i noticed a pattern in the least successful startups.we'd funded: they all seemed hard to talk to.  it felt as if there.was some kind of wall between us.  i could never quite tell if they.understood what i was saying.this caught my attention because earlier we'd noticed a pattern.among the most successful startups, and it seemed to hinge on a.different quality.  we found the startups that did best were the.ones with the sort of founders about whom we'd say "they can take.care of themselves."  the startups that do best are fire-and-forget.in the sense that all you have to do is give them a lead, and they'll.close it, whatever type of lead it is.  when they're raising money,.for example, you can do the initial intros knowing that if you.wanted to you could stop thinking about it at that point.  you won't.have to babysit the round to make sure it happens.  that type of.founder is going to come back with the money; the only question is.how much on what terms.it seemed odd that the outliers at the two ends of the spectrum.could be detected by what appeared to be unrelated tests.  you'd.expect that if the founders at one end were distinguished by the.presence of quality x, at the other end they'd be distinguished by.lack of x.  was there some kind of inverse relation between.resourcefulness and being hard to talk to?it turns out there is, and the key to the mystery is the old adage."a word to the wise is sufficient."   because this phrase is not.only overused, but overused in an indirect way (by prepending the.subject to some advice), most people who've heard it don't know.what it means.  what it means is that if someone is wise, all you.have to do is say one word to them, and they'll understand immediately..you don't have to explain in detail; they'll chase down all the.implications.in much the same way that all you have to do is give the right sort.of founder a one line intro to a vc, and he'll chase down the money..that's the connection.  understanding all the implications — even the.inconvenient implications — of what someone tells you is a subset of.resourcefulness.  it's conversational resourcefulness.like real world resourcefulness, conversational resourcefulness.often means doing things you don't want to.  chasing down all the.implications of what's said to you can sometimes lead to uncomfortable.conclusions.  the best word to describe the failure to do so is.probably "denial," though that seems a bit too narrow.  a better.way to describe the situation would be to say that the unsuccessful.founders had the sort of conservatism that comes from weakness..they traversed idea space as gingerly as a very old person.traverses the physical world..[1]the unsuccessful founders weren't stupid.  intellectually they.were as capable as.the successful founders of following all the implications of what.one said to them.  they just weren't eager to.so being hard to talk to was not what was killing the.unsuccessful startups.  it.was a sign of an underlying lack of resourcefulness.  that's what.was killing them.  as well as.failing to chase down the implications of what was said to them,.the unsuccessful founders would also fail to chase down funding,.and users, and sources of new ideas.  but the most immediate evidence.i had that something was amiss was that i couldn't talk to them.notes[1].a yc partner wrote:my feeling with the bad groups is that coming into office hours,.they've already decided what they're going to do and everything i.say is being put through an internal process in their heads, which.either desperately tries to munge what i've said into something.that conforms with their decision or just outright dismisses it and.creates a rationalization for doing so. they may not even be conscious.of this process but that's what i think is happening when you say.something to bad groups and they have that glazed over look. i don't.think it's confusion or lack of understanding per se, it's this.internal process at work.with the good groups, you can tell that everything you say is being.looked at with fresh eyes and even if it's dismissed, it's because.of some logical reason e.g. "we already tried that" or "from speaking.to our users that isn't what they'd like," etc. those groups never.have that glazed over look.thanks to sam altman, patrick collison, aaron iba, jessica livingston,.robert morris, harj taggar, and garry tan for reading drafts of.this.<eot><sot>schlep blindness.want to start a startup?  get funded by.y combinator..january 2012
there are great startup ideas lying around unexploited right under.our noses.  one reason we don't see them is a phenomenon i call.schlep blindness.  schlep was originally a yiddish word but has.passed into general use in the us.  it means a tedious, unpleasant.task.no one likes schleps, but hackers especially dislike them..most hackers who start startups wish they could do it by just writing.some clever software, putting it on a server somewhere, and watching.the money roll in—without ever having to talk to users, or negotiate.with other companies, or deal with other people's broken code..maybe that's possible, but i haven't seen it.one of the many things we do at y combinator is teach hackers about.the inevitability of schleps.  no, you can't start a startup by.just writing code.  i remember going through this realization myself..there was a point in 1995 when i was still trying to convince myself.i could start a company by just writing code.  but i soon learned.from experience that schleps are not merely inevitable, but pretty.much what business consists of.  a company is defined by the schleps.it will undertake.  and schleps should be dealt with the same way.you'd deal with a cold swimming pool: just jump in.  which is not.to say you should seek out unpleasant work per se, but that you.should never shrink from it if it's on the path to something great.the most dangerous thing about our dislike of schleps is that much.of it is unconscious.  your unconscious won't even let you see ideas.that involve painful schleps.  that's schlep blindness.the phenomenon isn't limited to startups.  most people don't.consciously decide not to be in as good physical shape as olympic.athletes, for example.  their unconscious mind decides for them,.shrinking from the work involved.the most striking example i know of schlep blindness is.stripe, or.rather stripe's idea.  for over a decade, every hacker who'd ever.had to process payments online knew how painful the experience was..thousands of people must have known about this problem.  and yet.when they started startups, they decided to build recipe sites, or.aggregators for local events.  why?  why work on problems few care.much about and no one will pay for, when you could fix one of the.most important components of the world's infrastructure?  because.schlep blindness prevented people from even considering the idea.of fixing payments.probably no one who applied to y combinator to work on a recipe.site began by asking "should we fix payments, or build a recipe.site?" and chose the recipe site.  though the idea of fixing payments.was right there in plain sight, they never saw it, because their.unconscious mind shrank from the complications involved.  you'd.have to make deals with banks.  how do you do that?  plus you're.moving money, so you're going to have to deal with fraud, and people.trying to break into your servers.  plus there are probably all.sorts of regulations to comply with.  it's a lot more intimidating.to start a startup like this than a recipe site.that scariness makes ambitious ideas doubly valuable.  in addition.to their intrinsic value, they're like undervalued stocks in the.sense that there's less demand for them among founders.  if you.pick an ambitious idea, you'll have less competition, because.everyone else will have been frightened off by the challenges.involved.  (this is also true of starting a startup generally.)how do you overcome schlep blindness?  frankly, the most valuable.antidote to schlep blindness is probably ignorance.  most successful.founders would probably say that if they'd known when they were.starting their company about the obstacles they'd have to overcome,.they might never have started it.  maybe that's one reason the most.successful startups of all so often have young founders.in practice the founders grow with the problems.  but no one seems.able to foresee that, not even older, more experienced founders..so the reason younger founders have an advantage is that they make.two mistakes that cancel each other out.  they don't know how much.they can grow, but they also don't know how much they'll need to..older founders only make the first mistake.ignorance can't solve everything though.  some ideas so obviously.entail alarming schleps that anyone can see them.  how do you see.ideas like that?  the trick i recommend is to take yourself out of.the picture.  instead of asking "what problem should i solve?" ask."what problem do i wish someone else would solve for me?"  if someone.who had to process payments before stripe had tried asking that,.stripe would have been one of the first things they wished for.it's too late now to be stripe, but there's plenty still broken in.the world, if you know how to see it.thanks to sam altman, paul buchheit, patrick collison,.aaron iba, jessica livingston, emmett shear, and harj taggar.for reading drafts of this.<eot><sot>snapshot: viaweb, june 1998
.january 2012a few hours before the yahoo acquisition was announced in june 1998.i took a snapshot of viaweb's.site.  i thought it might be interesting to look at one day.the first thing one notices is is how tiny the pages are.  screens.were a lot smaller in 1998.  if i remember correctly, our frontpage.used to just fit in the size window people typically used then.browsers then (ie 6 was still 3 years in the future) had few fonts.and they weren't antialiased.  if you wanted to make pages that.looked good, you had to render display text as images.you may notice a certain similarity between the viaweb and y combinator logos.  we did that.as an inside joke when we started yc.  considering how basic a red.circle is, it seemed surprising to me when we started viaweb how.few other companies used one as their logo.  a bit later i realized.why.on the company.page you'll notice a mysterious individual called john mcartyem..robert morris (aka rtm) was so publicity averse after the.worm that he.didn't want his name on the site.  i managed to get him to agree.to a compromise: we could use his bio but not his name.  he has.since relaxed a bit.on that point.trevor graduated at about the same time the acquisition closed, so in the.course of 4 days he went from impecunious grad student to millionaire.phd.  the culmination of my career as a writer of press releases.was one celebrating.his graduation, illustrated with a drawing i did of him during.a meeting.(trevor also appears as trevino.bagwell in our directory of web designers merchants could hire.to build stores for them.  we inserted him as a ringer in case some.competitor tried to spam our web designers.   we assumed his logo.would deter any actual customers, but it did not.)back in the 90s, to get users you had to get mentioned in magazines.and newspapers.  there were not the same ways to get found online.that there are today.  so we used to pay a pr.firm $16,000 a month to get us mentioned in the press.  fortunately.reporters liked.us.in our advice about.getting traffic from search engines (i don't think the term seo.had been coined yet), we say there are only 7 that matter: yahoo,.altavista, excite, webcrawler, infoseek, lycos, and hotbot.  notice.anything missing?  google was incorporated that september.we supported online transactions via a company called.cybercash,.since if we lacked that feature we'd have gotten beaten up in product.comparisons.  but cybercash was so bad and most stores' order volumes.were so low that it was better if merchants processed orders like phone orders.  we had a page in our site trying to talk merchants.out of doing real time authorizations.the whole site was organized like a funnel, directing people to the.test drive..it was a novel thing to be able to try out software online.  we put.cgi-bin in our dynamic urls to fool competitors about how our.software worked.we had some well.known users.  needless to say, frederick's of hollywood got the.most traffic.  we charged a flat fee of $300/month for big stores,.so it was a little alarming to have users who got lots of traffic..i once calculated how much frederick's was costing us in bandwidth,.and it was about $300/month.since we hosted all the stores, which together were getting just.over 10 million page views per month in june 1998, we consumed what.at the time seemed a lot of bandwidth.  we had 2 t1s (3 mb/sec).coming into our offices.  in those days there was no aws.  even.colocating servers seemed too risky, considering how often things.went wrong with them.  so we had our servers in our offices.  or.more precisely, in trevor's office.  in return for the unique.privilege of sharing his office with no other humans, he had to.share it with 6 shrieking tower servers.  his office was nicknamed.the hot tub on account of the heat they generated.  most days his.stack of window air conditioners could keep up.for describing pages, we had a template language called rtml, which.supposedly stood for something, but which in fact i named after.rtm.  rtml was common lisp augmented by some macros and libraries,.and concealed under a structure editor that made it look like it.had syntax.since we did continuous releases, our software didn't actually have.versions.  but in those days the trade press expected versions, so.we made them up.  if we wanted to get lots of attention, we made.the version number an.integer.  that "version 4.0" icon was generated by our own.button generator, incidentally.  the whole viaweb site was made.with our software, even though it wasn't an online store, because.we wanted to experience what our users did.at the end of 1997, we released a general purpose shopping search.engine called shopfind.  it.was pretty advanced for the time.  it had a programmable crawler.that could crawl most of the different stores online and pick out.the products.<eot><sot>why startup hubs work.want to start a startup?  get funded by.y combinator..october 2011
if you look at a list of us cities sorted by population, the number.of successful startups per capita varies by orders of magnitude..somehow it's as if most places were sprayed with startupicide.i wondered about this for years.  i could see the average town was.like a roach motel for startup ambitions: smart, ambitious people.went in, but no startups came out.  but i was never able to figure.out exactly what happened inside the motel—exactly what was.killing all the potential startups..[1]a couple weeks ago i finally figured it out. i was framing the.question wrong.  the problem is not that most towns kill startups..it's that death is the default for startups,.and most towns don't save them.  instead of thinking of most places.as being sprayed with startupicide, it's more accurate to think of.startups as all being poisoned, and a few places being sprayed with.the antidote.startups in other places are just doing what startups naturally do:.fail.  the real question is, what's saving startups in places.like silicon valley?.[2]environmenti think there are two components to the antidote: being in a place.where startups are the cool thing to do, and chance meetings with.people who can help you.  and what drives them both is the number.of startup people around you.the first component is particularly helpful in the first stage of.a startup's life, when you go from merely having an interest in.starting a company to actually doing it.  it's quite a leap to start.a startup.  it's an unusual thing to do. but in silicon valley it.seems normal..[3]in most places, if you start a startup, people treat you as if.you're unemployed.  people in the valley aren't automatically.impressed with you just because you're starting a company, but they.pay attention.  anyone who's been here any amount of time knows not.to default to skepticism, no matter how inexperienced you seem or.how unpromising your idea sounds at first, because they've all seen.inexperienced founders with unpromising sounding ideas who a few.years later were billionaires.having people around you care about what you're doing is an.extraordinarily powerful force.  even the.most willful people are susceptible to it.  about a year after we.started y combinator i said something to a partner at a well known.vc firm that gave him the (mistaken) impression i was considering.starting another startup.  he responded so eagerly that for about.half a second i found myself considering doing it.in most other cities, the prospect of starting a startup just doesn't.seem real.  in the valley it's not only real but fashionable.  that.no doubt causes a lot of people to start startups who shouldn't..but i think that's ok.  few people are suited to running a startup,.and it's very hard to predict beforehand which are (as i know all.too well from being in the business of trying to predict beforehand),.so lots of people starting startups who shouldn't is probably the.optimal state of affairs.  as long as you're at a point in your.life when you can bear the risk of failure, the best way to find.out if you're suited to running a startup is to try.it.chancethe second component of the antidote is chance meetings with people.who can help you.  this force works in both phases: both in the.transition from the desire to start a startup to starting one, and.the transition from starting a company to succeeding.  the power.of chance meetings is more variable than people around you caring.about startups, which is like a sort of background radiation that.affects everyone equally, but at its strongest it is far stronger.chance meetings produce miracles to compensate for the disasters.that characteristically befall startups.  in the valley, terrible.things happen to startups all the time, just like they do to startups.everywhere.  the reason startups are more likely to make it here.is that great things happen to them too.  in the valley, lightning.has a sign bit.for example, you start a site for college students and you decide.to move to the valley for the summer to work on it.  and then on a.random suburban street in palo alto you happen to run into sean.parker, who understands the domain really well because he started.a similar startup himself, and also knows all the investors.  and.moreover has advanced views, for 2004, on founders retaining control of their companies.you can't say precisely what the miracle will be, or even for sure.that one will happen.  the best one can say is: if you're in a.startup hub, unexpected good things will probably happen to you,.especially if you deserve them.i bet this is true even for startups we fund.  even with us working.to make things happen for them on purpose rather than by accident,.the frequency of helpful chance meetings in the valley is so high.that it's still a significant increment on what we can deliver.chance meetings play a role like the role relaxation plays in having.ideas.  most people have had the experience of working hard on some.problem, not being able to solve it, giving up and going to bed,.and then thinking of the answer in the shower in the morning.  what.makes the answer appear is letting your thoughts drift a bit—and thus drift off the wrong.path you'd been pursuing last night and onto the right one adjacent.to it.chance meetings let your acquaintance drift in the same way taking.a shower lets your thoughts drift. the critical thing in both cases.is that they drift just the right amount.  the meeting between larry.page and sergey brin was a good example.  they let their acquaintance.drift, but only a little; they were both meeting someone they had.a lot in common with.for larry page the most important component of the antidote was.sergey brin, and vice versa.  the antidote is.people.  it's not the.physical infrastructure of silicon valley that makes it work, or.the weather, or anything like that.  those helped get it started,.but now that the reaction is self-sustaining what drives it is the.people.many observers have noticed that one of the most distinctive things.about startup hubs is the degree to which people help one another.out, with no expectation of getting anything in return.  i'm not.sure why this is so.  perhaps it's because startups are less of a.zero sum game than most types of business; they are rarely killed.by competitors.  or perhaps it's because so many startup founders.have backgrounds in the sciences, where collaboration is encouraged.a large part of yc's function is to accelerate that process.  we're.a sort of valley within the valley, where the density of people.working on startups and their willingness to help one another are.both artificially amplified.numbersboth components of the antidote—an environment that encourages.startups, and chance meetings with people who help you—are.driven by the same underlying cause: the number of startup people.around you.  to make a startup hub, you need a lot of people.interested in startups.there are three reasons. the first, obviously, is that if you don't.have enough density, the chance meetings don't happen..[4].the second is that different startups need such different things, so.you need a lot of people to supply each startup with what they need.most.  sean parker was exactly what facebook needed in 2004.  another.startup might have needed a database guy, or someone with connections.in the movie business.this is one of the reasons we fund such a large number of companies,.incidentally.  the bigger the community, the greater the chance it.will contain the person who has that one thing you need most.the third reason you need a lot of people to make a startup hub is.that once you have enough people interested in the same problem,.they start to set the social norms.  and it is a particularly.valuable thing when the atmosphere around you encourages you to do.something that would otherwise seem too ambitious.  in most places.the atmosphere pulls you back toward the mean.i flew into the bay area a few days ago.  i notice this every time.i fly over the valley: somehow you can sense something is going on..obviously you can sense prosperity in how well kept a.place looks.  but there are different kinds of prosperity.  silicon.valley doesn't look like boston, or new york, or la, or dc.  i tried.asking myself what word i'd use to describe the feeling the valley.radiated, and the word that came to mind was optimism.notes[1].i'm not saying it's impossible to succeed in a city with few.other startups, just harder.  if you're sufficiently good at.generating your own morale, you can survive without external.encouragement.  wufoo was based in tampa and they succeeded.  but.the wufoos are exceptionally disciplined.[2].incidentally, this phenomenon is not limited to startups.  most.unusual ambitions fail, unless the person who has them manages to.find the right sort of community.[3].starting a company is common, but starting a startup is rare..i've talked about the distinction between the two elsewhere, but.essentially a startup is a new business designed for scale.  most.new businesses are service businesses and except in rare cases those.don't scale.[4].as i was writing this, i had a demonstration of the density of.startup people in the valley.  jessica and i bicycled to university.ave in palo alto to have lunch at the fabulous oren's hummus.  as.we walked in, we met charlie cheever sitting near the door.  selina.tobaccowala stopped to say hello on her way out.  then josh wilson.came in to pick up a take out order.  after lunch we went to get.frozen yogurt.  on the way we met rajat suri.  when we got to the.yogurt place, we found dave shen there, and as we walked out we ran.into yuri sagalov.  we walked with him for a block or so and we ran.into muzzammil zaveri, and then a block later we met aydin senkut..this is everyday life in palo alto.  i wasn't trying to meet people;.i was just having lunch.  and i'm sure for every startup founder.or investor i saw that i knew, there were 5 more i didn't.  if ron.conway had been with us he would have met 30 people he knew.thanks to sam altman, paul buchheit, jessica livingston, and.harj taggar for reading drafts of this.<eot><sot>the patent pledge.august 2011
i realized recently that we may be able to solve part of the patent.problem without waiting for the government.i've never been 100% sure whether patents help or hinder technological.progress.  when i was a kid i thought they helped.  i thought they.protected inventors from having their ideas stolen by big companies..maybe that was truer in the past, when more things were physical..but regardless of whether patents are in general a good thing, there.do seem to be bad ways of using them.  and since bad uses of patents.seem to be increasing, there is an increasing call for patent reform.the problem with patent reform is that it has to go through the.government.  that tends to be slow.  but recently i realized we can.also attack the problem downstream.  as well as pinching off the.stream of patents at the point where they're issued, we may in some.cases be able to pinch it off at the point where they're used.one way of using patents that clearly does not encourage innovation.is when established companies with bad products use patents to.suppress small competitors with good products.  this is the type.of abuse we may be able to decrease without having to go through.the government.the way to do it is to get the companies that are above pulling.this sort of trick to pledge publicly not to.  then the ones that.won't make such a pledge will be very conspicuous.  potential.employees won't want to work for them.  and investors, too, will.be able to see that they're the sort of company that competes by.litigation rather than by making good products.here's the pledge:.no first use of software patents against companies with less.than 25 people..i've deliberately traded precision for brevity.  the patent pledge.is not legally binding.  it's like google's "don't be evil." they.don't define what evil is, but by publicly saying that, they're.saying they're willing to be held to a standard that, say, altria.is not.  and though constraining, "don't be evil" has been good for.google. technology companies win by attracting the most productive.people, and the most productive people are attracted to employers.who hold themselves to a higher standard than the law requires..[1]the patent pledge is in effect a narrower but open source "don't.be evil."  i encourage every technology company to adopt it.  if.you want to help fix patents, encourage your employer to.already most technology companies wouldn't sink to using patents.on startups.  you don't see google or facebook suing startups for.patent infringement. they don't need to.  so for the better technology.companies, the patent pledge requires no change in behavior.  they're.just promising to do what they'd do anyway.  and when all the.companies that won't use patents on startups have said so, the.holdouts will be very conspicuous.the patent pledge doesn't fix every problem with patents.  it won't.stop patent trolls, for example; they're already pariahs.  but the.problem the patent pledge does fix may be more serious than the.problem of patent trolls.  patent trolls are just parasites.  a.clumsy parasite may occasionally kill the host, but that's not its.goal.  whereas companies that sue startups for patent infringement.generally do it with explicit goal of keeping their product off the.market.companies that use patents on startups are attacking innovation at.the root.  now there's something any individual can do about this.problem, without waiting for the government: ask companies where.they stand..patent pledge site.notes:[1].because the pledge is deliberately vague, we're going to need.common sense when intepreting it.  and even more vice versa: the.pledge is vague in order to make people use common sense when.interpreting it.so for example i've deliberately avoided saying whether the 25.people have to be employees, or whether contractors count too.  if.a company has to split hairs that fine about whether a suit would.violate the patent pledge, it's probably still a dick move.the investment that didn't happen<eot><sot>subject: airbnb.march 2011
yesterday fred wilson published a remarkable post about missing.airbnb.   vcs miss good startups all the time, but it's extraordinarily.rare for one to talk about it publicly till long afterward.  so.that post is further evidence what a rare bird fred is.  he's.probably the nicest vc i know.reading fred's post made me go back and look at the emails i exchanged.with him at the time, trying to convince him to invest in airbnb..it was quite interesting to read.  you can see fred's mind at work.as he circles the deal.fred and the airbnb founders have generously agreed to let me publish.this email exchange (with one sentence redacted about something.that's strategically important to airbnb and not an important part.of the conversation).  it's an interesting illustration of an element.of the startup ecosystem that few except the participants ever see:.investors trying to convince one another to invest in their portfolio.companies.  hundreds if not thousands of conversations of this type.are happening now, but if one has ever been published, i haven't.seen it.  the airbnbs themselves never even saw these emails at the.time.we do a lot of this behind the scenes stuff at yc, because we invest.in such a large number of companies, and we invest so early that.investors sometimes need a lot of convincing to see their merits..i don't always try as hard as this though.  fred must.have found me quite annoying..from: paul graham.to: fred wilson, airbedandbreakfast founders.date: fri, jan 23, 2009 at 11:42 am.subject: meet the airbedsone of the startups from the batch that just started, airbedandbreakfast,.is in nyc right now meeting their users.  (nyc is their biggest.market.) i'd recommend meeting them if your schedule allows.i'd been thinking to myself that though these guys were going to.do really well, i should introduce them to angels, because vcs would.never go for it.  but then i thought maybe i should give you more.credit.  you'll certainly like meeting them.  be sure to ask about.how they funded themselves with breakfast cereal.there's no reason this couldn't be as big as ebay.  and this team.is the right one to do it.--pgfrom: brian chesky.to: paul graham.cc: nathan blecharczyk, joe gebbia.date: fri, jan 23, 2009 at 11:40 am.subject: re: meet the airbedspg,thanks for the intro!brianfrom: paul graham.to: brian chesky.cc: nathan blecharczyk, joe gebbia.date: fri, jan 23, 2009 at 12:38 pm.subject: re: meet the airbedsit's a longshot, at this stage, but if there was any vc who'd get.you guys, it would be fred.  he is the least suburban-golf-playing.vc i know.he likes to observe startups for a while before acting, so don't.be bummed if he seems ambivalent.--pgfrom: fred wilson.to: paul graham,.date: sun, jan 25, 2009 at 5:28 pm.subject: re: meet the airbedsthanks paulwe are having a bit of a debate inside our partnership about the.airbed concept. we'll finish that debate tomorrow in our weekly.meeting and get back to you with our thoughtsthanksfredfrom: paul graham.to: fred wilson.date: sun, jan 25, 2009 at 10:48 pm.subject: re: meet the airbedsi'd recommend having the debate after meeting them instead of before..we had big doubts about this idea, but they vanished on meeting the.guys.from: fred wilson.to: paul graham.date: mon, jan 26, 2009 at 11:08 am.subject: re: meet the airbedswe are still very suspect of this idea but will take a meeting as.you suggestthanksfredfrom: fred wilson.to: paul graham, airbedandbreakfast founders.date: mon, jan 26, 2009 at 11:09 am.subject: re: meet the airbedsairbed team -are you still in nyc?we'd like to meet if you arethanksfredfrom: paul graham.to: fred wilson.date: mon, jan 26, 2009 at 1:42 pm.subject: re: meet the airbedsideas can morph.  practically every really big startup could say,.five years later, "believe it or not, we started out doing ___.".it just seemed a very good sign to me that these guys were actually.on the ground in nyc hunting down (and understanding) their users..on top of several previous good signs.--pgfrom: fred wilson.to: paul graham.date: sun, feb 1, 2009 at 7:15 am.subject: re: meet the airbedsit's interestingour two junior team members were enthusiasticthe three "old guys" didn't get itfrom: paul graham.to: fred wilson.date: mon, feb 9, 2009 at 5:58 pm.subject: airbnbthe airbeds just won the first poll among all the yc startups in.their batch by a landslide.  in the past this has not been a 100%.indicator of success (if only anything were) but much better than.random.--pgfrom: fred wilson.to: paul graham.date: fri, feb 13, 2009 at 5:29 pm.subject: re: airbnbi met them todaythey have an interesting businessi'm just not sure how big it's going to befredfrom: paul graham.to: fred wilson.date: sat, feb 14, 2009 at 9:50 am.subject: re: airbnbdid they explain the long-term goal of being the market in accommodation.the way ebay is in stuff?  that seems like it would be huge.  hotels.now are like airlines in the 1970s before they figured out how to.increase their load factors.from: fred wilson.to: paul graham.date: tue, feb 17, 2009 at 2:05 pm.subject: re: airbnbthey did but i am not sure i buy thatabnb reminds me of etsy in that it facilitates real commerce in a.marketplace model directly between two peopleso i think it can scale all the way to the bed and breakfast marketbut i am not sure they can take on the hotel marketi could be wrongbut even so, if you include short term room rental, second home.rental, bed and breakfast, and other similar classes of accommodations,.you get to a pretty big opportunityfredfrom: paul graham.to: fred wilson.date: wed, feb 18, 2009 at 12:21 am.subject: re: airbnbso invest in them!  they're very capital efficient.  they would.make an investor's money go a long way.it's also counter-cyclical.  they just arrived back from nyc, and.when i asked them what was the most significant thing they'd observed,.it was how many of their users actually needed to do these rentals.to pay their rents.--pgfrom: fred wilson.to: paul graham.date: wed, feb 18, 2009 at 2:21 am.subject: re: airbnbthere's a lot to likei've done a few things, like intro it to my friends at foundry who.were investors in service metrics and understand this modeli am also talking to my friend mark pincus who had an idea like.this a few years ago.so we are working on itthanks for the leadfredfrom: paul graham.to: fred wilson.date: fri, feb 20, 2009 at 10:00 pm.subject: airbnb already spreading to prosi know you're skeptical they'll ever get hotels, but there's a.continuum between private sofas and hotel rooms, and they just moved.one step further along it.[link to an airbnb user]this is after only a few months.  i bet you they will get hotels.eventually.  it will start with small ones.  just wait till all the.10-room pensiones in rome discover this site.  and once it spreads.to hotels, where is the point (in size of chain) at which it stops?.once something becomes a big marketplace, you ignore it at your.peril.--pgfrom: fred wilson.to: paul graham.date: sat, feb 21, 2009 at 4:26 am.subject: re: airbnb already spreading to prosthat's true. it's also true that there are quite a few marketplaces.out there that serve this same marketif you look at many of the people who list at abnb, they list.elsewhere tooi am not negative on this one, i am interested, but we are still.in the gathering data phase.fred<eot><sot>founder control.want to start a startup?  get funded by.y combinator..december 2010
someone we funded is talking to vcs now, and asked me how common.it was for a startup's founders to retain control of the board after.a series a round.  he said vcs told him this almost never happened.ten years ago that was true.  in the past, founders rarely kept.control of the board through a series a.  the traditional series a.board consisted of two founders, two vcs, and one independent member..more recently the recipe is often one founder, one vc, and one.independent.  in either case the founders lose their majority.but not always.  mark zuckerberg kept control of facebook's board.through the series a and still has it today.  mark pincus has kept.control of zynga's too.  but are these just outliers?  how common.is it for founders to keep control after an a round?  i'd heard of.several cases among the companies we've funded, but i wasn't sure.how many there were, so i emailed the ycfounders list.the replies surprised me.  in a dozen companies we've funded, the.founders still had a majority of the board seats after the series.a round.i feel like we're at a tipping point here.  a lot of vcs still act.as if founders retaining board control after a series a is unheard-of..a lot of them try to make you feel bad if you even ask — as if.you're a noob or a control freak for wanting such a thing.  but the.founders i heard from aren't noobs or control freaks.  or if they.are, they are, like mark zuckerberg, the kind of noobs and control.freaks vcs should be trying to fund more of.founders retaining control after a series a is clearly heard-of..and barring financial catastrophe, i think in the coming year it.will become the norm.control of a company is a more complicated matter than simply.outvoting other parties in board meetings.  investors usually get.vetos over certain big decisions, like selling the company, regardless.of how many board seats they have.  and board votes are rarely.split.  matters are decided in the discussion preceding the vote,.not in the vote itself, which is usually unanimous.  but if opinion.is divided in such discussions, the side that knows it would lose.in a vote will tend to be less insistent.  that's what board control.means in practice.  you don't simply get to do whatever you want;.the board still has to act in the interest of the shareholders; but.if you have a majority of board seats, then your opinion about.what's in the interest of the shareholders will tend to prevail.so while board control is not total control, it's not imaginary.either.  there's inevitably a difference in how things feel within.the company.  which means if it becomes the norm for founders to.retain board control after a series a, that will change the way.things feel in the whole startup world.the switch to the new norm may be surprisingly fast, because the.startups that can retain control tend to be the best ones.  they're.the ones that set the trends, both for other startups and for vcs.a lot of the reason vcs are harsh when negotiating with startups.is that they're embarrassed to go back to their partners looking.like they got beaten.  when they sign a termsheet, they want to be.able to brag about the good terms they got.  a lot of them don't.care that much personally about whether founders keep board control..they just don't want to seem like they had to make concessions..which means if letting the founders keep control stops being perceived.as a concession, it will rapidly become much more common.like a lot of changes that have been forced on vcs, this change.won't turn out to be as big a problem as they might think. vcs will.still be able to convince; they just won't be able to compel.  and.the startups where they have to resort to compulsion are not the.ones that matter anyway.  vcs make most of their money from a few.big hits, and those aren't them.knowing that founders will keep control of the board may even help.vcs pick better.  if they know they can't fire the founders, they'll.have to choose founders they can trust.  and that's who they should.have been choosing all along.thanks to sam altman, john bautista, trevor blackwell, paul.buchheit, brian chesky, bill clerico, patrick collison, adam.goldstein, james lindenbaum, jessica livingston, and fred wilson.for reading drafts of this.<eot><sot>tablets.december 2010
i was thinking recently how inconvenient it was not to have a general.term for iphones, ipads, and the corresponding things running.android.  the closest to a general term seems to be "mobile devices,".but that (a) applies to any mobile phone, and (b) doesn't really.capture what's distinctive about the ipad.after a few seconds it struck me that what we'll end up calling.these things is tablets.  the only reason we even consider calling.them "mobile devices" is that the iphone preceded the ipad.  if the.ipad had come first, we wouldn't think of the iphone as a phone;.we'd think of it as a tablet small enough to hold up to your ear.the iphone isn't so much a phone as a replacement for a phone..that's an important distinction, because it's an early instance of.what will become a common pattern.  many if not most of the.special-purpose objects around us are going to be replaced by apps.running on tablets.this is already clear in cases like gpses, music players, and.cameras.  but i think it will surprise people how many things are.going to get replaced.  we funded one startup that's.replacing keys..the fact that you can change font sizes easily means the ipad.effectively replaces reading glasses.  i wouldn't be surprised if.by playing some clever tricks with the accelerometer you could even.replace the bathroom scale.the advantages of doing things in software on a single device are.so great that everything that can get turned into software will..so for the next couple years, a good recipe for startups.will be to look around you for things that people haven't realized.yet can be made unnecessary by a tablet app.in 1938 buckminster fuller coined the term ephemeralization to.describe the increasing tendency of physical machinery to be replaced.by what we would now call software.  the reason tablets are going.to take over the world is not (just) that steve jobs and co are.industrial design wizards, but because they have this force behind.them.  the iphone and the ipad have effectively drilled a hole that.will allow ephemeralization to flow into a lot of new areas.  no one.who has studied the history of technology would want to underestimate.the power of that force.i worry about the power apple could have with this force behind.them.  i don't want to see another era of client monoculture like.the microsoft one in the 80s and 90s.  but if ephemeralization is.one of the main forces driving the spread of tablets, that suggests.a way to compete with apple: be a better platform for it.it has turned out to be a great thing that apple tablets have.accelerometers in them.  developers have used the accelerometer in.ways apple could never have imagined.  that's the nature of platforms..the more versatile the tool, the less you can predict how people.will use it.  so tablet makers should be thinking: what else can.we put in there?  not merely hardware, but software too.  what else.can we give developers access to?  give hackers an inch and they'll.take you a mile..thanks to sam altman, paul buchheit, jessica livingston, and.robert morris for reading drafts of this.<eot><sot>what we look for in founders.want to start a startup?  get funded by.y combinator..october 2010
.(i wrote this for forbes, who asked me to write something.about the qualities we look for in founders.  in print they had to cut.the last item because they didn't have room.)1. determinationthis has turned out to be the most important quality in startup.founders.  we thought when we started y combinator that the most.important quality would be intelligence.  that's the myth in the.valley. and certainly you don't want founders to be stupid.  but.as long as you're over a certain threshold of intelligence, what.matters most is determination.  you're going to hit a lot of.obstacles.  you can't be the sort of person who gets demoralized.easily.bill clerico and rich aberman of wepay.are a good example.  they're.doing a finance startup, which means endless negotiations with big,.bureaucratic companies.  when you're starting a startup that depends.on deals with big companies to exist, it often feels like they're.trying to ignore you out of existence.  but when bill clerico starts.calling you, you may as well do what he asks, because he is not.going away..2. flexibilityyou do not however want the sort of determination implied by phrases.like "don't give up on your dreams."  the world of startups is so.unpredictable that you need to be able to modify your dreams on the.fly.  the best metaphor i've found for the combination of determination.and flexibility you need is a running back..he's determined to get.downfield, but at any given moment he may need to go sideways or.even backwards to get there.the current record holder for flexibility may be daniel gross of.greplin.  he applied to yc with.some bad ecommerce idea.  we told.him we'd fund him if he did something else.  he thought for a second,.and said ok.  he then went through two more ideas before settling.on greplin.  he'd only been working on it for a couple days when.he presented to investors at demo day, but he got a lot of interest..he always seems to land on his feet..3. imaginationintelligence does matter a lot of course.  it seems like the type.that matters most is imagination.  it's not so important to be able.to solve predefined problems quickly as to be able to come up with.surprising new ideas.  in the startup world, most good ideas.seem.bad initially.  if they were obviously good, someone would already.be doing them.  so you need the kind of intelligence that produces.ideas with just the right level of craziness.airbnb is that kind of idea..in fact, when we funded airbnb, we.thought it was too crazy.  we couldn't believe large numbers of.people would want to stay in other people's places.  we funded them.because we liked the founders so much.  as soon as we heard they'd.been supporting themselves by selling obama and mccain branded.breakfast cereal, they were in.  and it turned out the idea was on.the right side of crazy after all..4. naughtinessthough the most successful founders are usually good people, they.tend to have a piratical gleam in their eye.  they're not goody.two-shoes type good.  morally, they care about getting the big.questions right, but not about observing proprieties.  that's why.i'd use the word naughty rather than evil.  they delight in.breaking.rules, but not rules that matter.  this quality may be redundant.though; it may be implied by imagination.sam altman of loopt.is one of the most successful alumni, so we.asked him what question we could put on the y combinator application.that would help us discover more people like him.  he said to ask.about a time when they'd hacked something to their advantage—hacked in the sense of beating the system, not breaking into.computers.  it has become one of the questions we pay most attention.to when judging applications..5. friendshipempirically it seems to be hard to start a startup with just.one.founder.  most of the big successes have two or three.  and the.relationship between the founders has to be strong.  they must.genuinely like one another, and work well together.  startups do.to the relationship between the founders what a dog does to a sock:.if it can be pulled apart, it will be.emmett shear and justin kan of justin.tv.are a good example of close.friends who work well together.  they've known each other since.second grade.  they can practically read one another's minds.  i'm.sure they argue, like all founders, but i have never once sensed.any unresolved tension between them.thanks to jessica livingston and chris steiner for reading drafts of this.<eot><sot>the new funding landscape.want to start a startup?  get funded by.y combinator..october 2010
after barely changing at all for decades, the startup funding.business is now in what could, at least by comparison, be called.turmoil.  at y combinator we've seen dramatic changes in the funding.environment for startups.  fortunately one of them is much higher.valuations.the trends we've been seeing are probably not yc-specific.  i wish.i could say they were, but the main cause is probably just that we.see trends first—partly because the startups we fund are very.plugged into the valley and are quick to take advantage of anything.new, and partly because we fund so many that we have enough data.points to see patterns clearly.what we're seeing now, everyone's probably going to be seeing in.the next couple years.  so i'm going to explain what we're seeing,.and what that will mean for you if you try to raise money.super-angelslet me start by describing what the world of startup funding used.to look like.  there used to be two sharply differentiated types.of investors: angels and venture capitalists.  angels are individual.rich people who invest small amounts of their own money, while vcs.are employees of funds that invest large amounts of other people's.for decades there were just those two types of investors, but now.a third type has appeared halfway between them: the so-called.super-angels..[1].and vcs have been provoked by their arrival.into making a lot of angel-style investments themselves.  so the.previously sharp line between angels and vcs has become hopelessly.blurred.there used to be a no man's land between angels and vcs.  angels.would invest $20k to $50k apiece, and vcs usually a million or more..so an angel round meant a collection of angel investments that.combined to maybe $200k, and a vc round meant a series a round in.which a single vc fund (or occasionally two) invested $1-5 million.the no man's land between angels and vcs was a very inconvenient.one for startups, because it coincided with the amount many wanted.to raise.  most startups coming out of demo day wanted to raise.around $400k.  but it was a pain to stitch together that much out.of angel investments, and most vcs weren't interested in investments.so small.  that's the fundamental reason the super-angels have.appeared.  they're responding to the market.the arrival of a new type of investor is big news for startups,.because there used to be only two and they rarely competed with one.another.  super-angels compete with both angels and vcs.  that's.going to change the rules about how to raise money.  i don't know.yet what the new rules will be, but it looks like most of the changes.will be for the better.a super-angel has some of the qualities of an angel, and some of.the qualities of a vc.  they're usually individuals, like angels..in fact many of the current super-angels were initially angels of.the classic type.  but like vcs, they invest other people's money..this allows them to invest larger amounts than angels:  a typical.super-angel investment is currently about $100k.  they make investment.decisions quickly, like angels.  and they make a lot more investments.per partner than vcs—up to 10 times as many.the fact that super-angels invest other people's money makes them.doubly alarming to vcs. they don't just compete for startups; they.also compete for investors.  what super-angels really are is a new.form of fast-moving, lightweight vc fund.   and those of us in the.technology world know what usually happens when something comes.along that can be described in terms like that.  usually it's the.replacement.will it be?  as of now, few of the startups that take money from.super-angels are ruling out taking vc money.  they're just postponing.it.  but that's still a problem for vcs.  some of the startups that.postpone raising vc money may do so well on the angel money they.raise that they never bother to raise more.  and those who do raise.vc rounds will be able to get higher valuations when they do.  if.the best startups get 10x higher valuations when they raise series.a rounds, that would cut vcs' returns from winners at least tenfold..[2]so i think vc funds are seriously threatened by the super-angels..but one thing that may save them to some extent is the uneven.distribution of startup outcomes: practically all the returns are.concentrated in a few big successes.  the expected value of a startup.is the percentage chance it's google.  so to the extent that winning.is a matter of absolute returns, the super-angels could win practically.all the battles for individual startups and yet lose the war, if.they merely failed to get those few big winners.  and there's a.chance that could happen, because the top vc funds have better.brands, and can also do more for their portfolio companies..[3]because super-angels make more investments per partner, they have.less partner per investment.  they can't pay as much attention to.you as a vc on your board could.  how much is that extra attention.worth?  it will vary enormously from one partner to another.  there's.no consensus yet in the general case.  so for now this is something.startups are deciding individually.till now, vcs' claims about how much value they added were sort of.like the government's.  maybe they made you feel better, but you.had no choice in the matter, if you needed money on the scale only.vcs could supply.  now that vcs have competitors, that's going to.put a market price on the help they offer.  the interesting thing.is, no one knows yet what it will be.do startups that want to get really big need the sort of advice and.connections only the top vcs can supply?  or would super-angel money.do just as well?  the vcs will say you need them, and the super-angels.will say you don't.  but the truth is, no one knows yet, not even.the vcs and super-angels themselves.   all the super-angels know.is that their new model seems promising enough to be worth trying,.and all the vcs know is that it seems promising enough to worry.about.roundswhatever the outcome, the conflict between vcs and super-angels is.good news for founders.  and not just for the obvious reason that.more competition for deals means better terms.  the whole shape of.deals is changing.one of the biggest differences between angels and vcs is the amount.of your company they want.  vcs want a lot.  in a series a round.they want a third of your company, if they can get it.  they don't.care much how much they pay for it, but they want a lot because the.number of series a investments they can do is so small.  in a.traditional series a investment, at least one partner from the vc.fund takes a seat on your board..[4].since board seats last about.5 years and each partner can't handle more than about 10 at once,.that means a vc fund can only do about 2 series a deals per partner.per year. and that means they need to get as much of the company.as they can in each one.  you'd have to be a very promising startup.indeed to get a vc to use up one of his 10 board seats for only a.few percent of you.since angels generally don't take board seats, they don't have this.constraint.  they're happy to buy only a few percent of you.  and.although the super-angels are in most respects mini vc funds, they've.retained this critical property of angels.  they don't take board.seats, so they don't need a big percentage of your company.though that means you'll get correspondingly less attention from.them, it's good news in other respects.  founders never really liked.giving up as much equity as vcs wanted.  it was a lot of the company.to give up in one shot.  most founders doing series a deals would.prefer to take half as much money for half as much stock, and then.see what valuation they could get for the second half of the stock.after using the first half of the money to increase its value.  but.vcs never offered that option.now startups have another alternative.  now it's easy to raise angel.rounds about half the size of series a rounds.  many of the startups.we fund are taking this route, and i predict that will be true of.startups in general.a typical big angel round might be $600k on a convertible note with.a valuation cap of $4 million premoney.  meaning that when the note.converts into stock (in a later round, or upon acquisition), the.investors in that round will get .6 / 4.6, or 13% of the company..that's a lot less than the 30 to 40% of the company you usually.give up in a series a round if you do it so early..[5]but the advantage of these medium-sized rounds is not just that.they cause less dilution.  you also lose less control.  after an.angel round, the founders almost always still have control of the.company, whereas after a series a round they often don't.  the.traditional board structure after a series a round is two founders,.two vcs, and a (supposedly) neutral fifth person.  plus series a.terms usually give the investors a veto over various kinds of.important decisions, including selling the company.  founders usually.have a lot of de facto control after a series a, as long as things.are going well.  but that's not the same as just being able to do.what you want, like you could before.a third and quite significant advantage of angel rounds is that.they're less stressful to raise.  raising a traditional series a.round has in the past taken weeks, if not months.  when a vc firm.can only do 2 deals per partner per year, they're careful about.which they do.  to get a traditional series a round you have to go.through a series of meetings, culminating in a full partner meeting.where the firm as a whole says yes or no.  that's the really scary.part for founders: not just that series a rounds take so long, but.at the end of this long process the vcs might still say no.  the.chance of getting rejected after the full partner meeting averages.about 25%.  at some firms it's over 50%.fortunately for founders, vcs have been getting a lot faster..nowadays valley vcs are more likely to take 2 weeks than 2 months..but they're still not as fast as angels and super-angels, the most.decisive of whom sometimes decide in hours.raising an angel round is not only quicker, but you get feedback.as it progresses.  an angel round is not an all or nothing thing.like a series a.  it's composed of multiple investors with varying.degrees of seriousness, ranging from the upstanding ones who commit.unequivocally to the jerks who give you lines like "come back to.me to fill out the round." you usually start collecting money from.the most committed investors and work your way out toward the.ambivalent ones, whose interest increases as the round fills up.but at each point you know how you're doing.  if investors turn.cold you may have to raise less, but when investors in an angel.round turn cold the process at least degrades gracefully, instead.of blowing up in your face and leaving you with nothing, as happens.if you get rejected by a vc fund after a full partner meeting..whereas if investors seem hot, you can not only close the round.faster, but now that convertible notes are becoming the norm,.actually raise the price to reflect demand.valuationhowever, the vcs have a weapon they can use against the super-angels,.and they have started to use it.   vcs have started making angel-sized.investments too.  the term "angel round" doesn't mean that all the.investors in it are angels; it just describes the structure of the.round.  increasingly the participants include vcs making investments.of a hundred thousand or two.  and when vcs invest in angel rounds.they can do things that super-angels don't like.  vcs are quite.valuation-insensitive in angel rounds—partly because they are.in general, and partly because they don't care that much about the.returns on angel rounds, which they still view mostly as a way to.recruit startups for series a rounds later.  so vcs who invest in.angel rounds can blow up the valuations for angels and super-angels.who invest in them..[6]some super-angels seem to care about valuations.  several turned.down yc-funded startups after demo day because their valuations.were too high.  this was not a problem for the startups; by definition.a high valuation means enough investors were willing to accept it..but it was mysterious to me that the super-angels would quibble.about valuations.  did they not understand that the big returns.come from a few big successes, and that it therefore mattered far.more which startups you picked than how much you paid for them?after thinking about it for a while and observing certain other.signs, i have a theory that explains why the super-angels may be.smarter than they seem.  it would make sense for super-angels to.want low valuations if they're hoping to invest in startups that.get bought early.  if you're hoping to hit the next google, you.shouldn't care if the valuation is 20 million.  but if you're looking.for companies that are going to get bought for 30 million, you care..if you invest at 20 and the company gets bought for 30, you only.get 1.5x.  you might as well buy apple.so if some of the super-angels were looking for companies that could.get acquired quickly, that would explain why they'd care about.valuations.  but why would they be looking for those?   because.depending on the meaning of "quickly," it could actually be very.profitable.  a company that gets acquired for 30 million is a failure.to a vc, but it could be a 10x return for an angel, and moreover,.a quick 10x return.  rate of return is what matters in.investing—not the multiple you get, but the multiple per year..if a super-angel gets 10x in one year, that's a higher rate of.return than a vc could ever hope to get from a company that took 6.years to go public.  to get the same rate of return, the vc would.have to get a multiple of 10^6—one million x.  even google.didn't come close to that.so i think at least some super-angels are looking for companies.that will get bought.  that's the only rational explanation for.focusing on getting the right valuations, instead of the right.companies.  and if so they'll be different to deal with than vcs..they'll be tougher on valuations, but more accommodating if you want.to sell early.prognosiswho will win, the super-angels or the vcs?  i think the answer to.that is, some of each.  they'll each become more like one another..the super-angels will start to invest larger amounts, and the vcs.will gradually figure out ways to make more, smaller investments.faster.  a decade from now the players will be hard to tell apart,.and there will probably be survivors from each group.what does that mean for founders?  one thing it means is that the.high valuations startups are presently getting may not last forever..to the extent that valuations are being driven up by price-insensitive.vcs, they'll fall again if vcs become more like super-angels and.start to become more miserly about valuations.  fortunately if this.does happen it will take years.the short term forecast is more competition between investors, which.is good news for you.  the super-angels will try to undermine the.vcs by acting faster, and the vcs will try to undermine the.super-angels by driving up valuations.  which for founders will.result in the perfect combination: funding rounds that close fast,.with high valuations.but remember that to get that combination, your startup will have.to appeal to both super-angels and vcs.  if you don't seem like you.have the potential to go public, you won't be able to use vcs to.drive up the valuation of an angel round.there is a danger of having vcs in an angel round: the so-called.signalling risk.  if vcs are only doing it in the hope of investing.more later, what happens if they don't?  that's a signal to everyone.else that they think you're lame.how much should you worry about that?  the seriousness of signalling.risk depends on how far along you are.  if by the next time you.need to raise money, you have graphs showing rising revenue or.traffic month after month, you don't have to worry about any signals.your existing investors are sending.  your results will speak for.themselves..[7]whereas if the next time you need to raise money you won't yet have.concrete results, you may need to think more about the message your.investors might send if they don't invest more.  i'm not sure yet.how much you have to worry, because this whole phenomenon of vcs.doing angel investments is so new. but my instincts tell me you.don't have to worry much.  signalling risk smells like one of those.things founders worry about that's not a real problem.  as a rule,.the only thing that can kill a good startup is the startup itself..startups hurt themselves way more often than competitors hurt them,.for example.  i suspect signalling risk is in this category too.one thing yc-funded startups have been doing to mitigate the risk.of taking money from vcs in angel rounds is not to take too much.from any one vc.  maybe that will help, if you have the luxury of.turning down money.fortunately, more and more startups will.  after decades of competition.that could best be described as intramural, the startup funding.business is finally getting some real competition.  that should.last several years at least, and maybe a lot longer. unless there's.some huge market crash, the next couple years are going to be a.good time for startups to raise money.  and that's exciting because.it means lots more startups will happen..notes[1].i've also heard them called "mini-vcs" and "micro-vcs." i.don't know which name will stick.there were a couple predecessors.  ron conway had angel funds.starting in the 1990s, and in some ways first round capital is closer to a.super-angel than a vc fund.[2].it wouldn't cut their overall returns tenfold, because investing.later would probably (a) cause them to lose less on investments.that failed, and (b) not allow them to get as large a percentage.of startups as they do now.  so it's hard to predict precisely what.would happen to their returns.[3].the brand of an investor derives mostly from the success of.their portfolio companies.  the top vcs thus have a big brand.advantage over the super-angels.  they could make it self-perpetuating.if they used it to get all the best new startups.  but i don't think.they'll be able to.  to get all the best startups, you have to do.more than make them want you.  you also have to want them; you have.to recognize them when you see them, and that's much harder..super-angels will snap up stars that vcs miss.  and that will cause.the brand gap between the top vcs and the super-angels gradually.to erode.[4].though in a traditional series a round vcs put two partners.on your board, there are signs now that vcs may begin to conserve.board seats by switching to what used to be considered an angel-round.board, consisting of two founders and one vc.  which is also to the.founders' advantage if it means they still control the company.[5].in a series a round, you usually have to give up more than.the actual amount of stock the vcs buy, because they insist you.dilute yourselves to set aside an "option pool" as well.  i predict.this practice will gradually disappear though.[6].the best thing for founders, if they can get it, is a convertible.note with no valuation cap at all.  in that case the money invested.in the angel round just converts into stock at the valuation of the.next round, no matter how large.  angels and super-angels tend not.to like uncapped notes. they have no idea how much of the company.they're buying.  if the company does well and the valuation of the.next round is high, they may end up with only a sliver of it.  so.by agreeing to uncapped notes, vcs who don't care about valuations.in angel rounds can make offers that super-angels hate to match.[7].obviously signalling risk is also not a problem if you'll.never need to raise more money.  but startups are often mistaken.about that.thanks to sam altman, john bautista, patrick collison, james.lindenbaum, reid hoffman, jessica livingston and harj taggar.for reading drafts.of this.<eot><sot>where to see silicon valley.want to start a startup?  get funded by.y combinator..october 2010
silicon valley proper is mostly suburban sprawl.  at first glance.it doesn't seem there's anything to see.  it's not the sort of place.that has conspicuous monuments.  but if you look, there are subtle.signs you're in a place that's different from other places.1. stanford.universitystanford is a strange place.  structurally it is to an ordinary.university what suburbia is to a city.  it's enormously spread out,.and feels surprisingly empty much of the time.  but notice the.weather.  it's probably perfect.  and notice the beautiful mountains.to the west.  and though you can't see it, cosmopolitan san francisco.is 40 minutes to the north.  that combination is much of the reason.silicon valley grew up around this university and not some other.one.2. university.avea surprising amount of the work of the valley is done in the cafes.on or just off university ave in palo alto.  if you visit on a.weekday between 10 and 5, you'll often see founders pitching.investors.  in case you can't tell, the founders are the ones leaning.forward eagerly, and the investors are the ones sitting back with.slightly pained expressions.3.  the lucky.officethe office at 165 university ave was google's first.  then it was.paypal's.  (now it's wepay's.)  the interesting thing about it is.the location.  it's a smart move to put a startup in a place with.restaurants and people walking around instead of in an office park,.because then the people who work there want to stay there, instead.of fleeing as soon as conventional working hours end.  they go out.for dinner together, talk about ideas, and then come back and.implement them.it's important to realize that google's current location in an.office park is not where they started; it's just where they were.forced to move when they needed more space.  facebook was till.recently across the street, till they too had to move because they.needed more space.4. old.palo altopalo alto was not originally a suburb.  for the first 100 years or.so of its existence, it was a college town out in the countryside..then in the mid 1950s it was engulfed in a wave of suburbia that.raced down the peninsula.  but palo alto north of oregon expressway.still feels noticeably different from the area around it.  it's one.of the nicest places in the valley.  the buildings are old (though.increasingly they are being torn down and replaced with generic.mcmansions) and the trees are tall.  but houses are very.expensive—around $1000 per square foot. this is post-exit.silicon valley..5. sand.hill roadit's interesting to see the vcs' offices on the north side of sand.hill road precisely because they're so boringly uniform.  the.buildings are all more or less the same, their exteriors express.very little, and they are arranged in a confusing maze.  (i've been.visiting them for years and i still occasionally get lost.) it's.not a coincidence.  these buildings are a pretty accurate reflection.of the vc business.if you go on a weekday you may see groups of founders there to meet.vcs. but mostly you won't see anyone; bustling is the last word.you'd use to describe the atmos.  visiting sand hill road reminds.you that the opposite of "down and dirty" would be "up and clean."6.  castro.streetit's a tossup whether castro street or university ave should be.considered the heart of the valley now.  university ave would have.been 10 years ago.  but palo alto is getting expensive.  increasingly.startups are located in mountain view, and palo alto is a place.they come to meet investors.  palo alto has a lot of different.cafes, but there is one that clearly dominates in mountain view:.red.rock.7. googlegoogle spread out from its first building in mountain view.to a lot of the surrounding ones.  but because the.buildings were built at different times by different people,.the place doesn't have the sterile, walled-off feel that a typical.large company's headquarters have.  it definitely has a flavor of.its own though.  you sense there is something afoot.  the general.atmos is vaguely utopian; there are lots of priuses, and people who.look like they drive them.you can't get into google unless you know someone there.  it's very.much worth seeing inside if you can, though.   ditto for facebook,.at the end of california ave in palo alto, though there is nothing.to see outside.8.  skyline.driveskyline drive runs along the crest of the santa cruz mountains.  on.one side is the valley, and on the other is the sea—which.because it's cold and foggy and has few harbors, plays surprisingly.little role in the lives of people in the valley, considering how.close it is.  along some parts of skyline the dominant trees are.huge redwoods, and in others they're live oaks.  redwoods mean those.are the parts where the fog off the coast comes in at night; redwoods.condense rain out of fog.  the mrosd manages a collection of great walking trails off.skyline.9. 280silicon valley has two highways running the length of it: 101, which.is pretty ugly, and 280, which is one of the more beautiful highways.in the world.  i always take 280 when i have a choice.  notice the.long narrow lake to the west? that's the san andreas fault.  it.runs along the base of the hills, then heads uphill through portola.valley.  one of the mrosd trails runs right along.the fault.  a string of rich neighborhoods runs along the.foothills to the west of 280: woodside, portola valley, los altos.hills, saratoga, los gatos.slac goes right under 280 a little bit south of sand hill road.  and a couple miles south of that is the valley's equivalent of the "welcome to las vegas" sign: the dish..notesi skipped the computer.history museum because this is a list of where to see the valley.itself, not where to see artifacts from it.  i also skipped san.jose.  san jose calls itself the capital of silicon valley, but.when people in the valley use the phrase "the city," they mean san.francisco.  san jose is a dotted line on a map.thanks to sam altman, paul buchheit, patrick collison, and jessica livingston.for reading drafts of this.<eot><sot>high resolution fundraising.want to start a startup?  get funded by.y combinator..september 2010
the reason startups have been using.more convertible notes in angel.rounds is that they make deals close faster.  by making it easier.for startups to give different prices to different investors, they.help them break the sort of deadlock that happens when investors.all wait to see who else is going to invest.by far the biggest influence on investors' opinions of a startup.is the opinion of other investors.  there are very, very few who.simply decide for themselves.  any startup founder can tell you the.most common question they hear from investors is not about the.founders or the product, but "who else is investing?"that tends to produce deadlocks.  raising an old-fashioned.fixed-size equity round can take weeks, because all the angels sit around.waiting for the others to commit, like competitors in a bicycle.sprint who deliberately ride slowly at the start so they can follow.whoever breaks first.convertible notes let startups beat such deadlocks by rewarding.investors willing to move first with lower (effective) valuations..which they deserve because they're taking more risk.  it's much.safer to invest in a startup ron conway has already invested in;.someone who comes after him should pay a higher price.the reason convertible notes allow more flexibility in price is.that valuation caps aren't actual valuations, and notes are cheap.and easy to do.  so you can do high-resolution fundraising: if you.wanted you could have a separate note with a different cap for each.investor.that cap need not simply rise monotonically.  a startup could.also give better deals to investors they expected to help.them most.  the point is simply that different investors,.whether because of the help they offer or their willingness to.commit, have different values for.startups, and their terms should reflect that.different terms for different investors is.clearly the way of the future.  markets always evolve toward higher.resolution.  you may not need to use convertible notes to do it..with sufficiently lightweight standardized equity terms (and some.changes in investors' and lawyers' expectations about equity rounds).you might be able to do the same thing with equity instead of debt..either would be fine with startups, so long as they can easily.change their valuation.deadlocks weren't the only problem with fixed-size equity rounds..another was that startups had to decide in advance how much to.raise.  i think it's a mistake for a startup to fix upon a specific.number. if investors are easily convinced, the startup should raise more.now, and if investors are skeptical, the startup should take a.smaller amount and use that to get the company to the point where.it's more convincing.it's just not reasonable to expect startups to pick an optimal round.size in advance, because that depends on the reactions of investors,.and those are impossible to predict.fixed-size, multi-investor angel rounds are such a bad idea for.startups that one wonders why things were ever done that way.  one.possibility is that this custom reflects the way investors like to.collude when they can get away with it.  but i think the actual.explanation is less sinister.  i think angels (and their lawyers).organized rounds this way in unthinking imitation of vc series a.rounds.  in a series a, a fixed-size equity round with a lead makes.sense, because there is usually just one big investor, who is.unequivocally the lead.  fixed-size series a rounds already are.high res.  but the more investors you have in a round, the less.sense it makes for everyone to get the same price.the most interesting question here may be what high res fundraising.will do to the world of investors.  bolder investors will now get.rewarded with lower prices.  but more important, in a.hits-driven business, is that they'll be able to get into the deals.they want.  whereas the "who else is investing?" type of investors.will not only pay higher prices, but may not be able to get into.the best deals at all.thanks to immad akhund, sam altman, john bautista, pete koomen,.jessica livingston, dan siroker, harj taggar, and.fred wilson for reading drafts of this.<eot><sot>what happened to yahoo.want to start a startup?  get funded by.y combinator..august 2010
when i went to work for yahoo after they bought our startup in 1998,.it felt like the center of the world.  it was supposed to be the.next big thing.  it was supposed to be what google turned out to.be.what went wrong?  the problems that hosed yahoo go back a long time,.practically to the beginning of the company.  they were already.very visible when i got there in 1998.  yahoo had two problems.google didn't: easy money, and ambivalence about being a technology.company.moneythe first time i met jerry yang, we thought we were meeting for.different reasons.  he thought we were meeting so he could check.us out in person before buying us. i thought we were meeting so we.could show him our new technology, revenue loop.   it was a way of.sorting shopping search results.  merchants bid a percentage of.sales for traffic, but the results were sorted not by the bid but.by the bid times the average amount a user would buy.  it was.like the algorithm google uses now to sort ads, but this was in the.spring of 1998, before google was founded.revenue loop was the optimal sort for shopping search, in the sense.that it sorted in order of how much money yahoo would make from.each link.  but it wasn't just optimal in that sense.  ranking.search results by user behavior also makes search better.  users.train the search: you can start out finding matches based on mere.textual similarity, and as users buy more stuff the search results.get better and better.jerry didn't seem to care.  i was confused.  i was showing him.technology that extracted the maximum value from search traffic,.and he didn't care?  i couldn't tell whether i was explaining it.badly, or he was just very poker faced.i didn't realize the answer till later, after i went to work at.yahoo.  it was neither of my guesses.  the reason yahoo didn't care.about a technique that extracted the full value of traffic was that.advertisers were already overpaying for it.  if yahoo merely extracted.the actual value, they'd have made less.hard as it is to believe now, the big money then was in banner ads..advertisers were willing to pay ridiculous amounts for banner ads..so yahoo's sales force had evolved to exploit this source of revenue..led by a large and terrifyingly formidable man called anil singh,.yahoo's sales guys would fly out to procter & gamble and come back.with million dollar orders for banner ad impressions.the prices seemed cheap compared to print, which was what advertisers,.for lack of any other reference, compared them to.  but they were.expensive compared to what they were worth.  so these big, dumb.companies were a dangerous source of revenue to depend on.  but.there was another source even more dangerous: other internet startups.by 1998, yahoo was the beneficiary of a de facto ponzi scheme..investors were excited about the internet.  one reason they were.excited was yahoo's revenue growth.  so they invested in new internet.startups.  the startups then used the money to buy ads on yahoo to.get traffic.  which caused yet more revenue growth for yahoo, and.further convinced investors the internet was worth investing in..when i realized this one day, sitting in my cubicle, i jumped up.like archimedes in his bathtub, except instead of "eureka!" i was.shouting "sell!"both the internet startups and the procter & gambles were doing.brand advertising.  they didn't care about targeting.  they just.wanted lots of people to see their ads.  so traffic became the thing.to get at yahoo.  it didn't matter what type..[1]it wasn't just yahoo.  all the search engines were doing it.  this.was why they were trying to get people to start calling them "portals".instead of "search engines." despite the actual meaning of the word.portal, what they meant by it was a site where users would find.what they wanted on the site itself, instead of just passing through.on their way to other destinations, as they did at a search engine.i remember telling david filo in late 1998 or early 1999 that yahoo.should buy google, because i and most of the other programmers in.the company were using it instead of yahoo for search.  he told me.that it wasn't worth worrying about.  search was only 6% of our.traffic, and we were growing at 10% a month.   it wasn't worth doing.better.i didn't say "but search traffic is worth more than other traffic!".i said "oh, ok."  because i didn't realize either how much search.traffic was worth.  i'm not sure even larry and sergey did then..if they had, google presumably wouldn't have expended any effort.on enterprise search.if circumstances had been different, the people running yahoo might.have realized sooner how important search was.  but they had the.most opaque obstacle in the world between them and the truth: money..as long as customers were writing big checks for banner ads, it was.hard to take search seriously.  google didn't have that to distract.them.hackersbut yahoo also had another problem that made it hard to change.directions.  they'd been thrown off balance from the start by their.ambivalence about being a technology company.one of the weirdest things about yahoo when i went to work there.was the way they insisted on calling themselves a "media company.".if you walked around their offices, it seemed like a software.company.  the cubicles were full of programmers writing code, product.managers thinking about feature lists and ship dates, support people.(yes, there were actually support people) telling users to restart.their browsers, and so on, just like a software company.  so why.did they call themselves a media company?one reason was the way they made money: by selling ads.  in 1995.it was hard to imagine a technology company making money that way..technology companies made money by selling their software to users..media companies sold ads.  so they must be a media company.another big factor was the fear of microsoft.   if anyone at yahoo.considered the idea that they should be a technology company, the.next thought would have been that microsoft would crush them.it's hard for anyone much younger than me to understand the fear.microsoft still inspired in 1995.  imagine a company with several.times the power google has now, but way meaner.  it was perfectly.reasonable to be afraid of them.  yahoo watched them crush the first.hot internet company, netscape.  it was reasonable to worry that.if they tried to be the next netscape, they'd suffer the same fate..how were they to know that netscape would turn out to be microsoft's.last victim?it would have been a clever move to pretend to be a media company.to throw microsoft off their scent.  but unfortunately yahoo actually.tried to be one, sort of.  project managers at yahoo were called."producers," for example, and the different parts of the company.were called "properties." but what yahoo really needed to be was a.technology company, and by trying to be something else, they ended.up being something that was neither here nor there.  that's why.yahoo as a company has never had a sharply defined identity.the worst consequence of trying to be a media company was that they.didn't take programming seriously enough.  microsoft (back in the.day), google, and facebook have all had hacker-centric cultures..but yahoo treated programming as a commodity.  at yahoo, user-facing software.was controlled by product managers and designers.  the job of.programmers was just to take the work of the product managers and.designers the final step, by translating it into code.one obvious result of this practice was that when yahoo built things,.they often weren't very good. but that wasn't the worst problem..the worst problem was that they hired bad programmers.microsoft (back in the day), google, and facebook have all been.obsessed with hiring the best programmers.  yahoo wasn't.  they.preferred good programmers to bad ones, but they didn't have the.kind of single-minded, almost obnoxiously elitist focus on hiring.the smartest people that the big winners have had.  and when you.consider how much competition there was for programmers when they.were hiring, during the bubble, it's not surprising that the quality.of their programmers was uneven.in technology, once you have bad programmers, you're doomed.  i.can't think of an instance where a company has sunk into technical.mediocrity and recovered. good programmers want to work with other.good programmers.  so once the quality of programmers at your company.starts to drop, you enter a death spiral from which there is no.recovery..[2]at yahoo this death spiral started early.  if there was ever a time when.yahoo was a google-style talent magnet, it was over by the time i.got there in 1998.the company felt prematurely old.  most technology companies.eventually get taken over by suits and middle managers.  at yahoo.it felt as if they'd deliberately accelerated this process.  they.didn't want to be a bunch of hackers.  they wanted to be suits.  a.media company should be run by suits.the first time i visited google, they had about 500 people, the.same number yahoo had when i went to work there.  but boy did things.seem different.  it was still very much a hacker-centric culture..i remember talking to some programmers in the cafeteria about the.problem of gaming search results (now known as seo), and they asked."what should we do?"  programmers at yahoo wouldn't have asked that..theirs was not to reason why; theirs was to build what product.managers spec'd.  i remember coming away from google thinking "wow,.it's still a startup."there's not much we can learn from yahoo's first fatal flaw. it's.probably too much to hope any company could avoid being damaged by.depending on a bogus source of revenue.  but startups can learn an.important lesson from the second one.  in the software business,.you can't afford not to have a hacker-centric culture.probably the most impressive commitment i've heard to having a.hacker-centric culture came from mark zuckerberg, when he spoke at.startup school in 2007.  he said that in the early days facebook.made a point of hiring programmers even for jobs that would not.ordinarily consist of programming, like hr and marketing.so which companies need to have a hacker-centric culture?  which.companies are "in the software business" in this respect?  as yahoo.discovered, the area covered by this rule is bigger than most people.realize.  the answer is: any company that needs to have good software.why would great programmers want to work for a company that didn't.have a hacker-centric culture, as long as there were others that.did?  i can imagine two reasons: if they were paid a huge amount,.or if the domain was interesting and none of the companies in it.were hacker-centric.  otherwise you can't attract good programmers.to work in a suit-centric culture.  and without good programmers.you won't get good software, no matter how many people you put on.a task, or how many procedures you establish to ensure "quality."hacker culture.often seems kind of irresponsible.  that's why people.proposing to destroy it use phrases like "adult supervision." that.was the phrase they used at yahoo.  but there are worse things than.seeming irresponsible.  losing, for example..notes[1].the closest we got to targeting when i was there was when we.created pets.yahoo.com in order to provoke a bidding war between 3.pet supply startups for the spot as top sponsor.[2].in theory you could beat the death spiral by buying good.programmers instead of hiring them.  you can get programmers.who would never have come to you as employees by buying their.startups. but so far the only companies smart enough.to do this are companies smart enough not to need to.thanks to trevor blackwell, jessica livingston, and.geoff ralston for.reading drafts of this.<eot><sot>the future of startup funding.want to start a startup?  get funded by.y combinator..august 2010
two years ago i.wrote about what i called "a huge, unexploited.opportunity in startup funding:" the growing disconnect between.vcs, whose current business model requires them to invest large.amounts, and a large class of startups that need less than they.used to.  increasingly, startups want a couple hundred thousand.dollars, not a couple million..[1]the opportunity is a lot less unexploited now.  investors have.poured into this territory from both directions.  vcs are much more.likely to make angel-sized investments than they were a year ago..and meanwhile the past year has seen a dramatic increase in a new.type of investor: the super-angel, who operates like an angel, but.using other people's money, like a vc.though a lot of investors are entering this territory, there is.still room for more.  the distribution of investors should mirror.the distribution of startups, which has the usual power law dropoff..so there should be a lot more people investing tens or hundreds of.thousands than millions..[2]in fact, it may be good for angels that there are more people doing.angel-sized deals, because if angel rounds become more legitimate,.then startups may start to opt for angel rounds even when they.could, if they wanted, raise series a rounds from vcs.  one reason.startups prefer series a rounds is that they're more prestigious..but if angel investors become more active and better known, they'll.increasingly be able to compete with vcs in brand.of course, prestige isn't the main reason to prefer a series a.round.  a startup will probably get more attention from investors.in a series a round than an angel round.  so if a startup is choosing.between an angel round and an a round from a good vc fund, i usually.advise them to take the a round..[3]but while series a rounds aren't going away, i think vcs should be.more worried about super-angels than vice versa.  despite their.name, the super-angels are really mini vc funds, and they clearly.have existing vcs in their sights.they would seem to have history on their side..the pattern here seems the same.one we see when startups and established companies enter a new.market.  online video becomes possible, and youtube plunges right.in, while existing media companies embrace it only half-willingly,.driven more by fear than hope, and aiming more to protect their.turf than to do great things for users.  ditto for paypal.  this.pattern is repeated over and over, and it's usually the invaders.who win. in this case the super-angels are the invaders.  angel.rounds are their whole business, as online video was for youtube..whereas vcs who make angel investments mostly do it as a way to.generate deal flow for series a rounds..[4]on the other hand, startup investing is a very strange business..nearly all the returns are concentrated in a few big winners.  if.the super-angels merely fail to invest in (and to some extent.produce) the big winners, they'll be out of business, even if they.invest in all the others.vcswhy don't vcs start doing smaller series a rounds?  the sticking.point is board seats.  in a traditional series a round, the partner.whose deal it is takes a seat on the startup's board.  if we assume.the average startup runs for 6 years and a partner can bear to be.on 12 boards at once, then a vc fund can do 2 series a deals per.partner per year.it has always seemed to me the solution is to take fewer board.seats.  you don't have to be on the board to help a startup.  maybe.vcs feel they need the power that comes with board membership to.ensure their money isn't wasted.  but have they tested that theory?.unless they've tried not taking board seats and found their returns.are lower, they're not bracketing the problem.i'm not saying vcs don't help startups.  the good ones help them a.lot.  what i'm saying is that the kind of help that matters, you.may not have to be a board member to give..[5]how will this all play out?  some vcs will probably adapt, by doing.more, smaller deals.  i wouldn't be surprised if by streamlining.their selection process and taking fewer board seats, vc funds could.do 2 to 3 times as many series a rounds with no loss of quality.but other vcs will make no more than superficial changes.  vcs are.conservative, and the threat to them isn't mortal.  the vc funds.that don't adapt won't be violently displaced.  they'll edge gradually.into a different business without realizing it.  they'll still do.what they will call series a rounds, but these will increasingly.be de facto series b rounds..[6]in such rounds they won't get the 25 to 40% of the company they do.now.  you don't give up as much of the company in later rounds.unless something is seriously wrong.  since the vcs who don't adapt.will be investing later, their returns from winners may be smaller..but investing later should also mean they have fewer losers.  so.their ratio of risk to return may be the same or even better..they'll just have become a different, more conservative, type of.investment.angelsin the big angel rounds that increasingly compete with series a.rounds, the investors won't take as much equity as vcs do now.  and.vcs who try to compete with angels by doing more, smaller deals.will probably find they have to take less equity to do it. which.is good news for founders: they'll get to keep more of the company.the deal terms of angel rounds will become less restrictive.too—not just less restrictive than series a terms, but less.restrictive than angel terms have traditionally been.in the future, angel rounds will less often be for specific amounts.or have a lead investor.  in the old days, the standard m.o. for.startups was to find one angel to act as the lead investor.  you'd.negotiate a round size and valuation with the lead, who'd supply.some but not all of the money.  then the startup and the lead would.cooperate to find the rest.the future of angel rounds looks more like this: instead of a fixed.round size, startups will do a rolling close, where they take money.from investors one at a time till they feel they have enough..[7].and though there's going to be one investor who gives them the first.check, and his or her help in recruiting other investors will.certainly be welcome, this initial investor will no longer be the.lead in the old sense of managing the round.  the startup will now.do that themselves.there will continue to be lead investors in the sense of investors.who take the lead in advising a startup.  they may also make.the biggest investment.  but they won't always have to be the one.terms are negotiated with, or be the first money in, as they have.in the past.  standardized paperwork will do away with the need to.negotiate anything except the valuation, and that will get easier.too.if multiple investors have to share a valuation, it will be whatever.the startup can get from the first one to write a check, limited.by their guess at whether this will make later investors balk.  but.there may not have to be just one valuation.  startups are increasingly.raising money on convertible notes, and convertible notes have not.valuations but at most valuation caps: caps on what the.effective valuation will be when the debt converts to equity (in a.later round, or upon acquisition if that happens first).  that's.an important difference because it means a startup could do multiple.notes at once with different caps.  this is now starting to happen,.and i predict it will become more common.sheepthe reason things are moving this way is that the old way sucked.for startups.  leads could (and did) use a fixed size round as a.legitimate-seeming way of saying what all founders hate to hear:.i'll invest if other people will.  most investors, unable to judge.startups for themselves, rely instead on the opinions of other.investors.  if everyone wants in, they want in too; if not, not..founders hate this because it's a recipe for deadlock, and delay.is the thing a startup can least afford.  most investors know this.m.o. is lame, and few say openly that they're doing it.  but the.craftier ones achieve the same result by offering to lead rounds.of fixed size and supplying only part of the money.  if the startup.can't raise the rest, the lead is out too.  how could they go ahead.with the deal?  the startup would be underfunded!in the future, investors will increasingly be unable to offer.investment subject to contingencies like other people investing..or rather, investors who do that will get last place in line..startups will go to them only to fill up rounds that are mostly.subscribed.  and since hot startups tend to have rounds that are.oversubscribed, being last in line means they'll probably miss the.hot deals.  hot deals and successful startups are not identical,.but there is a significant correlation..[8].so investors who won't invest unilaterally will have lower returns.investors will probably find they do better when deprived of this.crutch anyway.   chasing hot deals doesn't make investors choose.better; it just makes them feel better about their choices.  i've.seen feeding frenzies both form and fall apart many times, and as.far as i can tell they're mostly random..[9].if investors can.no longer rely on their herd instincts, they'll have to think more.about each startup before investing.  they may be surprised how.well this works.deadlock wasn't the only disadvantage of letting a lead investor.manage an angel round.  the investors would not infrequently collude.to push down the valuation.  and rounds took too long to close,.because however motivated the lead was to get the round closed, he.was not a tenth as motivated as the startup.increasingly, startups are taking charge of their own angel rounds..only a few do so far, but i think we can already declare the old.way dead, because those few are the best startups.  they're the.ones in a position to tell investors how the round is going to work..and if the startups you want to invest in do things a certain way,.what difference does it make what the others do?tractionin fact, it may be slightly misleading to say that angel rounds.will increasingly take the place of series a rounds.  what's really.happening is that startup-controlled rounds are taking the place.of investor-controlled rounds.this is an instance of a very important meta-trend, one that y.combinator itself has been based on from the beginning: founders.are becoming increasingly powerful relative to investors.  so if.you want to predict what the future of venture funding will be like,.just ask: how would founders like it to be?  one by one, all the.things founders dislike about raising money are going to get.eliminated..[10]using that heuristic, i'll predict a couple more things.  one is.that investors will increasingly be unable to wait for startups to.have "traction" before they put in significant money.  it's hard.to predict in advance which startups will succeed.  so most investors.prefer, if they can, to wait till the startup is already succeeding,.then jump in quickly with an offer.  startups hate this as well,.partly because it tends to create deadlock, and partly because it.seems kind of slimy.  if you're a promising startup but don't yet.have significant growth, all the investors are your friends in.words, but few are in actions.  they all say they love you, but.they all wait to invest. then when you start to see growth, they.claim they were your friend all along, and are aghast at the thought.you'd be so disloyal as to leave them out of your round.  if founders.become more powerful, they'll be able to make investors give them.more money upfront.(the worst variant of this behavior is the tranched deal, where the.investor makes a small initial investment, with more to follow if.the startup does well.  in effect, this structure gives the investor.a free option on the next round, which they'll only take if it's.worse for the startup than they could get in the open market..tranched deals are an abuse.  they're increasingly rare, and they're.going to get rarer.).[11]investors don't like trying to predict which startups will succeed,.but increasingly they'll have to.  though the way that happens won't.necessarily be that the behavior of existing investors will change;.it may instead be that they'll be replaced by other investors with.different behavior—that investors who understand startups.well enough to take on the hard problem of predicting their trajectory.will tend to displace suits whose skills lie more in raising money.from lps.speedthe other thing founders hate most about fundraising is how long.it takes.  so as founders become more powerful, rounds should start.to close faster.fundraising is still terribly distracting for startups. if you're.a founder in the middle of raising a round, the round is the top idea in your mind, which means working on the.company isn't.  if a round takes 2 months to close, which is.reasonably fast by present standards, that means 2 months during.which the company is basically treading water.  that's the worst.thing a startup could do.so if investors want to get the best deals, the way to do it will.be to close faster.   investors don't need weeks to make up their.minds anyway.  we decide based on about 10 minutes of reading an.application plus 10 minutes of in person interview, and we only.regret about 10% of our decisions.  if we can decide in 20 minutes,.surely the next round of investors can decide in a couple days..[12]there are a lot of institutionalized delays in startup funding: the.multi-week mating dance with investors; the distinction between.termsheets and deals; the fact that each series a has enormously.elaborate, custom paperwork.  both founders and investors tend to.take these for granted.  it's the way things have always been.  but.ultimately the reason these delays exist is that they're to the.advantage of investors.  more time gives investors more information.about a startup's trajectory, and it also tends to make startups.more pliable in negotiations, since they're usually short of money.these conventions weren't designed to drag out the funding process,.but that's why they're allowed to persist.  slowness is to the.advantage of investors, who have in the past been the ones with the.most power.  but there is no need for rounds to take months or even.weeks to close, and once founders realize that, it's going to stop..not just in angel rounds, but in series a rounds too.  the future.is simple deals with standard terms, done quickly.one minor abuse that will get corrected in the process is option.pools.  in a traditional series a round, before the vcs invest they.make the company set aside a block of stock for future hires—usually.between 10 and 30% of the company.  the point is to ensure this.dilution is borne by the existing shareholders.  the practice isn't.dishonest; founders know what's going on.  but it makes deals.unnecessarily complicated.  in effect the valuation is 2 numbers..there's no need to keep doing this..[13]the final thing founders want is to be able to sell some of.their own stock in later rounds.  this won't be a change,.because the practice is now quite common.  a lot of investors.hated the idea, but the world hasn't exploded as a result,.so it will happen more, and more openly.surprisei've talked here about a bunch of changes that will be forced on.investors as founders become more powerful.  now the good news:.investors may actually make more money as a result.a couple days ago an interviewer.asked.me if founders having more.power would be better or worse for the world.  i was surprised,.because i'd never considered that question.  better or worse, it's.happening.  but after a second's reflection, the answer seemed.obvious.  founders understand their companies better than investors,.and it has to be better if the people with more knowledge have more.power.one of the mistakes novice pilots make is overcontrolling the.aircraft: applying corrections too vigorously, so the aircraft.oscillates about the desired configuration instead of approaching.it asymptotically.  it seems probable that investors have till now.on average been overcontrolling their portfolio companies.  in a.lot of startups, the biggest source of stress for the founders is.not competitors but investors.  certainly it was for us at viaweb..and this is not a new phenomenon: investors were james watt's biggest.problem too.   if having less power prevents investors from.overcontrolling startups, it should be better not just for founders.but for investors too.investors may end up with less stock per startup, but startups will.probably do better with founders more in control, and there will.almost certainly be more of them.  investors all compete with one.another for deals, but they aren't one another's main competitor..our main competitor is employers.  and so far that competitor is.crushing us.  only a tiny fraction of people who could start a.startup do.  nearly all customers choose the competing product, a.job.  why?  well, let's look at the product we're offering.  an.unbiased review would go something like this:.starting a startup gives you more freedom and the opportunity to.make a lot more money than a job, but it's also hard work and at.times very stressful..much of the stress comes from dealing with investors.  if reforming.the investment process removed that stress, we'd make our product.much more attractive.  the kind of people who make good startup.founders don't mind dealing with technical problems—they enjoy.technical problems—but they hate the type of problems investors.cause.investors have no.idea that when they maltreat one startup, they're preventing 10.others from happening, but they are.  indirectly, but they are.  so.when investors stop trying to squeeze a little more out of their.existing deals, they'll find they're net ahead, because so many.more new deals appear.one of our axioms at y combinator is not to think of deal flow as.a zero-sum game.  our main focus is to encourage more startups to happen,.not to win a larger share of the existing stream.  we've found this.principle very useful, and we think as it spreads outward it will.help later stage investors as well."make something people want".applies to us too.notes[1].in this essay i'm talking mainly about software startups..these points don't apply to types of startups that are still expensive.to start, e.g. in energy or biotech.even the cheap kinds of startups will generally raise large amounts.at some point, when they want to hire a lot of people.  what has.changed is how much they can get done before that.[2].it's not the distribution of good startups that has a power.law dropoff, but the distribution of potentially good startups,.which is to say, good deals.  there are lots of potential winners,.from which a few actual winners emerge with superlinear certainty.[3].as i was writing this, i asked some founders who'd taken.series a rounds from top vc funds whether it was worth it, and they.unanimously said yes.the quality of investor is more important than the type of round,.though.  i'd take an angel round from good angels over a series a.from a mediocre vc.[4].founders also worry that taking an angel investment from a.vc means they'll look bad if the vc declines to participate in the.next round.  the trend of vc angel investing is so new that it's.hard to say how justified this worry is.another danger, pointed out by mitch kapor, is that if vcs are only.doing angel deals to generate series a deal flow, then their.incentives aren't aligned with the founders'.  the founders want.the valuation of the next round to be high, and the vcs want it to.be low.  again, hard to say yet how much of a problem this will be.[5].josh kopelman pointed out that another way to be on fewer.boards at once is to take board seats for shorter periods.[6].google was in this respect as so many others the pattern for.the future.  it would be great for vcs if the similarity extended.to returns.  that's probably too much to hope for, but the returns.may be somewhat higher, as i explain later.[7].doing a rolling close doesn't mean the company is always.raising money.  that would be a distraction.  the point of a rolling.close is to make fundraising take less time, not more.  with a.classic fixed sized round, you don't get any money till all the.investors agree, and that often creates a situation where they all.sit waiting for the others to act.  a rolling close usually prevents.this..[8].there are two (non-exclusive) causes of hot deals: the quality.of the company, and domino effects among investors.  the former is.obviously a better predictor of success.[9].some of the randomness is concealed by the fact that investment.is a self fulfilling prophecy.[10].the shift in power to founders is exaggerated now because.it's a seller's market.  on the next downtick it will seem like i.overstated the case.  but on the next uptick after that, founders.will seem more powerful than ever.[11].more generally, it will become less common for the same.investor to invest in successive rounds, except when exercising an.option to maintain their percentage.  when the same investor invests.in successive rounds, it often means the startup isn't getting.market price.  they may not care; they may prefer to work with an.investor they already know; but as the investment market becomes.more efficient, it will become increasingly easy to get market price.if they want it.  which in turn means the investment community will.tend to become more stratified.[12].the two 10 minuteses have 3 weeks between them so founders.can get cheap plane tickets, but except for that they could be.adjacent.[13].i'm not saying option pools themselves will go away.  they're.an administrative convenience.  what will go away is investors.requiring them..thanks to sam altman, john bautista, trevor blackwell,.paul buchheit, jeff clavier,.patrick collison, ron conway, matt cohler, chris dixon, mitch kapor,.josh kopelman, pete koomen, carolynn levy, jessica livingston, ariel.poler, geoff ralston, naval ravikant, dan siroker, harj taggar, and.fred wilson.for reading drafts of this.<eot><sot>the acceleration of addictiveness.july 2010
what hard liquor, cigarettes, heroin, and crack have in common is.that they're all more concentrated forms of less addictive predecessors..most if not all the things we describe as addictive are.  and the.scary thing is, the process that created them is accelerating.we wouldn't want to stop it.  it's the same process that cures.diseases: technological progress.  technological progress means.making things do more of what we want.  when the thing we want is.something we want to want, we consider technological progress good..if some new technique makes solar cells x% more efficient, that.seems strictly better.  when progress concentrates something we.don't want to want — when it transforms opium into heroin — it seems.bad.  but it's the same process at work..[1]no one doubts this process is accelerating, which means increasing.numbers of things we like will be transformed into things we like.too much..[2]as far as i know there's no word for something we like too much..the closest is the colloquial sense of "addictive." that usage has.become increasingly common during my lifetime. and it's clear why:.there are an increasing number of things we need it for. at the.extreme end of the spectrum are crack and meth. food has been.transformed by a combination of factory farming and innovations in.food processing into something with way more immediate bang for the.buck, and you can see the results in any town in america. checkers.and solitaire have been replaced by world of warcraft and farmville..tv has become much more engaging, and even so it can't compete with facebook.the world is more addictive than it was 40 years ago.   and unless.the forms of technological progress that produced these things are.subject to different laws than technological progress in general,.the world will get more addictive in the next 40 years than it did.in the last 40.the next 40 years will bring us some wonderful things.  i don't.mean to imply they're all to be avoided.  alcohol is a dangerous.drug, but i'd rather live in a world with wine than one without..most people can coexist with alcohol; but you have to be careful..more things we like will mean more things we have to be careful.about.most people won't, unfortunately.  which means that as the world.becomes more addictive, the two senses in which one can live a.normal life will be driven ever further apart.  one sense of "normal".is statistically normal: what everyone else does.  the other is the.sense we mean when we talk about the normal operating range of a.piece of machinery: what works best.these two senses are already quite far apart.  already someone.trying to live well would seem eccentrically abstemious in most of.the us.  that phenomenon is only going to become more pronounced..you can probably take it as a rule of thumb from now on that if.people don't think you're weird, you're living badly.societies eventually develop antibodies to addictive new things..i've seen that happen with cigarettes.  when cigarettes first.appeared, they spread the way an infectious disease spreads through.a previously isolated population.  smoking rapidly became a.(statistically) normal thing.  there were ashtrays everywhere.  we.had ashtrays in our house when i was a kid, even though neither of.my parents smoked.  you had to for guests.as knowledge spread about the dangers of smoking, customs changed..in the last 20 years, smoking has been transformed from something.that seemed totally normal into a rather seedy habit: from something.movie stars did in publicity shots to something small huddles of.addicts do outside the doors of office buildings.  a lot of the.change was due to legislation, of course, but the legislation.couldn't have happened if customs hadn't already changed.it took a while though—on the order of 100 years.  and unless the.rate at which social antibodies evolve can increase to match the.accelerating rate at which technological progress throws off new.addictions, we'll be increasingly unable to rely on customs to.protect us..[3].unless we want to be canaries in the coal mine.of each new addiction—the people whose sad example becomes a.lesson to future generations—we'll have to figure out for ourselves.what to avoid and how.  it will actually become a reasonable strategy.(or a more reasonable strategy) to suspect.everything new.in fact, even that won't be enough.  we'll have to worry not just.about new things, but also about existing things becoming more.addictive.  that's what bit me.  i've avoided most addictions, but.the internet got me because it became addictive while i was using.it..[4]most people i know have problems with internet addiction.  we're.all trying to figure out our own customs for getting free of it..that's why i don't have an iphone, for example; the last thing i.want is for the internet to follow me out into the world..[5].my latest trick is taking long hikes.  i used to think running was a.better form of exercise than hiking because it took less time.  now.the slowness of hiking seems an advantage, because the longer i.spend on the trail, the longer i have to think without interruption.sounds pretty eccentric, doesn't it?  it always will when you're.trying to solve problems where there are no customs yet to guide.you.  maybe i can't plead occam's razor; maybe i'm simply eccentric..but if i'm right about the acceleration of addictiveness, then this.kind of lonely squirming to avoid it will increasingly be the fate.of anyone who wants to get things done.  we'll increasingly be.defined by what we say no to..notes[1].could you restrict technological progress to areas where you.wanted it?  only in a limited way, without becoming a police state..and even then your restrictions would have undesirable side effects.."good" and "bad" technological progress aren't sharply differentiated,.so you'd find you couldn't slow the latter without also slowing the.former.  and in any case, as prohibition and the "war on drugs".show, bans often do more harm than good.[2].technology has always been accelerating.  by paleolithic.standards, technology evolved at a blistering pace in the neolithic.period.[3].unless we mass produce social customs.  i suspect the recent.resurgence of evangelical christianity in the us is partly a reaction.to drugs.  in desperation people reach for the sledgehammer; if.their kids won't listen to them, maybe they'll listen to god.  but.that solution has broader consequences than just getting kids to.say no to drugs.  you end up saying no to.science as well..i worry we may be heading for a future in which only a few people.plot their own itinerary through no-land, while everyone else books.a package tour.  or worse still, has one booked for them by the.government.[4].people commonly use the word "procrastination" to describe.what they do on the internet.  it seems to me too mild to describe.what's happening as merely not-doing-work.  we don't call it.procrastination when someone gets drunk instead of working.[5].several people have told me they like the ipad because it.lets them bring the internet into situations where a laptop would.be too conspicuous.  in other words, it's a hip flask.  (this is.true of the iphone too, of course, but this advantage isn't as.obvious because it reads as a phone, and everyone's used to those.)thanks to sam altman, patrick collison, jessica livingston, and.robert morris for reading drafts of this.<eot><sot>the top idea in your mind.want to start a startup?  get funded by.y combinator..july 2010
i realized recently that what one thinks about in the shower in the.morning is more important than i'd thought.  i knew it was a good.time to have ideas.  now i'd go further: now i'd say it's hard to.do a really good job on anything you don't think about in the shower.everyone who's worked on difficult problems is probably familiar.with the phenomenon of working hard to figure something out, failing,.and then suddenly seeing the answer a bit later while doing something.else. there's a kind of thinking you do without trying to.  i'm.increasingly convinced this type of thinking is not merely helpful.in solving hard problems, but necessary.  the tricky part is, you.can only control it indirectly..[1]i think most people have one top idea in their mind at any given.time.  that's the idea their thoughts will drift toward when they're.allowed to drift freely.  and this idea will thus tend to get all.the benefit of that type of thinking, while others are starved of.it.  which means it's a disaster to let the wrong idea become the.top one in your mind.what made this clear to me was having an idea i didn't want as the.top one in my mind for two long stretches.i'd noticed startups got way less done when they started raising.money, but it was not till we ourselves raised money that i understood.why.  the problem is not the actual time it takes to meet with.investors.  the problem is that once you start raising money, raising.money becomes the top idea in your mind.  that becomes what you.think about when you take a shower in the morning.  and that means.other questions aren't.i'd hated raising money when i was running viaweb, but i'd forgotten.why i hated it so much.  when we raised money for y combinator, i.remembered.  money matters are particularly likely to become the.top idea in your mind.  the reason is that they have to be.  it's.hard to get money.  it's not the sort of thing that happens by.default.  it's not going to happen unless you let it become the.thing you think about in the shower.  and then you'll make little.progress on anything else you'd rather be working on..[2](i hear similar complaints from friends who are professors.  professors.nowadays seem to have become professional fundraisers who do a.little research on the side.  it may be time to fix that.)the reason this struck me so forcibly is that for most of the.preceding 10 years i'd been able to think about what i wanted.  so.the contrast when i couldn't was sharp.  but i don't think this.problem is unique to me, because just about every startup i've seen.grinds to a halt when they start raising money  or talking.to acquirers.you can't directly control where your thoughts drift.  if you're.controlling them, they're not drifting.  but you can control them.indirectly, by controlling what situations you let yourself get.into.  that has been the lesson for me: be careful what you let.become critical to you.  try to get yourself into situations where.the most urgent problems are ones you want to think about.you don't have complete control, of course.  an emergency could.push other thoughts out of your head.  but barring emergencies you.have a good deal of indirect control over what becomes the top idea.in your mind.i've found there are two types of thoughts especially worth.avoiding  thoughts like the nile perch in the way they push.out more interesting ideas.  one i've already mentioned: thoughts.about money. getting money is almost by definition an attention.sink..the other is disputes.  these too are engaging in the.wrong way: they have the same velcro-like shape as genuinely.interesting ideas, but without the substance.  so avoid disputes.if you want to get real work done..[3]even newton fell into this trap.  after publishing his theory of.colors in 1672 he found himself distracted by disputes for years,.finally concluding that the only solution was to stop publishing:.i see i have made myself a slave to philosophy, but if i get free.of mr linus's business i will resolutely bid adew to it eternally,.excepting what i do for my privat satisfaction or leave to come.out after me.  for i see a man must either resolve to put out.nothing new or become a slave to defend it..[4].linus and his students at liege were among the more tenacious.critics.  newton's biographer westfall seems to feel he was.overreacting:.recall that at the time he wrote, newton's "slavery" consisted.of five replies to liege, totalling fourteen printed pages, over.the course of a year..i'm more sympathetic to newton. the problem was not the 14 pages,.but the pain of having this stupid controversy constantly reintroduced.as the top idea in a mind that wanted so eagerly to think about.other things.turning the other cheek turns out to have selfish advantages..someone who does you an injury hurts you twice: first by the injury.itself, and second by taking up your time afterward thinking about.it.  if you learn to ignore injuries you can at least avoid the.second half.  i've found i can to some extent avoid thinking about.nasty things people have done to me by telling myself: this doesn't.deserve space in my head.  i'm always delighted to find i've forgotten.the details of disputes, because that means i hadn't been thinking.about them.  my wife thinks i'm more forgiving than she is, but my.motives are purely selfish.i suspect a lot of people aren't sure what's the top idea in their.mind at any given time.  i'm often mistaken about it.  i tend to.think it's the idea i'd want to be the top one, rather than the one.that is.  but it's easy to figure this out: just take a shower..what topic do your thoughts keep returning to?  if it's not what.you want to be thinking about, you may want to change something.notes[1].no doubt there are already names for this type of thinking, but.i call it "ambient thought."[2].this was made particularly clear in our case, because neither.of the funds we raised was difficult, and yet in both cases the.process dragged on for months.  moving large amounts of money around.is never something people treat casually.  the attention required.increases with the amount—maybe not linearly, but definitely.monotonically.[3].corollary: avoid becoming an administrator, or your job will.consist of dealing with money and disputes.[4].letter to oldenburg, quoted in westfall, richard, life of.isaac newton, p. 107.thanks to sam altman, patrick collison, jessica livingston,.and robert morris for reading drafts of this.<eot><sot>how to lose time and money.july 2010
when we sold our startup in 1998 i suddenly got a lot of money.  i.now had to think about something i hadn't had to think about before:.how not to lose it.   i knew it was possible to go from rich to.poor, just as it was possible to go from poor to rich.  but while.i'd spent a lot of the past several years studying the paths from.poor to rich,.i knew practically nothing about the paths from rich.to poor.  now, in order to avoid them, i had to learn where they.were.so i started to pay attention to how fortunes are lost.  if you'd.asked me as a kid how rich people became poor, i'd have said by.spending all their money.  that's how it happens in books and movies,.because that's the colorful way to do it.  but in fact the way most.fortunes are lost is not through excessive expenditure, but through.bad investments.it's hard to spend a fortune without noticing.  someone with ordinary.tastes would find it hard to blow through more than a few tens of.thousands of dollars without thinking "wow, i'm spending a lot of.money."  whereas if you start trading derivatives, you can lose a.million dollars (as much as you want, really) in the blink of an.eye.in most people's minds, spending money on luxuries sets off alarms.that making investments doesn't.  luxuries seem self-indulgent..and unless you got the money by inheriting it or winning a lottery,.you've already been thoroughly trained that self-indulgence leads.to trouble.  investing bypasses those alarms.  you're not spending.the money; you're just moving it from one asset to another.  which.is why people trying to sell you expensive things say "it's an.investment."the solution is to develop new alarms.  this can be a tricky business,.because while the alarms that prevent you from overspending are so.basic that they may even be in our dna, the ones that prevent you.from making bad investments have to be learned, and are sometimes.fairly counterintuitive.a few days ago i realized something surprising: the situation with.time is much the same as with money.  the most dangerous way to.lose time is not to spend it having fun, but to spend it doing fake.work.  when you spend time having fun, you know you're being.self-indulgent.  alarms start to go off fairly quickly.  if i woke.up one morning and sat down on the sofa and watched tv all day, i'd.feel like something was terribly wrong.  just thinking about it.makes me wince.  i'd start to feel uncomfortable after sitting on.a sofa watching tv for 2 hours, let alone a whole day.and yet i've definitely had days when i might as well have sat in.front of a tv all day — days at the end of which, if i asked myself.what i got done that day, the answer would have been: basically,.nothing.  i feel bad after these days too, but nothing like as bad.as i'd feel if i spent the whole day on the sofa watching tv.  if.i spent a whole day watching tv i'd feel like i was descending into.perdition.  but the same alarms don't go off on the days when i get.nothing done, because i'm doing stuff that seems, superficially,.like real work.  dealing with email, for example.  you do it sitting.at a desk.  it's not fun.  so it must be work.with time, as with money, avoiding pleasure is no longer enough to.protect you.  it probably was enough to protect hunter-gatherers,.and perhaps all pre-industrial societies.  so nature and nurture.combine to make us avoid self-indulgence. but the world has gotten.more complicated: the most dangerous traps now are new behaviors.that bypass our alarms about self-indulgence by mimicking more.virtuous types.  and the worst thing is, they're not even fun..thanks to sam altman, trevor blackwell, patrick collison, jessica.livingston, and robert morris for reading drafts of this.<eot><sot>organic startup ideas.want to start a startup?  get funded by.y combinator..april 2010
the best way to come up with startup ideas is to ask yourself the.question: what do you wish someone would make for you?there are two types of startup ideas: those that grow organically.out of your own life, and those that you decide, from afar, are.going to be necessary to some class of users other than you.  apple.was the first type.  apple happened because steve wozniak wanted a.computer.  unlike most people who wanted computers, he could design.one, so he did.  and since lots of other people wanted the same.thing, apple was able to sell enough of them to get the company.rolling.  they still rely on this principle today, incidentally..the iphone is the phone steve jobs wants..[1]our own startup, viaweb, was of the second type.  we made software.for building online stores.  we didn't need this software ourselves..we weren't direct marketers.  we didn't even know when we started.that our users were called "direct marketers."  but we were.comparatively old when we started the company (i was 30 and robert.morris was 29), so we'd seen enough to know users would need this.type of software..[2]there is no sharp line between the two types of ideas, but.the most successful startups seem to be closer to the apple type.than the viaweb type.  when he was writing that first basic interpreter.for the altair, bill gates was writing something he would use, as.were larry and sergey when they wrote the first versions of google.organic ideas are generally preferable to the made up kind, but.particularly so when the founders are young.  it takes experience.to predict what other people will want.  the worst ideas we see at.y combinator are from young founders making things they think other.people will want.so if you want to start a startup and don't know yet what you're.going to do, i'd encourage you to focus initially on organic ideas..what's missing or broken in your daily life?  sometimes if you just.ask that question you'll get immediate answers.  it must have seemed.obviously broken to bill gates that you could only program the.altair in machine language.you may need to stand outside yourself a bit to see brokenness,.because you tend to get used to it and take it for granted.  you.can be sure it's there, though.  there are always great ideas sitting.right under our noses.  in 2004 it was ridiculous that harvard.undergrads were still using a facebook printed on paper.  surely.that sort of thing should have been online.there are ideas that obvious lying around now.  the reason you're.overlooking them is the same reason you'd have overlooked the idea.of building facebook in 2004: organic startup ideas usually don't.seem like startup ideas at first.  we know now that facebook was.very successful, but put yourself back in 2004.  putting undergraduates'.profiles online wouldn't have seemed like much of a startup idea..and in fact, it wasn't initially a startup idea.  when mark spoke.at a yc dinner this winter he said he wasn't trying to start a.company when he wrote the first version of facebook.  it was just.a project.  so was the apple i when woz first started working on.it.  he didn't think he was starting a company.  if these guys had.thought they were starting companies, they might have been tempted.to do something more "serious," and that would have been a mistake.so if you want to come up with organic startup ideas, i'd encourage.you to focus more on the idea part and less on the startup part..just fix things that seem broken, regardless of whether it seems.like the problem is important enough to build a company on.  if you.keep pursuing such threads it would be hard not to end up making.something of value to a lot of people, and when you do, surprise,.you've got a company..[3]don't be discouraged if what you produce initially is something.other people dismiss as a toy.  in fact, that's a good sign..that's probably why everyone else has been overlooking the idea.  the first.microcomputers were dismissed as toys.  and the first planes, and.the first cars.  at this point, when someone comes to us with.something that users like but that we could envision forum trolls.dismissing as a toy, it makes us especially likely to invest.while young founders are at a disadvantage when coming up with.made-up ideas, they're the best source of organic ones, because.they're at the forefront of technology.  they use the latest stuff..they only just decided what to use, so why wouldn't they?  and.because they use the latest stuff, they're in a position to discover.valuable types of fixable brokenness first.there's nothing more valuable than an unmet need that is just.becoming fixable.  if you find something broken that you can fix.for a lot of people, you've found a gold mine.  as with an actual.gold mine, you still have to work hard to get the gold out of it..but at least you know where the seam is, and that's the hard part.notes[1].this suggests a way to predict areas where apple will be weak:.things steve jobs doesn't use.  e.g. i doubt he is much into gaming..[2].in retrospect, we should have become direct marketers.  if.i were doing viaweb again, i'd open our own online store.  if we.had, we'd have understood users a lot better.  i'd encourage anyone.starting a startup to become one of its users, however unnatural it.seems.[3].possible exception: it's hard to compete directly with open source software..you can build things for programmers, but there has to be some part.you can charge for.thanks to sam altman, trevor blackwell, and jessica livingston.for reading drafts of this.<eot><sot>apple's mistake.want to start a startup?  get funded by.y combinator..november 2009
i don't think apple realizes how badly the app store approval process.is broken.  or rather, i don't think they realize how much it matters.that it's broken.the way apple runs the app store has harmed their reputation with.programmers more than anything else they've ever done..their reputation with programmers used to be great..it used to be the most common complaint you heard.about apple was that their fans admired them too uncritically..the app store has changed that.  now a lot of programmers.have started to see apple as evil.how much of the goodwill apple once had with programmers have they.lost over the app store?  a third?  half?  and that's just so far..the app store is an ongoing karma leak.* * *how did apple get into this mess?  their fundamental problem is.that they don't understand software.they treat iphone apps the way they treat the music they sell through.itunes.  apple is the channel; they own the user; if you want to.reach users, you do it on their terms. the record labels agreed,.reluctantly.  but this model doesn't work for software.  it doesn't.work for an intermediary to own the user.  the software business.learned that in the early 1980s, when companies like visicorp showed.that although the words "software" and "publisher" fit together,.the underlying concepts don't.  software isn't like music or books..it's too complicated for a third party to act as an intermediary.between developer and user.   and yet that's what apple is trying.to be with the app store: a software publisher.  and a particularly.overreaching one at that, with fussy tastes and a rigidly enforced.house style.if software publishing didn't work in 1980, it works even less now.that software development has evolved from a small number of big.releases to a constant stream of small ones.  but apple doesn't.understand that either.  their model of product development derives.from hardware.  they work on something till they think it's finished,.then they release it.  you have to do that with hardware, but because.software is so easy to change, its design can benefit from evolution..the standard way to develop applications now is to launch fast and.iterate.  which means it's a disaster to have long, random delays.each time you release a new version.apparently apple's attitude is that developers should be more careful.when they submit a new version to the app store.  they would say.that.  but powerful as they are, they're not powerful enough to.turn back the evolution of technology.  programmers don't use.launch-fast-and-iterate out of laziness.  they use it because it.yields the best results.  by obstructing that process, apple is.making them do bad work, and programmers hate that as much as apple.would.how would apple like it if when they discovered a serious bug in.os x, instead of releasing a software update immediately, they had.to submit their code to an intermediary who sat on it for a month.and then rejected it because it contained an icon they didn't like?by breaking software development, apple gets the opposite of what.they intended: the version of an app currently available in the app.store tends to be an old and buggy one.  one developer told me:.as a result of their process, the app store is full of half-baked.applications. i make a new version almost every day that i release.to beta users. the version on the app store feels old and crappy..i'm sure that a lot of developers feel this way: one emotion is."i'm not really proud about what's in the app store", and it's.combined with the emotion "really, it's apple's fault.".another wrote:.i believe that they think their approval process helps users by.ensuring quality.  in reality, bugs like ours get through all the.time and then it can take 4-8 weeks to get that bug fix approved,.leaving users to think that iphone apps sometimes just don't work..worse for apple, these apps work just fine on other platforms.that have immediate approval processes..actually i suppose apple has a third misconception: that all the.complaints about app store approvals are not a serious problem..they must hear developers complaining.  but partners and suppliers.are always complaining.  it would be a bad sign if they weren't;.it would mean you were being too easy on them.  meanwhile the iphone.is selling better than ever.  so why do they need to fix anything?they get away with maltreating developers, in the short term, because.they make such great hardware.  i just bought a new 27" imac a.couple days ago.  it's fabulous.  the screen's too shiny, and the.disk is surprisingly loud, but it's so beautiful that you can't.make yourself care.so i bought it, but i bought it, for the first time, with misgivings..i felt the way i'd feel buying something made in a country with a.bad human rights record.  that was new.  in the past when i bought.things from apple it was an unalloyed pleasure.  oh boy!  they make.such great stuff.  this time it felt like a faustian bargain.  they.make such great stuff, but they're such assholes.  do i really want.to support this company?* * *should apple care what people like me think?  what difference does.it make if they alienate a small minority of their users?there are a couple reasons they should care.  one is that these.users are the people they want as employees.  if your company seems.evil, the best programmers won't work for you.  that hurt microsoft.a lot starting in the 90s.  programmers started to feel sheepish.about working there.  it seemed like selling out.  when people from.microsoft were talking to other programmers and they mentioned where.they worked, there were a lot of self-deprecating jokes about having.gone over to the dark side.  but the real problem for microsoft.wasn't the embarrassment of the people they hired.  it was the.people they never got.  and you know who got them?  google and.apple.  if microsoft was the empire, they were the rebel alliance..and it's largely because they got more of the best people that.google and apple are doing so much better than microsoft today.why are programmers so fussy about their employers' morals?  partly.because they can afford to be.  the best programmers can work.wherever they want.  they don't have to work for a company they.have qualms about.but the other reason programmers are fussy, i think, is that evil.begets stupidity.  an organization that wins by exercising power.starts to lose the ability to win by doing better work.  and it's.not fun for a smart person to work in a place where the best ideas.aren't the ones that win.  i think the reason google embraced "don't.be evil" so eagerly was not so much to impress the outside world.as to inoculate themselves against arrogance..[1]that has worked for google so far.  they've become more.bureaucratic, but otherwise they seem to have held true to their.original principles. with apple that seems less the case.  when you.look at the famous.1984 ad.now, it's easier to imagine apple as the.dictator on the screen than the woman with the hammer..[2].in fact, if you read the dictator's speech it sounds uncannily like a.prophecy of the app store..we have triumphed over the unprincipled dissemination of facts.we have created, for the first time in all history, a garden of.pure ideology, where each worker may bloom secure from the pests.of contradictory and confusing truths..the other reason apple should care what programmers think of them.is that when you sell a platform, developers make or break you.  if.anyone should know this, apple should.  visicalc made the apple ii.and programmers build applications for the platforms they use.  most.applications—most startups, probably—grow out of personal projects..apple itself did.  apple made microcomputers because that's what.steve wozniak wanted for himself.  he couldn't have afforded a.minicomputer..[3].microsoft likewise started out making interpreters.for little microcomputers because.bill gates and paul allen were interested in using them.  it's a.rare startup that doesn't build something the founders use.the main reason there are so many iphone apps is that so many programmers.have iphones.  they may know, because they read it in an article,.that blackberry has such and such market share.  but in practice.it's as if rim didn't exist. if they're going to build something,.they want to be able to use it themselves, and that means building.an iphone app.so programmers continue to develop iphone apps, even though apple.continues to maltreat them.  they're like someone stuck in an abusive.relationship.  they're so attracted to the iphone that they can't.leave.  but they're looking for a way out.  one wrote:.while i did enjoy developing for the iphone, the control they.place on the app store does not give me the drive to develop.applications as i would like. in fact i don't intend to make any.more iphone applications unless absolutely necessary..[4].can anything break this cycle?  no device i've seen so far could..palm and rim haven't a hope.  the only credible contender is android..but android is an orphan; google doesn't really care about it, not.the way apple cares about the iphone.  apple cares about the iphone.the way google cares about search.* * *is the future of handheld devices one locked down by apple?  it's.a worrying prospect.  it would be a bummer to have another grim.monoculture like we had in the 1990s.  in 1995, writing software.for end users was effectively identical with writing windows.applications.  our horror at that prospect was the single biggest.thing that drove us to start building web apps.at least we know now what it would take to break apple's lock..you'd have to get iphones out of programmers' hands.  if programmers.used some other device for mobile web access, they'd start to develop.apps for that instead.how could you make a device programmers liked better than the iphone?.it's unlikely you could make something better designed.  apple.leaves no room there.  so this alternative device probably couldn't.win on general appeal.  it would have to win by virtue of some.appeal it had to programmers specifically.one way to appeal to programmers is with software.  if you.could think of an application programmers had to have, but that.would be impossible in the circumscribed world of the iphone,.you could presumably get them to switch.that would definitely happen if programmers started to use handhelds.as development machines—if handhelds displaced laptops the.way laptops displaced desktops.  you need more control of a development.machine than apple will let you have over an iphone.could anyone make a device that you'd carry around in your pocket.like a phone, and yet would also work as a development machine?.it's hard to imagine what it would look like.  but i've learned.never to say never about technology.  a phone-sized device that.would work as a development machine is no more miraculous by present.standards than the iphone itself would have seemed by the standards.of 1995.my current development machine is a macbook air, which i use with.an external monitor and keyboard in my office, and by itself when.traveling.  if there was a version half the size i'd prefer it..that still wouldn't be small enough to carry around everywhere like.a phone, but we're within a factor of 4 or so.  surely that gap is.bridgeable.  in fact, let's make it an.rfs. wanted:.woman with hammer.notes[1].when google adopted "don't be evil," they were still so small.that no one would have expected them to be, yet..[2].the dictator in the 1984 ad isn't microsoft, incidentally;.it's ibm.  ibm seemed a lot more frightening in those days, but.they were friendlier to developers than apple is now.[3].he couldn't even afford a monitor.  that's why the apple.i used a tv as a monitor.[4].several people i talked to mentioned how much they liked the.iphone sdk.  the problem is not apple's products but their policies..fortunately policies are software; apple can change them instantly.if they want to.  handy that, isn't it?thanks to sam altman, trevor blackwell, ross boucher,.james bracy, gabor cselle,.patrick collison, jason freedman, john gruber, joe hewitt, jessica livingston,.robert morris, teng siong ong, nikhil pandit, savraj singh, and jared tame for reading drafts of this.russian translation<eot><sot>what startups are really like.want to start a startup?  get funded by.y combinator..october 2009
(this  essay is derived from a talk at the 2009 startup school.)i wasn't sure what to talk about at startup school, so i decided.to ask the founders of the startups we'd funded.  what hadn't i.written about yet?i'm in the unusual position of being able to test the essays i write.about startups.  i hope the ones on other topics are right, but i.have no way to test them.  the ones on startups get tested by about.70 people every 6 months.so i sent all the founders an email asking what surprised them about.starting a startup.  this amounts to asking what i got wrong, because.if i'd explained things well enough, nothing should have surprised.them.i'm proud to report i got one response saying:.what surprised me the most is that everything was actually.fairly predictable!.the bad news is that i got over 100 other responses listing the.surprises they encountered.there were very clear patterns in the responses; it was remarkable.how often several people had been surprised by exactly the same.thing.  these were the biggest:.1. be careful with cofoundersthis was the surprise mentioned by the most founders.  there were.two types of responses: that you have to be careful who you pick.as a cofounder, and that you have to work hard to maintain your.relationship.what people wished they'd paid more attention to when choosing.cofounders was character and commitment, not ability.  this was.particularly true with startups that failed.  the lesson: don't.pick cofounders who will flake.here's a typical reponse:.you haven't seen someone's true colors unless you've worked.with them on a startup..the reason character is so important is that it's tested more.severely than in most other situations.  one founder said explicitly.that the relationship between founders was more important than.ability:.i would rather cofound a startup with a friend than a stranger.with higher output.  startups are so hard and emotional that.the bonds and emotional and social support that come with.friendship outweigh the extra output lost..we learned this lesson a long time ago.  if you look at the yc.application, there are more questions about the commitment and.relationship of the founders than their ability.founders of successful startups talked less about choosing cofounders.and more about how hard they worked to maintain their relationship..one thing that surprised me is how the relationship of startup.founders goes from a friendship to a marriage.  my relationship.with my cofounder went from just being friends to seeing each.other all the time, fretting over the finances and cleaning up.shit. and the startup was our baby.  i summed it up once like.this: "it's like we're married, but we're not fucking.".several people used that word "married."  it's a far more intense.relationship than you usually see between coworkers—partly because.the stresses are so much greater, and partly because at first the.founders are the whole company.  so this relationship has to be.built of top quality materials and carefully maintained.  it's the.basis of everything..2. startups take over your lifejust as the relationship between cofounders is more intense than.it usually is between coworkers, so is the relationship between the.founders and the company.  running a startup is not like having a.job or being a student, because it never stops.  this is so foreign.to most people's experience that they don't get it till it happens..[1].i didn't realize i would spend almost every waking moment either.working or thinking about our startup.  you enter a whole.different way of life when it's your company vs. working for.someone else's company..it's exacerbated by the fast pace of startups, which makes it seem.like time slows down:.i think the thing that's been most surprising to me is how one's.perspective on time shifts. working on our startup, i remember.time seeming to stretch out, so that a month was a huge interval..in the best case, total immersion can be exciting:.it's surprising how much you become consumed by your startup,.in that you think about it day and night, but never once does.it feel like "work.".though i have to say, that quote is from someone we funded this.summer.  in a couple years he may not sound so chipper..3. it's an emotional roller-coasterthis was another one lots of people were surprised about.  the ups.and downs were more extreme than they were prepared for.in a startup, things seem great one moment and hopeless the next..and by next, i mean a couple hours later..the emotional ups and downs were the biggest surprise for me..one day, we'd think of ourselves as the next google and dream.of buying islands; the next, we'd be pondering how to let our.loved ones know of our utter failure; and on and on..the hard part, obviously, is the lows.  for a lot of founders that.was the big surprise:.how hard it is to keep everyone motivated during rough days or.weeks, i.e. how low the lows can be..after a while, if you don't have significant success to cheer you.up, it wears you out:.your most basic advice to founders is "just don't die," but the.energy to keep a company going in lieu of unburdening success.isn't free; it is siphoned from the founders themselves..there's a limit to how much you can take.  if you get to the point.where you can't keep working anymore, it's not the end of the world..plenty of famous founders have had some failures along the way..4. it can be funthe good news is, the highs are also very high.  several founders.said what surprised them most about doing a startup was how fun it.was:.i think you've left out just how fun it is to do a startup. i.am more fulfilled in my work than pretty much any of my friends.who did not start companies..what they like most is the freedom:.i'm surprised by how much better it feels to be working on.something that is challenging and creative, something i believe.in, as opposed to the hired-gun stuff i was doing before.  i.knew it would feel better; what's surprising is how much better..frankly, though, if i've misled people here, i'm not eager to fix.that.  i'd rather have everyone think starting a startup is grim.and hard than have founders go into it expecting it to be fun, and.a few months later saying "this is supposed to be fun? are you.kidding?"the truth is, it wouldn't be fun for most people.  a lot of what.we try to do in the application process is to weed out the people.who wouldn't like it, both for our sake and theirs.the best way to put it might be that starting a startup is fun the.way a survivalist training course would be fun, if you're into that.sort of thing.  which is to say, not at all, if you're not..5. persistence is the keya lot of founders were surprised how important persistence was in.startups. it was both a negative and a positive surprise: they were.surprised both by the degree of persistence required.everyone said how determined and resilient you must be, but.going through it made me realize that the determination required.was still understated..and also by the degree to which persistence alone was able to.dissolve obstacles:.if you are persistent, even problems that seem out of your.control (i.e. immigration) seem to work themselves out..several founders mentioned specifically how much more important.persistence was than intelligence..i've been surprised again and again by just how much more.important persistence is than raw intelligence..this applies not just to intelligence but to ability in general,.and that's why so many people said character was more important in.choosing cofounders..6. think long-termyou need persistence because everything takes longer than you expect..a lot of people were surprised by that..i'm continually surprised by how long everything can take..assuming your product doesn't experience the explosive growth.that very few products do, everything from development to.dealmaking (especially dealmaking) seems to take 2-3x longer.than i always imagine..one reason founders are surprised is that because they work fast,.they expect everyone else to.   there's a shocking amount of shear.stress at every point where a startup touches a more bureaucratic.organization, like a big company or a vc fund.  that's why fundraising.and the enterprise market kill and maim so many startups..[2]but i think the reason most founders are surprised by how long it.takes is that they're overconfident.  they think they're going to.be an instant success, like youtube or facebook.  you tell them.only 1 out of 100 successful startups has a trajectory like that,.and they all think "we're going to be that 1."maybe they'll listen to one of the more successful founders:.the top thing i didn't understand before going into it is that.persistence is the name of the game. for the vast majority of.startups that become successful, it's going to be a really.long journey, at least 3 years and probably 5+..there is a positive side to thinking longer-term.  it's not just.that you have to resign yourself to everything taking longer than.it should.  if you work patiently it's less stressful, and you can.do better work:.because we're relaxed, it's so much easier to have fun doing.what we do. gone is the awkward nervous energy fueled by the.desperate need to not fail guiding our actions. we can concentrate.on doing what's best for our company, product, employees and.customers..that's why things get so much better when you hit ramen profitability..you can shift into a different mode of working.7. lots of little thingswe often emphasize how rarely startups win simply because they hit.on some magic idea.  i think founders have now gotten that into.their heads.  but a lot were surprised to find this also applies.within startups.  you have to do lots of different things:.it's much more of a grind than glamorous. a timeslice selected.at random would more likely find me tracking down a weird dll.loading bug on swedish windows, or tracking down a bug in the.financial model excel spreadsheet the night before a board.meeting, rather than having brilliant flashes of strategic.insight..most hacker-founders would like to spend all their time programming..you won't get to, unless you fail.  which can be transformed into:.if you spend all your time programming, you will fail.the principle extends even into programming.  there is rarely a.single brilliant hack that ensures success:.i learnt never to bet on any one feature or deal or anything.to bring you success. it is never a single thing.  everything.is just incremental and you just have to keep doing lots of.those things until you strike something..even in the rare cases where a clever hack makes your fortune, you.probably won't know till later:.there is no such thing as a killer feature. or at least you.won't know what it is..so the best strategy is to try lots of different things.  the reason.not to put all your eggs in one basket is not the usual one,.which applies even when you know which basket is best.  in a startup.you don't even know that..8. start with something minimallots of founders mentioned how important it was to launch with the.simplest possible thing.  by this point everyone knows you should.release fast and iterate.  it's practically a mantra at yc.  but.even so a lot of people seem to have been burned by not doing it:.build the absolute smallest thing that can be considered a.complete application and ship it..why do people take too long on the first version?  pride, mostly..they hate to release something that could be better.  they worry.what people will say about them.  but you have to overcome this:.doing something "simple" at first glance does not mean you.aren't doing something meaningful, defensible, or valuable..don't worry what people will say.  if your first version is so.impressive that trolls don't make fun of it, you waited too long.to launch..[3]one founder said this should be your approach to all programming,.not just startups, and i tend to agree..now, when coding, i try to think "how can i write this such.that if people saw my code, they'd be amazed at how little there.is and how little it does?".over-engineering is poison.  it's not like doing extra work for.extra credit.  it's more like telling a lie that you then have to.remember so you don't contradict it..9. engage usersproduct development is a conversation with the user that doesn't.really start till you launch.  before you launch, you're like a.police artist before he's shown the first version of his sketch to.the witness.it's so important to launch fast that it may be better to think of.your initial version not as a product, but as a trick for getting.users to start talking to you..i learned to think about the initial stages of a startup as a.giant experiment. all products should be considered experiments,.and those that have a market show promising results extremely.quickly..once you start talking to users, i guarantee you'll be surprised.by what they tell you..when you let customers tell you what they're after, they will.often reveal amazing details about what they find valuable as.well what they're willing to pay for..the surprise is generally positive as well as negative. they won't.like what you've built, but there will be other things they would.like that would be trivially easy to implement.  it's not till you.start the conversation by launching the wrong thing that they can.express (or perhaps even realize) what they're looking for..10. change your ideato benefit from engaging with users you have to be willing to change.your idea.  we've always encouraged founders to see a startup idea.as a hypothesis rather than a blueprint.  and yet they're still.surprised how well it works to change the idea..normally if you complain about something being hard, the general.advice is to work harder.  with a startup, i think you should.find a problem that's easy for you to solve.  optimizing in.solution-space is familiar and straightforward, but you can.make enormous gains playing around in problem-space..whereas mere determination, without flexibility, is a greedy algorithm.that may get you nothing more than a mediocre local maximum:.when someone is determined, there's still a danger that they'll.follow a long, hard path that ultimately leads nowhere..you want to push forward, but at the same time twist and turn to.find the most promising path.  one founder put it very succinctly:.fast iteration is the key to success..one reason this advice is so hard to follow is that people don't.realize how hard it is to judge startup ideas, particularly their.own.  experienced founders learn to keep an open mind:.now i don't laugh at ideas anymore, because i realized how.terrible i was at knowing if they were good or not..you can never tell what will work.  you just have to do whatever.seems best at each point.  we do this with yc itself.  we still.don't know if it will work, but it seems like a decent hypothesis..11. don't worry about competitorswhen you think you've got a great idea, it's sort of like having a.guilty conscience about something.  all someone has to do is look.at you funny, and you think "oh my god, they know."these alarms are almost always false:.companies that seemed like competitors and threats at first.glance usually never were when you really looked at it. even.if they were operating in the same area, they had a different.goal..one reason people overreact to competitors is that they overvalue.ideas.  if ideas really were the key, a competitor with the same.idea would be a real threat.  but it's usually execution that.matters:.all the scares induced by seeing a new competitor pop up are.forgotten weeks later. it always comes down to your own product.and approach to the market..this is generally true even if competitors get lots of attention..competitors riding on lots of good blogger perception aren't.really the winners and can disappear from the map quickly.  you.need consumers after all..hype doesn't make satisfied users, at least not for something as.complicated as technology.12. it's hard to get usersa lot of founders complained about how hard it was to get users,.though..i had no idea how much time and effort needed to go into attaining.users..this is a complicated topic.  when you can't get users, it's hard.to say whether the problem is lack of exposure, or whether the.product's simply bad.  even good products can be blocked by switching.or integration costs:.getting people to use a new service is incredibly difficult..this is especially true for a service that other companies can.use, because it requires their developers to do work. if you're.small, they don't think it is urgent..[4].the sharpest criticism of yc came from a founder who said we didn't.focus enough on customer acquisition:.yc preaches "make something people want" as an engineering task,.a never ending stream of feature after feature until enough.people are happy and the application takes off.  there's very.little focus on the cost of customer acquisition..this may be true; this may be something we need to fix, especially.for applications like games.  if you make something where the.challenges are mostly technical, you can rely on word of mouth,.like google did.  one founder was surprised by how well that worked.for him:.there is an irrational fear that no one will buy your product..but if you work hard and incrementally make it better, there.is no need to worry..but with other types of startups you may win less by features and.more by deals and marketing..13. expect the worst with dealsdeals fall through.  that's a constant of the startup world.  startups.are powerless, and good startup ideas generally seem wrong.  so.everyone is nervous about closing deals with you, and you have no.way to make them.this is particularly true with investors:.in retrospect, it would have been much better if we had operated.under the assumption that we would never get any additional.outside investment.  that would have focused us on finding.revenue streams early..my advice is generally pessimistic.  assume you won't get money,.and if someone does offer you any, assume you'll never get any more..if someone offers you money, take it. you say it a lot, but i.think it needs even more emphasizing.  we had the opportunity.to raise a lot more money than we did last year and i wish we.had..why do founders ignore me?  mostly because they're optimistic by.nature.  the mistake is to be optimistic about things you can't.control. by all means be optimistic about your ability to make.something great.  but you're asking for trouble if you're optimistic.about big companies or investors..14. investors are cluelessa lot of founders mentioned how surprised they were by the cluelessness.of investors:.they don't even know about the stuff they've invested in.  i.met some investors that had invested in a hardware device and.when i asked them to demo the device they had difficulty switching.it on..angels are a bit better than vcs, because they usually have startup.experience themselves:.vc investors don't know half the time what they are talking.about and are years behind in their thinking.  a few were great,.but 95% of the investors we dealt with were unprofessional,.didn't seem to be very good at business or have any kind of.creative vision. angels were generally much better to talk to..why are founders surprised that vcs are clueless?  i think it's.because they seem so formidable.the reason vcs seem formidable is that it's their profession to..you get to be a vc by convincing asset managers to trust you with.hundreds of millions of dollars.  how do you do that?  you have to.seem confident, and you have to seem like you understand technology..[5].15. you may have to play gamesbecause investors are so bad at judging you, you have to work harder.than you should at selling yourself. one founder said the thing.that surprised him most was.the degree to which feigning certitude impressed investors..this is the thing that has surprised me most about yc founders'.experiences.  this summer we invited some of the alumni to talk to.the new startups about fundraising, and pretty much 100% of their.advice was about investor psychology.  i thought i was cynical about.vcs, but the founders were much more cynical..a lot of what startup founders do is just posturing.  it works..vcs themselves have no idea of the extent to which the startups.they like are the ones that are best at selling themselves to vcs..[6].it's exactly the same phenomenon we saw a step earlier.  vcs get.money by seeming confident to lps, and founders get money by seeming.confident to vcs..16. luck is a big factorwith two such random linkages in the path between startups and.money, it shouldn't be surprising that luck is a big factor in.deals.  and yet a lot of founders are surprised by it..i didn't realize how much of a role luck plays and how much is.outside of our control..if you think about famous startups, it's pretty clear how big a.role luck plays.  where would microsoft be if ibm insisted on an.exclusive license for dos?why are founders fooled by this?  business guys probably aren't,.but hackers are used to a world where skill is paramount, and you.get what you deserve..when we started our startup, i had bought the hype of the startup.founder dream: that this is a game of skill. it is, in some.ways.  having skill is valuable. so is being determined as all.hell. but being lucky is the critical ingredient..actually the best model would be to say that the outcome is the.product of skill, determination, and luck.  no matter how much.skill and determination you have, if you roll a zero for luck, the.outcome is zero.these quotes about luck are not from founders whose startups failed..founders who fail quickly tend to blame themselves.  founders who.succeed quickly don't usually realize how lucky they were.  it's.the ones in the middle who see how important luck is..17. the value of communitya surprising number of founders said what surprised them most about.starting a startup was the value of community.  some meant the.micro-community of yc founders:.the immense value of the peer group of yc companies, and facing.similar obstacles at similar times..which shouldn't be that surprising, because that's why it's structured.that way.  others were surprised at the value of the startup community.in the larger sense:.how advantageous it is to live in silicon valley, where you.can't help but hear all the cutting-edge tech and startup news,.and run into useful people constantly..the specific thing that surprised them most was the general spirit.of benevolence:.one of the most surprising things i saw was the willingness of.people to help us. even people who had nothing to gain went out.of their way to help our startup succeed..and particularly how it extended all the way to the top:.the surprise for me was how accessible important and interesting.people are. it's amazing how easily you can reach out to people.and get immediate feedback..this is one of the reasons i like being part of this world.  creating.wealth is not a zero-sum game, so you don't have to stab people in.the back to win..18. you get no respectthere was one surprise founders mentioned that i'd forgotten about:.that outside the startup world, startup founders get no respect..in social settings, i found that i got a lot more respect when.i said, "i worked on microsoft office" instead of "i work at a.small startup you've never heard of called x.".partly this is because the rest of the world just doesn't get.startups, and partly it's yet another consequence of the fact that.most good startup ideas seem bad:.if you pitch your idea to a random person, 95% of the time.you'll find the person instinctively thinks the idea will be a.flop and you're wasting your time (although they probably won't.say this directly)..unfortunately this extends even to dating:.it surprised me that being a startup founder does not get you.more admiration from women..i did know about that, but i'd forgotten..19. things change as you growthe last big surprise founders mentioned is how much things changed.as they grew.  the biggest change was that you got to program even.less:.your job description as technical founder/ceo is completely.rewritten every 6-12 months. less coding, more.managing/planning/company building, hiring, cleaning up messes,.and generally getting things in place for what needs to happen.a few months from now..in particular, you now have to deal with employees, who often have.different motivations:.i knew the founder equation and had been focused on it since i.knew i wanted to start a startup as a 19 year old.  the employee.equation is quite different so it took me a while to get it.down..fortunately, it can become a lot less stressful once you reach.cruising altitude:.i'd say 75% of the stress is gone now from when we first started..running a business is so much more enjoyable now.  we're more.confident. we're more patient. we fight less. we sleep more..i wish i could say it was this way for every startup that succeeded,.but 75% is probably on the high side..the super-patternthere were a few other patterns, but these were the biggest.  one's.first thought when looking at them all is to ask if there's a.super-pattern, a pattern to the patterns.i saw it immediately, and so did a yc founder i read the list to..these are supposed to be the surprises, the things i didn't tell.people.  what do they all have in common?  they're all things i.tell people.  if i wrote a new essay with the same outline as this.that wasn't summarizing the founders' responses, everyone would say.i'd run out of ideas and was just repeating myself.what is going on here?when i look at the responses, the common theme is that.starting a startup was like i said, but way more so.  people just.don't seem to get how different it is till they do it.  why?  the.key to that mystery is to ask, how different from what?  once you.phrase it that way, the answer is obvious: from a job.  everyone's.model of work is a job.  it's completely pervasive.  even if you've.never had a job, your parents probably did, along with practically.every other adult you've met.unconsciously, everyone expects a startup to be like a job, and.that explains most of the surprises.  it explains why people are.surprised how carefully you have to choose cofounders and how hard.you have to work to maintain your relationship.  you don't have to.do that with coworkers.  it explains why the ups and downs are.surprisingly extreme.  in a job there is much more damping.  but.it also explains why the good times are surprisingly good: most.people can't imagine such freedom.  as you go down the list, almost.all the surprises are surprising in how much a startup differs from.a job.you probably can't overcome anything so pervasive as the model of.work you grew up with.  so the best solution is to be consciously.aware of that.  as you go into a startup, you'll be thinking "everyone.says it's really extreme."  your next thought will probably be "but.i can't believe it will be that bad."  if you want to avoid being.surprised, the next thought after that should be: "and the reason.i can't believe it will be that bad is that my model of work is a.job.".notes[1].graduate students might understand it.  in grad school you.always feel you should be working on your thesis.  it doesn't end.every semester like classes do.[2].the best way for a startup to engage with slow-moving.organizations is to fork off separate processes to deal with them..it's when they're on the critical path that they kill you—when.you depend on closing a deal to move forward.  it's worth taking.extreme measures to avoid that.[3].this is a variant of reid hoffman's principle that if you.aren't embarrassed by what you launch with, you waited too long to.launch.[4].the question to ask about what you've built is not whether it's.good, but whether it's good enough to supply the activation energy.required.[5].some vcs seem to understand technology because they actually.do, but that's overkill; the defining test is whether you can talk.about it well enough to convince limited partners.[6].this is the same phenomenon you see with defense contractors.or fashion brands.  the dumber the customers, the more effort you.expend on the process of selling things to them rather than making.the things you sell.thanks: to jessica livingston for reading drafts of this,.and to all the founders who responded to my email.related:startups in 13 sentencesthe hardest lessons for startups to learnhow not to diethe 18 mistakes that kill startupsa fundraising survival guiderussian translationkorean translationhebrew translation<eot><sot>persuade xor discover.september 2009
when meeting people you don't know very well, the convention is.to seem extra friendly.  you smile and say "pleased to meet you,".whether you are or not.  there's nothing dishonest about this..everyone knows that these little social lies aren't meant.to be taken literally, just as everyone knows that."can you pass the salt?" is only grammatically a question.i'm perfectly willing to smile and say "pleased to meet you".when meeting new people.  but there is another set of.customs for being ingratiating in print that are not so.harmless.the reason there's a convention of being ingratiating in print.is that most essays are written to persuade..and as any politician could tell.you, the way to persuade people is not just to baldly state the.facts.  you have to add a spoonful of sugar to make the medicine.go down.for example, a politician announcing the cancellation of.a government program will not merely say "the.program is canceled." that would seem offensively.curt.  instead he'll spend most of his time talking about the.noble effort made by the people who worked on it.the reason these conventions are more dangerous is that they.interact with the ideas.  saying "pleased to meet you" is just.something you prepend to a conversation, but the sort of spin.added by politicians is woven through it.  we're starting to.move from social lies to real lies.here's an example of a paragraph from an essay i wrote about.labor unions.  as written,.it tends to offend people who like unions..people who think the labor movement was the creation of heroic.union organizers have a problem to explain: why are unions shrinking.now?  the best they can do is fall back on the default explanation.of people living in fallen civilizations. our ancestors were.giants.  the workers of the early twentieth century must have had.a moral courage that's lacking today..now here's the same paragraph rewritten to please instead of.offending them:.early union organizers made heroic sacrifices to improve conditions.for workers.  but though.labor unions are shrinking now, it's not because present union.leaders are any less courageous.  an employer couldn't get away.with hiring thugs to beat up union leaders today, but if they.did, i see no reason to believe today's union leaders would shrink.from the challenge.  so i think it would be a mistake to attribute.the decline of unions to some kind of decline in the people who.run them.  early union leaders were heroic, certainly, but we.should not suppose that if unions have declined, it's because.present union leaders are somehow inferior.  the cause must be.external..[1].it makes the same point: that it can't have been the personal.qualities of early union organizers that made unions successful,.but must have been some external factor, or otherwise present-day.union leaders would have to be inferior people.  but written this.way it seems like a defense of present-day union organizers rather.than an attack on early ones.  that makes it more persuasive to.people who like unions, because it seems sympathetic to their cause.i believe everything i wrote in the second version.  early union.leaders did make heroic sacrifices.   and.present union leaders probably would rise to the occasion if.necessary.  people tend to; i'm skeptical about the idea of "the.greatest generation.".[2]if i believe everything i said in the second version, why didn't i.write it that way?  why offend people needlessly?because i'd rather offend people than pander to them,.and if you write about controversial topics you have to choose one or the other.  the degree of.courage of past or present union leaders is beside the point; all.that matters for the argument is that they're the same..but if you want to please.people who are mistaken, you can't simply tell the truth.  you're.always going to have to add some sort of padding to protect their.misconceptions from bumping against reality.most writers do.  most writers write to persuade, if only out of.habit or politeness.  but i don't write to persuade; i write to.figure out.  i write to persuade a hypothetical perfectly unbiased.reader.since the custom is to write to persuade the actual reader, someone.who doesn't will seem arrogant.  in fact, worse than arrogant: since.readers are used to essays that try to please someone, an essay.that displeases one side in a dispute reads as an attempt to pander.to the other.  to a lot of pro-union readers, the first paragraph.sounds like the sort of thing a right-wing radio talk show host.would say to stir up his followers.  but it's not.  something that.curtly contradicts one's beliefs can be hard to distinguish from a.partisan attack on them, but though they can end up in the same.place they come from different sources.would it be so bad to add a few extra words, to make people feel.better?  maybe not.  maybe i'm excessively attached to conciseness..i write code the same way i write essays,.making pass after pass.looking for anything i can cut.  but i have a legitimate reason for.doing this.  you don't know what the ideas are until you get them.down to the fewest words..[3]the danger of the second paragraph.is not merely that it's longer.  it's that you start to lie to.yourself.  the ideas start to get mixed together with the spin.you've added to get them past the readers' misconceptions.i think the goal of an essay should be to discover.surprising things.  that's my goal, at least..and most surprising means most different from what people currently.believe.  so writing to persuade and writing to discover are.diametrically opposed.  the more your conclusions disagree with.readers' present beliefs, the more effort you'll have to expend on.selling your ideas rather than having them.  as you accelerate,.this drag increases, till eventually you reach a point where 100%.of your energy is devoted to overcoming it and you can't go any.faster.it's hard enough to overcome one's own misconceptions without having.to think about how to get the resulting ideas past other people's..i worry that if i wrote to persuade, i'd start to shy away unconsciously.from ideas i knew would be hard to sell.  when i notice something.surprising, it's usually very faint at first.  there's nothing more.than a slight stirring of discomfort.  i don't want anything to get.in the way of noticing it consciously..notes[1].i had a strange feeling of being back in high school writing.this.  to get a good grade you had to both write the sort of pious.crap you were expected to, but also seem to be writing with conviction..the solution was a kind of method acting.  it was revoltingly.familiar to slip back into it.[2].exercise for the reader:.rephrase that thought to please the same people the first version.would offend.[3].come to think of it, there is one way in which i deliberately.pander to readers, because it doesn't change the number of words:.i switch person.  this flattering distinction seems so natural to.the average reader that they probably don't notice even when i.switch in mid-sentence, though you tend to notice when it's done.as conspicuously as this.thanks to jessica livingston and robert morris.for reading drafts of this.note: an earlier version of this essay began by talking.about why people dislike michael arrington.  i now believe that.was mistaken, and that most people don't dislike him for the.same reason i did when i first met him, but simply because.he writes about controversial things.<eot><sot>post-medium publishing.september 2009
publishers of all types, from news to music, are unhappy that.consumers won't pay for content anymore.  at least, that's how they.see it.in fact consumers never really were paying for content, and publishers.weren't really selling it either.  if the content was what they.were selling, why has the price of books or music or movies always.depended mostly on the format?  why didn't better content cost more?.[1]a copy of time costs $5 for 58 pages, or 8.6 cents a page..the economist costs $7 for 86 pages, or 8.1 cents a page.  better.journalism is actually slightly cheaper.almost every form of publishing has been organized as if the medium.was what they were selling, and the content was irrelevant.  book.publishers, for example, set prices based on the cost of producing.and distributing books.  they treat the words printed in the book.the same way a textile manufacturer treats the patterns printed on.its fabrics.economically, the print media are in the business of marking up.paper.  we can all imagine an old-style editor getting a scoop and.saying "this will sell a lot of papers!" cross out that final s and.you're describing their business model.  the reason they make less.money now is that people don't need as much paper.a few months ago i ran into a friend in a cafe.  i had a copy of.the new york times, which i still occasionally buy on weekends.  as.i was leaving i offered it to him, as i've done countless times.before in the same situation.  but this time something new happened..i felt that sheepish feeling you get when you offer someone something.worthless.  "do you, er, want a printout of yesterday's news?" i.asked.  (he didn't.)now that the medium is evaporating, publishers have nothing left.to sell.  some seem to think they're going to sell content—that.they were always in the content business, really.  but they weren't,.and it's unclear whether anyone could be.sellingthere have always been people in the business of selling information,.but that has historically been a distinct business from publishing..and the business of selling information to consumers has always.been a marginal one.  when i was a kid there were people who used.to sell newsletters containing stock tips, printed on colored paper.that made them hard for the copiers of the day to reproduce.  that.is a different world, both culturally and economically, from the.one publishers currently inhabit.people will pay for information they think they can make money from..that's why they paid for those stock tip newsletters, and why.companies pay now for bloomberg terminals and economist intelligence.unit reports.  but will people pay for information otherwise?.history offers little encouragement.if audiences were willing to pay more for better content, why wasn't.anyone already selling it to them?  there was no reason you couldn't.have done that in the era of physical media.  so were the print.media and the music labels simply overlooking this opportunity?  or.is it, rather, nonexistent?what about itunes?  doesn't that show people will pay for content?.well, not really. itunes is more of a tollbooth than a store.  apple.controls the default path onto the ipod.  they offer a convenient.list of songs, and whenever you choose one they ding your credit.card for a small amount, just below the threshold of attention..basically, itunes makes money by taxing people, not selling them.stuff.  you can only do that if you own the channel, and even then.you don't make much from it, because a toll has to be ignorable to.work.  once a toll becomes painful, people start to find ways around.it, and that's pretty easy with digital content.the situation is much the same with digital books.  whoever controls.the device sets the terms.  it's in their interest for content to.be as cheap as possible, and since they own the channel, there's a.lot they can do to drive prices down.  prices will fall even further.once writers realize they don't need publishers.  getting a book.printed and distributed is a daunting prospect for a writer, but.most can upload a file.is software a counterexample?  people pay a lot for desktop software,.and that's just information.  true, but i don't think publishers.can learn much from software.  software companies can charge a lot.because (a) many of the customers are businesses, who get in.trouble.if they use pirated versions, and (b) though in form merely.information, software is treated by both maker and purchaser as a.different type of thing from a song or an article.   a photoshop.user needs photoshop in a way that no one needs a particular song.or article.that's why there's a separate word, "content," for information.that's not software.  software is a different business.  software.and content blur together in some of the most lightweight software,.like casual games.  but those are usually free.   to make money the.way software companies do, publishers would have to become software.companies, and being publishers gives them no particular head start.in that domain..[2]the most promising countertrend is the premium cable channel.  people.still pay for those.  but broadcasting isn't publishing: you're not.selling a copy of something.  that's one reason the movie business.hasn't seen their revenues decline the way the news and music.businesses have.  they only have one foot in publishing.to the extent the movie business can avoid becoming publishers,.they may avoid publishing's problems.  but there are limits to how.well they'll be able to do that.  once publishing—giving people.copies—becomes the most natural way of distributing your content,.it probably doesn't work to stick to old forms of distribution just.because you make more that way.  if free copies of your content are.available online, then you're competing with publishing's form of.distribution, and that's just as bad as being a publisher.apparently some people in the music business hope to retroactively.convert it away from publishing, by getting listeners to pay for.subscriptions.  it seems unlikely that will work if they're just.streaming the same files you can get as mp3s.nextwhat happens to publishing if you can't sell content?  you have two.choices: give it away and make money from it indirectly, or find.ways to embody it in things people will pay for.the first is probably the future of most current media..give music.away and make money from concerts and t-shirts.  publish articles.for free and make money from one of a dozen permutations of.advertising.  both publishers and investors are down on advertising.at the moment, but it has more potential than they realize.i'm not claiming that potential will be realized by the existing.players.  the optimal.ways to make money from the written word.probably require different words written by different people.it's harder to say what will happen to movies.  they could evolve.into ads.  or they could return to their roots and make going to.the theater a treat.  if they made the experience good enough,.audiences might start to prefer it to watching pirated movies at.home..[3].or maybe the movie business will dry up, and the people.working in it will go to work for game developers.i don't know how big embodying information in physical form will.be.  it may be surprisingly large; people overvalue.physical stuff..there should remain some market for printed books, at least.i can see the evolution of book publishing in the books on my.shelves.  clearly at some point in the 1960s the big publishing.houses started to ask: how cheaply can we make books before people.refuse to buy them?  the answer turned out to be one step short of.phonebooks.  as long as it isn't floppy, consumers still perceive.it as a book.that worked as long as buying printed books was the only way to.read them.  if printed books are optional, publishers will have to.work harder to entice people to buy them.  there should be some.market, but it's hard to foresee how big, because its size will.depend not on macro trends like the amount people read, but on the.ingenuity of individual publishers..[4]some magazines may thrive by focusing on the magazine as a physical.object.  fashion magazines could be made lush in a way that would.be hard to match digitally, at least for a while.  but this is.probably not an option for most magazines.i don't know exactly what the future will look like, but i'm not.too worried about it.  this sort of change tends to create as many.good things as it kills.  indeed, the really interesting question is not.what will happen to existing forms, but what new forms will appear.the reason i've been writing about existing forms is that i don't.know what new forms will appear.  but though i can't predict.specific winners, i can offer a recipe for recognizing them.  when.you see something that's taking advantage of new technology to give.people something they want that they couldn't have before, you're.probably looking at a winner.  and when you see something that's.merely reacting to new technology in an attempt to preserve some.existing source of revenue, you're probably looking at a loser..notes[1].i don't like the word "content" and tried for a while to avoid.using it, but i have to admit there's no other word that means the.right thing.  "information" is too general.ironically, the main reason i don't like "content" is the thesis.of this essay.  the word suggests an undifferentiated slurry, but.economically that's how both publishers and audiences treat it..content is information you don't need.[2].some types of publishers would be at a disadvantage trying.to enter the software business.  record labels, for example, would.probably find it more natural to expand into casinos than software,.because the kind of people who run them would be more at home at.the mafia end of the business spectrum than the don't-be-evil end.[3].i never watch movies in theaters anymore.  the tipping point.for me was the ads they show first.[4].unfortunately, making physically nice books will only be a.niche within a niche.  publishers are more likely to resort to.expedients like selling autographed copies, or editions with the.buyer's picture on the cover.thanks to michael arrington, trevor blackwell, steven levy, robert.morris, and geoff ralston for reading drafts of this.<eot><sot>the list of n things.september 2009
i bet you the current issue of cosmopolitan has an article.whose title begins with a number. "7 things he won't tell you about.sex," or something like that.  some popular magazines.feature articles of this type on the cover of every.issue.  that can't be happening by accident.  editors must know.they attract readers.why do readers like the list of n things so much?   mainly because.it's easier to read than a regular article..[1].structurally, the list of n things is a degenerate case of essay..an essay can go anywhere the writer wants.  in a list of n things.the writer agrees to constrain himself to a collection of points.of roughly equal importance, and he tells the reader explicitly.what they are.some of the work of reading an article is understanding its.structure—figuring out what in high school we'd have called.its "outline." not explicitly, of course, but someone who really.understands an article probably has something in his brain afterward.that corresponds to such an outline.  in a list of n things, this.work is done for you.  its structure is an exoskeleton.as well as being explicit, the structure is guaranteed to be of the.simplest possible type: a few main points with few to no subordinate.ones, and no particular connection between them.because the main points are unconnected, the list of n things is.random access.  there's no thread of reasoning you have to follow.  you could.read the list in any order.  and because the points are independent.of one another, they work like watertight compartments in an.unsinkable ship.  if you get bored with, or can't understand, or.don't agree with one point, you don't have to give up on the article..you can just abandon that one and skip to the next.  a list of n.things is parallel and therefore fault tolerant.there are times when this format is what a writer wants.  one, obviously,.is when what you have to say actually is a list of n.things.  i once wrote an essay about the mistakes that kill startups, and a few people made fun of me.for writing something whose title began with a number.  but in that.case i really was trying to make a complete catalog of a number of.independent things.  in fact, one of the questions i was trying to.answer was how many there were.there are other less legitimate reasons for using this format.  for.example, i use it when i get close to a deadline.  if i have to.give a talk and i haven't started it a few days beforehand, i'll.sometimes play it safe and make the talk a list of n things.the list of n things is easier for writers as well as readers.  when.you're writing a real essay, there's always a chance you'll hit a.dead end.  a real essay is a train of thought, and some trains of.thought just peter out.  that's an alarming possibility when you.have to give a talk in a few days.  what if you run out of ideas?.the compartmentalized structure of the list of n things protects.the writer from his own stupidity in much the same way it protects.the reader.  if you run out of ideas on one point, no problem: it.won't kill the essay.  you can take out the whole point if you need.to, and the essay will still survive.writing a list of n things is so relaxing.  you think of n/2 of.them in the first 5 minutes.  so bang, there's the structure, and.you just have to fill it in.  as you think of more points, you just.add them to the end.  maybe you take out or rearrange or combine a.few, but at every stage you have a valid (though initially low-res).list of n things.  it's like the sort of programming where you write.a version 1 very quickly and then gradually modify it, but at every.point have working code—or the style of painting where you begin.with a complete but very blurry sketch done in an hour, then spend.a week cranking up the resolution.because the list of n things is easier for writers too, it's not.always a damning sign when readers prefer it.  it's not necessarily.evidence readers are lazy; it could also mean they don't have.much confidence in the writer.  the list of n things is in that.respect the cheeseburger of essay forms.  if you're eating at a.restaurant you suspect is bad, your best bet is to order the.cheeseburger.  even a bad cook can make a decent cheeseburger.  and.there are pretty strict conventions about what a cheeseburger should.look like.  you can assume the cook isn't going to try something.weird and artistic.  the list of n things similarly limits the.damage that can be done by a bad writer.  you know it's going to.be about whatever the title says, and the format prevents the writer.from indulging in any flights of fancy.because the list of n things is the easiest essay form, it should.be a good one for beginning writers.  and in fact it is what most.beginning writers are taught.  the classic 5 paragraph essay is.really a list of n things for n = 3.  but the students writing them.don't realize they're using the same structure as the articles they.read in cosmopolitan. they're not allowed to include the numbers,.and they're expected to spackle over the gaps with gratuitous.transitions ("furthermore...") and cap the thing at either end with.introductory and concluding paragraphs so it will look superficially.like a real essay..[2]it seems a fine plan to start students off with the list of n things..it's the easiest form.  but if we're going to do that, why not do.it openly?  let them write lists of n things like the pros, with.numbers and no transitions or "conclusion."there is one case where the list of n things is a dishonest format:.when you use it to attract attention by falsely claiming the list.is an exhaustive one.  i.e. if you write an article that purports.to be about the 7 secrets of success.  that kind of title is the.same sort of reflexive challenge as a whodunit. you have to at least.look at the article to check whether they're the same 7 you'd list..are you overlooking one of the secrets of success?  better check.it's fine to put "the" before the number if you really believe.you've made an exhaustive list.  but evidence suggests most things.with titles like this are linkbait.the greatest weakness of the list of n things is that there's so.little room for new thought.  the main point of essay writing, when.done right, is the new ideas you have while doing it.  a real essay,.as the name implies, is.dynamic: you don't know what you're going.to write when you start.  it will be about whatever you discover.in the course of writing it.this can only happen in a very limited way in a list of n things..you make the title first, and that's what it's going to be about..you can't have more new ideas in the writing than will fit in the.watertight compartments you set up initially.  and your brain seems.to know this: because you don't have room for new ideas, you don't.have them.another advantage of admitting to beginning writers that the 5.paragraph essay is really a list of n things is that we can warn.them about this.  it only lets you experience the defining.characteristic of essay writing on a small scale: in thoughts of a.sentence or two.  and it's particularly dangerous that the 5 paragraph.essay buries the list of n things within something that looks like.a more sophisticated type of essay.  if you don't know you're using.this form, you don't know you need to escape it.notes[1].articles of this type are also startlingly popular on delicious,.but i think that's because.delicious/popular.is driven by bookmarking,.not because delicious users are stupid.  delicious users are.collectors, and a list of n things seems particularly collectible.because it's a collection itself.[2].most "word problems" in school math textbooks are similarly.misleading.  they look superficially like the application of math.to real problems, but they're not.  so if anything they reinforce.the impression that math is merely a complicated but pointless.collection of stuff to be memorized.russian translation<eot><sot>the anatomy of determination.want to start a startup?  get funded by.y combinator..september 2009
like all investors, we spend a lot of time trying to learn how to.predict which startups will succeed.  we probably spend more time.thinking about it than most, because we invest the earliest..prediction is usually all we have to rely on.we learned quickly that the most important predictor of success is.determination.  at first we thought it might be intelligence..everyone likes to believe that's what makes startups succeed.  it.makes a better story that a company won because its founders were.so smart.  the pr people and reporters who spread such stories.probably believe them themselves.  but while it certainly helps to.be smart, it's not the deciding factor.  there are plenty of people.as smart as bill gates who achieve nothing.in most domains, talent is overrated compared to determination—partly.because it makes a better story, partly because it gives onlookers.an excuse for being lazy, and partly because after a while determination.starts to look like talent.i can't think of any field in which determination is overrated, but.the relative importance of determination and talent probably do.vary somewhat.  talent probably matters more in types of work that.are purer, in the sense that one is solving mostly a single type.of problem instead of many different types.   i suspect determination.would not take you as far in math as it would in, say, organized.crime.i don't mean to suggest by this comparison that types of work that.depend more on talent are always more admirable.  most people would.agree it's more admirable to be good at math than memorizing long.strings of digits, even though the latter depends more on natural.ability.perhaps one reason people believe startup founders win by being.smarter is that intelligence does matter more in technology startups.than it used to in earlier types of companies.  you probably do.need to be a bit smarter to dominate internet search than you had.to be to dominate railroads or hotels or newspapers.  and that's.probably an ongoing trend.  but even in the highest of high tech.industries, success still depends more on determination than brains.if determination is so important, can we isolate its components?.are some more important than others?  are there some you can.cultivate?the simplest form of determination is sheer willfulness.  when you.want something, you must have it, no matter what.a good deal of willfulness must be inborn, because it's common to.see families where one sibling has much more of it than another..circumstances can alter it, but at the high end of the scale, nature.seems to be more important than nurture.  bad circumstances can.break the spirit of a strong-willed person, but i don't think there's.much you can do to make a weak-willed person stronger-willed.being strong-willed is not enough, however.  you also have to be.hard on yourself.  someone who was strong-willed but self-indulgent.would not be called determined.  determination implies your willfulness.is balanced by discipline.that word balance is a significant one.  the more willful you are,.the more disciplined you have to be.  the stronger your will, the.less anyone will be able to argue with you except yourself.  and.someone has to argue with you, because everyone has base impulses,.and if you have more will than discipline you'll just give into.them and end up on a local maximum like drug addiction.we can imagine will and discipline as two fingers squeezing a.slippery melon seed.  the harder they squeeze, the further the seed.flies, but they must both squeeze equally or the seed spins off.sideways.if this is true it has interesting implications, because discipline.can be cultivated, and in fact does tend to vary quite a lot in the.course of an individual's life.  if determination is effectively.the product of will and discipline, then you can become more.determined by being more disciplined..[1]another consequence of the melon seed model is that the more willful.you are, the more dangerous it is to be undisciplined.  there seem.to be plenty of examples to confirm that.  in some very energetic.people's lives you see something like wing flutter, where they.alternate between doing great work and doing absolutely nothing..externally this would look a lot like bipolar disorder.the melon seed model is inaccurate in at least one respect, however:.it's static.  in fact the dangers of indiscipline increase with.temptation.  which means, interestingly, that determination tends.to erode itself.  if you're sufficiently determined to achieve great.things, this will probably increase the number of temptations around.you.  unless you become proportionally more disciplined, willfulness.will then get the upper hand, and your achievement will revert to.the mean.that's why shakespeare's caesar thought thin men so dangerous.  they weren't.tempted by the minor perquisites of power.the melon seed model implies it's possible to be too disciplined..is it?  i think there probably are people whose willfulness is.crushed down by excessive discipline, and who would achieve more.if they weren't so hard on themselves.  one reason the young sometimes.succeed where the old fail is that they don't realize how incompetent.they are.  this lets them do a kind of deficit spending.  when they.first start working on something, they overrate their achievements..but that gives them confidence to keep working, and their performance.improves.  whereas someone clearer-eyed would see their initial.incompetence for what it was, and perhaps be discouraged from.continuing.there's one other major component of determination: ambition.  if.willfulness and discipline are what get you to your destination,.ambition is how you choose it.i don't know if it's exactly right to say that ambition is a component.of determination, but they're not entirely orthogonal.  it would.seem a misnomer if someone said they were very determined to do.something trivially easy.and fortunately ambition seems to be quite malleable; there's a lot.you can do to increase it.  most people don't know how ambitious.to be, especially when they're young.  they don't know what's hard,.or what they're capable of.  and this problem is exacerbated by.having few peers.  ambitious people are rare, so if everyone is.mixed together randomly, as they tend to be early in people's lives,.then the ambitious ones won't have many ambitious peers.  when you.take people like this and put them together with other ambitious.people, they bloom like dying plants given water.  probably most.ambitious people are starved for the sort of encouragement they'd.get from ambitious peers, whatever their age..[2]achievements also tend to increase your ambition.  with each step.you gain confidence to stretch further next time.so here in sum is how determination seems to work: it consists of.willfulness balanced with discipline, aimed by ambition.   and.fortunately at least two of these three qualities can be cultivated..you may be able to increase your strength of will somewhat; you can.definitely learn self-discipline; and almost everyone is practically.malnourished when it comes to ambition.i feel like i understand determination a bit better now.  but only.a bit: willfulness, discipline, and ambition are all concepts almost.as complicated as determination..[3]note too that determination and talent are not the whole story..there's a third factor in achievement: how much you like the work..if you really love working on something,.you don't need determination to drive you; it's what you'd do anyway..but most types of work have aspects one doesn't like, because most.types of work consist of doing things for other people, and it's.very unlikely that the tasks imposed by their needs will happen to.align exactly with what you want to do.indeed, if you want to create the most wealth,.the way to do it is to focus more on their needs than your interests,.and make up the difference with determination.notes[1].loosely speaking.  what i'm claiming with the melon seed model.is more like determination is proportionate to wd^m - k|w - d|^n,.where w is will and d discipline.[2].which means one of the best ways to help a society generally.is to create events and institutions that bring ambitious.people together.  it's like pulling the control rods out of a.reactor: the energy they emit encourages other ambitious people,.instead of being absorbed by the normal people they're usually.surrounded with.conversely, it's probably a mistake to do as some european countries.have done and try to ensure none of your universities is significantly.better than the others.[3].for example, willfulness clearly has two subcomponents,.stubbornness and energy.  the first alone yields someone who's.stubbornly inert.  the second alone yields someone flighty..as willful people get older or otherwise lose their energy, they.tend to become merely stubborn..thanks to sam altman, jessica livingston, and robert morris.for reading drafts of this.italian translationportuguese translationrussian translation<eot><sot>what kate saw in silicon valley.august 2009
kate courteau is the architect who designed y combinator's office..recently we managed to recruit her to help us run yc when she's not.busy with architectural projects.  though she'd heard a lot about.yc since the beginning, the last 9 months have been a total immersion.i've been around the startup world for so long that it seems normal.to me, so i was curious to hear what had surprised her most about.it.  this was her list:1. how many startups fail.kate knew in principle that startups.were very risky, but she was surprised to see how constant the.threat of failure was — not just for the minnows, but even for the.famous startups whose founders came to speak at yc dinners..2. how much startups' ideas change.as usual, by demo day about.half the startups were doing something significantly different than.they started with.  we encourage that.  starting a startup is like.science in that you have to follow the truth wherever it leads.  in.the rest of the world, people don't start things till they're sure.what they want to do, and once started they tend to continue on their.initial path even if it's mistaken..3. how little money it can take to start a startup.in kate's.world, everything is still physical and expensive.  you can barely.renovate a bathroom for the cost of starting a startup..4. how scrappy founders are.that was her actual word.  i agree.with her, but till she mentioned this it never occurred to me how.little this quality is appreciated in most of the rest of the world..it wouldn't be a compliment in most organizations to call someone.scrappy.what does it mean, exactly?  it's basically the diminutive form of.belligerent.  someone who's scrappy manages to be both threatening.and undignified at the same time.   which seems to me exactly what.one would want to be, in any kind of work.  if you're not threatening,.you're probably not doing anything new, and dignity is merely a.sort of plaque..5. how tech-saturated silicon valley is."it seems like everybody.here is in the industry."  that isn't literally true, but there is.a qualitative difference between silicon valley and other places..you tend to keep your voice down, because there's a good chance the.person at the next table would know some of the people you're talking.about.  i never felt that in boston.  the good news is, there's.also a good chance the person at the next table could help you in.some way..6. that the speakers at yc were so consistent in their advice..actually, i've noticed this too.  i always worry the speakers will.put us in an embarrassing position by contradicting what we tell the.startups, but it happens surprisingly rarely.when i asked her what specific things she remembered speakers always.saying, she mentioned: that the way to succeed was to launch something.fast, listen to users, and then iterate; that startups required.resilience because they were always an emotional rollercoaster; and.that most vcs were sheep.i've been impressed by how consistently the speakers advocate.launching fast and iterating.  that was contrarian advice 10 years.ago, but it's clearly now the established practice..7. how casual successful startup founders are.most of the famous.founders in silicon valley are people you'd overlook on the street..it's not merely that they don't dress up.  they don't project any.kind of aura of power either.  "they're not trying to impress.anyone."interestingly, while kate said that she could never pick out.successful founders, she could recognize vcs, both by the way they.dressed and the way they carried themselves..8. how important it is for founders to have people to ask for advice.(i swear i didn't prompt this one.)  without advice "they'd just.be sort of lost."  fortunately, there are a lot of people to help.them.  there's a strong tradition within yc of helping other yc-funded.startups.  but we didn't invent that idea: it's just a slightly.more concentrated form of existing valley culture..9. what a solitary task startups are.architects are constantly.interacting face to face with other people, whereas doing a technology.startup, at least, tends to require long stretches of uninterrupted.time to work.  "you could do it in a box."by inverting this list, we can get a portrait of the "normal" world..it's populated by people who talk a lot with one another as they.work slowly but harmoniously on conservative, expensive projects.whose destinations are decided in advance, and who carefully adjust.their manner to reflect their position in the hierarchy.that's also a fairly accurate description of the past.  so startup.culture may not merely be different in the way you'd expect any.subculture to be, but a leading indicator.japanese translation<eot><sot>the trouble with the segway.july 2009
the segway hasn't delivered on its initial promise, to put it mildly..there are several reasons why, but one is that people don't want.to be seen riding them. someone riding a segway looks like a dork.my friend trevor blackwell built.his own segway,.which we called.the segwell. he also built a one-wheeled version,.the eunicycle,.which looks exactly like a regular unicycle till you realize the.rider isn't pedaling.  he has ridden them both to downtown mountain.view to get coffee.  when he rides the eunicycle, people smile at.him.  but when he rides the segwell, they shout abuse from their.cars: "too lazy to walk, ya fuckin homo?"why do segways provoke this reaction?  the reason you look like a.dork riding a segway is that you look smug.  you don't seem to.be working hard enough.someone riding a motorcycle isn't working any harder. but because.he's sitting astride it, he seems to be making an effort.  when.you're riding a segway you're just standing there.  and someone who's.being whisked along while seeming to do no work — someone in a sedan.chair, for example — can't help but look smug.try this thought experiment and it becomes clear: imagine something.that worked like the segway, but that you rode with one foot in.front of the other, like a skateboard.  that wouldn't seem nearly.as uncool.so there may be a way to capture more of the market segway hoped.to reach: make a version that doesn't look so easy for the rider..it would also be helpful if the styling was in the tradition of.skateboards or bicycles rather than medical devices.curiously enough, what got segway into this problem was that the.company was itself a kind of segway.  it was too easy for them;.they were too successful raising money.  if they'd had to grow the.company gradually, by iterating through several versions they sold.to real users, they'd have learned pretty quickly that people looked.stupid riding them. instead they had enough to work in secret.  they.had focus groups aplenty, i'm sure, but they didn't have the people.yelling insults out of cars.  so they never realized they were.zooming confidently down a blind alley.<eot><sot>ramen profitable.want to start a startup?  get funded by.y combinator..july 2009
now that the term "ramen profitable" has become widespread, i ought.to explain precisely what the idea entails.ramen profitable means a startup makes just enough to pay the.founders' living expenses.  this is a different form of profitability.than startups have traditionally aimed for.  traditional profitability.means a big bet is finally paying off, whereas the main importance.of ramen profitability is that it buys you time..[1]in the past, a startup would usually become profitable only.after raising and spending quite a lot of money.  a company making.computer hardware might not become profitable for 5 years, during.which they spent $50 million.  but when they did.they might have revenues of $50 million a year.   this kind of.profitability means the startup has succeeded.ramen profitability is the other extreme: a startup that becomes.profitable after 2 months, even though its revenues are only $3000.a month, because the only employees are a couple 25 year old founders.who can live on practically nothing.  revenues of $3000 a month do.not mean the company has succeeded..but it does share something with the one.that's profitable in the traditional way: they don't need to raise.money to survive.ramen profitability is an unfamiliar idea to most people because.it only recently became feasible.  it's still not feasible for a.lot of startups; it would not be for most biotech startups, for.example; but it is for many software startups because they're now.so cheap.  for many, the only real cost is the founders'.living expenses.the main significance of this type of profitability is that you're.no longer at the mercy of investors.  if you're still losing money,.then eventually you'll either have to raise more.or shut down.  once you're.ramen profitable this painful choice goes away..you can still raise money, but you don't have to do it now.* * *the most obvious advantage of not needing money is that.you can get better terms.  if investors know you need money, they'll.sometimes take advantage of you.  some may even deliberately.stall, because they know that as you run out of money you'll become.increasingly pliable.but there are also three less obvious advantages of ramen profitability..one is that it makes you more attractive to investors.  if you're.already profitable, on however small a scale, it shows that (a) you.can get at least someone to pay you, (b) you're serious about.building things people want, and (c) you're disciplined enough to.keep expenses low.this is reassuring to investors, because you've addressed three of.their biggest worries.  it's common for them to fund companies that.have smart founders and a big market, and yet still fail.  when.these companies fail, it's usually because (a) people wouldn't pay.for what they made, e.g. because it was too hard to sell to them,.or the market wasn't ready yet, (b) the founders solved the wrong.problem, instead of paying attention to what users needed, or (c).the company spent too much and burned through their funding before.they started to make money.  if you're ramen profitable, you're.already avoiding these mistakes.another advantage of ramen profitability is that it's good for.morale.  a company.tends to feel rather theoretical when you first start it.  it's.legally a company, but you feel like you're lying when you call it.one.  when people start to pay you significant amounts, the company.starts to feel real.  and your own living expenses are the milestone.you feel most, because at that point the future flips state.  now.survival is the default, instead of dying.a morale boost on that scale is very valuable in a startup, because.the moral weight of running a startup is what makes it hard.  startups.are still very rare.  why don't more people do it?  the financial.risk?  plenty of 25 year olds save nothing anyway.  the long hours?.plenty of people work just as long hours in regular jobs. what keeps.people from starting startups is the fear of having so much.responsibility.  and this is not an irrational fear: it really is.hard to bear.  anything that takes some of that weight off you will.greatly increase your chances of surviving.a startup that reaches ramen profitability may be more likely.to succeed than not.  which is pretty exciting, considering the.bimodal distribution of outcomes in startups: you either fail or.make a lot of money.the fourth advantage of ramen profitability is the least obvious.but may be the most important.  if you don't need to raise money,.you don't have to interrupt working on the company to do it.raising money is terribly distracting..you're lucky if your.productivity is a third of what it was before.  and it can last for.months.i didn't understand (or rather, remember) precisely why raising.money was so distracting till earlier this year.  i'd noticed that.startups we funded would usually grind to a halt when they switched.to raising money, but i didn't remember exactly why till yc raised.money itself.  we had a comparatively easy time of it; the first.people i asked said yes; but it took months to work out the.details, and during that time i got hardly any real work done.  why?.because i thought about it all the time.at any given time there tends to be one problem that's the most.urgent for a startup.  this is what you think about as you fall.asleep at night and when you take a shower in the morning.  and.when you start raising money, that becomes the problem you think.about.  you only take one shower in the morning, and if you're.thinking about investors during it, then you're not thinking about.the product.whereas if you can choose when you raise money, you can pick a time.when you're not in the middle of something else, and you can probably.also insist that the round close fast.  you may even be able to.avoid having the round occupy your thoughts, if you don't care.whether it closes.* * *ramen profitable means no more than the definition implies.  it.does not, for example, imply that you're "bootstrapping" the.startup—that you're never going to take money from investors..empirically that doesn't seem to work very well.  few startups.succeed without taking investment.  maybe as startups get cheaper.it will become more common.  on the other hand, the money is there,.waiting to be invested.  if startups need it less, they'll be able.to get it on better terms, which will make them more inclined to.take it.  that will tend to produce an equilibrium..[2]another thing ramen profitability doesn't imply is joe kraus's idea.that you should put your.business model in beta when you put your.product in beta.  he believes you should get.people to pay you from the beginning.  i think that's too constraining..facebook didn't, and they've done better than most startups.  making.money right away was not only unnecessary for them, but probably.would have been harmful.  i do think joe's rule could be useful for.many startups, though.  when founders seem unfocused, i sometimes.suggest they try to get customers to pay them for something, in the.hope that this constraint will prod them into action.the difference between joe's idea and ramen profitability is that.a ramen profitable company doesn't have to be making money the way.it ultimately will.  it just has to be making money.  the most.famous example is google, which initially made money by licensing.search to sites like yahoo.is there a downside to ramen profitability?  probably the biggest.danger is that it might turn you into a consulting firm.  startups.have to be product companies, in the sense of making a single thing.that everyone uses.  the defining quality of startups is that they.grow fast, and consulting just can't scale the way a product can..[3].but it's pretty easy to make $3000 a month consulting; in.fact, that would be a low rate for contract programming.  so there.could be a temptation to slide into consulting, and telling.yourselves you're a ramen profitable startup, when in fact.you're not a startup at all.it's ok to do a little consulting-type work at first.  startups.usually have to do something weird at first.  but remember.that ramen profitability is not the destination.  a startup's.destination is to grow really big; ramen profitability is a trick.for not dying en route.notes[1].the "ramen" in "ramen profitable" refers to instant ramen,.which is just about the cheapest food available.please do not take the term literally.  living on instant ramen.would be very unhealthy.  rice and beans are a better source of.food.  start by investing in a rice cooker, if you don't have one.rice and beans for 2n.olive oil or butter.n yellow onions.other fresh vegetables; experiment.3n cloves garlic.n 12-oz cans white, kidney, or black beans.n cubes knorr beef or vegetable bouillon.n teaspoons freshly ground black pepper.3n teaspoons ground cumin.n cups dry rice, preferably brown.put rice in rice cooker. add water as specified on rice package..(default: 2 cups water per cup of rice.) turn on rice cooker and.forget about it.chop onions and other vegetables and fry in oil, over fairly low.heat, till onions are glassy. put in chopped garlic, pepper, cumin,.and a little more fat, and stir.  keep heat low. cook another 2 or.3 minutes, then add beans (don't drain the beans), and stir. throw.in the bouillon cube(s), cover, and cook on lowish heat for at least.10 minutes more. stir vigilantly to avoid sticking.if you want to save money, buy beans in giant cans from discount.stores.  spices are also much cheaper when bought in bulk..if there's an indian grocery store near you, they'll have big.bags of cumin for the same price as the little jars in supermarkets.[2].there's a good chance that a shift in power from investors.to founders would actually increase the size of the venture business..i think investors currently err too far on the side of being harsh.to founders.  if they were forced to stop, the whole venture business.would work better, and you might see something like the increase.in trade you always see when restrictive laws are removed.investors.are one of the biggest sources of pain for founders; if they stopped.causing so much pain, it would be better to be a founder; and if.it were better to be a founder, more people would do it.[3].it's conceivable that a startup could grow big by transforming.consulting into a form that would scale.  but if they did that.they'd really be a product company.thanks to jessica livingston for reading drafts of this.japanese translation<eot><sot>maker's schedule, manager's schedule."...the mere consciousness of an engagement will sometimes worry a whole day." charles dickens.july 2009
one reason programmers dislike meetings so much is that they're on.a different type of schedule from other people.  meetings cost them.more.there are two types of schedule, which i'll call the manager's.schedule and the maker's schedule.  the manager's schedule is for.bosses.  it's embodied in the traditional appointment book, with.each day cut into one hour intervals.  you can block off several.hours for a single task if you need to, but by default you change.what you're doing every hour.when you use time that way, it's merely a practical problem to meet.with someone.  find an open slot in your schedule, book them, and.you're done.most powerful people are on the manager's schedule.  it's the.schedule of command.  but there's another way of using time that's.common among people who make things, like programmers and writers..they generally prefer to use time in units of half a day at least..you can't write or program well in units of an hour.  that's barely.enough time to get started.when you're operating on the maker's schedule, meetings are a.disaster.  a single meeting can blow a whole afternoon, by breaking.it into two pieces each too small to do anything hard in.  plus you.have to remember to go to the meeting.  that's no problem for someone.on the manager's schedule.  there's always something coming on the.next hour; the only question is what.  but when someone on the.maker's schedule has a meeting, they have to think about it.for someone on the maker's schedule, having a meeting is like.throwing an exception.  it doesn't merely cause you to switch from.one task to another; it changes the mode in which you work.i find one meeting can sometimes affect a whole day.   a meeting.commonly blows at least half a day, by breaking up a morning or.afternoon.  but in addition there's sometimes a cascading effect..if i know the afternoon is going to be broken up, i'm slightly less.likely to start something ambitious in the morning.  i know this.may sound oversensitive, but if you're a maker, think of your own.case.  don't your spirits rise at the thought of having an entire.day free to work, with no appointments at all?  well, that means.your spirits are correspondingly depressed when you don't.  and.ambitious projects are by definition close to the limits of your.capacity.  a small decrease in morale is enough to kill them off.each type of schedule works fine by itself.  problems arise when.they meet.  since most powerful people operate on the manager's.schedule, they're in a position to make everyone resonate at their.frequency if they want to.  but the smarter ones restrain themselves,.if they know that some of the people working for them need long.chunks of time to work in.our case is an unusual one.  nearly all investors, including all.vcs i know, operate on the manager's schedule.  but.y combinator.runs on the maker's schedule.  rtm and trevor and i do because we.always have, and jessica does too, mostly, because she's gotten.into sync with us.i wouldn't be surprised if there start to be more companies like.us.  i suspect founders may increasingly be able to resist, or at.least postpone, turning into managers, just as a few decades ago.they started to be able to resist switching from jeans.to suits.how do we manage to advise so many startups on the maker's schedule?.by using the classic device for simulating the manager's schedule.within the maker's: office hours.  several times a week i set aside.a chunk of time to meet founders we've funded.  these chunks of.time are at the end of my working day, and i wrote a signup program.that ensures all the appointments within a given set of office hours.are clustered at the end.  because they come at the end of my day.these meetings are never an interruption.  (unless their working.day ends at the same time as mine, the meeting presumably interrupts.theirs, but since they made the appointment it must be worth it to.them.)  during busy periods, office hours sometimes get long enough.that they compress the day, but they never interrupt it..when we were working on our own startup, back in the 90s, i evolved.another trick for partitioning the day.  i used to program from.dinner till about 3 am every day, because at night no one could.interrupt me.  then i'd sleep till about 11 am, and come in and.work until dinner on what i called "business stuff."  i never thought.of it in these terms, but in effect i had two workdays each day,.one on the manager's schedule and one on the maker's.when you're operating on the manager's schedule you can do something.you'd never want to do on the maker's: you can have speculative.meetings.  you can meet someone just to get to know one another..if you have an empty slot in your schedule, why not?  maybe it will.turn out you can help one another in some way.business people in silicon valley (and the whole world, for that.matter) have speculative meetings all the time.  they're effectively.free if you're on the manager's schedule.  they're so common that.there's distinctive language for proposing them: saying that you.want to "grab coffee," for example.speculative meetings are terribly costly if you're on the maker's.schedule, though.  which puts us in something of a bind.  everyone.assumes that, like other investors, we run on the manager's schedule..so they introduce us to someone they think we ought to meet, or.send us an email proposing we grab coffee.  at this point we have.two options, neither of them good: we can meet with them, and lose.half a day's work; or we can try to avoid meeting them, and probably.offend them.till recently we weren't clear in our own minds about the source.of the problem.  we just took it for granted that we had to either.blow our schedules or offend people.  but now that i've realized.what's going on, perhaps there's a third option: to write something.explaining the two types of schedule.  maybe eventually, if the.conflict between the manager's schedule and the maker's schedule.starts to be more widely understood, it will become less of a.problem.those of us on the maker's schedule are willing to compromise.   we.know we have to have some number of meetings.  all we ask from those.on the manager's schedule is that they understand the cost..thanks to sam altman, trevor blackwell, paul buchheit, jessica livingston,.and robert morris for reading drafts of this.related:how to do what you lovegood and bad procrastinationturkish translationfrench translationkorean translationgerman translation<eot><sot>a local revolution?.april 2009
recently i realized i'd been holding two ideas in my head that would explode if combined.the first is that startups may represent a new economic phase, on the scale of the industrial revolution. i'm not sure of this, but there seems a decent chance it's true.  people are dramatically more.productive as founders or early employees of startups—imagine how much less larry and sergey would have achieved if they'd gone to work for a big company—and that scale of improvement can change social customs.the second idea is that startups are a type of business that flourishes in certain places that specialize in it—that silicon valley specializes in startups in the same way los angeles specializes in movies, or new york in finance. [1]what if both are true?  what if startups are both a new economic phase and also a type of business that only flourishes in certain centers?if so, this revolution is going to be particularly revolutionary. all previous revolutions have spread.  agriculture, cities, and industrialization all spread widely. if startups end up being like the movie business, with just a handful of centers and one dominant one, that's going to have novel consequences.there are already signs that startups may not spread particularly well.  the spread of startups seems to be proceeding slower than the spread of the industrial revolution, despite the fact that communication is so much faster now.within a few decades of the founding of boulton & watt there were steam engines scattered over northern europe and north america.  industrialization didn't spread much beyond those regions for a while. it only spread to places where there was a strong middle class—countries where a private citizen could make a fortune without having it confiscated. otherwise it wasn't worth investing in factories.  but in a country with a strong middle class it was easy for industrial techniques to take root.  an individual mine or factory owner could decide to install a steam engine, and within a few years he could probably find someone local to make him one.  so steam engines spread fast.  and they spread widely, because the locations of mines and factories were determined by features like rivers, harbors, and sources of raw materials..[2]startups don't seem to spread so well, partly because they're more a social than a technical phenomenon, and partly because they're not tied to geography.  an individual european manufacturer could import industrial techniques and they'd work fine.  this doesn't seem to work so well with startups: you need a community of expertise, as you do in the movie business.  [3].plus there aren't the same forces driving startups to spread.  once railroads or electric power grids were invented, every region had to have them.  an area without railroads or power was a rich potential market.  but this isn't true with startups.  there's no need for a microsoft of france or google of germany.governments may decide they want to encourage startups locally, but government policy can't call them into being the way a genuine need could.how will this all play out?  if i had to predict now, i'd say that startups will spread, but very slowly, because their spread will be driven not by government policies (which won't work) or by market need (which doesn't exist) but, to the extent that it happens at all, by the same random factors that have caused startup culture to spread thus far.  and such random factors will increasingly be outweighed by the pull of existing startup hubs.silicon valley is where it is because william shockley wanted to move back to palo alto, where he grew up, and the experts he lured west to work with him liked it so much they stayed.  seattle owes much of its position as a tech center to the same cause: gates and allen wanted to move home.  otherwise albuquerque might have seattle's place in the rankings.  boston is a tech center because it's the intellectual capital of the us and probably the world.  and if battery ventures hadn't turned down facebook, boston would be significantly bigger now on the startup radar screen.but of course it's not a coincidence that facebook got funded in the valley and not boston.  there are more and bolder investors in silicon valley than in boston, and even undergrads know it.boston's case illustrates the difficulty you'd have establishing a new startup hub this late in the game.  if you wanted to create a startup hub by reproducing the way existing ones happened, the.way to do it would be to establish a first-rate research university in a place so nice that rich people wanted to live there.  then the town would be hospitable to both groups you need: both founders and investors.  that's the combination that yielded silicon valley.  but silicon valley didn't have silicon valley to compete with.  if you tried now to create a startup hub by planting a great university in a nice place, it would have a harder time getting started, because many of the best startups it produced would be sucked away to existing startup hubs.recently i suggested a potential shortcut:.pay startups to move.  once you had enough good startups in one place, it would create a self-sustaining chain reaction.  founders would start to move there without being paid, because that was where their peers were, and investors would appear too, because that was where the deals were.in practice i doubt any government would have the balls to try this, or the brains to do it right.  i didn't mean it as a practical suggestion, but more as an exploration of the lower bound of what it would take to create a startup hub deliberately.the most likely scenario is (1) that no government will successfully establish a startup hub, and (2) that the spread of startup culture will thus be driven by the random factors that have driven it so far, but (3) that these factors will be increasingly outweighed by the pull of existing startup hubs.  result: this revolution, if it is one, will be unusually localized..notes[1].there are two very different types of startup: one kind that evolves naturally, and one kind that's called into being to "commercialize" a scientific discovery.  most computer/software startups are now the first type, and most pharmaceutical startups the second.  when i talk about startups in this essay, i mean type i startups.  there is no difficulty making type ii startups spread: all you have to do is fund medical research labs; commercializing whatever new discoveries the boffins throw off is as straightforward as building a new airport.  type ii startups neither require nor produce startup culture. but that means having type ii startups won't get you type i startups.  philadelphia is a case in point: lots of type ii startups, but hardly any type i.incidentally, google may appear to be an instance of a type ii startup, but it wasn't.  google is not pagerank commercialized.  they could have used another algorithm and everything would have turned out the same.  what made google google is that they cared about doing search well at a critical point in the evolution of the web.[2].watt didn't invent the steam engine.  his critical invention was a refinement that made steam engines dramatically more efficient: the separate condenser.  but that oversimplifies his role.  he had such a different attitude to the problem and approached it with such energy that he transformed the field.  perhaps the most accurate way to put it would be to say that watt reinvented the steam engine.[3].the biggest counterexample here is skype.  if you're doing.something that would get shut down in the us, it becomes an.advantage to be located elsewhere.  that's why kazaa took.the place of napster.  and the expertise and connections the.founders gained from running kazaa helped ensure the success.of skype.thanks to patrick collison, jessica livingston, and fred wilson for reading drafts of this.<eot><sot>why twitter is a big deal.april 2009
om malik is the most recent of many people.to ask why twitter is such a big deal.the reason is that it's a new messaging.protocol, where you don't specify the recipients..new protocols are rare.  or more precisely, new.protocols that take off are..there are only a handful of commonly used ones: tcp/ip.(the internet), smtp (email), http (the web), and so on.  so any.new protocol is a big deal.  but twitter is a protocol owned.by a private company.  that's even rarer.curiously, the fact that the founders of twitter.have been slow to monetize it may in the long run.prove to be an advantage.  because they haven't tried.to control it too much, twitter feels to everyone like.previous protocols.  one forgets it's owned by a.private company.  that must have made it easier for.twitter to spread.<eot><sot>the founder visa.april 2009
i usually avoid politics, but since we now seem to have an administration that's open to suggestions, i'm going to risk making one.  the single biggest thing the government could do to increase the number of startups in this country is a policy that would cost nothing: establish a new class of visa for startup founders.the biggest constraint on the number of new startups that get created in the us is not tax policy or employment law or even sarbanes-oxley.  it's that we won't let the people who want to start them into the country.letting just 10,000 startup founders into the country each year could have a visible effect on the economy.  if we assume 4 people per startup, which is probably an overestimate, that's 2500 new companies.  each year.  they wouldn't all grow as big as google, but out of 2500 some would come close.by definition these 10,000 founders wouldn't be taking jobs from americans: it could be part of the terms of the visa that they couldn't work for existing companies, only new ones they'd founded.  in fact they'd cause there to be.more jobs for americans, because the companies they started would hire more employees as they grew.the tricky part might seem to be how one defined a startup. but that could be solved quite easily: let the market decide.  startup investors work hard to find the best startups.  the government could not do better than to piggyback on their expertise, and use investment by recognized startup investors as the test of whether a company was a real startup.how would the government decide who's a startup investor?  the same way they decide what counts as a university for student visas. we'll establish our own accreditation procedure. we know who one another are.10,000 people is a drop in the bucket by immigration standards, but would represent a huge increase in the pool of startup founders.  i think this would have such a visible effect on the economy that it would make the legislator who introduced the bill famous.  the only way to know for sure would be to try it, and that would cost practically nothing..thanks to trevor blackwell, paul buchheit, jeff clavier, david hornik, jessica livingston, greg mcadoo, aydin senkut, and fred wilson for reading drafts of this.related:the united states of entrepreneurs about half of vc-backed company founders are immigrants<eot><sot>five founders.april 2009
inc recently asked me who i thought were the 5 most.interesting startup founders of the last 30 years.  how do.you decide who's the most interesting?  the best test seemed.to be influence: who are the 5.who've influenced me most?  who do i use as examples when i'm.talking to companies we fund?  who do i find myself quoting?1. steve jobsi'd guess steve is the most influential founder not just for me but.for most people you could ask.  a lot of startup culture is apple.culture.  he was the original young founder.  and while the concept.of "insanely great" already existed in the arts, it was a novel.idea to introduce into a company in the 1980s.more remarkable still, he's stayed interesting for 30 years.  people.await new apple products the way they'd await new books by a popular.novelist.  steve may not literally design them, but they wouldn't.happen if he weren't ceo.steve is clever and driven, but so are a lot of people in the valley..what makes him unique is his.sense of.design.  before him, most.companies treated design as a frivolous extra.  apple's competitors.now know better.2. tj rodgerstj rodgers isn't as famous as steve jobs, but he may be the best.writer among silicon valley ceos.  i've probably learned more from.him about the startup way of thinking than from anyone else.  not.so much from specific things he's written as by reconstructing the.mind that produced them: brutally candid; aggressively garbage-collecting.outdated ideas; and yet driven by pragmatism rather than ideology.the first essay of his that i read was so electrifying that i.remember exactly where i was at the time.  it was.high.technology innovation: free markets or government subsidies? and.i was downstairs in the harvard square t station.  it felt as if.someone had flipped on a light switch inside my head.3. larry & sergeyi'm sorry to treat larry and sergey as one person.  i've always.thought that was unfair to them.  but it does seem as if google was a.collaboration.before google, companies in silicon valley already knew it was.important to have the best hackers.  so they claimed, at least..but google pushed this idea further than anyone had before.  their.hypothesis seems to have been that, in the initial stages at least,.all you need is good hackers: if you hire all the smartest people.and put them to work on a problem where their success can be measured,.you win.  all the other stuff—which includes all the stuff that.business schools think business consists of—you can figure out.along the way.  the results won't be perfect, but they'll be optimal..if this was their hypothesis, it's now been verified experimentally.4. paul buchheitfew know this, but one person, paul buchheit, is responsible for.three of the best things google has done.  he was the original.author of gmail, which is the most impressive thing google has after.search.  he also wrote the first prototype of adsense, and was the.author of google's mantra "don't be evil."pb made a point in a talk once that i now mention to every startup.we fund: that it's better, initially, to make a small number of.users really love you than a large number kind of like you.   if i.could tell startups only.ten sentences,.this would be one of them.now he's cofounder of a startup called friendfeed.  it's only a.year old, but already everyone in the valley is watching them..someone responsible for three of the biggest ideas at google is.going to come up with more.5. sam altmani was told i shouldn't mention founders of yc-funded companies in.this list.   but sam altman can't be stopped by such flimsy rules..if he wants to be on this list, he's going to be.honestly, sam is, along with steve jobs, the founder i refer to.most when i'm advising startups.  on questions of design, i ask."what would steve do?" but on questions of strategy or ambition i.ask "what would sama do?"what i learned from meeting sama is that the doctrine of the elect.applies to startups.  it applies way less than most people think:.startup investing does not consist of trying to pick winners the.way you might in a horse race.  but there are a few people with.such force of will that they're going to get whatever they want.<eot><sot>relentlessly resourceful.want to start a startup?  get funded by.y combinator..march 2009
a couple days ago i finally got being a good startup founder down.to two words:  relentlessly resourceful.till then the best i'd managed was to get the opposite quality down.to one: hapless.  most dictionaries say hapless means unlucky.  but.the dictionaries are not doing a very good job.  a team that outplays.its opponents but loses because of a bad decision by the referee.could be called unlucky, but not hapless.  hapless implies passivity..to be hapless is to be battered by circumstances — to let the world.have its way with you, instead of having your way with the world..[1]unfortunately there's no antonym of hapless, which makes it difficult.to tell founders what to aim for.  "don't be hapless" is not much.of a rallying cry.it's not hard to express the quality we're looking for in metaphors..the best is probably a running back.  a good running back is not.merely determined, but flexible as well.  they want to get downfield,.but they adapt their plans on the fly.unfortunately this is just a metaphor, and not a useful one to most.people outside the us.   "be like a running back" is no better than."don't be hapless."but finally i've figured out how to express this quality directly..i was writing a talk for.investors, and i had to explain what to.look for in founders.  what would someone who was the opposite of.hapless be like?  they'd be relentlessly resourceful.  not merely.relentless.  that's not enough to make things go your way except.in a few mostly uninteresting domains.  in any interesting domain,.the difficulties will be novel.  which means you can't simply plow.through them, because you don't know initially how hard they are;.you don't know whether you're about to plow through a block of foam.or granite.  so you have to be resourceful. you have to keep.trying new things.be relentlessly resourceful.that sounds right, but is it simply a description.of how to be successful in general?  i don't think so.  this isn't.the recipe for success in writing or painting, for example.  in.that kind of work the recipe is more to be actively curious..resourceful implies the obstacles are external, which they generally.are in startups. but in writing and painting they're mostly internal;.the obstacle is your own obtuseness..[2]there probably are other fields where "relentlessly resourceful".is the recipe for success.  but though other fields may share it,.i think this is the best short description we'll find of what makes.a good startup founder.  i doubt it could be made more precise.now that we know what we're looking for, that leads to other.questions.  for example, can this quality be taught?  after four.years of trying to teach it to people, i'd say that yes, surprisingly.often it can.  not to everyone, but to many people..[3].some.people are just constitutionally passive, but others have a latent.ability to be relentlessly resourceful that only needs to be brought.out.this is particularly true of young people who have till now always.been under the thumb of some kind of authority.  being relentlessly.resourceful is definitely not the recipe for success in big companies,.or in most schools.  i don't even want to think what the recipe is.in big companies, but it is certainly longer and messier, involving.some combination of resourcefulness, obedience, and building.alliances.identifying this quality also brings us closer to answering a.question people often wonder about: how many startups there could.be.  there is not, as some people seem to think, any economic upper.bound on this number.  there's no reason to believe there is any.limit on the amount of newly created wealth consumers can absorb,.any more than there is a limit on the number of theorems that can.be proven.  so probably the limiting factor on the number of startups.is the pool of potential founders.  some people would make good.founders, and others wouldn't.  and now that we can say what makes.a good founder, we know how to put an upper bound on the size of.the pool.this test is also useful to individuals.  if you want to know whether.you're the right sort of person to start a startup, ask yourself.whether you're relentlessly resourceful.  and if you want to know.whether to recruit someone as a cofounder, ask if they are.you can even use it tactically.  if i were running a startup, this.would be the phrase i'd tape to the mirror.  "make something people.want" is the destination, but "be relentlessly resourceful" is how.you get there..notes[1].i think the reason the dictionaries are wrong is that the.meaning of the word has shifted.  no one writing a dictionary from.scratch today would say that hapless meant unlucky.  but a couple.hundred years ago they might have.  people were more at the mercy.of circumstances in the past, and as a result a lot of the words.we use for good and bad outcomes have origins in words about luck.when i was living in italy, i was once trying to tell someone.that i hadn't had much success in doing something, but i couldn't.think of the italian word for success.  i spent some time trying.to describe the word i meant.  finally she said "ah! fortuna!"[2].there are aspects of startups where the recipe is to be.actively curious.  there can be times when what you're doing is.almost pure discovery.  unfortunately these times are a small.proportion of the whole.  on the other hand, they are in research.too.[3].i'd almost say to most people, but i realize (a) i have no.idea what most people are like, and (b) i'm pathologically optimistic.about people's ability to change.thanks to trevor blackwell and jessica livingston for reading drafts.of this.<eot><sot>how to be an angel investor.march 2009
(this essay is derived from a talk at angelconf.)when we sold our startup in 1998 i thought one day i'd do some angel.investing.  seven years later i still hadn't started.  i put it off.because it seemed mysterious and complicated.   it turns out to be.easier than i expected, and also more interesting.the part i thought was hard, the mechanics of investing, really.isn't. you give a startup money and they give you stock.  you'll.probably get either preferred stock, which means stock with extra.rights like getting your money back first in a sale, or convertible.debt, which means (on paper) you're lending the company money, and.the debt converts to stock at the next sufficiently big funding.round..[1]there are sometimes minor tactical advantages to using one or the.other.  the paperwork for convertible debt is simpler.  but really.it doesn't matter much which you use.  don't spend much time worrying.about the details of deal terms, especially when you first start.angel investing.  that's not how you win at this game.  when you.hear people talking about a successful angel investor, they're not.saying "he got a 4x liquidation preference." they're saying "he.invested in google."that's how you win: by investing in the right startups.  that is.so much more important than anything else that i worry i'm misleading.you by even talking about other things.mechanicsangel investors often syndicate deals, which means they join together.to invest on the same terms.  in a syndicate there is usually a."lead" investor who negotiates the terms with the startup.  but not.always: sometimes the startup cobbles together a syndicate of.investors who approach them independently, and the startup's lawyer.supplies the paperwork.the easiest way to get started in angel investing is to find a.friend who already does it, and try to get included in his syndicates..then all you have to do is write checks.don't feel like you have to join a syndicate, though.  it's not that.hard to do it yourself.  you can just use the standard.series aa.documents wilson sonsini and y combinator published online..you should of course have your lawyer review everything.  both you.and the startup should have lawyers.  but the lawyers don't have.to create the agreement from scratch..[2].when you negotiate terms with a startup, there are two numbers you.care about: how much money you're putting in, and the valuation of.the company.  the valuation determines how much stock you get.  if.you put $50,000 into a company at a pre-money valuation of $1.million, then the post-money valuation is $1.05 million, and you.get .05/1.05, or 4.76% of the company's stock.if the company raises more money later, the new investor will take.a chunk of the company away from all the existing shareholders just.as you did.  if in the next round they sell 10% of the company to.a new investor, your 4.76% will be reduced to 4.28%.that's ok.  dilution is normal.  what saves you from being mistreated.in future rounds, usually, is that you're in the same boat as the.founders.  they can't dilute you without diluting themselves just.as much.  and they won't dilute themselves unless they end up.net ahead.  so in theory, each further.round of investment leaves you.with a smaller share of an even more valuable company, till after.several more rounds you end up with .5% of the company at the point.where it ipos, and you are very happy because your $50,000 has.become $5 million..[3]the agreement by which you invest should have provisions that.let you contribute to.future rounds to maintain your percentage.  so it's your choice.whether you get diluted..[4].if the company does really well,.you eventually will, because eventually the valuations will get so.high it's not worth it for you.how much does an angel invest?  that varies enormously, from $10,000.to hundreds of thousands or in rare cases even millions.  the upper.bound is obviously the total amount the founders want to raise..the lower bound is 5-10% of the total or $10,000, whichever.is greater.  a typical angel round these days might be $150,000.raised from 5 people.valuations don't vary as much.  for angel rounds it's rare to see.a valuation lower than half a million or higher than 4 or 5 million..4 million is starting to be vc territory.how do you decide what valuation to offer?  if you're part of a.round led by someone else, that problem is solved for you.  but.what if you're investing by yourself?  there's no real answer..there is no rational way to value an early stage startup.  the.valuation reflects nothing more than the strength of the company's.bargaining position.  if they really want you, either because they.desperately need money, or you're someone who can help them a lot,.they'll let you invest at a low valuation.  if they don't need you,.it will be higher.  so guess.  the startup may not have any more.idea what the number should be than you do..[5]ultimately it doesn't matter much.  when angels make a lot of money.from a deal, it's not because they invested at a valuation of $1.5.million instead of $3 million.  it's because the company was really.successful.i can't emphasize that too much.  don't get hung up on mechanics.or deal terms.  what you should spend your time thinking about is.whether the company is good.(similarly, founders also should not get hung up on deal.terms, but should spend their time thinking about how to make the.company good.)there's a second less obvious component of an angel investment: how.much you're expected to help the startup.  like the amount you.invest, this can vary a lot.  you don't have to do anything if you.don't want to; you could simply be a source of money.  or you can.become a de facto employee of the company.  just make sure that you.and the startup agree in advance about roughly how much you'll do.for them.really hot companies sometimes have high standards for angels.  the.ones everyone wants to invest in practically audition investors,.and only take money from people who are famous and/or will work.hard for them.  but don't feel like you have to put in a lot of.time or you won't get to invest in any good startups.  there is a.surprising lack of correlation between how hot a deal a startup is.and how well it ends up doing.  lots of hot startups will end up.failing, and lots of startups no one likes will end up succeeding..and the latter are so desperate for money that they'll take it from.anyone at a low valuation..[6]picking winnersit would be nice to be able to pick those out, wouldn't it?  the.part of angel investing that has most effect on your returns, picking.the right companies, is also the hardest.  so you should practically.ignore (or more precisely, archive, in the gmail sense) everything.i've told you so far.  you may need to refer to it at some point,.but it is not the central issue.the central issue is picking the right startups.  what "make something.people want" is for startups, "pick the right startups" is for.investors.  combined they yield "pick the startups that will make.something people want."how do you do that?  it's not as simple as picking startups that.are already making something wildly popular.  by then it's.too late for angels.  vcs will already be onto them.  as an angel,.you have to pick startups before they've got a hit—either.because they've made something great but users don't realize it.yet, like google early on, or because they're still an iteration.or two away from the big hit, like paypal when they were making.software for transferring money between pdas.to be a good angel investor, you have to be a good judge of potential..that's what it comes down to.  vcs can be fast followers.  most of.them don't try to predict what will win.  they just try to notice.quickly when something already is winning.  but angels have to be.able to predict..[7]one interesting consequence of this fact is that there are a lot.of people out there who have never even made an angel investment.and yet are already better angel investors than they realize..someone who doesn't know the first thing about the mechanics of.venture funding but knows what a successful startup founder looks.like is actually far ahead of someone who knows termsheets inside.out, but thinks."hacker" means someone who breaks into computers..if you can recognize good startup founders by empathizing with.them—if you both resonate at the same frequency—then.you may already be a better startup picker than the median professional.vc..[8]paul buchheit, for example, started angel investing about a year.after me, and he was pretty much immediately as good as me at picking.startups.  my extra year of experience was rounding error compared.to our ability to empathize with founders.what makes a good founder?  if there were a word that meant the.opposite of hapless, that would be the one.  bad founders seem.hapless.  they may be smart, or not, but somehow events overwhelm.them and they get discouraged and give up.  good founders make.things happen the way they want.  which is not to say they force.things to happen in a predefined way.  good founders have a healthy.respect for reality.  but they are relentlessly resourceful.  that's.the closest i can get to the opposite of hapless.  you want to fund.people who are relentlessly resourceful.notice we started out talking about things, and now we're talking.about people.  there is an ongoing debate between investors which.is more important, the people, or the idea—or more precisely,.the market. some, like ron conway, say it's the people—that.the idea will change, but the people are the foundation of the.company.  whereas marc andreessen says he'd back ok founders in a.hot market over great founders in a bad one..[9]these two positions are not so far apart as they seem, because good.people find good markets.  bill gates would probably have ended up.pretty rich even if ibm hadn't happened to drop the pc standard in.his lap.i've thought a lot about the disagreement between the investors who.prefer to bet on people and those who prefer to bet on markets..it's kind of surprising that it even exists.  you'd expect opinions.to have converged more.but i think i've figured out what's going on.  the three most.prominent people i know who favor markets are marc, jawed karim,.and joe kraus.  and all three of them, in their own startups,.basically flew into a thermal: they hit a market growing so fast.that it was all they could do to keep up with it.  that kind of.experience is hard to ignore.  plus i think they underestimate.themselves: they think back to how easy it felt to ride that huge.thermal upward, and they think "anyone could have done it."  but.that isn't true; they are not ordinary people.so as an angel investor i think you want to go with ron conway and.bet on people.  thermals happen, yes, but no one can predict.them—not even the founders, and certainly not you as an.investor.  and only good people can ride the thermals if they hit.them anyway.deal flowof course the question of how to choose startups presumes you.have startups to choose between.  how do you find them?  this is.yet another problem that gets solved for you by syndicates.  if you.tag along on a friend's investments, you don't have to find startups.the problem is not finding startups, exactly, but finding a stream.of reasonably high quality ones.  the traditional way to do this.is through contacts.  if you're friends with a lot of investors and.founders, they'll send deals your way.  the valley basically runs.on referrals.  and once you start to become known as reliable,.useful investor, people will refer lots of deals to you.  i certainly.will.there's also a newer way to find startups, which is to come to.events like y combinator's demo day, where a batch of newly created.startups presents to investors all at once.   we have two demo days.a year, one in march and one in august.  these are basically mass.referrals.but events like demo day only account for a fraction of matches.between startups and investors.  the personal referral is still the.most common route.  so if you want to hear about new startups, the.best way to do it is to get lots of referrals.the best way to get lots of referrals is to invest in startups.  no.matter how smart and nice you seem, insiders will be reluctant to.send you referrals until you've proven yourself by doing a couple.investments.  some smart, nice guys turn out to be flaky,.high-maintenance investors. but once you prove yourself as a good.investor, the deal flow, as they call it, will increase rapidly in.both quality and quantity.  at the extreme, for someone like ron.conway, it is basically identical with the deal flow of the whole.valley.so if you want to invest seriously, the way to get started is to.bootstrap yourself off your existing connections, be a good investor.in the startups you meet that way, and eventually you'll start a.chain reaction.  good investors are rare, even in silicon valley..there probably aren't more than a couple hundred serious angels in the whole.valley, and yet they're probably the single most important ingredient.in making the valley what it is.  angels are the limiting reagent.in startup formation.if there are only a couple hundred serious angels in the valley,.then by deciding to become one you could single-handedly make the pipeline.for startups in silicon valley significantly wider.  that is kind.of mind-blowing.being goodhow do you be a good angel investor?  the first thing you need is.to be decisive.  when we talk to founders about good and bad.investors, one of the ways we describe the good ones is to say "he.writes checks." that doesn't mean the investor says yes to everyone..far from it.  it means he makes up his mind quickly,.and follows through.  you may be thinking, how hard could that be?.you'll see when you try it.  it follows from the nature of angel.investing that the decisions are hard.  you have to guess early,.at the stage when the most promising ideas still seem counterintuitive,.because if they were obviously good, vcs would already have funded.them.suppose it's 1998.  you come across a startup founded by a couple.grad students.  they say they're going to work on internet search..there are already a bunch of big public companies doing search..how can these grad students possibly compete with them?  and does.search even matter anyway?  all the search engines are trying to.get people to start calling them "portals" instead.  why would you.want to invest in a startup run by a couple of nobodies who are.trying to compete with large, aggressive companies in an area they.themselves have declared passe?  and yet the grad students seem.pretty smart.  what do you do?there's a hack for being decisive when you're inexperienced: ratchet.down the size of your investment till it's an amount you wouldn't.care too much about losing.  for every rich person (you probably.shouldn't try angel investing unless you think of yourself as rich).there's some amount that would be painless, though annoying, to.lose.  till you feel comfortable investing, don't invest more than.that per startup.for example, if you have $5 million in investable assets, it would.probably be painless (though annoying) to lose $15,000.  that's.less than .3% of your net worth.  so start by making 3 or 4 $15,000.investments.  nothing will teach you about angel investing like.experience.  treat the first few as an educational expense.  $60,000.is less than a lot of graduate programs.  plus you get equity.what's really uncool is to be strategically indecisive: to string.founders along while trying to gather more information about the.startup's trajectory..[10].there's always a temptation to do that,.because you just have so little to go on, but you have to consciously.resist it.  in the long term it's to your advantage to be good.the other component of being a good angel investor is simply to be.a good person.  angel investing is not a business where you make.money by screwing people over.  startups create wealth, and.creating wealth is not a zero sum game.  no one has to lose for you.to win.  in fact, if you mistreat the founders you invest in, they'll.just get demoralized and the company will do worse.  plus your.referrals will dry up.  so i recommend being good.the most successful angel investors i know are all basically good.people.  once they invest in a company, all they want to do is help.it.  and they'll help people they haven't invested in too.  when.they do favors they don't seem to keep track of them.  it's too.much overhead.  they just try to help everyone, and assume good.things will flow back to them somehow. empirically that seems to.work..notes[1].convertible debt can be either capped at a particular valuation,.or can be done at a discount to whatever the valuation turns out.to be when it converts.  e.g. convertible debt at a discount of 30%.means when it converts you get stock as if you'd invested at a 30%.lower valuation.  that can be useful in cases where you can't or.don't want to figure out what the valuation should be.  you leave.it to the next investor.  on the other hand, a lot of investors.want to know exactly what they're getting, so they will only do.convertible debt with a cap.[2].the expensive part of creating an agreement from scratch is.not writing the agreement, but bickering at several hundred.dollars an hour over the details.  that's why the series aa paperwork.aims at a middle ground.  you can just start from the compromise.you'd have reached after lots of back and forth.when you fund a startup, both your lawyers should be specialists.in startups.  do not use ordinary corporate lawyers for this.  their.inexperience makes them overbuild: they'll create huge, overcomplicated.agreements, and spend hours arguing over irrelevant things.in the valley, the top startup law firms are wilson sonsini, orrick,.fenwick & west, gunderson dettmer, and cooley godward.  in boston.the best are goodwin procter, wilmer hale, and foley hoag.[3].your mileage may vary.[4].these anti-dilution provisions also protect you against.tricks like a later investor trying to steal the company by doing.another round that values the company at $1.  if you have a competent.startup lawyer handle the deal for you, you should be protected.against such tricks initially.  but it could become a problem later..if a big vc firm wants to invest in the startup after you, they may.try to make you take out your anti-dilution protections.  and if.they do the startup will be pressuring you to agree.  they'll tell.you that if you don't, you're going to kill their deal with the vc..i recommend you solve this problem by having a gentlemen's agreement.with the founders: agree with them in advance that you're not going.to give up your anti-dilution protections.  then it's up to them.to tell vcs early on.the reason you don't want to give them up is the following scenario..the vcs recapitalize the company, meaning they give it additional.funding at a pre-money valuation of zero.  this wipes out the.existing shareholders, including both you and the founders.  they.then grant the founders lots of options, because they need them to.stay around, but you get nothing.obviously this is not a nice thing to do.  it doesn't happen often..brand-name vcs wouldn't recapitalize a company just to steal a few.percent from an angel.  but there's a continuum here.  a less.upstanding, lower-tier vc might be tempted to do it to steal a big.chunk of stock.i'm not saying you should always absolutely refuse to give up your.anti-dilution protections.  everything is a negotiation.  if you're.part of a powerful syndicate, you might be able to give up legal.protections and rely on social ones.  if you invest in a deal led.by a big angel like ron conway, for example, you're pretty well.protected against being mistreated, because any vc would think twice.before crossing him.  this kind of protection is one of the reasons.angels like to invest in syndicates.[5].don't invest so much, or at such a low valuation, that you.end up with an excessively large share of a startup, unless you're.sure your money will be the last they ever need.  later stage.investors won't invest in a company if the founders don't have.enough equity left to motivate them.  i talked to a vc recently who.said he'd met with a company he really liked, but he turned.them down because investors already owned more than half of it..those investors probably thought they'd been pretty clever by getting.such a large chunk of this desirable company, but in fact they were.shooting themselves in the foot.[6].at any given time i know of at least 3 or 4 yc alumni who i.believe will be big successes but who are running on vapor,.financially, because investors don't yet get what they're doing..(and no, unfortunately, i can't tell you who they are.  i can't.refer a startup to an investor i don't know.)[7].there are some vcs who can predict instead of reacting.  not.surprisingly, these are the most successful ones.[8].it's somewhat sneaky of me to put it this way, because the.median vc loses money.  that's one of the most surprising things.i've learned about vc while working on y combinator.  only a fraction.of vcs even have positive returns.  the rest exist to satisfy demand.among fund managers for venture capital as an asset class.  learning.this explained a lot about some of the vcs i encountered when we.were working on viaweb.[9].vcs also generally say they prefer great markets to great.people.  but what they're really saying is they want both.  they're.so selective that they only even consider great people.  so when.they say they care above all about big markets, they mean that's.how they choose between great people.[10].founders rightly dislike the sort of investor who says he's.interested in investing but doesn't want to lead.  there are.circumstances where this is an acceptable excuse, but more often.than not what it means is "no, but if you turn out to be a hot deal,.i want to be able to claim retroactively i said yes."if you like a startup enough to invest in it, then invest in it..just use the standard series.aa terms and write them a check..thanks to sam altman, paul buchheit, jessica livingston,.robert morris, and fred wilson for reading drafts of this..comment on this essay.<eot><sot>why tv lost.march 2009
about twenty years ago people noticed computers and tv were on a.collision course and started to speculate about what they'd produce.when they converged.  we now know the answer: computers.  it's clear.now that even by using the word "convergence" we were giving tv too.much credit.  this won't be convergence so much as replacement..people may still watch things they call "tv shows," but they'll.watch them mostly on computers.what decided the contest for computers?  four forces, three of which.one could have predicted, and one that would have been harder to.one predictable cause of victory is that the internet is an open.platform.  anyone can build whatever they want on it, and the market.picks the winners.  so innovation happens at hacker speeds instead.of big company speeds.the second is moore's law, which has worked its usual magic on.internet bandwidth..[1]the third reason computers won is piracy. users prefer it.not just because it's free, but because it's.more convenient.  bittorrent and youtube have already trained a new.generation of viewers that the place to watch shows is on a computer.screen..[2]the somewhat more surprising force was one specific type of innovation:.social applications.  the average teenage kid has a pretty much.infinite capacity for talking to their friends.  but they can't.physically be with them all the time.  when i was in high school.the solution was the telephone.  now it's social networks, multiplayer.games, and various messaging applications.  the way you reach them.all is through a computer..[3].which means every teenage kid (a).wants a computer with an internet connection, (b) has an incentive.to figure out how to use it, and (c) spends countless hours in front.of it.this was the most powerful force of all.  this was what made everyone.want computers.  nerds got computers because they liked them.  then.gamers got them to play games on.  but it was connecting to other.people that got everyone else: that's what made even grandmas and.14 year old girls want computers..after decades of running an iv drip right into their audience,.people in the entertainment business had understandably come to.think of them as rather passive.  they thought they'd be able to.dictate the way shows reached audiences.  but they underestimated.the force of their desire to connect with one another.facebook killed tv.  that is wildly oversimplified, of course, but.probably as close to the truth as you can get in three words.___the tv networks already seem, grudgingly, to see where things are.going, and have responded by putting their stuff, grudgingly, online..but they're still dragging their heels.  they still seem to wish.people would watch shows on tv instead, just as newspapers that put.their stories online still seem to wish people would wait till the.next morning and read them printed on paper.  they should both just.face the fact that the internet is the primary medium.they'd be in a better position if they'd done that earlier.  when.a new medium arises that's powerful enough to make incumbents.nervous, then it's probably powerful enough to win, and the best.thing they can do is jump in immediately.whether they like it or not, big changes are coming, because the.internet dissolves the two cornerstones of broadcast media:.synchronicity and locality.  on the internet, you don't have to.send everyone the same signal, and you don't have to send it to.them from a local source.  people will watch what they want when.they want it, and group themselves according to whatever shared.interest they feel most strongly.  maybe their strongest shared.interest will be their physical location, but i'm guessing not..which means local tv is probably dead.  it was an artifact of.limitations imposed by old technology.  if someone were creating.an internet-based tv company from scratch now, they might have some.plan for shows aimed at specific regions, but it wouldn't be a top.priority.synchronicity and locality are tied together.  tv network affiliates.care what's on at 10 because that delivers viewers for local news.at 11.  this connection adds more brittleness than strength, however:.people don't watch what's on at 10 because they want to watch the.news afterward.tv networks will fight these trends, because they don't have.sufficient flexibility to adapt to them.  they're hemmed in by local.affiliates in much the same way car companies are hemmed in by.dealers and unions.  inevitably, the people running the networks.will take the easy route and try to keep the old model running for.a couple more years, just as the record labels have done.a recent article in the wall street journal described how tv networks.were trying to add more live shows, partly as a way to make viewers.watch tv synchronously instead of watching recorded shows when it.suited them.  instead of delivering what viewers want, they're.trying to force them to change their habits to suit the networks'.obsolete business model.  that never works unless you have a monopoly.or cartel to enforce it, and even then it only works temporarily.the other reason networks like live shows is that they're cheaper.to produce.  there they have the right idea, but they haven't.followed it to its conclusion.   live content can be way cheaper.than networks realize, and the way to take advantage of dramatic.decreases in cost is to.increase volume.  the networks are prevented.from seeing this whole line of reasoning because they still think.of themselves as being in the broadcast business—as sending one.signal to everyone..[4]___now would be a good time to start any company that competes with.tv networks.  that's what a lot of internet startups are, though.they may not have had this as an explicit goal.  people only have.so many leisure hours a day, and tv is premised on such long sessions.(unlike google, which prides itself on sending users on their way.quickly) that anything that takes up their time is competing with.it.  but in addition to such indirect competitors, i think tv.companies will increasingly face direct ones.even in cable tv, the long tail was lopped off prematurely by the.threshold you had to get over to start a new channel.  it will be.longer on the internet, and there will be more mobility within it..in this new world, the existing players will only have the advantages.any big company has in its market.that will change the balance of power between the networks and the.people who produce shows.  the networks used to be gatekeepers..they distributed your work, and sold advertising on it.  now the.people who produce a show can distribute it themselves.  the main.value networks supply now is ad sales.  which will tend to put them.in the position of service providers rather than publishers.shows will change even more.  on the internet there's no reason to.keep their current format, or even the fact that they have a single.format.  indeed, the more interesting sort of convergence that's.coming is between shows and games.  but on the question of what.sort of entertainment gets distributed on the internet in 20 years,.i wouldn't dare to make any predictions, except that things will.change a lot.  we'll get whatever the most imaginative people can.cook up.  that's why the internet won..notes[1].thanks to trevor blackwell for this point.  he adds: "i.remember the eyes of phone companies gleaming in the early 90s when.they talked about convergence.  they thought most programming would.be on demand, and they would implement it and make a lot of money..it didn't work out. they assumed that their local network infrastructure.would be critical to do video on-demand, because you couldn't.possibly stream it from a few data centers over the internet. at.the time (1992) the entire cross-country internet bandwidth wasn't.enough for one video stream. but wide-area bandwidth increased more.than they expected and they were beaten by itunes and hulu."[2].copyright owners tend to focus on the aspect they see of.piracy, which is the lost revenue.  they therefore think what drives.users to do it is the desire to get something for free.  but itunes.shows that people will pay for stuff online, if you make it easy..a significant component of piracy is simply that it offers a better.user experience.[3].or a phone that is actually a computer.  i'm not making any.predictions about the size of the device that will replace tv, just.that it will have a browser and get data via the internet.[4].emmett shear writes: "i'd argue the long tail for sports may.be even larger than the long tail for other kinds of content. anyone.can broadcast a high school football game that will be interesting.to 10,000 people or so, even if the quality of production is not.so good.".thanks to sam altman, trevor blackwell, nancy cook, michael seibel,.emmett shear, and fred wilson for reading drafts of this.japanese translation<eot><sot>can you buy a silicon valley?  maybe..february 2009
a lot of cities look at silicon valley and ask "how could we make.something like that happen here?"  the.organic way to do it is to.establish a first-rate university in a place where rich people want.to live. that's how silicon valley happened.  but could you shortcut.the process by funding startups?possibly. let's consider what it would take.the first thing to understand is that encouraging startups is a.different problem from encouraging startups in a particular city..the latter is much more expensive.people sometimes think they could improve the startup scene in their.town by starting something like y.combinator there, but in fact it.will have near zero effect.  i know because y combinator itself had.near zero effect on boston when we were based there half the year..the people we funded came from all over the country (indeed, the.world) and afterward they went wherever they could get more.funding—which generally meant silicon valley.the seed funding business is not a regional business, because at.that stage startups are mobile. they're just a couple founders with.laptops..[1]if you want to encourage startups in a particular city, you have.to fund startups that won't leave.  there are two ways to do that:.have rules preventing them from leaving, or fund them at the point.in their life when they naturally take root.  the first approach.is a mistake, because it becomes a filter for selecting bad startups..if your terms force startups to do things they don't want to, only.the desperate ones will take your money.good startups will move to another city as a condition of funding..what they won't do is agree not to move the next time they need.funding.  so the only way to get them to stay is to give them enough.that they never need to leave.___how much would that take?  if you want to keep startups from leaving.your town, you have to give them enough that they're not tempted.by an offer from silicon valley vcs that requires them to move.  a.startup would be able to refuse such an offer if they had grown to.the point where they were (a) rooted in your town and/or (b) so.successful that vcs would fund them even if they didn't move.how much would it cost to grow a startup to that point? a minimum.of several hundred thousand dollars.  wufoo.seem to have rooted.themselves in tampa on $118k, but they're an extreme case.  on.average it would take at least half a million.so if it seems too good to be true to think you could grow a local.silicon valley by giving startups $15-20k each like y combinator,.that's because it is.  to make them stick around you'd have to give.them at least 20 times that much.however, even that is an interesting prospect.  suppose to be on.the safe side it would cost a million dollars per startup. if you.could get startups to stick to your town for a million apiece, then.for a billion dollars you could bring in a thousand startups. that probably wouldn't push you past silicon valley itself,.but it might get you second place.for the price of a football stadium, any town that was decent to.live in could make itself one of the biggest startup hubs in the.world.what's more, it wouldn't take very long.   you could probably do.it in five years.  during the term of one mayor. and it would get.easier over time, because the more startups you had in town, the.less it would take to get new ones to move there. by the time you.had a thousand startups in town, the vcs wouldn't be trying so hard.to get them to move to silicon valley; instead they'd be opening.local offices.  then you'd really be in good shape.  you'd have.started a self-sustaining chain reaction like the one that drives.the valley.___but now comes the hard part.  you have to pick the startups.  how.do you do that?  picking startups is a rare and valuable skill, and.the handful of people who have it are not readily hireable.  and.this skill is so hard to measure that if a government did try to.hire people with it, they'd almost certainly get the wrong ones.for example, a city could give money to a vc fund to establish a.local branch, and let them make the choices.  but only a bad vc.fund would take that deal.  they wouldn't seem bad to the city.officials.  they'd seem very impressive.  but they'd be bad at.picking startups.  that's the characteristic failure mode of vcs..all vcs look impressive to limited partners.  the difference between.the good ones and the bad ones only becomes visible in the other.half of their jobs: choosing and advising startups..[2]what you really want is a pool of local angel investors—people.investing money they made from their own startups.  but unfortunately.you run into a chicken and egg problem here.  if your city isn't.already a startup hub, there won't be people there who got rich.from startups. and there is no way i can think of that a city could.attract angels from outside. by definition they're rich.  there's.no incentive that would make them move..[3]however, a city could select startups by piggybacking on the expertise.of investors who weren't local.  it would be pretty straightforward.to make a list of the most eminent silicon valley angels and from.that to generate a list of all the startups they'd invested in.  if.a city offered these companies a million dollars each to move, a.lot of the earlier stage ones would probably take it.preposterous as this plan sounds, it's probably the most efficient.way a city could select good startups.it would hurt the startups somewhat to be separated from their.original investors. on the other hand, the extra million dollars.would give them a lot more runway.___would the transplanted startups survive?  quite possibly. the only.way to find out would be to try it.  it would be a pretty cheap.experiment, as civil expenditures go.  pick 30 startups that eminent.angels have recently invested in, give them each a million dollars.if they'll relocate to your city, and see what happens after a year..if they seem to be thriving, you can try importing startups on a.larger scale.don't be too legalistic about the conditions under which they're.allowed to leave.  just have a gentlemen's agreement.don't try to do it on the cheap and pick only 10 for the initial.experiment.  if you do this on too small a scale you'll just guarantee.failure. startups need to be around other startups.  30 would be.enough to feel like a community.don't try to make them all work in some renovated warehouse you've.made into an "incubator."  real startups prefer to work in their.own spaces.in fact, don't impose any restrictions on the startups at all..startup founders are mostly hackers,.and hackers are much more.constrained by gentlemen's agreements than regulations.  if they.shake your hand on a promise, they'll keep it.  but show them a.lock and their first thought is how to pick it.interestingly, the 30-startup experiment could be done by any.sufficiently rich private citizen.  and what pressure it would.put on the city if it worked..[4]___should the city take stock in return for the money?.in principle they're entitled to, but how would they choose valuations.for the startups?  you couldn't just give them all the same valuation:.that would be too low for some (who'd turn you down) and too high.for others (because it might make their next round a "down round")..and since we're assuming we're doing this without being able to.pick startups, we also have to assume we can't value them, since.that's practically the same thing.another reason not to take stock in the startups is that startups.are often involved in disreputable things.  so are established.companies, but they don't get blamed for it.  if someone gets.murdered by someone they met on facebook, the press will treat the.story as if it were about facebook.  if someone gets murdered by.someone they met at a supermarket, the press will just treat it as.a story about a murder.  so understand that if you invest in startups,.they might build things that get used for pornography, or file-sharing,.or the expression of unfashionable opinions.  you should probably.sponsor this project jointly with your political opponents, so they.can't use whatever the startups do as a club to beat you with.it would be too much of a political liability just to give.the startups the money, though.  so the best plan would be to.make it convertible debt, but which didn't convert except in.a really big round, like $20 million.___how well this scheme worked would depend on the.city.  there are.some towns, like portland, that would be easy to turn into startup.hubs, and others, like detroit, where it would really be an uphill.battle.  so be honest with yourself about the sort of town you have.before you try this.it will be easier in proportion to how much your town resembles san.francisco.  do you have good weather?  do people live downtown, or.have they abandoned the center for the suburbs?  would the city be.described as "hip" and "tolerant," or as reflecting "traditional.values?"  are there good universities nearby?  are there walkable.neighborhoods?  would nerds feel at home?  if you answered yes to.all these questions, you might be able not only to pull off this.scheme, but to do it for less than a million per startup.i realize the chance of any city having.the political will to carry out this plan is microscopically.small.  i just wanted to explore what it would take if one did..how hard would it be to jumpstart a silicon valley?  it's.fascinating to think this prize might be within.the reach of so many cities.  so even though they'll all still.spend the money on the stadium, at least now someone can ask them:.why did you choose to do that instead of becoming a serious.rival to silicon valley?.notes[1].what people who start these supposedly local seed firms always.find is that (a) their applicants come from all over, not just the.local area, and (b) the local startups also apply to the other seed.firms.  so what ends up happening is that the applicant pool gets.partitioned by quality rather than geography.[2].interestingly, the bad vcs fail by choosing startups run by.people like them—people who are good presenters, but have no.real substance.   it's a case of the fake leading the fake.  and.since everyone involved is so plausible, the lps who invest in these.funds have no idea what's happening till they measure their returns.[3].not even being a tax haven, i suspect.  that makes some rich.people move, but not the type who would make good angel investors.in startups.[4].thanks to michael keenan for pointing this out.thanks to trevor blackwell, jessica livingston, robert.morris, and fred wilson for reading drafts of this.<eot><sot>what i've learned from hacker news.february 2009
hacker news was two years.old last week.  initially it was supposed to be a side project—an.application to sharpen arc on, and a place for current and future.y combinator founders to exchange news.  it's grown bigger and taken.up more time than i expected, but i don't regret that because i've.learned so much from working on it.growthwhen we launched in february 2007, weekday traffic was around 1600.daily uniques.  it's since grown to around 22,000.  this growth.rate is a bit higher than i'd like.  i'd like the site to grow,.since a site that isn't growing at least slowly is probably dead..but i wouldn't want it to grow as large as digg or reddit—mainly.because that would dilute the character of the site, but also because.i don't want to spend all my time dealing with scaling.i already have problems enough with that.  remember, the original.motivation for hn was to test a new programming language, and.moreover one that's focused on experimenting with language design,.not performance.  every time the site gets slow, i fortify myself.by recalling mcilroy and bentley's famous quote.the key to performance is elegance, not battalions of special.cases..and look for the bottleneck i can remove with least code.  so far.i've been able to keep up, in the sense that performance has remained.consistently mediocre despite 14x growth. i don't know what i'll.do next, but i'll probably think of something.this is my attitude to the site generally.  hacker news is an.experiment, and an experiment in a very young field.  sites of this.type are only a few years old.  internet conversation generally is.only a few decades old.  so we've probably only discovered a fraction.of what we eventually will.that's why i'm so optimistic about hn.  when a technology is this.young, the existing solutions are usually terrible; which means it.must be possible to do much better; which means many problems that.seem insoluble aren't. including, i hope, the problem that has.afflicted so many previous communities: being ruined by growth.dilutionusers have worried about that since the site was a few months old..so far these alarms have been false, but they may not always be..dilution is a hard problem. but probably soluble; it doesn't mean.much that open conversations have "always" been destroyed by growth.when "always" equals 20 instances.but it's important to remember we're trying to solve a new problem,.because that means we're going to have to try new things, most of.which probably won't work.  a couple weeks ago i tried displaying.the names of users with the highest average comment scores in orange..[1].that was a mistake.  suddenly a culture that had been more.or less united was divided into haves and have-nots.  i didn't.realize how united the culture had been till i saw it divided.  it.was painful to watch..[2]so orange usernames won't be back.  (sorry about that.)  but there.will be other equally broken-seeming ideas in the future, and the.ones that turn out to work will probably seem just as broken as.those that don't.probably the most important thing i've learned about dilution is.that it's measured more in behavior than users. it's bad behavior.you want to keep out more than bad people. user behavior turns out.to be surprisingly malleable.  if people are.expected to behave.well, they tend to; and vice versa.though of course forbidding bad behavior does tend to keep away bad.people, because they feel uncomfortably constrained in a place where.they have to behave well.  but this way of keeping them out is.gentler and probably also more effective than overt barriers.it's pretty clear now that the broken windows theory applies to.community sites as well.  the theory is that minor forms of bad.behavior encourage worse ones: that a neighborhood with lots of.graffiti and broken windows becomes one where robberies occur.  i.was living in new york when giuliani introduced the reforms that.made the broken windows theory famous, and the transformation was.miraculous. and i was a reddit user when the opposite happened.there, and the transformation was equally dramatic.i'm not criticizing steve and alexis.  what happened to reddit.didn't happen out of neglect.  from the start they had a policy of.censoring nothing except spam.  plus reddit had different goals.from hacker news.  reddit was a startup, not a side project; its.goal was to grow as fast as possible.  combine rapid growth and.zero censorship, and the result is a free for all.  but i don't.think they'd do much differently if they were doing it again..measured by traffic, reddit is much more successful than hacker.news.but what happened to reddit won't inevitably happen to hn. there.are several local maxima.  there can be places that are free for.alls and places that are more thoughtful, just as there are in the.real world; and people will behave differently depending on which.they're in, just as they do in the real world.i've observed this in the wild.  i've seen people cross-posting on.reddit and hacker news who actually took the trouble to write two.versions, a flame for reddit and a more subdued version for hn.submissionsthere are two major types of problems a site like hacker news needs.to avoid: bad stories and bad comments.  so far the danger of bad.stories seems smaller.  the stories on the frontpage now are still.roughly the ones that would have been there when hn started.i once thought i'd have to weight votes to keep crap off the.frontpage, but i haven't had to yet.  i wouldn't have predicted the.frontpage would hold up so well, and i'm not sure why it has..perhaps only the more thoughtful users care enough to submit and.upvote links, so the marginal cost of one random new user approaches.zero.  or perhaps the frontpage protects itself, by advertising what type of submission is expected.the most dangerous thing for the frontpage is stuff that's too easy.to upvote.  if someone proves a new theorem, it takes some work by.the reader to decide whether or not to upvote it.  an amusing cartoon.takes less.  a rant with a rallying cry as the title takes zero,.because people vote it up without even reading it.hence what i call the fluff principle: on a user-voted news site,.the links that are easiest to judge will take over unless you take.specific measures to prevent it.hacker news has two kinds of protections against fluff.  the most.common types of fluff links are banned as off-topic.  pictures of.kittens, political diatribes, and so on are explicitly banned.  this.keeps out most fluff, but not all of it.  some links are both fluff,.in the sense of being very short, and also on topic.there's no single solution to that.  if a link is just an empty.rant, editors will sometimes kill it even if it's on topic in the.sense of being about hacking, because it's not on topic by the real.standard, which is to engage one's intellectual curiosity.  if the.posts on a site are characteristically of this type i sometimes ban.it, which means new stuff at that url is auto-killed.  if a post.has a linkbait title, editors sometimes rephrase it to be more.matter-of-fact.  this is especially necessary with links whose.titles are rallying cries, because otherwise they become implicit."vote up if you believe such-and-such" posts, which are the most.extreme form of fluff.the techniques for dealing with links have to evolve, because the.links do. the existence of aggregators has already affected what.they aggregate. writers now deliberately write things to draw traffic.from aggregators—sometimes even specific ones.  (no, the irony.of this statement is not lost on me.)  then there are the more.sinister mutations, like linkjacking—posting a paraphrase of.someone else's article and submitting that instead of the original..these can get a lot of upvotes, because a lot of what's good in an.article often survives; indeed, the closer the paraphrase is to.plagiarism, the more survives..[3]i think it's important that a site that kills submissions provide.a way for users to see what got killed if they want to.  that keeps.editors honest, and just as importantly, makes users confident.they'd know if the editors stopped being honest. hn users can do.this by flipping a switch called showdead in their profile..[4]commentsbad comments seem to be a harder problem than bad submissions..while the quality of links on the frontpage of hn hasn't changed.much, the quality of the median comment may have decreased somewhat.there are two main kinds of badness in comments: meanness and.stupidity.  there is a lot of overlap between the two—mean.comments are disproportionately likely also to be dumb—but.the strategies for dealing with them are different.  meanness is.easier to control.  you can have rules saying one shouldn't be mean,.and if you enforce them it seems possible to keep a lid on meanness.keeping a lid on stupidity is harder, perhaps because stupidity is.not so easily distinguishable.  mean people are more likely to know.they're being mean than stupid people are to know they're being.stupid.the most dangerous form of stupid comment is not the long but.mistaken argument, but the dumb joke.  long but mistaken arguments.are actually quite rare.  there is a strong correlation between.comment quality and length; if you wanted to compare the quality.of comments on community sites, average length would be a good.predictor.  probably the cause is human nature rather than anything.specific to comment threads. probably it's simply that stupidity.more often takes the form of having few ideas than wrong ones.whatever the cause, stupid comments tend to be short.  and since.it's hard to write a short comment that's distinguished for the.amount of information it conveys, people try to distinguish them.instead by being funny.  the most tempting format for stupid comments.is the supposedly witty put-down, probably because put-downs are.the easiest form of humor..[5].so one advantage of forbidding.meanness is that it also cuts down on these.bad comments are like kudzu: they take over rapidly. comments have.much more effect on new comments than submissions have on new.submissions.  if someone submits a lame article, the other submissions.don't all become lame.  but if someone posts a stupid comment on a.thread, that sets the tone for the region around it.  people reply.to dumb jokes with dumb jokes.maybe the solution is to add a delay before people can respond to.a comment, and make the length of the delay inversely proportional.to some prediction of its quality.  then dumb threads would grow.slower..[6].peoplei notice most of the techniques i've described are conservative:.they're aimed at preserving the character of the site rather than.enhancing it.  i don't think that's a bias of mine.  it's due to.the shape of the problem.  hacker news had the good fortune to start.out good, so in this case it's literally a matter of preservation..but i think this principle would also apply to sites with different.origins.the good things in a community site come from people more than.technology; it's mainly in the prevention of bad things that.technology comes into play. technology certainly can enhance.discussion.  nested comments do, for example.  but i'd rather use.a site with primitive features and smart, nice users than a more.advanced one whose users were idiots or trolls.so the most important thing a community site can do is attract the.kind of people it wants.  a site trying to be as big as possible.wants to attract everyone.  but a site aiming at a particular subset.of users has to attract just those—and just as importantly,.repel everyone else.  i've made a conscious effort to do this on.hn.  the graphic design is as plain as possible, and the site rules.discourage dramatic link titles.  the goal is that the only thing.to interest someone arriving at hn for the first time should be the.ideas expressed there.the downside of tuning a site to attract certain people is that,.to those people, it can be too attractive.  i'm all too aware how.addictive hacker news can be.  for me, as for many users, it's a.kind of virtual town square.  when i want to take a break from.working, i walk into the square, just as i might into harvard square.or university ave in the physical world..[7].but an online square is.more dangerous than a physical one.  if i spent half the day loitering.on university ave, i'd notice.  i have to walk a mile to get there,.and sitting in a cafe feels different from working. but visiting.an online forum takes just a click, and feels superficially very.much like working.  you may be wasting your time, but you're not.idle.  someone is wrong on the internet, and you're fixing the.problem.hacker news is definitely useful.  i've learned a lot from things.i've read on hn.  i've written several essays that began as comments.there.  so i wouldn't want the site to go away.  but i would like.to be sure it's not a net drag on productivity.  what a disaster.that would be, to attract thousands of smart people to a site that.caused them to waste lots of time.  i wish i could be 100% sure.that's not a description of hn.i feel like the addictiveness of games and social applications is.still a mostly unsolved problem.  the situation now is like it was.with crack in the 1980s: we've invented terribly addictive new.things, and we haven't yet evolved ways to protect ourselves from.them.  we will eventually, and that's one of the problems i hope.to focus on next..notes[1].i tried ranking users by both average and median comment.score, and average (with the high score thrown out) seemed the more.accurate predictor of high quality.  median may be the more accurate.predictor of low quality though.[2].another thing i learned from this experiment is that if you're.going to distinguish between people, you better be sure you do it.right.  this is one problem where rapid prototyping doesn't work.indeed, that's the intellectually honest argument for not discriminating.between various types of people.  the reason not to do it is not.that everyone's the same, but that it's bad to do wrong and hard.to do right.[3].when i catch egregiously linkjacked posts i replace the url.with that of whatever they copied.  sites that habitually linkjack.get banned.[4].digg is notorious for its lack of transparency.  the root of.the problem is not that the guys running digg are especially sneaky,.but that they use the wrong algorithm for generating their frontpage..instead of bubbling up from the bottom as they get more votes, as.on reddit, stories start at the top and get pushed down by new.arrivals.the reason for the difference is that digg is derived from slashdot,.while reddit is derived from delicious/popular.  digg is slashdot.with voting instead of editors, and reddit is delicious/popular.with voting instead of bookmarking.  (you can still see fossils of.their origins in their graphic design.)digg's algorithm is very vulnerable to gaming, because any story.that makes it onto the frontpage is the new top story.  which in.turn forces digg to respond with extreme countermeasures.  a lot.of startups have some kind of secret about the subterfuges they had.to resort to in the early days, and i suspect digg's is the extent.to which the top stories were de facto chosen by human editors.[5].the dialog on beavis and butthead was composed largely of.these, and when i read comments on really bad sites i can hear them.in their voices.[6].i suspect most of the techniques for discouraging stupid.comments have yet to be discovered.  xkcd implemented a particularly.clever one in its irc channel: don't allow the same thing twice..once someone has said "fail," no one can ever say it again.  this.would penalize short comments especially, because they have less.room to avoid collisions in.another promising idea is the stupid.filter, which is just like a.probabilistic spam filter, but trained on corpora of stupid and.non-stupid comments instead.you may not have to kill bad comments to solve the problem.  comments.at the bottom of a long thread are rarely seen, so it may be enough.to incorporate a prediction of quality in the comment sorting.algorithm.[7].what makes most suburbs so demoralizing is that there's no.center to walk to..thanks to justin kan, jessica livingston, robert morris,.alexis ohanian, emmet shear, and fred wilson for reading drafts of.this..comment on this essay.<eot><sot>startups in 13 sentences.want to start a startup?  get funded by.y combinator..watch how this essay was.written..february 2009
one of the things i always tell startups is a principle i learned.from paul buchheit: it's better to make a few people really happy.than to make a lot of people semi-happy.  i was saying recently to.a reporter that if i could only tell startups 10 things, this would.be one of them.  then i thought: what would the other 9 be?when i made the list there turned out to be 13:.1. pick good cofounders.cofounders are for a startup what location is for real estate.  you.can change anything about a house except where it is.  in a startup.you can change your idea easily, but changing your cofounders is.hard..[1].and the success of a startup is almost always a function.of its founders.2. launch fast.the reason to launch fast is not so much that it's critical to get.your product to market early, but that you haven't really started.working on it till you've launched.  launching teaches you what you.should have been building.  till you know that you're wasting your.time.  so the main value of whatever you launch with is as a pretext.for engaging users.3. let your idea evolve.this is the second half of launching fast. launch fast and iterate..it's a big mistake to treat a startup as if it were merely a matter.of implementing some brilliant initial idea. as in an essay, most.of the ideas appear in the implementing.4. understand your users.you can envision the wealth created by a startup as a rectangle,.where one side is the number of users and the other is how much you.improve their lives..[2].the second dimension is the one you have.most control over.  and indeed, the growth in the first will be.driven by how well you do in the second.  as in science, the hard.part is not answering questions but asking them: the hard part is.seeing something new that users lack. the better you understand.them the better the odds of doing that. that's why so many successful.startups make something the founders needed.5. better to make a few users love you than a lot ambivalent.ideally you want to make large numbers of users love you, but you.can't expect to hit that right away.  initially you have to choose.between satisfying all the needs of a subset of potential users,.or satisfying a subset of the needs of all potential users.  take.the first. it's easier to expand userwise than satisfactionwise..and perhaps more importantly, it's harder to lie to yourself.  if.you think you're 85% of the way to a great product, how do you know.it's not 70%?  or 10%?  whereas it's easy to know how many users.you have.6. offer surprisingly good customer service.customers are used to being maltreated.  most of the companies they.deal with are quasi-monopolies that get away with atrocious customer.service. your own ideas about what's possible have been unconsciously.lowered by such experiences.  try making your customer service not.merely good, but.surprisingly good.  go out of your way to make.people happy.  they'll be overwhelmed; you'll see.  in the earliest.stages of a startup, it pays to offer customer service on a level.that wouldn't scale, because it's a way of learning about your.users.7. you make what you measure.i learned this one from joe kraus..[3].merely measuring something.has an uncanny tendency to improve it.  if you want to make your.user numbers go up, put a big piece of paper on your wall and every.day plot the number of users.  you'll be delighted when it goes up.and disappointed when it goes down.  pretty soon you'll start.noticing what makes the number go up, and you'll start to do more.of that.  corollary: be careful what you measure.8. spend little.i can't emphasize enough how important it is for a startup to be cheap..most startups fail before they make something people want, and the.most common form of failure is running out of money.  so being cheap.is (almost) interchangeable with iterating rapidly..[4].but it's.more than that.  a culture of cheapness keeps companies young in.something like the way exercise keeps people young.9. get ramen profitable."ramen profitable" means a startup makes just enough to pay the.founders' living expenses.  it's not rapid prototyping for business.models (though it can be), but more a way of hacking the investment.process.  once you cross over into ramen profitable, it completely.changes your relationship with investors.  it's also great for.morale.10. avoid distractions.nothing kills startups like distractions.  the worst type are those.that pay money: day jobs, consulting, profitable side-projects..the startup may have more long-term potential, but you'll always.interrupt working on it to answer calls from people paying you now..paradoxically, fundraising is this type of distraction, so try to.minimize that too.11. don't get demoralized.though the immediate cause of death in a startup tends to be running.out of money, the underlying cause is usually lack of focus.  either.the company is run by stupid people (which can't be fixed with.advice) or the people are smart but got demoralized.  starting a.startup is a huge moral weight.  understand this and make a conscious.effort not to be ground down by it, just as you'd be careful to.bend at the knees when picking up a heavy box.12. don't give up.even if you get demoralized, don't give up.  you can get surprisingly.far by just not giving up.  this isn't true in all fields.  there.are a lot of people who couldn't become good mathematicians no.matter how long they persisted.  but startups aren't like that..sheer effort is usually enough, so long as you keep morphing your.idea.13. deals fall through.one of the most useful skills we learned from viaweb was not getting.our hopes up.  we probably had 20 deals of various types fall.through.  after the first 10 or so we learned to treat deals as.background processes that we should ignore till they terminated..it's very dangerous to morale to start to depend on deals closing,.not just because they so often don't, but because it makes them.less likely to..having gotten it down to 13 sentences, i asked myself which i'd.choose if i could only keep one.understand your users.  that's the key.  the essential task in a.startup is to create wealth; the dimension of wealth you have most.control over is how much you improve users' lives; and the hardest.part of that is knowing what to make for them.  once you know what.to make, it's mere effort to make it, and most decent hackers are.capable of that.understanding your users is part of half the principles in this.list.  that's the reason to launch early, to understand your users..evolving your idea is the embodiment of understanding your users..understanding your users well will tend to push you toward making.something that makes a few people deeply happy.  the most important.reason for having surprisingly good customer service is that it.helps you understand your users.  and understanding your users will.even ensure your morale, because when everything else is collapsing.around you, having just ten users who love you will keep you going.notes[1].strictly speaking it's impossible without a time machine.[2].in practice it's more like a ragged comb.[3].joe thinks one of the founders of hewlett packard said it first,.but he doesn't remember which.[4].they'd be interchangeable if markets stood still.  since they.don't, working twice as fast is better than having twice as much.time.turkish translationspanish translationbulgarian translationjapanese translationpersian translation<eot><sot>keep your identity small.february 2009
i finally realized today why politics and religion yield such.uniquely useless discussions.as a rule, any mention of religion on an online forum degenerates.into a religious argument.  why?  why does this happen with religion.and not with javascript or baking or other topics people talk about.on forums?what's different about religion is that people don't feel they need.to have any particular expertise to have opinions about.it.  all they need is strongly held beliefs, and anyone can have.those.  no thread about javascript will grow as fast as one about.religion, because people feel they have to be over some threshold.of expertise to post comments about that.  but on religion everyone's.an expert.then it struck me: this is the problem with politics too.  politics,.like religion, is a topic where there's no threshold of expertise.for expressing an opinion.  all you need is strong convictions.do religion and politics have something in common that explains.this similarity?  one possible explanation is that they deal with.questions that have no definite answers, so there's no back pressure.on people's opinions.  since no one can be proven wrong, every.opinion is equally valid, and sensing this, everyone lets fly with.theirs.but this isn't true.  there are certainly some political questions.that have definite answers, like how much a new government policy.will cost.  but the more precise political questions suffer the.same fate as the vaguer ones.i think what religion and politics have in common is that they.become part of people's identity, and people can never have a.fruitful argument about something that's part of their identity..by definition they're partisan.which topics engage people's identity depends on the people, not.the topic.  for example, a discussion about a battle that included.citizens of one or more of the countries involved would probably.degenerate into a political argument.  but a discussion today about.a battle that took place in the bronze age probably wouldn't.  no.one would know what side to be on.  so it's not politics that's the.source of the trouble, but identity.  when people say a discussion.has degenerated into a religious war, what they really mean is that.it has started to be driven mostly by people's identities..[1]because the point at which this happens depends on the people rather.than the topic, it's a mistake to conclude that because a question.tends to provoke religious wars, it must have no answer. for example,.the question of the relative merits of programming languages often.degenerates into a religious war, because so many programmers.identify as x programmers or y programmers.  this sometimes leads.people to conclude the question must be unanswerable—that all.languages are equally good.  obviously that's false: anything else.people make can be well or badly designed; why should this be.uniquely impossible for programming languages?  and indeed, you can.have a fruitful discussion about the relative merits of programming.languages, so long as you exclude people who respond from identity.more generally, you can have a fruitful discussion about a topic.only if it doesn't engage the identities of any of the.participants.  what makes politics and religion such minefields is.that they engage so many people's identities.  but you could in.principle have a useful conversation about them with some people..and there are other topics that might seem harmless, like the.relative merits of ford and chevy pickup trucks, that you couldn't.safely talk about with others.the most intriguing thing about this theory, if it's right, is that.it explains not merely which kinds of discussions to avoid, but how.to have better ideas.  if people can't think clearly about anything.that has become part of their identity, then all other things being.equal, the best plan is to let as few things into your identity as.possible..[2]most people reading this will already be fairly tolerant.  but there.is a step beyond thinking of yourself as x but tolerating y: not.even to consider yourself an x.  the more labels you have for.yourself, the dumber they make you.notes[1].when that happens, it tends to happen fast, like a core going.critical.  the threshold for participating goes down to zero, which.brings in more people.  and they tend to say incendiary things,.which draw more and angrier counterarguments.[2].there may be some things it's a net win to include in your.identity.  for example, being a scientist.  but arguably that is.more of a placeholder than an actual label—like putting nmi on a.form that asks for your middle initial—because it doesn't commit.you to believing anything in particular.   a scientist isn't committed.to believing in natural selection in the same way a biblical.literalist is committed to rejecting it.  all he's committed to is.following the evidence wherever it leads.considering yourself a scientist is equivalent to putting a sign.in a cupboard saying "this cupboard must be kept empty."  yes,.strictly speaking, you're putting something in the cupboard, but.not in the ordinary sense.thanks to sam altman, trevor blackwell, paul buchheit, and robert.morris for reading drafts of this.russian translationportuguese translationromanian translation<eot><sot>after credentials.december 2008
a few months ago i read a new york times article on south.korean cram schools that said.admission to the right university can make or break an ambitious.young south korean..a parent added:."in our country, college entrance exams determine 70 to 80 percent.of a person's future.".it was striking how old fashioned this sounded.  and.yet when i was in high school it wouldn't have seemed too far off.as a description of the us.  which means things must have been.changing here.the course of people's lives in the us now seems to be determined.less by credentials and more by performance than it was 25 years.ago.  where you go to college still matters, but not like it used.to.what happened?_____judging people by their academic credentials was in its time an.advance.  the practice seems to have begun in china, where starting.in 587 candidates for the imperial civil service had to take an.exam on classical literature.  [1] it was also a test of wealth,.because the knowledge it tested was so specialized that passing.required years of expensive training.  but though wealth was a.necessary condition for passing, it was not a sufficient one.  by.the standards of the rest of the world in 587, the chinese system.was very enlightened.  europeans didn't introduce formal civil.service exams till the nineteenth century, and even then they seem.to have been influenced by the chinese example.before credentials, government positions were obtained mainly by.family influence, if not outright bribery.   it was a great step.forward to judge people by their performance on a test.  but by no.means a perfect solution.  when you judge people that way, you tend.to get cram schools—which they did in ming china and nineteenth.century england just as much as in present day south korea.what cram schools are, in effect, is leaks in a seal.  the use of.credentials.was an attempt to seal off the direct transmission of power between.generations, and cram schools represent that power finding holes.in the seal.  cram schools turn wealth in one generation into.credentials in the next.it's hard to beat this phenomenon, because the schools adjust to suit.whatever the tests measure.  when the tests are narrow and.predictable, you get cram schools on the classic model, like those.that prepared candidates for sandhurst (the british west point) or.the classes american students take now to improve their sat scores..but as the tests get broader, the schools do too.  preparing a.candidate for the chinese imperial civil service exams took years,.as prep school does today.  but the raison d'etre of all these.institutions has been the same: to beat the system.  [2]_____history suggests that, all other things being equal, a society.prospers in proportion to its ability to prevent parents from.influencing their children's success directly.  it's a fine thing.for parents to help their children indirectly—for example,.by helping them to become smarter or more disciplined, which then.makes them more successful.  the problem comes when parents use.direct methods: when they are able to use their own wealth or power.as a substitute for their children's qualities.parents will tend to do this when they can.  parents will die for.their kids, so it's not surprising to find they'll also push their.scruples to the limits for them.  especially if other parents are.doing it.sealing off this force has a double advantage.  not only does a.society get "the best man for the job," but.parents' ambitions are diverted from direct methods to indirect.ones—to actually trying to raise their kids well.but we should expect it to be very hard to contain parents' efforts.to obtain an unfair advantage for their kids.  we're dealing with.one of the most powerful forces in human nature.  we shouldn't expect.naive solutions to work, any more than we'd expect naive solutions.for keeping heroin out of a prison to work._____the obvious way to solve the problem is to make credentials better..if the tests a society uses are currently hackable, we can study.the way people beat them and try to plug the holes.  you can use.the cram schools to show you where most of the holes are.  they.also tell you when you're succeeding in fixing them: when cram.schools become less popular.a more general solution.would be to push for increased transparency, especially at critical.social bottlenecks like college admissions.  in the us this process.still shows many outward signs of corruption.  for example, legacy.admissions.  the official story is that legacy status doesn't carry.much weight, because all it does is break ties: applicants are.bucketed by ability, and legacy status is only used to decide between.the applicants in the bucket that straddles the cutoff.  but what.this means is that a university can make legacy status have as much.or as little weight as they want, by adjusting the size of the.bucket that straddles the cutoff.by gradually chipping away at the abuse of credentials, you could.probably make them more airtight.  but what a long fight it would.be.  especially when the institutions administering the tests don't.really want them to be airtight._____fortunately there's a better way to prevent the direct transmission.of power between generations.  instead of trying to make credentials.harder to hack, we can also make them matter less.let's think about what credentials are for.  what they are,.functionally, is a way of predicting performance.  if you could.measure actual performance, you wouldn't need them.so why did they even evolve?  why haven't we just been measuring.actual performance?  think about where credentialism first appeared:.in selecting candidates for large organizations.  individual.performance is hard to measure in large organizations, and the.harder performance is to measure, the more important it is.to predict it.  if an organization could immediately and cheaply.measure the performance of recruits, they wouldn't need to examine.their credentials.  they could take everyone and keep just the good.ones.large organizations can't do this.  but a bunch of small organizations.in a market can come close.  a market takes every organization and.keeps just the good ones.  as organizations get smaller, this.approaches taking every person and keeping just the good ones.  so.all other things being equal, a society consisting of more, smaller.organizations will care less about credentials._____that's what's been happening in the us.  that's why those quotes.from korea sound so old fashioned.  they're talking about an economy.like america's a few decades ago, dominated by a few big companies..the route for the ambitious in that sort of environment is to join.one and climb to the top.  credentials matter a lot then.  in the.culture of a large organization, an elite pedigree becomes a self-fulfilling.prophecy.this doesn't work in small companies.  even if your colleagues were.impressed by your credentials, they'd soon be parted from you if.your performance didn't match, because the company would go out of.business and the people would be dispersed.in a world of small companies, performance is all anyone cares.about.  people hiring for a startup don't care whether you've even.graduated from college, let alone which one.  all they care about.is what you can do.  which is in fact all that should matter, even.in a large organization.  the reason credentials have such prestige.is that for so long the large organizations.in a society tended to be the most powerful.  but in the us at least.they don't have the monopoly on power they once did, precisely.because they can't measure (and thus reward) individual performance..why spend twenty years climbing the corporate ladder when you can.get rewarded directly by the market?i realize i see a more exaggerated version of the change than most.other people.  as a partner at an early stage venture funding firm,.i'm like a jumpmaster shoving people out of the old world of.credentials and into the new one of performance.  i'm an agent of.the change i'm seeing.  but i don't think i'm imagining it.  it was.not so easy 25 years ago for an ambitious person to choose to be.judged directly by the market.  you had to go through bosses, and.they were influenced by where you'd been to college._____what made it possible for small organizations to succeed in america?.i'm still not entirely sure.  startups are certainly a large part.of it.  small organizations can develop new ideas faster than large.ones, and new ideas are increasingly valuable.but i don't think startups account for all the shift from credentials.to measurement.  my friend julian weber told me that when he went.to work for a new york law firm in the 1950s they paid associates.far less than firms do today.  law firms then made no pretense of.paying people according to the value of the work they'd done.  pay.was based on seniority.  the younger employees were paying their.dues.  they'd be rewarded later.the same principle prevailed at industrial companies.  when my.father was working at westinghouse in the 1970s, he had people.working for him who made more than he did, because they'd been there.longer.now companies increasingly have to pay employees market price for.the work they do.   one reason is that employees no longer trust.companies to deliver.deferred rewards: why work to accumulate.deferred rewards at a company that might go bankrupt, or be taken.over and have all its implicit obligations wiped out?  the other.is that some companies broke ranks and started to pay young employees.large amounts.  this was particularly true in consulting, law, and.finance, where it led to the phenomenon of yuppies.  the word is.rarely used today because it's no longer surprising to see a 25.year old with money, but in 1985 the sight of a 25 year old.professional able to afford a new bmw was so novel that it.called forth a new word.the classic yuppie worked for a small organization.  he didn't work.for general widget, but for the law firm that handled general.widget's acquisitions or the investment bank that floated their.bond issues.startups and yuppies entered the american conceptual vocabulary.roughly simultaneously in the late 1970s and early 1980s.  i don't.think there was a causal connection.  startups happened because.technology started to change so fast that big companies could no.longer keep a lid on the smaller ones.  i don't think the rise of.yuppies was inspired by it; it seems more as if there was a change.in the social conventions (and perhaps the laws) governing the way.big companies worked.  but the two phenomena rapidly fused to produce.a principle that now seems obvious: paying energetic young people.market rates, and getting correspondingly high performance from.them.at about the same time the us economy rocketed out of the doldrums.that had afflicted it for most of the 1970s.  was there a connection?.i don't know enough to say, but it felt like it at the time.  there.was a lot of energy released._____countries worried about their competitiveness are right to be.concerned about the number of startups started within them.  but.they would do even better to examine the underlying principle.  do.they let energetic young people get paid market rate for the work.they do?  the young are the test, because when people aren't rewarded.according to performance, they're invariably rewarded according to.seniority instead.all it takes is a few beachheads in your economy that pay for.performance.  measurement spreads like heat.  if one part of a.society is better at measurement than others, it tends to push the.others to do better.  if people who are young but smart and driven.can make more by starting their own companies than by working for.existing ones, the existing companies are forced to pay more to.keep them.  so market rates gradually permeate every organization,.even the government.  [3]the measurement of performance will tend to push even the organizations.issuing credentials into line.  when we were kids i used to annoy.my sister by ordering her to do things i knew she was about to do.anyway.  as credentials are superseded by performance, a similar.role is the best former gatekeepers can hope for.  once credential.granting institutions are no longer in the self-fullfilling prophecy.business, they'll have to work harder to predict the future._____credentials are a step beyond bribery and influence.  but they're.not the final step.  there's an even better way to block the.transmission of power between generations: to encourage the trend.toward an economy made of more, smaller units.  then you can measure.what credentials merely predict.no one likes the transmission of power between generations—not.the left or the right.  but the market forces favored by the right.turn out to be a better way of preventing it than the credentials.the left are forced to fall back on.the era of credentials began to end when the power of large.organizations peaked.in the late twentieth century.  now we seem.to be entering a new era based on measurement.  the reason the new.model has advanced so rapidly is that it works so much better.  it.shows no sign of slowing.notes[1] miyazaki, ichisada.(conrad schirokauer trans.), china's examination hell: the civil.service examinations of imperial china, yale university press,.1981.scribes in ancient egypt took exams, but they were more the type.of proficiency test any apprentice might have to pass.[2] when i say the.raison d'etre of prep schools is to get kids into better colleges,.i mean this in the narrowest sense.  i'm not saying that's all prep.schools do, just that if they had zero effect on college admissions.there would be far less demand for them.[3] progressive tax.rates will tend to damp this effect, however, by decreasing the.difference between good and bad measurers.thanks to trevor blackwell, sarah harlin, jessica livingston, and david.sloo for reading drafts of this.<eot><sot>could vc be a casualty of the recession?.december 2008
(i originally wrote this at the request of a company producing.a report about entrepreneurship.  unfortunately after reading it.they decided  it was too controversial to include.).vc funding will probably dry up somewhat during the present recession,.like it usually does in bad times.  but this time the result may.be different.  this time the number of new startups may not decrease..and that could be dangerous for vcs.when vc funding dried up after the internet bubble, startups dried.up too.   there were not a lot of new startups being founded in.2003.  but startups aren't tied to vc the way they were 10 years.ago.  it's now possible for vcs and startups to diverge.  and if.they do, they may not reconverge once the economy gets better.the reason startups no longer depend so much on vcs is one that.everyone in the startup business knows by now: it has gotten much.cheaper to start a startup.  there are four main reasons: moore's.law has made hardware cheap; open source has made software free;.the web has made marketing and distribution free; and more powerful.programming languages mean development teams can be smaller.  these.changes have pushed the cost of starting a startup down into the.noise.  in a lot of startups—probaby most startups funded by.y combinator—the biggest expense is simply the founders'.living expenses.  we've had startups that were profitable on revenues.of $3000 a month.$3000 is insignificant as revenues go.  why should anyone care about.a startup making $3000 a month?  because, although insignificant.as revenue, this amount of money can change a startup's.funding situation completely.someone running a startup is always calculating in the back of their.mind how much "runway" they have—how long they have till the.money in the bank runs out and they either have to be profitable,.raise more money, or go out of business.  once you cross the threshold.of profitability, however low, your runway becomes infinite.  it's.a qualitative change, like the stars turning into lines and.disappearing when the enterprise accelerates to warp speed.  once.you're profitable you don't need investors' money.  and because.internet startups have become so cheap to run, the threshold of.profitability can be trivially low.  which means many internet.startups don't need vc-scale investments anymore.  for many startups,.vc funding has, in the language of vcs, gone from a must-have to a.nice-to-have.this change happened while no one was looking, and its effects have.been largely masked so far.  it was during the trough after the.internet bubble that it became trivially cheap to start a startup,.but few realized it because startups were so out of fashion.   when.startups came back into fashion, around 2005, investors were starting.to write checks again.  and while founders may not have needed vc.money the way they used to, they were willing to take it if.offered—partly because there was a tradition of startups.taking vc money, and partly because startups, like dogs, tend to.eat when given the opportunity.  as long as vcs were writing checks,.founders were never forced to explore the limits of how little they.needed them.  there were a few startups who hit these limits.accidentally because of their unusual circumstances—most.famously 37signals, which hit the limit because they crossed into.startup land from the other direction: they started as a consulting.firm, so they had revenue before they had a product.vcs and founders are like two components that used to be bolted.together.  around 2000 the bolt was removed.  because the components.have so far been subjected to the same forces, they still seem to.be joined together, but really one is just resting on the other..a sharp impact would make them fly apart.  and the present recession.could be that impact.because of y combinator's position at the extreme end of the spectrum,.we'd be the first to see signs of a separation between founders and.investors, and we are in fact seeing it.  for example, though the.stock market crash does seem to have made investors more cautious,.it doesn't seem to have had any effect on the number of people who.want to start startups.  we take applications for funding every 6.months.  applications for the current funding cycle closed on october.17, well after the markets tanked, and even so we got a record.number, up 40% from the same cycle a year before.maybe things will be different a year from now, if the economy.continues to get worse, but so far there is zero slackening of.interest among potential founders.  that's different from the way.things felt in 2001.  then there was a widespread feeling among.potential founders that startups were over, and that one should.just go to grad school.   that isn't happening this time, and part.of the reason is that even in a bad economy it's not that hard to.build something that makes $3000 a month.  if investors stop writing.checks, who cares?we also see signs of a divergence between founders and investors.in the attitudes of existing startups we've funded.  i was talking.to one recently that had a round fall through at the last minute.over the sort of trifle that breaks deals when investors feel they.have the upper hand—over an uncertainty about whether the.founders had correctly filed their 83(b) forms, if you can believe.that.  and yet this startup is obviously going to succeed: their.traffic and revenue graphs look like a jet taking off.  so i asked.them if they wanted me to introduce them to more investors.  to my.surprise, they said no—that they'd just spent four months.dealing with investors, and they were actually a lot happier now.that they didn't have to.  there was a friend they wanted to hire.with the investor money, and now they'd have to postpone that.  but.otherwise they felt they had enough in the bank to make it to.profitability.  to make sure, they were moving to a cheaper apartment..and in this economy i bet they got a good deal on it.i've detected this "investors aren't worth the trouble" vibe from.several yc founders i've talked to recently.  at least one startup.from the most recent (summer) cycle may not even raise angel money,.let alone vc.  ticketstumbler.made it to profitability on y combinator's $15,000 investment and.they hope not to need more.  this surprised even us.  although yc.is based on the idea of it being cheap to start a startup, we never.anticipated that founders would grow successful startups on nothing.more than yc funding.if founders decide vcs aren't worth the trouble, that could be bad.for vcs.  when the economy bounces back in a few years and they're.ready to write checks again, they may find that founders have moved.on.there is a founder community just as there's a vc community.  they.all know one another, and techniques spread rapidly between them..if one tries a new programming language or a new hosting provider.and gets good results, 6 months later half of them are using it..and the same is true for funding.  the current generation of founders.want to raise money from vcs, and sequoia specifically, because.larry and sergey took money from vcs, and sequoia specifically..imagine what it would do to the vc business if the next hot company.didn't take vc at all.vcs think they're playing a zero sum game.  in fact, it's not even.that.  if you lose a deal to benchmark, you lose that deal, but vc.as an industry still wins.  if you lose a deal to none, all vcs.lose.this recession may be different from the one after the internet.bubble.  this time founders may keep starting startups.  and if.they do, vcs will have to keep writing checks, or they could become.irrelevant.thanks to sam altman, trevor blackwell, david hornik, jessica.livingston, robert morris, and fred wilson for reading drafts of.this.russian translation<eot><sot>the high-res society.december 2008
for nearly all of history the success of a society was proportionate.to its ability to assemble large and disciplined organizations..those who bet on economies of scale generally won, which meant the.largest organizations were the most successful ones.things have already changed so much that this is hard for us to.believe, but till just a few decades ago the largest organizations.tended to be the most progressive.  an ambitious kid graduating.from college in 1960 wanted to work in the huge, gleaming offices.of ford, or general electric, or nasa.  small meant small-time..small in 1960 didn't mean a cool little startup.  it meant uncle.sid's shoe store.when i grew up in the 1970s, the idea of the "corporate ladder" was.still very much alive.  the standard plan was to try to get into a.good college, from which one would be drafted into some organization.and then rise to positions of gradually increasing responsibility..the more ambitious merely hoped to climb the same ladder faster..[1]but in the late twentieth century something changed.  it turned out.that economies of scale were not the only force at work.  particularly.in technology, the increase in speed one could get from smaller.groups started to trump the advantages of size.the future turned out to be different from the one we were expecting.in 1970.  the domed cities and flying cars we expected have failed.to materialize.  but fortunately so have the jumpsuits with badges.indicating our specialty and rank.  instead of being dominated by.a few, giant tree-structured organizations, it's now looking like.the economy of the future will be a fluid network of smaller,.independent units.it's not so much that large organizations stopped working.  there's.no evidence that famously successful organizations like the roman.army or the british east india company were any less afflicted by.protocol and politics than organizations of the same size today..but they were competing against opponents who couldn't change the.rules on the fly by discovering new technology.  now it turns out.the rule "large and disciplined organizations win" needs to have a.qualification appended: "at games that change slowly." no one knew.till change reached a sufficient speed.large organizations will start to do worse now, though,.because for the first time in history they're no longer getting the.best people.  an ambitious kid graduating from college now doesn't.want to work for a big company.  they want to work for the hot.startup that's rapidly growing into one.  if they're really ambitious,.they want to start it..[2]this doesn't mean big companies will disappear.  to say that.startups will succeed implies that big companies will exist, because.startups that succeed either become big companies or are acquired.by them..[3].but large organizations will probably never again.play the leading role they did up till the last quarter of the.twentieth century.it's kind of surprising that a trend that lasted so long would ever.run out.  how often does it happen that a rule works for thousands.of years, then switches polarity?the millennia-long run of bigger-is-better left us with a lot of.traditions that are now obsolete,.but extremely deeply rooted..which means the ambitious can now do arbitrage on them.  it will.be very valuable to understand precisely which ideas to keep and.which can now be discarded.the place to look is where the spread of smallness began: in the.world of startups.there have always been occasional cases, particularly in the us,.of ambitious people who grew the ladder under them instead of.climbing it.  but till recently this was an anomalous route that.tended to be followed only by outsiders.  it was no coincidence.that the great industrialists of the nineteenth century had so.little formal education.  as huge as their companies eventually.became, they were all essentially mechanics and shopkeepers at.first.  that was a social step no one with a college education would.take if they could avoid it.  till the rise of technology startups,.and in particular, internet startups, it was very unusual for.educated people to start their own businesses.the eight men who left shockley semiconductor to found fairchild.semiconductor, the original silicon valley startup, weren't even.trying to start a company at first.  they were just looking for a.company willing to hire them as a group.  then one of their parents.introduced them to a small investment bank that offered to find.funding for them to start their own, so they did.  but starting a.company was an alien idea to them; it was something they backed.into..[4]now i would guess that practically every stanford or berkeley.undergrad who knows how to program has at least considered the idea.of starting a startup.  east coast universities are not far behind,.and british universities only a little behind them.  this pattern.suggests that attitudes at stanford and berkeley are not an anomaly,.but a leading indicator.  this is the way the world is going.of course, internet startups are still only a fraction of the world's.economy.  could a trend based on them be that powerful?i think so.  there's no reason to suppose there's any limit to the.amount of work that could be done in this area.  like science,.wealth seems to expand fractally.  steam power was a sliver of the.british economy when watt started working on it.  but his work led.to more work till that sliver had expanded into something bigger.than the whole economy of which it had initially been a part.the same thing could happen with the internet.  if internet startups.offer the best opportunity for ambitious people, then a lot of.ambitious people will start them, and this bit of the economy will.balloon in the usual fractal way.even if internet-related applications only become a tenth of the.world's economy, this component will set the tone for the rest..the most dynamic part of the economy always does, in everything.from salaries to standards of dress.  not just because of its.prestige, but because the principles underlying the most dynamic.part of the economy tend to be ones that work.for the future, the trend to bet on seems to be networks of small,.autonomous groups whose performance is measured individually.  and.the societies that win will be the ones with the least impedance.as with the original industrial revolution, some societies are going.to be better at this than others.  within a generation of its birth.in england, the industrial revolution had spread to continental.europe and north america.  but it didn't spread everywhere.  this.new way of doing things could only take root in places that were.prepared for it.  it could only spread to places that already had.a vigorous middle class.there is a similar social component to the transformation that began.in silicon valley in the 1960s.  two new kinds of techniques were.developed there: techniques for building integrated circuits, and.techniques for building a new type of company designed to grow fast.by creating new technology.  the techniques for building integrated.circuits spread rapidly to other countries.  but the techniques for.building startups didn't.  fifty years later, startups are ubiquitous.in silicon valley and common in a handful of other us cities, but.they're still an anomaly in most of the world.part of the reason—possibly the main reason—that startups.have not spread as broadly as the industrial revolution did is their.social disruptiveness.  though it brought many social changes, the.industrial revolution was not fighting the principle that bigger.is better.  quite the opposite: the two dovetailed beautifully..the new industrial companies adapted the customs of existing large.organizations like the military and the civil service, and the.resulting hybrid worked well.  "captains of industry" issued orders.to "armies of workers," and everyone knew what they were supposed.to do.startups seem to go more against the grain, socially.  it's hard.for them to flourish in societies that value hierarchy and stability,.just as it was hard for industrialization to flourish in societies.ruled by people who stole at will from the merchant class.  but.there were already a handful of countries past that stage when the.industrial revolution happened.   there do not seem to be that many.ready this time..notes[1].one of the bizarre consequences of this model was that the usual.way to make more money was to become a manager.  this is one of the.things startups fix.[2].there are a lot of reasons american car companies have been.doing so much worse than japanese car companies, but at least one.of them is a cause for optimism: american graduates have more.options.[3].it's possible that companies will one day be able to grow big.in revenues without growing big in people, but we are not very far.along that trend yet.[4].lecuyer, christophe, making silicon valley, mit press, 2006.thanks to trevor blackwell, paul buchheit, jessica livingston,.and robert morris for reading drafts of this.<eot><sot>the other half of "artists ship".november 2008
one of the differences between big companies and startups is that.big companies tend to have developed procedures to protect themselves.against mistakes.  a startup walks like a toddler, bashing.into things and falling over all the time.  a big company is more.deliberate.the gradual accumulation of checks in an organization is a kind of.learning, based on disasters that have happened to it or others.like it.  after giving a contract to a supplier who goes bankrupt.and fails to deliver, for example, a company might require all.suppliers to prove they're solvent before submitting bids.as companies grow they invariably get more such checks, either in.response to disasters they've suffered, or (probably more often).by hiring people from bigger companies who bring with them customs.for protecting against new types of disasters.it's natural for organizations to learn from mistakes.  the problem.is, people who propose new checks almost never consider that the.check itself has a cost.every check has a cost. for example, consider the case of making.suppliers verify their solvency.  surely that's mere prudence?  but.in fact it could have substantial costs.  there's obviously the.direct cost in time of the people on both sides who supply and check.proofs of the supplier's solvency.  but the real costs are the ones.you never hear about: the company that would be the best supplier,.but doesn't bid because they can't spare the effort to get verified..or the company that would be the best supplier, but falls just short.of the threshold for solvency—which will of course have been set.on the high side, since there is no apparent cost of increasing it.whenever someone in an organization proposes to add a new check,.they should have to explain not just the benefit but the cost.  no.matter how bad a job they did of analyzing it, this meta-check would.at least remind everyone there had to be a cost, and send them.looking for it.if companies started doing that, they'd find some surprises.  joel.spolsky recently spoke at y combinator about selling software to.corporate customers.  he said that in most companies software costing.up to about $1000 could be bought by individual managers without.any additional approvals.  above that threshold, software purchases.generally had to be approved by a committee.  but babysitting this.process was so expensive for software vendors that it didn't make.sense to charge less than $50,000.  which means if you're making.something you might otherwise have charged $5000 for, you have to.sell it for $50,000 instead.the purpose of the committee is presumably to ensure that the company.doesn't waste money. and yet the result is that the company pays.10 times as much.checks on purchases will always be expensive, because the harder.it is to sell something to you, the more it has to cost.  and not.merely linearly, either.  if you're hard enough to sell to, the.people who are best at making things don't want to bother.  the.only people who will sell to you are companies that specialize in.selling to you.  then you've sunk to a whole new level of inefficiency..market mechanisms no longer protect you, because the good suppliers.are no longer in the market.such things happen constantly to the biggest organizations of all,.governments.  but checks instituted by governments can cause much.worse problems than merely overpaying.  checks instituted by.governments can cripple a country's whole economy.  up till about.1400, china was richer and more technologically advanced than europe..one reason europe pulled ahead was that the chinese government.restricted long trading voyages.  so it was left to the europeans.to explore and eventually to dominate the rest of the world, including.china.in more recent times, sarbanes-oxley has practically destroyed the.us ipo market.  that wasn't the intention of the legislators who.wrote it.  they just wanted to add a few more checks on public.companies.  but they forgot to consider the cost.  they forgot that.companies about to go public are usually rather stretched, and that.the weight of a few extra checks that might be easy for general.electric to bear are enough to prevent younger companies from being.public at all.once you start to think about the cost of checks, you can start to.ask other interesting questions. is the cost increasing or decreasing?.is it higher in some areas than others?  where does it increase.discontinuously?  if large organizations started to ask questions.like that, they'd learn some frightening things.i think the cost of checks may actually be increasing.  the reason.is that software plays an increasingly important role in companies,.and the people who write software are particularly harmed by checks.programmers are unlike many types of workers in that the best ones.actually prefer to work hard.  this doesn't seem to be the case in.most types of work.  when i worked in fast food, we didn't prefer.the busy times.  and when i used to mow lawns, i definitely didn't.prefer it when the grass was long after a week of rain.programmers, though, like it better when they write more code.  or.more precisely, when they release more code.  programmers like to.make a difference.  good ones, anyway.for good programmers, one of the best things about working for a.startup is that there are few checks on releases.  in true startups,.there are no external checks at all.  if you have an idea for a new.feature in the morning, you can write it and push it to the production.servers before lunch.  and when you can do that, you have more.ideas.at big companies, software has to go through various approvals.before it can be launched.  and the cost of doing this can be.enormous—in fact, discontinuous.  i was talking recently to a.group of three programmers whose startup had been acquired a few.years before by a big company.  when they'd been independent, they.could release changes instantly.  now, they said, the absolute.fastest they could get code released on the production servers was.two weeks.this didn't merely make them less productive.  it made them hate.working for the acquirer.here's a sign of how much programmers like to be able to work hard:.these guys would have paid to be able to release code immediately,.the way they used to.  i asked them if they'd trade 10% of the.acquisition price for the ability to release code immediately, and.all three instantly said yes.  then i asked what was the maximum.percentage of the acquisition price they'd trade for it.  they said.they didn't want to think about it, because they didn't want to.know how high they'd go, but i got the impression it might be as.much as half.they'd have sacrificed hundreds of thousands of dollars, perhaps.millions, just to be able to deliver more software to users.  and.you know what?  it would have been perfectly safe to let them.  in.fact, the acquirer would have been better off; not only wouldn't.these guys have broken anything, they'd have gotten a lot more done..so the acquirer is in fact getting worse performance at greater.cost.  just like the committee approving software purchases.and just as the greatest danger of being hard to sell to is not.that you overpay but that the best suppliers won't even sell to.you, the greatest danger of applying too many checks to your.programmers is not that you'll make them unproductive, but that.good programmers won't even want to work for you.steve jobs's famous maxim "artists ship" works both ways.  artists.aren't merely capable of shipping.  they insist on it.  so if you.don't let people ship, you won't have any artists.<eot><sot>why to start a startup in a bad economy.want to start a startup?  get funded by.y combinator..october 2008
the economic situation is apparently so grim that some experts fear.we may be in for a stretch as bad as the mid seventies.when microsoft and apple were founded.as those examples suggest, a recession may not be such a bad time.to start a startup.  i'm not claiming it's a particularly good time.either.  the truth is more boring: the state of the economy doesn't.matter much either way.if we've learned one thing from funding so many startups, it's that.they succeed or fail based on the qualities of the founders.  the.economy has some effect, certainly, but as a predictor of success.it's rounding error compared to the founders.which means that what matters is who you are, not when you do it..if you're the right sort of person, you'll win even in a bad economy..and if you're not, a good economy won't save you.  someone who.thinks "i better not start a startup now, because the economy is.so bad" is making the same mistake as the people who thought during.the bubble "all i have to do is start a startup, and i'll be rich."so if you want to improve your chances, you should think far more.about who you can recruit as a cofounder than the state of the.economy.  and if you're worried about threats to the survival of.your company, don't look for them in the news.  look in the mirror.but for any given team of founders, would it not pay to wait till.the economy is better before taking the leap?  if you're starting.a restaurant, maybe, but not if you're working on technology..technology progresses more or less independently of the stock market..so for any given idea, the payoff for acting fast in a bad economy.will be higher than for waiting.  microsoft's first product was a.basic interpreter for the altair.  that was exactly what the world.needed in 1975, but if gates and allen had decided to wait a few.years, it would have been too late.of course, the idea you have now won't be the last you have.  there.are always new ideas.  but if you have a specific idea you want to.act on, act now.that doesn't mean you can ignore the economy.  both customers and investors.will be feeling pinched.  it's not necessarily a problem if customers.feel pinched: you may even be able to benefit from it, by making.things that save money..startups often make things cheaper, so in.that respect they're better positioned to prosper in a recession.than big companies.investors are more of a problem.  startups generally need to raise.some amount of external funding, and investors tend to be less.willing to invest in bad times.  they shouldn't be.  everyone knows.you're supposed to buy when times are bad and sell when times are.good.  but of course what makes investing so counterintuitive is.that in equity markets, good times are defined as everyone thinking.it's time to buy.  you have to be a contrarian to be correct, and.by definition only a minority of investors can be.so just as investors in 1999 were tripping over one another trying.to buy into lousy startups, investors in 2009 will presumably be.reluctant to invest even in good ones.you'll have to adapt to this.  but that's nothing new: startups.always have to adapt to the whims of investors.  ask any founder.in any economy if they'd describe investors as fickle, and watch.the face they make.  last year you had to be prepared to explain.how your startup was viral.  next year you'll have to explain how.it's recession-proof.(those are both good things to be.  the mistake investors make is.not the criteria they use but that they always tend to focus on one.to the exclusion of the rest.)fortunately the way to make a startup recession-proof is to do.exactly what you should do anyway: run it as cheaply as possible..for years i've been telling founders that the surest route to success.is to be the cockroaches of the corporate world.  the immediate.cause of death in a startup is always running out of money. so the.cheaper your company is to operate, the harder it is to kill..and fortunately it has gotten very cheap to run a startup. a recession.will if anything make it cheaper still.if nuclear winter really is here, it may be safer to be a cockroach.even than to keep your job.  customers may drop off individually.if they can no longer afford you, but you're not going to lose them.all at once; markets don't "reduce headcount."what if you quit your job to start a startup that fails, and you.can't find another?  that could be a problem if you work in sales or.marketing.  in those fields it can take months to find a new.job in a bad economy.  but hackers seem to be more liquid.  good.hackers can always get some kind of job.  it might not be your dream.job, but you're not going to starve.another advantage of bad times is that there's less competition..technology trains leave the station at regular intervals.  if.everyone else is cowering in a corner, you may have a whole car to.yourself.you're an investor too.  as a founder, you're buying stock with.work: the reason larry and sergey are so rich is not so much that.they've done work worth tens of billions of dollars, but that they.were the first investors in google.  and like any investor you.should buy when times are bad.were you nodding in agreement, thinking "stupid investors" a few.paragraphs ago when i was talking about how investors are reluctant.to put money into startups in bad markets, even though that's the.time they should rationally be most willing to buy?  well, founders.aren't much better.  when times get bad, hackers go to grad school..and no doubt that will happen this time too.  in fact, what makes.the preceding paragraph true is that most readers won't believe.it—at least to the extent of acting on it.so maybe a recession is a good time to start a startup.  it's hard.to say whether advantages like lack of competition outweigh.disadvantages like reluctant investors.  but it doesn't matter much.either way.   it's the people that matter.  and for a given set of.people working on a given technology, the time to act is always.now.russian translationchinese translationjapanese translation<eot><sot>a fundraising survival guide.want to start a startup?  get funded by.y combinator..august 2008
raising money is the second hardest part of starting a startup..the hardest part is making something people want: most startups.that die, die because they didn't do that.  but the second biggest.cause of death is probably the difficulty of raising money..fundraising is brutal.one reason it's so brutal is simply the brutality of markets.  people.who've spent most of their lives in schools or big companies may.not have been exposed to that.  professors and bosses usually feel.some sense of responsibility toward you; if you make a valiant.effort and fail, they'll cut you a break.  markets are less forgiving..customers don't care how hard you worked, only whether you solved.their problems.investors evaluate startups the way customers evaluate products,.not the way bosses evaluate employees.  if you're making a valiant.effort and failing, maybe they'll invest in your next startup, but.not this one.but raising money from investors is harder than selling to.customers, because there are so few of them.  there's.nothing like an efficient market.  you're unlikely to have more.than 10 who are interested; it's difficult to talk to more.  so the.randomness of any one investor's behavior can really affect you.problem number 3: investors are very random.  all investors, including.us, are by ordinary standards incompetent.  we constantly have to.make decisions about things we don't understand, and more often.than not we're wrong.and yet a lot is at stake.  the amounts invested by different types.of investors vary from five thousand dollars to fifty million, but.the amount usually seems large for whatever type of investor it is..investment decisions are big decisions.that combination—making big decisions about things they don't.understand—tends to make investors very skittish.  vcs are notorious.for leading founders on.  some of the more unscrupulous do it.deliberately.  but even the most well-intentioned investors can.behave in a way that would seem crazy in everyday life.  one day.they're full of enthusiasm and seem ready to write you a check on.the spot; the next they won't return your phone calls.  they're not.playing games with you.  they just can't make up their minds..[1]if that weren't bad enough, these wildly fluctuating nodes are all.linked together.  startup investors all know one another, and (though.they hate to admit it) the biggest factor in their opinion of you.is the opinion of other investors..[2].talk about a recipe for.an unstable system.  you get the opposite of the damping that the.fear/greed balance usually produces in markets.  no one is interested.in a startup that's a "bargain" because everyone else hates it.so the inefficient market you get because there are so few players.is exacerbated by the fact that they act less than independently..the result is a system like some kind of primitive, multi-celled.sea creature, where you irritate one extremity and the whole thing.contracts violently.y combinator is working to fix this.  we're trying to increase the.number of investors just as we're increasing the number of startups..we hope that as the number of both increases we'll get something.more like an efficient market.  as t approaches infinity, demo day.approaches an auction.unfortunately, t is still very far from infinity.  what does a.startup do now, in the imperfect world we currently inhabit? the.most important thing is not to let fundraising get you down.  startups.live or die on morale.  if you let the difficulty of raising money.destroy your morale, it will become a self-fulfilling prophecy..bootstrapping (= consulting)some would-be founders may by now be thinking, why deal with investors.at all?  if raising money is so painful, why do it?one answer to that is obvious: because you need money to live on..it's a fine idea in principle to finance your startup with its own.revenues, but you can't create instant customers.  whatever you.make, you have to sell a certain amount to break even.  it will.take time to grow your sales to that point, and it's hard to predict,.till you try, how long it will take.we could not have bootstrapped viaweb, for example.  we charged.quite a lot for our software—about $140 per user per month—but.it was at least a year before our revenues would have covered even.our paltry costs.  we didn't have enough saved to live on for a.year.if you factor out the "bootstrapped" companies that were actually.funded by their founders through savings or a day job, the remainder.either (a) got really lucky, which is hard to do on demand, or (b).began life as consulting companies and gradually transformed.themselves into product companies.consulting is the only option you can count on.  but consulting is.far from free money.  it's not as painful as raising money from.investors, perhaps, but the pain is spread over a longer period..years, probably.  and for many types of startup, that delay could.be fatal.  if you're working on something so unusual that no one.else is likely to think of it, you can take your time.  joshua.schachter gradually built delicious on the side while working on.wall street.  he got away with it because no one else realized it.was a good idea.  but if you were building something as obviously.necessary as online store software at about the same time as viaweb,.and you were working on it on the side while spending most of your.time on client work, you were not in a good position.bootstrapping sounds great in principle, but this apparently verdant.territory is one from which few startups emerge alive.  the mere.fact that bootstrapped startups tend to be famous on that account.should set off alarm bells.  if it worked so well, it would be the.norm..[3].bootstrapping may get easier, because starting a company is getting.cheaper.  but i don't think we'll ever reach the point where most.startups can do without outside funding.  technology tends to.get dramatically cheaper, but living expenses don't.the upshot is, you can choose your pain: either the short, sharp.pain of raising money, or the chronic ache of consulting.  for a.given total amount of pain, raising money is the better choice,.because new technology is usually more valuable now than later.but although for most startups raising money will be the lesser.evil, it's still a pretty big evil—so big that it can easily kill.you.  not merely in the obvious sense that if you fail to raise.money you might have to shut the company down, but because the.process of raising money itself can kill you.to survive it you need a set of techniques mostly.orthogonal to the ones used in convincing investors, just as mountain.climbers need to know survival techniques that are mostly orthogonal.to those used in physically getting up and down mountains..1. have low expectations.the reason raising money destroys so many startups' morale is not.simply that it's hard, but that it's so much harder than they.expected.  what kills you is the disappointment.  and the lower.your expectations, the harder it is to be disappointed.startup founders tend to be optimistic.  this can work well in.technology, at least some of the time, but it's the wrong way to.approach raising money.  better to assume investors will always let.you down.  acquirers too, while we're at it.  at yc one of our.secondary mantras is "deals fall through."  no matter what deal.you have going on, assume it will fall through.  the predictive.power of this simple rule is amazing.there will be a tendency, as a deal progresses, to start to believe.it will happen, and then to depend on it happening.  you must resist.this.  tie yourself to the mast.  this is what kills you.  deals.do not have a trajectory like most other human interactions, where.shared plans solidify linearly over time.  deals often fall through.at the last moment.  often the other party doesn't really think.about what they want till the last moment.  so you can't use your.everyday intuitions about shared plans as a guide.  when it comes.to deals, you have to consciously turn them off and become.pathologically cynical.this is harder to do than it sounds.  it's very flattering when.eminent investors seem interested in funding you.  it's easy to.start to believe that raising money will be quick and straightforward..but it hardly ever is..2. keep working on your startup.it sounds obvious to say that you should keep working on your startup.while raising money.  actually this is hard to do.  most startups.don't manage to.raising money has a mysterious capacity to suck up all your attention..even if you only have one meeting a day with investors, somehow.that one meeting will burn up your whole day.  it costs not just.the time of the actual meeting, but the time getting there and back,.and the time preparing for it beforehand and thinking about it.afterward.the best way to survive the distraction of meeting with investors.is probably to partition the company: to pick one founder to deal.with investors while the others keep the company going.  this works.better when a startup has 3 founders than 2, and better when the.leader of the company is not also the lead developer.  in the best.case, the company keeps moving forward at about half speed.that's the best case, though.  more often than not the company comes.to a standstill while raising money.  and that is dangerous for so.many reasons.  raising money always takes longer than you expect..what seems like it's going to be a 2 week interruption turns into.a 4 month interruption.  that can be very demoralizing.  and worse.still, it can make you less attractive to investors.  they want to.invest in companies that are dynamic.  a company that hasn't done.anything new in 4 months doesn't seem dynamic, so they start to.lose interest.  investors rarely grasp this, but much of what.they're responding to when they lose interest in a startup is the.damage done by their own indecision.the solution: put the startup first.  fit meetings with investors.into the spare moments in your development schedule, rather than.doing development in the spare moments between meetings with.investors.  if you keep the company moving forward—releasing new.features, increasing traffic, doing deals, getting written.about—those investor meetings are more likely to be productive.  not just.because your startup will seem more alive, but also because it will.be better for your own morale, which is one of the main ways investors.judge you..3. be conservative.as conditions get worse, the optimal strategy becomes more conservative..when things go well you can take risks; when things are bad you.want to play it safe.i advise approaching fundraising as if it were always going badly..the reason is that between your ability to delude yourself and the.wildly unstable nature of the system you're dealing with, things.probably either already are or could easily become much worse than.they seem.what i tell most startups we fund is that if someone reputable.offers you funding on reasonable terms, take it.  there have been.startups that ignored this advice and got away with it—startups.that ignored a good offer in the hope of getting a better one, and.actually did.  but in the same position i'd give the same advice.again.  who knows how many bullets were in the gun they were playing.russian roulette with?corollary: if an investor seems interested, don't just let them.sit. you can't assume someone interested in investing will stay.interested.  in fact, you can't even tell (they can't even tell).if they're really interested till you try to convert that interest.into money.  so if you have hot prospect, either close them now or.write them off.  and unless you already have enough funding, that.reduces to: close them now.startups don't win by getting great funding rounds, but by making.great products.  so finish raising money and get.back to work..4. be flexible.there are two questions vcs ask that you shouldn't answer: "who.else are you talking to?" and "how much are you trying to raise?"vcs don't expect you to answer the first question. they ask it just.in case..[4].they do seem to expect an answer to the second.  but.i don't think you should just tell them a number.  not as a way to.play games with them, but because you shouldn't have a fixed.amount you need to raise.the custom of a startup needing a fixed amount of funding is an.obsolete one left over from the days when startups were more.expensive.  a company that needed to build a factory or hire 50.people obviously needed to raise a certain minimum amount.  but few.technology startups are in that position today.we advise startups to tell investors there are several different.routes they could take depending on how much they raised.  as little.as $50k could pay for food and rent for the founders for a year..a couple hundred thousand would let them get office space and hire.some smart people they know from school.  a couple million would.let them really blow this thing out.  the message (and not just the.message, but the fact) should be: we're going to succeed no matter.what.  raising more money just lets us do it faster.if you're raising an angel round, the size of the round can even.change on the fly.  in fact, it's just as well to make the round.small initially, then expand as needed, rather than trying to raise.a large round and risk losing the investors you already have if you.can't raise the full amount.  you may even want to do a "rolling.close," where the round has no predetermined size, but instead you.sell stock to investors one at a time as they say yes.  that helps.break deadlocks, because you can start as soon as the first one.is ready to buy..[5].5. be independent.a startup with a couple founders in their early twenties can have.expenses so low that they could be profitable on.as little as $2000 per month.  that's negligible as corporate.revenues go, but the effect on your morale and your bargaining.position is anything but.  at yc we use the phrase "ramen profitable".to describe the situation where you're making just enough to pay.your living expenses.  once you cross into ramen profitable,.everything changes.  you may still need investment to make it big,.but you don't need it this month.you can't plan when you start a startup how long.it will take to become profitable.  but if you find yourself in a.position where a little more effort expended on sales would carry.you over the threshold of ramen profitable, do it.investors like it when you're ramen profitable.  it shows you've.thought about making money, instead of just working on amusing.technical problems; it shows you have the discipline to keep your.expenses low; but above all, it means you don't need them.there is nothing investors like more than a startup that seems like.it's going to succeed even without them.  investors like it when.they can help a startup, but they don't like startups that would.die without that help.at yc we spend a lot of time trying to predict how the startups we've.funded will do, because we're trying to learn how to pick winners..we've now watched the trajectories of so many startups that we're.getting better at predicting them.  and when we're talking.about startups we think are likely to succeed, what we find ourselves.saying is things like "oh, those guys can take care of themselves..they'll be fine." not "those guys are really smart" or."those guys are working on a great idea.".[6].when we predict good outcomes for startups, the qualities.that come up in the supporting arguments are toughness, adaptability,.determination.  which means to the extent we're correct, those are.the qualities you need to win.investors know this, at least unconsciously.   the reason they like.it when you don't need them is not simply that they like what they.can't have, but because that quality is what makes founders succeed.sam altman.has it.  you could parachute him into an island full of.cannibals and come back in 5 years and he'd be the king.  if you're.sam altman, you don't have to be profitable to convey to investors.that you'll succeed with or without them.  (he wasn't, and he did.).not everyone has sam's deal-making ability.  i myself don't.  but.if you don't, you can let the numbers speak for you..6. don't take rejection personally.getting rejected by investors can make you start to doubt yourself..after all, they're more experienced than you.  if they think your.startup is lame, aren't they probably right?maybe, maybe not.  the way to handle rejection is with precision..you shouldn't simply ignore rejection.  it might mean something..but you shouldn't automatically get demoralized either.to understand what rejection means, you have to understand first.of all how common it is.  statistically, the average vc is a rejection.machine.  david hornik, a partner at august, told me:.the numbers for me ended up being something like 500 to 800 plans.received and read, somewhere between 50 and 100 initial 1 hour.meetings held, about 20 companies that i got interested in, about.5 that i got serious about and did a bunch of work, 1 to 2 deals.done in a year.  so the odds are against you.  you.may be a great entrepreneur, working on interesting stuff, etc..but it is still incredibly unlikely that you get funded..this is less true with angels, but vcs reject practically everyone..the structure of their business means a partner does at most 2 new.investments a year, no matter how many good startups approach him.in addition to the odds being terrible, the average investor is,.as i mentioned, a pretty bad judge of startups.  it's harder to.judge startups than most other things, because great startup ideas.tend to seem wrong. a good startup idea has to be not just good but.novel.  and to be both good and novel, an idea probably has to seem.bad to most people, or someone would already be doing it and it.wouldn't be novel.that makes judging startups harder than most other things one judges..you have to be an intellectual contrarian to be a good startup.investor.  that's a problem for vcs, most of whom are not particularly.imaginative.  vcs are mostly money guys, not people who make things..[7].angels are better at appreciating novel ideas, because most.were founders themselves.so when you get a rejection, use the data that's in it, and not what's.not.  if an investor gives you specific reasons for not investing,.look at your startup and ask if they're right.  if they're real.problems, fix them.  but don't just take their word for it.  you're.supposed to be the domain expert; you have to decide.though a rejection doesn't necessarily tell you anything about your.startup, it does suggest your pitch could be improved.  figure out.what's not working and change it.  don't just think "investors are.stupid."  often they are, but figure out precisely where you lose.them.don't let rejections pile up as a depressing, undifferentiated heap..sort them and analyze them, and then instead of thinking "no one.likes us," you'll know precisely how big a problem you have, and.what to do about it..7. be able to downshift into consulting (if appropriate).consulting, as i mentioned, is a dangerous way to finance a startup..but it's better than dying.  it's a bit like anaerobic respiration:.not the optimum solution for the long term, but it can save you.from an immediate threat.  if you're having trouble raising money.from investors at all, it could save you to be able to shift.toward consulting.this works better for some startups than others.  it wouldn't have.been a natural fit for, say, google, but if your company was making.software for building web sites, you could degrade fairly gracefully.into consulting by building sites for clients with it.so long as you were careful not to get sucked permanently into.consulting, this could even have advantages.  you'd understand your.users well if you were using the software for them.  plus as a.consulting company you might be able to get big-name users using.your software that you wouldn't have gotten as a product company.at viaweb we were forced to operate like a consulting company.initially, because we were so desperate for users that we'd offer.to build merchants' sites for them if they'd sign up..but we never charged for such work, because we didn't want them to.start treating us like actual consultants, and calling us every.time they wanted something changed on their site.  we knew we had.to stay a product company, because only.that scales..8. avoid inexperienced investors.though novice investors seem unthreatening they can be the most.dangerous sort, because they're so nervous.  especially in.proportion to the amount they invest.  raising $20,000 from a first-time.angel investor can be as much work as raising $2 million from.a vc fund.their lawyers are generally inexperienced too.  but while the.investors can admit they don't know what they're doing, their lawyers.can't.  one yc startup negotiated terms for a tiny round with.an angel, only to receive a 70-page agreement from his lawyer.  and.since the lawyer could never admit, in front of his client, that.he'd screwed up, he instead had to insist on retaining all the.draconian terms in it, so the deal fell through.of course, someone has to take money from novice investors, or there.would never be any experienced ones.  but if you do, either (a).drive the process yourself, including supplying the.paperwork, or.(b) use them only to fill up a larger round led by someone else..9. know where you stand.the most dangerous thing about investors is their indecisiveness..the worst case scenario is the long no, the no that comes after.months of meetings.  rejections from investors are like design.flaws: inevitable, but much less costly if you discover them early.so while you're talking to investors, constantly look for signs of.where you stand.  how likely are they to offer you a term sheet?.what do they have to be convinced of first?  you shouldn't necessarily.always be asking these questions outright—that could get.annoying—but you should always be collecting data about them.investors tend to resist committing except to the extent you push.them to.  it's in their interest to collect the maximum amount of.information while making the minimum number of decisions.  the best.way to force them to act is, of course, competing investors.  but.you can also apply some force by focusing the discussion:.by asking what specific questions they need answered to make.up their minds, and then answering them.  if you get through several.obstacles and they keep raising new ones, assume that ultimately.they're going to flake.you have to be disciplined when collecting data about investors'.intentions.  otherwise their desire to lead you on will combine.with your own desire to be led on to produce completely inaccurate.impressions.use the data to weight your strategy..you'll probably be talking to several investors.  focus on the ones.that are most likely to say yes.  the value of a potential investor.is a combination of how good it would be if they said yes, and how.likely they are to say it.  put the most weight on the second factor..partly because the most important quality in an investor is simply.investing.  but also because, as i mentioned, the biggest factor.in investors' opinion of you is other investors' opinion of you..if you're talking to several investors and you manage to get one.over the threshold of saying yes, it will make the others much more.interested.  so you're not sacrificing the lukewarm investors if.you focus on the hot ones; convincing the hot investors is the best.way to convince the lukewarm ones..futurei'm hopeful things won't always be so awkward. i hope that as startups.get cheaper and the number of investors increases, raising money.will become, if not easy, at least straightforward.in the meantime, the brokenness of the funding process offers a big.opportunity.  most investors have no idea how dangerous they are..they'd be surprised to hear that raising money from them is something.that has to be treated as a threat to a company's survival.  they.just think they need a little more information to make up their.minds.  they don't get that there are 10 other investors who also.want a little more information, and that the process of talking to.them all can bring a startup to a standstill for months.because investors don't understand the cost of dealing with them,.they don't realize how much room there is for a potential competitor.to undercut them.  i know from my own experience how much faster.investors could decide, because we've brought our own time down to.20 minutes (5 minutes of reading an application plus a 10 minute.interview plus 5 minutes of discussion).  if you were investing.more money you'd want to take longer, of course.  but if we can.decide in 20 minutes, should it take anyone longer than a couple.days?opportunities like this don't sit unexploited forever, even in an.industry as conservative as venture capital.  so.either existing investors will start to make up their minds faster,.or new investors will emerge who do.in the meantime founders have to treat raising money as a dangerous.process.  fortunately, i can fix the biggest danger right here..the biggest danger is surprise.  it's that startups will underestimate.the difficulty of raising money—that they'll cruise through all.the initial steps, but when they turn to raising money they'll find.it surprisingly hard, get demoralized, and give up. so i'm telling.you in advance: raising money is hard.notes[1].when investors can't make up their minds, they sometimes.describe it as if it were a property of the startup.  "you're too.early for us," they sometimes say.  but which of them, if they were.taken back in a time machine to the hour google was founded, wouldn't.offer to invest at any valuation the founders chose?  an hour old.is not too early if it's the right startup.  what "you're too early".really means is "we can't figure out yet whether you'll succeed.".[2].investors influence one another both directly and indirectly..they influence one another directly through the "buzz" that surrounds.a hot startup.  but they also influence one another indirectly.through the founders.  when a lot of investors are interested in.you, it increases your confidence in a way that makes you much more.attractive to investors.no vc will admit they're influenced by buzz.  some genuinely aren't..but there are few who can say they're not influenced by confidence.[3].one vc who read this essay wrote:"we try to avoid companies that got bootstrapped with consulting..it creates very bad behaviors/instincts that are hard to erase.from a company's culture."[4].the optimal way to answer the first question is to say that.it would be improper to name names, while simultaneously implying.that you're talking to a bunch of other vcs who are all about to.give you term sheets.  if you're the sort of person who understands.how to do that, go ahead.  if not, don't even try.  nothing annoys.vcs more than clumsy efforts to manipulate them.[5].the disadvantage of expanding a round on the fly is that the.valuation is fixed at the start, so if you get a sudden rush of.interest, you may have to decide between turning some investors.away and selling more of the company than you meant to.  that's a.good problem to have, however.[6].i wouldn't say that intelligence doesn't matter in startups..we're only comparing yc startups, who've already made it over a.certain threshold.[7].but not all are.  though most vcs are suits at heart,.the most successful ones tend not to be.  oddly enough,.the best vcs tend to be the least vc-like..thanks to trevor blackwell, david hornik, jessica livingston,.robert morris, and fred wilson for reading drafts of this.russian translation<eot><sot>the pooled-risk company management company.july 2008
at this year's startup school, david heinemeier hansson gave a.talk.in which he suggested that startup founders.should do things the old fashioned way.  instead of hoping to get.rich by building a valuable company and then selling stock in a."liquidity event," founders should start companies that make money.and live off the revenues.sounds like a good plan.  let's think about the optimal way to do.this.one disadvantage of living off the revenues of your company is that.you have to keep running it.  and as anyone who runs their own.business can tell you, that requires your complete attention.  you.can't just start a business and check out once things are going.well, or they stop going well surprisingly fast.the main economic motives of startup founders seem to be freedom.and security.  they want enough money that (a) they don't have to.worry about running out of money and (b) they can spend their time.how they want.  running your own business offers neither.  you.certainly don't have freedom: no boss is so demanding.  nor do you.have security, because if you stop paying attention to the company,.its revenues go away, and with them your income.the best case, for most people, would be if you could hire someone.to manage the company for you once you'd grown it to a certain size..suppose you could find a really good manager.  then you would have.both freedom and security.  you could pay as little attention to.the business as you wanted, knowing that your manager would keep.things running smoothly.  and that being so, revenues would continue.to flow in, so you'd have security as well.there will of course be some founders who wouldn't like that idea:.the ones who like running their company so much that there's nothing.else they'd rather do.  but this group must be small.  the way you.succeed in most businesses is to be fanatically attentive.to customers' needs.  what are the odds that your own desires would.coincide exactly with the demands of this powerful, external force?sure, running your own company can be fairly interesting.  viaweb.was more interesting than any job i'd had before.  and since i made.much more money from it, it offered the highest ratio of income to.boringness of anything i'd done, by orders of magnitude.  but was.it the most interesting work i could imagine doing?  no.whether the number of founders in the same position is asymptotic.or merely large, there are certainly a lot of them.  for them the.right approach would be to hand the company over to a professional.manager eventually, if they could find one who was good enough._____so far so good.  but what if your manager was hit by a bus?  what.you really want is a management company to run your company for.you.  then you don't depend on any one person.if you own rental property, there are companies you can hire to.manage it for you.  some will do everything, from finding tenants.to fixing leaks.  of course, running companies is a lot more.complicated than managing rental property, but let's suppose there.were management companies that could do it for you. they'd charge.a lot, but wouldn't it be worth it?  i'd sacrifice a large percentage.of the income for the extra peace of mind.i realize what i'm describing already sounds too good to be true, but i.can think of a way to make it even more attractive.  if.company management companies existed, there would be an additional.service they could offer clients: they could let them insure their.returns by pooling their risk.  after all, even a perfect manager can't save a company.when, as sometimes happens, its whole market dies, just as property.managers can't save you from the building burning down.  but a.company that managed a large enough number of companies could say.to all its clients: we'll combine the revenues from all your.companies, and pay you your proportionate share.if such management companies existed, they'd offer the maximum of.freedom and security.  someone would run your company for you, and.you'd be protected even if it happened to die.let's think about how such a management company might be organized..the simplest way would be to have a new kind of stock representing.the total pool of companies they were managing.  when you signed.up, you'd trade your company's stock for shares of this pool, in.proportion to an estimate of your company's value that you'd both.agreed upon.  then you'd automatically get your share of the returns.of the whole pool.the catch is that because this kind of trade would be hard to undo,.you couldn't switch management companies.  but there's a way they.could fix that: suppose all the company management companies got.together and agreed to allow their clients to exchange shares in.all their pools.  then you could, in effect, simultaneously choose.all the management companies to run yours for you, in whatever.proportion you wanted, and change your mind later as often as you.wanted.if such pooled-risk company management companies existed, signing.up with one would seem the ideal plan for most people following the.route david advocated.good news: they do exist.  what i've just.described is an acquisition by a public company._____unfortunately, though public acquirers are structurally identical.to pooled-risk company management companies, they don't think of.themselves that way.  with a property management company, you can.just walk in whenever you want and say "manage my rental property.for me" and they'll do it.  whereas acquirers are, as of this.writing, extremely fickle.  sometimes they're in a buying mood and.they'll overpay enormously; other times they're not interested..they're like property management companies run by madmen.  or more.precisely, by benjamin graham's mr. market.so while on average public acquirers behave like pooled-risk company.managers, you need a window of several years to get average case.performance.  if you wait long enough (five years, say) you're.likely to hit an up cycle where some acquirer is hot to buy you..but you can't choose when it happens.you can't assume investors will carry you for as long as you might.have to wait. your company has to make money.  opinions are divided.about how early to focus on that..joe kraus says you should try.charging customers right away.  and yet some of the most successful.startups, including google, ignored revenue at first and concentrated.exclusively on development.  the answer probably depends on the.type of company you're starting.  i can imagine some where trying.to make sales would be a good heuristic for product design, and.others where it would just be a distraction.  the test is probably.whether it helps you to understand your users.you can choose whichever revenue strategy you think is best for the.type of company you're starting, so long as you're profitable..being profitable ensures you'll get at least the average of the.acquisition market—in which public companies do behave as pooled-risk.company management companies.david isn't mistaken in saying you should start a company to live.off its revenues.  the mistake is thinking this is somehow opposed.to starting a company and selling it.  in fact, for most people the.latter is merely the optimal case of the former.thanks to trevor blackwell, jessica livingston, michael.mandel, robert morris, and fred wilson for reading drafts of this..russian translation<eot><sot>cities and ambition.may 2008
.great cities attract ambitious people.  you can sense it when you.walk around one.  in a hundred subtle ways, the city sends you a.message: you could do more; you should try harder.the surprising thing is how different these messages can be.  new.york tells you, above all: you should make more money.  there are.other messages too, of course.  you should be hipper.  you should.be better looking.  but the clearest message is that you should be.richer.what i like about boston (or rather cambridge) is that the message.there is: you should be smarter.  you really should get around to.reading all those books you've been meaning to.when you ask what message a city sends, you sometimes get surprising.answers.  as much as they respect brains in silicon valley, the.message the valley sends is: you should be more powerful.that's not quite the same message new york sends.  power matters.in new york too of course, but new york is pretty impressed by a.billion dollars even if you merely inherited it.  in silicon valley.no one would care except a few real estate agents.  what matters.in silicon valley is how much effect you have on the world.  the.reason people there care about larry and sergey is not their wealth.but the fact that they control google, which affects practically.everyone._____how much does it matter what message a city sends?  empirically,.the answer seems to be: a lot. you might think that if you had.enough strength of mind to do great things, you'd be able to transcend.your environment.  where you live should make at most a couple.percent difference.  but if you look at the historical evidence,.it seems to matter more than that.  most people who did great things.were clumped together in a few places where that sort of thing was.done at the time.you can see how powerful cities are from something i wrote about.earlier: the case of the milanese leonardo..practically every.fifteenth century italian painter you've heard of was from florence,.even though milan was just as big.  people in florence weren't.genetically different, so you have to assume there was someone born.in milan with as much natural ability as leonardo.  what happened.to him?if even someone with the same natural ability as leonardo.couldn't beat the force of environment, do you suppose you can?i don't.  i'm fairly stubborn, but i wouldn't try to fight this.force.  i'd rather use it.  so i've thought a lot about where to.live.i'd always imagined berkeley would be the ideal place — that.it would basically be cambridge with good weather.  but when i.finally tried living there a couple years ago, it turned out not.to be.  the message berkeley sends is: you should live better.  life.in berkeley is very civilized.  it's probably the place in america.where someone from northern europe would feel most at home.  but.it's not humming with ambition.in retrospect it shouldn't have been surprising that a place so.pleasant would attract people interested above all in quality of.life.  cambridge with good weather, it turns out, is not cambridge..the people you find in cambridge are not there by accident.  you.have to make sacrifices to live there.  it's expensive and somewhat.grubby, and the weather's often bad.  so the kind of people you.find in cambridge are the kind of people who want to live where the.smartest people are, even if that means living in an expensive,.grubby place with bad weather.as of this writing, cambridge seems to be the intellectual capital.of the world.  i realize that seems a preposterous claim.  what.makes it true is that it's more preposterous to claim about anywhere.else.  american universities currently seem to be the best, judging.from the flow of ambitious students.  and what us city has a stronger.claim?  new york?  a fair number of smart people, but diluted by a.much larger number of neanderthals in suits.  the bay area has a.lot of smart people too, but again, diluted;  there are two great.universities, but they're far apart.  harvard and mit are practically.adjacent by west coast standards, and they're surrounded by about.20 other colleges and universities..[1]cambridge as a result feels like a town whose main industry is.ideas, while new york's is finance and silicon valley's is startups._____when you talk about cities in the sense we are, what you're really.talking about is collections of people.  for a long time cities.were the only large collections of people, so you could use the two.ideas interchangeably.  but we can see how much things are changing.from the examples i've mentioned.  new york is a classic great city..but cambridge is just part of a city, and silicon valley is not.even that.  (san jose is not, as it sometimes claims, the capital.of silicon valley.  it's just 178 square miles at one end of it.)maybe the internet will change things further.  maybe one day the.most important community you belong to will be a virtual one, and.it won't matter where you live physically.  but i wouldn't bet on.it.  the physical world is very high bandwidth, and some of the.ways cities send you messages are quite subtle.one of the exhilarating things about coming back to cambridge every.spring is walking through the streets at dusk, when you can see.into the houses.  when you walk through palo alto in the evening,.you see nothing but the blue glow of tvs.  in cambridge you see.shelves full of promising-looking books.  palo alto was probably.much like cambridge in 1960, but you'd never guess now that there.was a university nearby.  now it's just one of the richer neighborhoods.in silicon valley..[2]a city speaks to you mostly by accident — in things you see.through windows, in conversations you overhear.  it's not something.you have to seek out, but something you can't turn off.  one of the.occupational hazards of living in cambridge is overhearing the.conversations of people who use interrogative intonation in declarative.sentences.  but on average i'll take cambridge conversations over.new york or silicon valley ones.a friend who moved to silicon valley in the late 90s said the worst.thing about living there was the low quality of the eavesdropping..at the time i thought she was being deliberately eccentric. sure,.it can be interesting to eavesdrop on people, but is good quality.eavesdropping so important that it would affect where you chose to.live?  now i understand what she meant.  the conversations you.overhear tell you what sort of people you're among._____no matter how determined you are, it's hard not to be influenced.by the people around you.  it's not so much that you do whatever a.city expects of you, but that you get discouraged when no one around.you cares about the same things you do.there's an imbalance between encouragement and discouragement like.that between gaining and losing money.  most people overvalue.negative amounts of money: they'll work much harder to avoid losing.a dollar than to gain one.  similarly, although there are plenty of.people strong enough to resist doing something just because that's.what one is supposed to do where they happen to be, there are few.strong enough to keep working on something no one around them cares.about.because ambitions are to some extent incompatible and admiration.is a zero-sum game, each city tends to focus on one type of ambition..the reason cambridge is the intellectual capital is not just that.there's a concentration of smart people there, but that there's.nothing else people there care about more.  professors in.new york and the bay area are second class citizens — till they.start hedge funds or startups respectively.this suggests an answer to a question people in new york have.wondered about since the bubble: whether new york could grow into.a startup hub to rival silicon valley.  one reason that's unlikely.is that someone starting a startup in new york would feel like a.second class citizen..[3].there's already something else people in new york admire more.in the long term, that could be a bad thing for new york.  the power.of an important new technology does eventually convert to money..so by caring more about money and less about power than silicon.valley, new york is recognizing the same thing, but slower..[4].and in fact it has been losing to silicon valley at its own game:.the ratio of new york to california residents in the forbes 400 has.decreased from 1.45 (81:56) when the list was first published in.1982 to .83 (73:88) in 2007._____not all cities send a message.  only those that are centers for.some type of ambition do.  and it can be hard to tell exactly what.message a city sends without living there.  i understand the messages.of new york, cambridge, and silicon valley because i've lived for.several years in each of them.  dc and la seem to send messages.too, but i haven't spent long enough in either to say for sure what.they are.the big thing in la seems to be fame.  there's an a list of people.who are most in demand right now, and what's most admired is to be.on it, or friends with those who are.  beneath that, the message is.much like new york's, though perhaps with more emphasis on physical.attractiveness.in dc the message seems to be that the most important thing is who.you know.  you want to be an insider.  in practice this seems to.work much as in la.  there's an a list and you want to be on it or.close to those who are.  the only difference is how the a list is.selected.  and even that is not that different.at the moment, san francisco's message seems to be the same as.berkeley's: you should live better.  but this will change if enough.startups choose sf over the valley.  during the bubble that was a.predictor of failure — a self-indulgent choice, like buying.expensive office furniture.  even now i'm suspicious when startups.choose sf.  but if enough good ones do, it stops being a self-indulgent.choice, because the center of gravity of silicon valley will shift.there.i haven't found anything like cambridge for intellectual ambition..oxford and cambridge (england) feel like ithaca or hanover: the.message is there, but not as strong.paris was once a great intellectual center.  if you went there in.1300, it might have sent the message cambridge does now.  but i.tried living there for a bit last year, and the ambitions of the.inhabitants are not intellectual ones.  the message paris sends now.is: do things with style.  i liked that, actually.  paris is the.only city i've lived in where people genuinely cared about art.  in.america only a few rich people buy original art, and even the more.sophisticated ones rarely get past judging it by the brand name of.the artist.  but looking through windows at dusk in paris you can.see that people there actually care what paintings look like..visually, paris has the best eavesdropping i know..[5]there's one more message i've heard from cities: in london you can.still (barely) hear the message that one should be more aristocratic..if you listen for it you can also hear it in paris, new york, and.boston.  but this message is everywhere very faint.  it would have.been strong 100 years ago, but now i probably wouldn't have picked.it up at all if i hadn't deliberately tuned in to that wavelength.to see if there was any signal left._____so far the complete list of messages i've picked up from cities is:.wealth, style, hipness, physical attractiveness, fame, political.power, economic power, intelligence, social class, and quality of.life.my immediate reaction to this list is that it makes me slightly.queasy.  i'd always considered ambition a good thing, but i realize.now that was because i'd always implicitly understood it to mean.ambition in the areas i cared about.  when you list everything.ambitious people are ambitious about, it's not so pretty.on closer examination i see a couple things on the list that are.surprising in the light of history.  for example, physical.attractiveness wouldn't have been there 100 years ago (though it.might have been 2400 years ago).  it has always mattered for women,.but in the late twentieth century it seems to have started to matter.for men as well.  i'm not sure why — probably some combination.of the increasing power of women, the increasing influence of actors.as models, and the fact that so many people work in offices now:.you can't show off by wearing clothes too fancy to wear in a factory,.so you have to show off with your body instead.hipness is another thing you wouldn't have seen on the list 100.years ago.  or wouldn't you?  what it means is to know what's what..so maybe it has simply replaced the component of social class that.consisted of being "au fait."  that could explain why hipness seems.particularly admired in london: it's version 2 of the traditional.english delight in obscure codes that only insiders understand.economic power would have been on the list 100 years ago, but what.we mean by it is changing.  it used to mean the control of vast.human and material resources.  but increasingly it means the ability.to direct the course of technology, and some of the people in a.position to do that are not even rich — leaders of important.open source projects, for example.  the captains of industry of.times past had laboratories full of clever people cooking up new.technologies for them.  the new breed are themselves those people.as this force gets more attention, another is dropping off the list:.social class.  i think the two changes are related.  economic power,.wealth, and social class are just names for the same thing at.different stages in its life: economic power converts to wealth,.and wealth to social class.  so the focus of admiration is simply.shifting upstream._____does anyone who wants to do great work have to live in a great city?.no; all great cities inspire some sort of ambition, but they aren't.the only places that do.  for some kinds of work, all you need is.a handful of talented colleagues.what cities provide is an audience, and a funnel for peers.  these.aren't so critical in something like math or physics, where no.audience matters except your peers, and judging ability is sufficiently.straightforward that hiring and admissions committees can do it.reliably.  in a field like math or physics all you need is a.department with the right colleagues in it.  it could be anywhere — in.los alamos, new mexico, for example.it's in fields like the arts or writing or technology that the.larger environment matters.  in these the best practitioners aren't.conveniently collected in a few top university departments and.research labs — partly because talent is harder to judge, and.partly because people pay for these things, so one doesn't need to.rely on teaching or research funding to support oneself.  it's in.these more chaotic fields that it helps most to be in a great city:.you need the encouragement of feeling that people around you care.about the kind of work you do, and since you have to find peers for.yourself, you need the much larger intake mechanism of a great city.you don't have to live in a great city your whole life to benefit.from it.  the critical years seem to be the early and middle ones.of your career.  clearly you don't have to grow up in a great city..nor does it seem to matter if you go to college in one.  to most.college students a world of a few thousand people seems big enough..plus in college you don't yet have to face the hardest kind of.work — discovering new problems to solve.it's when you move on to the next and much harder step that it helps.most to be in a place where you can find peers and encouragement..you seem to be able to leave, if you want, once you've found both..the impressionists show the typical pattern: they were born all.over france (pissarro was born in the carribbean) and died all over.france, but what defined them were the years they spent together.in paris._____unless you're sure what you want to do and where the leading center.for it is, your best bet is probably to try living in several.places when you're young.  you can never tell what message a city.sends till you live there, or even whether it still sends one..often your information will be wrong: i tried living in florence.when i was 25, thinking it would be an art center, but it turned.out i was 450 years too late.even when a city is still a live center of ambition, you won't know.for sure whether its message will resonate with you till you hear.it.  when i moved to new york, i was very excited at first.  it's.an exciting place.  so it took me quite a while to realize i just.wasn't like the people there.  i kept searching for the cambridge.of new york.  it turned out it was way, way uptown: an hour uptown.by air.some people know at 16 what sort of work they're going to do, but.in most ambitious kids, ambition seems to precede anything specific.to be ambitious about.  they know they want to do something great..they just haven't decided yet whether they're going to be a rock.star or a brain surgeon.  there's nothing wrong with that.  but it.means if you have this most common type of ambition, you'll probably.have to figure out where to live by trial and error.  you'll.probably have to find the city where you feel at home to know what sort of.ambition you have.notes[1].this is one of the advantages of not having the universities.in your country controlled by the government.  when governments.decide how to allocate resources, political deal-making causes.things to be spread out geographically.  no central goverment would.put its two best universities in the same town, unless it was the.capital (which would cause other problems).  but scholars seem to.like to cluster together as much as people in any other field, and.when given the freedom to they derive the same advantages from it.[2].there are still a few old professors in palo alto, but one by.one they die and their houses are transformed by developers into.mcmansions and sold to vps of bus dev.[3].how many times have you read about startup founders who continued.to live inexpensively as their companies took off?  who continued.to dress in jeans and t-shirts, to drive the old car they had in.grad school, and so on?  if you did that in new york, people would.treat you like shit.  if you walk into a fancy restaurant in san.francisco wearing a jeans and a t-shirt, they're nice to you; who.knows who you might be?  not in new york.one sign of a city's potential as a technology center is the number.of restaurants that still require jackets for men.  according to.zagat's there are none in san francisco, la, boston, or seattle,.4 in dc, 6 in chicago, 8 in london, 13 in new york, and 20 in paris.(zagat's lists the ritz carlton dining room in sf as requiring jackets.but i couldn't believe it, so i called to check and in fact they.don't. apparently there's only one restaurant left on the entire west.coast that still requires jackets: the french laundry in napa valley.)[4].ideas are one step upstream from economic power, so it's.conceivable that intellectual centers like cambridge will one day.have an edge over silicon valley like the one the valley has over.new york.this seems unlikely at the moment; if anything boston is falling.further and further behind.  the only reason i even mention the.possibility is that the path from ideas to startups has recently.been getting smoother.  it's a lot easier now for a couple of hackers.with no business experience to start a startup than it was 10 years.ago.  if you extrapolate another 20 years, maybe the balance of.power will start to shift back.  i wouldn't bet on it, but i wouldn't.bet against it either.[5].if paris is where people care most about art, why is new york.the center of gravity of the art business?  because in the twentieth.century, art as brand split apart from art as stuff.  new york is.where the richest buyers are, but all they demand from art is brand,.and since you can base brand on anything with a sufficiently.identifiable style, you may as well use the local stuff.thanks to trevor blackwell, sarah harlin, jessica livingston,.jackie mcdonough, robert morris, and david sloo for reading drafts.of this.italian translationportuguese translationchinese translationkorean translation<eot><sot>disconnecting distraction.note: the strategy described at the end of this essay didn't work..it would work for a while, and then i'd gradually find myself.using the internet on my work computer.  i'm trying other.strategies now, but i think this time i'll wait till i'm sure.they work before writing about them.may 2008
procrastination feeds on distractions.  most people find it.uncomfortable just to sit and do nothing; you avoid work by doing.something else.so one way to beat procrastination is to starve it of distractions..but that's not as straightforward as it sounds, because there are.people working hard to distract you.  distraction is not a static.obstacle that you avoid like you might avoid a rock in the road..distraction seeks you out.chesterfield described dirt as matter out of place.  distracting.is, similarly, desirable at the wrong time.  and technology is.continually being refined to produce more and more desirable things..which means that as we learn to avoid one class of distractions,.new ones constantly appear, like drug-resistant bacteria.television, for example, has after 50 years of refinement reached.the point where it's like visual crack.  i realized when i was 13.that tv was addictive, so i stopped watching it.  but i read recently.that the average american watches.4 hours.of tv a day.  a quarter.of their life.tv is in decline now, but only because people have found even more.addictive ways of wasting time.  and what's especially dangerous.is that many happen at your computer.  this is no accident.  an.ever larger percentage of office workers sit in front of computers.connected to the internet, and distractions always evolve toward.the procrastinators.i remember when computers were, for me at least, exclusively for.work.  i might occasionally dial up a server to get mail or ftp.files, but most of the time i was offline.  all i could do was write.and program.  now i feel as if someone snuck a television onto my.desk.  terribly addictive things are just a click away.  run into.an obstacle in what you're working on?  hmm, i wonder what's new.online.  better check.after years of carefully avoiding classic time sinks like tv, games,.and usenet, i still managed to fall prey to distraction, because.i didn't realize that it evolves.  something that used to be safe,.using the internet, gradually became more and more dangerous.  some.days i'd wake up, get a cup of tea and check the news, then check.email, then check the news again, then answer a few emails, then.suddenly notice it was almost lunchtime and i hadn't gotten any real.work done.  and this started to happen more and more often.it took me surprisingly long to realize how distracting the internet.had become, because the problem was intermittent.  i ignored it the.way you let yourself ignore a bug that only appears intermittently.  when.i was in the middle of a project, distractions weren't really a.problem.  it was when i'd finished one project and was deciding.what to do next that they always bit me.another reason it was hard to notice the danger of this new type.of distraction was that social customs hadn't yet caught up with.it.  if i'd spent a whole morning sitting on a sofa watching tv,.i'd have noticed very quickly.  that's a known danger sign, like.drinking alone.  but using the internet still looked and felt a.lot like work.eventually, though, it became clear that the internet had become so much.more distracting that i had to start treating it differently..basically, i had to add a new application to my list of known time.sinks: firefox.* * *the problem is a hard one to solve because most people still need.the internet for some things.  if you drink too much, you can solve.that problem by stopping entirely.  but you can't solve the problem.of overeating by stopping eating.  i couldn't simply avoid the.internet entirely, as i'd done with previous time sinks.at first i tried rules.  for example, i'd tell myself i was only.going to use the internet twice a day.  but these schemes never.worked for long.  eventually something would come up that required.me to use it more than that.  and then i'd gradually slip back.into my old ways.addictive things have to be treated as if they were sentient.adversaries—as if there were a little man in your head always.cooking up the most plausible arguments for doing whatever you're.trying to stop doing.  if you leave a path to it, he'll find it.the key seems to be visibility.  the biggest ingredient in most bad habits.is denial.  so you have to make it so that you can't merely slip.into doing the thing you're trying to avoid.  it has to set off.alarms.maybe in the long term the right answer for dealing with internet.distractions will be.software that watches and controls them.  but.in the meantime i've found a more drastic solution that definitely.works: to set up a separate computer for using the internet.i now leave wifi turned off on my main computer except when i need.to transfer a file or edit a web page, and i have a separate laptop.on the other side.of the room that i use to check mail or browse the web.  (irony of.ironies, it's the computer steve huffman wrote reddit on.  when.steve and alexis auctioned off their old laptops for charity, i.bought them for the y combinator museum.)my rule is that i can spend as much time online as i want, as long.as i do it on that computer.  and this turns out to be enough.  when.i have to sit on the other side of the room to check email or browse.the web, i become much more aware of it.  sufficiently aware, in.my case at least, that it's hard to spend more than about an hour.a day online.and my main computer is now freed for work.  if you try this trick,.you'll probably be struck by how different it feels when your.computer is disconnected from the internet.  it was alarming to me.how foreign it felt to sit in front of a computer that could.only be used for work, because that showed how much time i must.have been wasting.wow.  all i can do at this computer is work.  ok, i better work.then.that's the good part.  your old bad habits now help you to work..you're used to sitting in front of that computer for hours at a.time.   but you can't browse the web or check email now.  what are.you going to do?  you can't just sit there.  so you start working.good and bad procrastinationspanish translationarabic translationcatalan translationrussian translationspanish translation<eot><sot>lies we tell kids.may 2008
adults lie constantly to kids.  i'm not saying we should stop, but.i think we should at least examine which lies we tell and why.there may also be a benefit to us.  we were all lied to as kids,.and some of the lies we were told still affect us.  so by studying.the ways adults lie to kids, we may be able to clear our heads of.lies we were told.i'm using the word "lie" in a very general sense: not just overt.falsehoods, but also all the more subtle ways we mislead kids..though "lie" has negative connotations, i don't mean to suggest we.should never do this—just that we should pay attention when.we do..[1]one of the most remarkable things about the way we lie to kids is.how broad the conspiracy is.  all adults know what their culture.lies to kids about: they're the questions you answer "ask.your parents."  if a kid asked who won the world series in 1982.or what the atomic weight of carbon was, you could just tell him..but if a kid asks you "is there a god?" or "what's a prostitute?".you'll probably say "ask your parents."since we all agree, kids see few cracks in the view of the world.presented to them.  the biggest disagreements are between parents.and schools, but even those are small. schools are careful what.they say about controversial topics, and if they do contradict what.parents want their kids to believe, parents either pressure the.school into keeping.quiet or move their kids to a new school.the conspiracy is so thorough that most kids who discover it do so.only by discovering internal contradictions in what they're told..it can be traumatic for the ones who wake up during the operation..here's what happened to einstein:.through the reading of popular scientific books i soon reached.the conviction that much in the stories of the bible could not.be true.  the consequence was a positively fanatic freethinking.coupled with the impression that youth is intentionally being.deceived by the state through lies: it was a crushing impression..[2].i remember that feeling.  by 15 i was convinced the world was corrupt.from end to end.  that's why movies like the matrix have such.resonance.  every kid grows up in a fake world.  in a way it would.be easier if the forces behind it were as clearly differentiated.as a bunch of evil machines, and one could make a clean break just by.taking a pill..protectionif you ask adults why they lie to kids, the most common reason they.give is to protect them.  and kids do need protecting.  the environment.you want to create for a newborn child will be quite unlike the.streets of a big city.that seems so obvious it seems wrong to call it a lie.  it's certainly.not a bad lie to tell, to give a baby the impression the world is.quiet and warm and safe.  but this harmless type of lie can turn.sour if left unexamined.imagine if you tried to keep someone in as protected an environment.as a newborn till age 18.  to mislead someone so grossly about the.world would seem not protection but abuse.  that's an extreme.example, of course; when parents do that sort of thing it becomes.national news.  but you see the same problem on a smaller scale in.the malaise teenagers feel in suburbia.the main purpose of suburbia is to provide a protected environment.for children to grow up in.  and it seems great for 10 year olds..i liked living in suburbia when i was 10.  i didn't notice how.sterile it was.  my whole world was no bigger than a few friends'.houses i bicycled to and some woods i ran around in.  on a log scale.i was midway between crib and globe.  a suburban street was just.the right size.  but as i grew older, suburbia started to feel.suffocatingly fake.life can be pretty good at 10 or 20, but it's often frustrating at.15.  this is too big a problem to solve here, but certainly one.reason life sucks at 15 is that kids are trapped in a world designed.for 10 year olds.what do parents hope to protect their children from by raising them.in suburbia?  a friend who moved out of manhattan said merely that.her 3 year old daughter "saw too much."  off the top of my head,.that might include: people who are high or drunk, poverty, madness,.gruesome medical conditions, sexual behavior of various degrees of.oddness, and violent anger.i think it's the anger that would worry me most if i had a 3 year.old.  i was 29 when i moved to new york and i was surprised even.then.  i wouldn't want a 3 year old to see some of the disputes i.saw.  it would be too frightening.  a lot of the things adults.conceal from smaller children, they conceal because they'd be.frightening, not because they want to conceal the existence of such.things.  misleading the child is just a byproduct.this seems one of the most justifiable types of lying adults do to.kids.  but because the lies are indirect we don't keep a very strict.accounting of them.  parents know they've concealed the facts about.sex, and many at some point sit their kids down and explain more..but few tell their kids about the differences between the real world.and the cocoon they grew up in.  combine this with the confidence.parents try to instill in their kids, and every year you get a new.crop of 18 year olds who think they know how to run the world.don't all 18 year olds think they know how to run the world?  actually.this seems to be a recent innovation, no more than about 100 years old..in preindustrial times teenage kids were junior members of the adult.world and comparatively well aware of their shortcomings.  they.could see they weren't as strong or skillful as the village smith..in past times people lied to kids about some things more than we.do now, but the lies implicit in an artificial, protected environment.are a recent invention.  like a lot of new inventions, the rich got.this first.  children of kings and great magnates were the first.to grow up out of touch with the world.  suburbia means half the.population can live like kings in that respect..sex (and drugs)i'd have different worries about raising teenage kids in new york..i'd worry less about what they'd see, and more about what they'd.do.  i went to college with a lot of kids who grew up in manhattan,.and as a rule they seemed pretty jaded.  they seemed to have lost.their virginity at an average of about 14 and by college had tried.more drugs than i'd even heard of.the reasons parents don't want their teenage kids having sex are.complex.  there are some obvious dangers: pregnancy and sexually.transmitted diseases.  but those aren't the only reasons parents.don't want their kids having sex.  the average parents of a 14 year.old girl would hate the idea of her having sex even if there were.zero risk of pregnancy or sexually transmitted diseases.kids can probably sense they aren't being told the whole story..after all, pregnancy and sexually transmitted diseases are just as.much a problem for adults, and they have sex.what really bothers parents about their teenage kids having sex?.their dislike of the idea is so visceral it's probably inborn.  but.if it's inborn it should be universal, and there are plenty of.societies where parents don't mind if their teenage kids have.sex—indeed, where it's normal for 14 year olds to become.mothers.  so what's going on?  there does seem to be a universal.taboo against sex with prepubescent children.  one can imagine.evolutionary reasons for that.  and i think this is the main reason.parents in industrialized societies dislike teenage kids having.sex.  they still think of them as children, even though biologically.they're not, so the taboo against child sex still has force.one thing adults conceal about sex they also conceal about drugs:.that it can cause great pleasure.  that's what makes sex and drugs.so dangerous. the desire for them can cloud one's judgement—which.is especially frightening when the judgement being clouded is the.already wretched judgement of a teenage kid.here parents' desires conflict.  older societies told kids they had.bad judgement, but modern parents want their children to be confident..this may well be a better plan than the old one of putting them in.their place, but it has the side effect that after having implicitly.lied to kids about how good their judgement is, we then have to lie.again about all the things they might get into trouble with if they.believed us.if parents told their kids the truth about sex and drugs, it would.be: the reason you should avoid these things is that you have lousy.judgement.  people with twice your experience still get burned by.them.  but this may be one of those cases where the truth wouldn't.be convincing, because one of the symptoms of bad judgement is.believing you have good judgement.  when you're too weak to lift.something, you can tell, but when you're making a decision impetuously,.you're all the more sure of it..innocenceanother reason parents don't want their kids having sex is that.they want to keep them innocent.  adults have a certain model of.how kids are supposed to behave, and it's different from what they.expect of other adults.one of the most obvious differences is the words kids are allowed.to use.  most parents use words when talking to other adults that.they wouldn't want their kids using.  they try to hide even the.existence of these words for as long as they can.  and this is.another of those conspiracies everyone participates in: everyone.knows you're not supposed to swear in front of kids.i've never heard more different explanations for anything parents.tell kids than why they shouldn't swear.  every parent i know forbids.their children to swear, and yet no two of them have the same.justification.  it's clear most start with not wanting kids to.swear, then make up the reason afterward.so my theory about what's going on is that the function of.swearwords is to mark the speaker as an adult.  there's no difference.in the meaning of "shit" and "poopoo."  so why should one be ok for.kids to say and one forbidden?  the only explanation is: by definition..[3]why does it bother adults so much when kids do things reserved for.adults?   the idea of a foul-mouthed, cynical 10 year old leaning.against a lamppost with a cigarette hanging out of the corner of.his mouth is very disconcerting.  but why?one reason we want kids to be innocent is that we're programmed to.like certain kinds of helplessness.  i've several times heard mothers.say they deliberately refrained from correcting their young children's.mispronunciations because they were so cute.  and if you think about.it, cuteness is helplessness. toys and cartoon characters meant to.be cute always have clueless expressions and stubby, ineffectual.limbs.it's not surprising we'd have an inborn desire to love and protect.helpless creatures, considering human offspring are so helpless for.so long.  without the helplessness that makes kids cute, they'd be.very annoying.  they'd merely seem like incompetent adults.  but.there's more to it than that.  the reason our hypothetical jaded.10 year old bothers me so much is not just that he'd be annoying,.but that he'd have cut off his prospects for growth so early.  to.be jaded you have to think you know how the world works, and any.theory a 10 year old had about that would probably be a pretty.narrow one.innocence is also open-mindedness.  we want kids to be innocent so.they can continue to learn.  paradoxical as it sounds, there are.some kinds of knowledge that get in the way of other kinds of.knowledge.  if you're going to learn that the world is a brutal.place full of people trying to take advantage of one another, you're.better off learning it last.  otherwise you won't bother learning.much more.very smart adults often seem unusually innocent, and i don't think.this is a coincidence.  i think they've deliberately avoided learning.about certain things.  certainly i do.  i used to think i wanted.to know everything.  now i know i don't..deathafter sex, death is the topic adults lie most conspicuously about.to kids.  sex i believe they conceal because of deep taboos.  but.why do we conceal death from kids?   probably because small children.are particularly horrified by it.  they want to feel safe, and death.is the ultimate threat.one of the most spectacular lies our parents told us was about the.death of our first cat.  over the years, as we asked for more.details, they were compelled to invent more, so the story grew quite.elaborate.  the cat had died at the vet's office.  of what?  of the.anaesthesia itself.  why was the cat at the vet's office?  to be.fixed.  and why had such a routine operation killed it?  it wasn't.the vet's fault; the cat had a congenitally weak heart; the anaesthesia.was too much for it; but there was no way anyone could have.known this in advance.  it was not till we were in our twenties.that the truth came out: my sister, then about three, had accidentally.stepped on the cat and broken its back.they didn't feel the need to tell us the cat was now happily in cat.heaven.  my parents never claimed that people or animals who died.had "gone to a better place," or that we'd meet them again.  it.didn't seem to harm us.my grandmother told us an edited version of the death of my.grandfather.  she said they'd been sitting reading one day, and.when she said something to him, he didn't answer.  he seemed to be.asleep, but when she tried to rouse him, she couldn't.  "he was.gone." having a heart attack sounded like falling asleep.  later i.learned it hadn't been so neat, and the heart attack had taken most.of a day to kill him.along with such outright lies, there must have been a lot of changing.the subject when death came up.  i can't remember that, of course,.but i can infer it from the fact that i didn't really grasp i was.going to die till i was about 19.  how could i have missed something.so obvious for so long?  now that i've seen parents managing the.subject, i can see how: questions about death are gently but firmly.turned aside.on this topic, especially, they're met half-way by kids.  kids often.want to be lied to.  they want to believe they're living in a.comfortable, safe world as much as their parents want them to believe.it..[4].identitysome parents feel a strong adherence to an ethnic or religious group.and want their kids to feel it too.  this usually requires two.different kinds of lying: the first is to tell the child that he.or she is an x, and the second is whatever specific lies xes.differentiate themselves by believing..[5]telling a child they have a particular ethnic or religious identity.is one of the stickiest things you can tell them.  almost anything.else you tell a kid, they can change their mind about later when.they start to think for themselves.  but if you tell a kid they're.a member of a certain group, that seems nearly impossible to shake.this despite the fact that it can be one of the most premeditated.lies parents tell.  when parents are of different religions, they'll.often agree between themselves that their children will be "raised.as xes."  and it works. the kids obligingly grow up considering.themselves as xes, despite the fact that if their parents had chosen.the other way, they'd have grown up considering themselves as ys.one reason this works so well is the second kind of lie involved..the truth is common property.  you can't distinguish your group by.doing things that are rational, and believing things that are true..if you want to set yourself apart from other people, you have to.do things that are arbitrary, and believe things that are false..and after having spent their whole lives doing things that are arbitrary.and believing things that are false, and being regarded as odd by."outsiders" on that account, the cognitive dissonance pushing.children to regard themselves as xes must be enormous.  if they.aren't an x, why are they attached to all these arbitrary beliefs.and customs?  if they aren't an x, why do all the non-xes call them.one?this form of lie is not without its uses.  you can use it to carry.a payload of beneficial beliefs, and they will also become part of.the child's identity.  you can tell the child that in addition to.never wearing the color yellow, believing the world was created by.a giant rabbit, and always snapping their fingers before eating.fish, xes are also particularly honest and industrious.  then x.children will grow up feeling it's part of their identity to be.honest and industrious.this probably accounts for a lot of the spread of modern religions,.and explains why their doctrines are a combination of the useful.and the bizarre.  the bizarre half is what makes the religion stick,.and the useful half is the payload..[6].authorityone of the least excusable reasons adults lie to kids is to maintain.power over them.  sometimes these lies are truly sinister, like a.child molester telling his victims they'll get in trouble if they.tell anyone what happened to them.  others seem more innocent; it.depends how badly adults lie to maintain their power, and what they.use it for.most adults make some effort to conceal their flaws from children..usually their motives are mixed.  for example, a father who has an.affair generally conceals it from his children.  his motive is.partly that it would worry them, partly that this would introduce.the topic of sex, and partly (a larger part than he would admit).that he doesn't want to tarnish himself in their eyes.if you want to learn what lies are told to kids, read almost any.book written to teach them about "issues.".[7].peter mayle wrote.one called why are we getting a divorce?  it begins with the three.most important things to remember about divorce, one of which is:.you shouldn't put the blame on one parent, because divorce is.never only one person's fault..[8].really?  when a man runs off with his secretary, is it always partly.his wife's fault?  but i can see why mayle might have said this..maybe it's more important for kids to respect their parents than.to know the truth about them.but because adults conceal their flaws, and at the same time insist.on high standards of behavior for kids, a lot of kids grow up feeling.they fall hopelessly short.  they walk around feeling horribly evil.for having used a swearword, while in fact most of the adults around.them are doing much worse things.this happens in intellectual as well as moral questions.  the more.confident people are, the more willing they seem to be to answer a.question "i don't know."  less confident people feel they have to.have an answer or they'll look bad.  my parents were pretty good.about admitting when they didn't know things, but i must have been.told a lot of lies of this type by teachers, because i rarely heard.a teacher say "i don't know" till i got to college.  i remember.because it was so surprising to hear someone say that in front of.a class.the first hint i had that teachers weren't omniscient came in sixth.grade, after my father contradicted something i'd learned in school..when i protested that the teacher had said the opposite, my father.replied that the guy had no idea what he was talking about—that.he was just an elementary school teacher, after all.just a teacher?  the phrase seemed almost grammatically ill-formed..didn't teachers know everything about the subjects they taught?.and if not, why were they the ones teaching us?the sad fact is, us public school teachers don't generally understand.the stuff they're teaching very well.  there are some sterling.exceptions, but as a rule people planning to go into teaching rank.academically near the bottom of the college population.  so the.fact that i still thought at age 11 that teachers were infallible.shows what a job the system must have done on my brain..schoolwhat kids get taught in school is a complex mix of lies.  the most.excusable are those told to simplify ideas to make them easy to.learn.  the problem is, a lot of propaganda gets slipped into the.curriculum in the name of simplification.public school textbooks represent a compromise between what various.powerful groups want kids to be told.  the lies are rarely overt..usually they consist either of omissions or of over-emphasizing.certain topics at the expense of others.  the view of history we.got in elementary school was a crude hagiography, with at least one.representative of each powerful group.the famous scientists i remember were einstein, marie curie, and.george washington carver.   einstein was a big deal because his.work led to the atom bomb.  marie curie was involved with x-rays..but i was mystified about carver.  he seemed to have done stuff.with peanuts.it's obvious now that he was on the list because he was black (and.for that matter that marie curie was on it because she was a woman),.but as a kid i was confused for years about him.  i wonder if it.wouldn't have been better just to tell us the truth: that there.weren't any famous black scientists.  ranking george washington.carver with einstein misled us not only about science, but about.the obstacles blacks faced in his time.as subjects got softer, the lies got more frequent.  by the time.you got to politics and recent history, what we were taught was.pretty much pure propaganda.  for example, we were taught to regard.political leaders as saints—especially the recently martyred.kennedy and king.  it was astonishing to learn later that they'd.both been serial womanizers, and that kennedy was a speed freak to.boot.  (by the time king's plagiarism emerged, i'd lost the ability.to be surprised by the misdeeds of famous people.)i doubt you could teach kids recent history without teaching them.lies, because practically everyone who has anything to say about.it has some kind of spin to put on it.  much recent history consists.of spin.  it would probably be better just to teach them metafacts.like that.probably the biggest lie told in schools, though, is that the way.to succeed is through following "the rules."  in fact most such.rules are just hacks to manage large groups efficiently..peaceof all the reasons we lie to kids, the most powerful is probably.the same mundane reason they lie to us.often when we lie to people it's not part of any conscious strategy,.but because they'd react violently to the truth.  kids, almost by.definition, lack self-control.  they react violently to things—and.so they get lied to a lot..[9]a few thanksgivings ago, a friend of mine found himself in a situation.that perfectly illustrates the complex motives we have when we lie.to kids.  as the roast turkey appeared on the table, his alarmingly.perceptive 5 year old son suddenly asked if the turkey had wanted.to die.  foreseeing disaster, my friend and his wife rapidly.improvised: yes, the turkey had wanted to die, and in fact had lived.its whole life with the aim of being their thanksgiving dinner..and that (phew) was the end of that.whenever we lie to kids to protect them, we're usually also lying.to keep the peace.one consequence of this sort of calming lie is that we grow up.thinking horrible things are normal.  it's hard for us to feel a.sense of urgency as adults over something we've literally been.trained not to worry about.  when i was about 10 i saw a documentary.on pollution that put me into a panic.  it seemed the planet was.being irretrievably ruined.  i went to my mother afterward to ask.if this was so.  i don't remember what she said, but she made me.feel better, so i stopped worrying about it.that was probably the best way to handle a frightened 10 year old..but we should understand the price.  this sort of lie is one of the.main reasons bad things persist: we're all trained to ignore them..detoxa sprinter in a race almost immediately enters a state called "oxygen.debt."  his body switches to an emergency source of energy that's.faster than regular aerobic respiration.  but this process builds.up waste products that ultimately require extra oxygen to break.down, so at the end of the race he has to stop and pant for a while.to recover.we arrive at adulthood with a kind of truth debt.  we were told a.lot of lies to get us (and our parents) through our childhood.  some.may have been necessary.  some probably weren't.  but we all arrive.at adulthood with heads full of lies.there's never a point where the adults sit you down and explain all.the lies they told you.  they've forgotten most of them.  so if.you're going to clear these lies out of your head, you're going to.have to do it yourself.few do.  most people go through life with bits of packing material.adhering to their minds and never know it.  you probably never can.completely undo the effects of lies you were told as a kid, but.it's worth trying.  i've found that whenever i've been able to undo.a lie i was told, a lot of other things fell into place.fortunately, once you arrive at adulthood you get a valuable new.resource you can use to figure out what lies you were told.  you're.now one of the liars.  you get to watch behind the scenes as adults.spin the world for the next generation of kids.the first step in clearing your head is to realize how far you are.from a neutral observer.  when i left high school i was, i thought,.a complete skeptic.  i'd realized high school was crap.  i thought.i was ready to question everything i knew.  but among the many other.things i was ignorant of was how much debris there already was in.my head.  it's not enough to consider your mind a blank slate.  you.have to consciously erase it..notes[1].one reason i stuck with such a brutally simple word is that.the lies we tell kids are probably not quite as harmless as we.think.  if you look at what adults told children in the past, it's.shocking how much they lied to them.  like us, they did it with the.best intentions.  so if we think we're as open as one could reasonably.be with children, we're probably fooling ourselves.  odds are people.in 100 years will be as shocked at some of the lies we tell as we.are at some of the lies people told 100 years ago.i can't predict which these will be, and i don't want to write an.essay that will seem dumb in 100 years.  so instead of using special.euphemisms for lies that seem excusable according to present fashions,.i'm just going to call all our lies lies.(i have omitted one type: lies told to play games with kids'.credulity.  these range from "make-believe," which is not really a.lie because it's told with a wink, to the frightening lies told by.older siblings.   there's not much to say about these: i wouldn't.want the first type to go away, and wouldn't expect the second type.to.)[2].calaprice, alice (ed.), the quotable einstein, princeton.university press, 1996.[3].if you ask parents why kids shouldn't swear, the less educated.ones usually reply with some question-begging answer like "it's.inappropriate," while the more educated ones come up with elaborate.rationalizations.  in fact the less educated parents seem closer.to the truth.[4].as a friend with small children pointed out, it's easy for small.children to consider themselves immortal, because time seems to.pass so slowly for them.  to a 3 year old, a day feels like a month.might to an adult.  so 80 years sounds to him like 2400 years would.to us.[5].i realize i'm going to get endless grief for classifying religion.as a type of lie.  usually people skirt that issue with some.equivocation implying that lies believed for a sufficiently long.time by sufficiently large numbers of people are immune to the usual.standards for truth.  but because i can't predict which lies future.generations will consider inexcusable, i can't safely omit any type.we tell.  yes, it seems unlikely that religion will be out of fashion.in 100 years, but no more unlikely than it would have seemed to.someone in 1880 that schoolchildren in 1980 would be taught that.masturbation was perfectly normal and not to feel guilty about it.[6].unfortunately the payload can consist of bad customs as well.as good ones.  for example, there are certain qualities that some.groups in america consider "acting white."  in fact most of them.could as accurately be called "acting japanese."  there's nothing.specifically white about such customs. they're common to all cultures.with long traditions of living in cities.  so it is probably a.losing bet for a group to consider behaving the opposite way as.part of its identity.[7].in this context, "issues" basically means "things we're going.to lie to them about."  that's why there's a special name for these.topics.[8].mayle, peter, why are we getting a divorce?, harmony, 1988.[9].the ironic thing is, this is also the main reason kids lie to.adults.  if you freak out when people tell you alarming things,.they won't tell you them.  teenagers don't tell their parents what.happened that night they were supposed to be staying at a friend's.house for the same reason parents don't tell 5 year olds the truth.about the thanksgiving turkey.  they'd freak if they knew..thanks to sam altman, marc andreessen, trevor blackwell,.patrick collison, jessica livingston, jackie mcdonough, robert.morris, and david sloo for reading drafts of this.  and since there.are some controversial ideas here, i should add that none of them.agreed with everything in it.german translationfrench translationrussian translation<eot><sot>be good.april 2008
(this essay is derived from a talk at the 2008 startup school.)about a month after we started y combinator we came up with the.phrase that became our motto: make something people want.  we've.learned a lot since then, but if i were choosing now that's still.the one i'd pick.another thing we tell founders is not to worry too much about the.business model, at least at first.  not because making money is.unimportant, but because it's so much easier than building something.great.a couple weeks ago i realized that if you put those two ideas.together, you get something surprising.  make something people want..don't worry too much about making money.  what you've got is a.description of a charity.when you get an unexpected result like this, it could either be a.bug or a new discovery.  either businesses aren't supposed to be.like charities, and we've proven by reductio ad absurdum that one.or both of the principles we began with is false.  or we have a new.idea.i suspect it's the latter, because as soon as this thought occurred.to me, a whole bunch of other things fell into place.examplesfor example, craigslist.  it's not a charity, but they run it like.one.  and they're astoundingly successful.  when you scan down the.list of most popular web sites, the number of employees at craigslist.looks like a misprint. their revenues aren't as high as they could.be, but most startups would be happy to trade places with them.in patrick o'brian's novels, his captains always try to get upwind.of their opponents.  if you're upwind, you decide when and if to.engage the other ship.  craigslist is effectively upwind of enormous.revenues.  they'd face some challenges if they wanted to make more,.but not the sort you face when you're tacking upwind, trying to.force a crappy product on ambivalent users by spending ten times.as much on sales as on development.  [1]i'm not saying startups should aim to end up like craigslist..they're a product of unusual circumstances.  but they're a good.model for the early phases.google looked a lot like a charity in the beginning. they didn't.have ads for over a year.  at year 1, google was indistinguishable.from a nonprofit.  if a nonprofit or government organization had.started a project to index the web, google at year 1 is the limit.of what they'd have produced.back when i was working on spam filters i thought it would be a.good idea to have a web-based email service with good spam filtering..i wasn't thinking of it as a company.  i just wanted to keep people.from getting spammed.  but as i thought more about this project, i.realized it would probably have to be a company.  it would cost.something to run, and it would be a pain to fund with grants and.donations.that was a surprising realization.  companies often claim to be.benevolent, but it was surprising to realize there were purely.benevolent projects that had to be embodied as companies to work.i didn't want to start another company, so i didn't do it.  but if.someone had, they'd probably be quite rich now.  there was a window.of about two years when spam was increasing rapidly but all the big.email services had terrible filters.  if someone had launched a.new, spam-free mail service, users would have flocked to it.notice the pattern here?  from either direction we get to the same.spot.  if you start from successful startups, you find they often.behaved like nonprofits.  and if you start from ideas for nonprofits,.you find they'd often make good startups.powerhow wide is this territory?  would all good nonprofits be good.companies?  possibly not.  what makes google so valuable is that.their users have money.  if you make people with money love you,.you can probably get some of it.  but could you also base a successful.startup on behaving like a nonprofit to people who don't have money?.could you, for example, grow a successful startup out of curing an.unfashionable but deadly disease like malaria?i'm not sure, but i suspect that if you pushed this idea, you'd be.surprised how far it would go.  for example, people who apply to y.combinator don't generally have much money, and yet we can profit.by helping them, because with our help they could make money.  maybe.the situation is similar with malaria.  maybe an organization that.helped lift its weight off a country could benefit from the resulting.growth.i'm not proposing this is a serious idea.  i don't know anything.about malaria.  but i've been kicking ideas around long enough to.know when i come across a powerful one.one way to guess how far an idea extends is to ask yourself at what.point you'd bet against it.  the thought of betting against benevolence.is alarming in the same way as saying that something is technically.impossible.  you're just asking to be made a fool of, because these.are such powerful forces.  [2]for example, initially i thought maybe this principle only applied.to internet startups.  obviously it worked for google, but what.about microsoft?  surely microsoft isn't benevolent?  but when i.think back to the beginning, they were.  compared to ibm they were.like robin hood.  when ibm introduced the pc, they thought they.were going to make money selling hardware at high prices.  but by.gaining control of the pc standard, microsoft opened up the market.to any manufacturer.  hardware prices plummeted, and lots of people.got to have computers who couldn't otherwise have afforded them..it's the sort of thing you'd expect google to do.microsoft isn't so benevolent now.  now when one thinks of what.microsoft does to users, all the verbs that come to mind begin with.f.  [3] and yet it doesn't seem to pay..their stock price has been flat for years.  back when they were.robin hood, their stock price rose like google's.  could there be.a connection?you can see how there would be.  when you're small, you can't bully.customers, so you have to charm them.  whereas when you're big you.can maltreat them at will, and you tend to, because it's easier.than satisfying them.  you grow big by being nice, but you can stay.big by being mean.you get away with it till the underlying conditions change, and.then all your victims escape.  so "don't be evil" may be the most.valuable thing paul buchheit made for google, because it may turn.out to be an elixir of corporate youth.  i'm sure they find it.constraining, but think how valuable it will be if it saves them.from lapsing into the fatal laziness that afflicted microsoft and.ibm.the curious thing is, this elixir is freely available to any other.company.  anyone can adopt "don't be evil."  the catch is that.people will hold you to it.  so i don't think you're going to see.record labels or tobacco companies using this discovery.moralethere's a lot of external evidence that benevolence works.  but how.does it work?  one advantage of investing in a large number of.startups is that you get a lot of data about how they work.  from.what we've seen, being good seems to help startups in three ways:.it improves their morale, it makes other people want to help them,.and above all, it helps them be decisive.morale is tremendously important to a startup—so important.that morale alone is almost enough to determine success.  startups.are often described as emotional roller-coasters. one minute you're.going to take over the world, and the next you're doomed.  the.problem with feeling you're doomed is not just that it makes you.unhappy, but that it makes you stop working.  so the downhills.of the roller-coaster are more of a self fulfilling prophecy than.the uphills.  if feeling you're going to succeed makes you work.harder, that probably improves your chances of succeeding, but if.feeling you're going to fail makes you stop working, that practically.guarantees you'll fail.here's where benevolence comes in.  if you feel you're really helping.people, you'll keep working even when it seems like your startup.is doomed.  most of us have some amount of natural benevolence..the mere fact that someone needs you makes you want to help them..so if you start the kind of startup where users come back each day,.you've basically built yourself a giant tamagotchi.  you've made.something you need to take care of.blogger is a famous example of a startup that went through really.low lows and survived.  at one point they ran out of money and.everyone left. evan williams came in to work the next day, and there.was no one but him.  what kept him going?  partly that users needed.him.  he was hosting thousands of people's blogs. he couldn't just.let the site die.there are many advantages of launching quickly, but the most important.may be that once you have users, the tamagotchi effect kicks in..once you have users to take care of, you're forced to figure out.what will make them happy, and that's actually very valuable.information.the added confidence that comes from trying to help people can.also help you with investors. one of the founders of.chatterous told.me recently that he and his cofounder had decided that this service.was something the world needed, so they were going to keep working.on it no matter what, even if they had to move back to canada and live.in their parents' basements.once they realized this, they stopped caring so much what investors thought.about them.  they still met with them, but they weren't going to.die if they didn't get their money.  and you know what?  the investors.got a lot more interested.  they could sense that the chatterouses.were going to do this startup with or without them.if you're really committed and your startup is cheap to run, you.become very hard to kill.  and practically all startups, even the.most successful, come close to death at some point.  so if doing.good for people gives you a sense of mission that makes you harder.to kill, that alone more than compensates for whatever you lose by.not choosing a more selfish project.helpanother advantage of being good is that it makes other people want.to help you.  this too seems to be an inborn trait in humans.one of the startups we've funded, octopart, is currently locked in.a classic battle of good versus evil.  they're a search site for.industrial components.  a lot of people need to search for components,.and before octopart there was no good way to do it.  that, it turned.out, was no coincidence.octopart built the right way to search for components.  users like.it and they've been growing rapidly.  and yet for most of octopart's.life, the biggest distributor, digi-key, has been trying to force.them take their prices off the site.  octopart is sending them.customers for free, and yet digi-key is trying to make that traffic.stop.  why?  because their current business model depends on.overcharging people who have incomplete information about prices..they don't want search to work.the octoparts are the nicest guys in the world.  they dropped out.of the phd program in physics at berkeley to do this.  they just.wanted to fix a problem they encountered in their research.  imagine.how much time you could save the world's engineers if they could.do searches online.  so when i hear that a big, evil company is.trying to stop them in order to keep search broken, it makes me.really want to help them. it makes me spend more time on the octoparts.than i do with most of the other startups we've funded.  it just.made me spend several minutes telling you how great they are.  why?.because they're good guys and they're trying to help the world.if you're benevolent, people will rally around you: investors,.customers, other companies, and potential employees.  in the long.term the most important may be the potential employees.  i think.everyone knows now that.good hackers are much better than mediocre.ones.  if you can attract the best hackers to work for you, as.google has, you have a big advantage.  and the very best hackers.tend to be idealistic.  they're not desperate for a job.  they can.work wherever they want.  so most want to work on things that will.make the world better.compassbut the most important advantage of being good is that it acts as.a compass.  one of the hardest parts of doing a startup is that you.have so many choices.  there are just two or three of you, and a.thousand things you could do. how do you decide?here's the answer: do whatever's best for your users.  you can hold.onto this like a rope in a hurricane, and it will save you if.anything can.  follow it and it will take you through everything.you need to do.it's even the answer to questions that seem unrelated, like how to.convince investors to give you money.  if you're a good salesman,.you could try to just talk them into it.  but the more reliable.route is to convince them through your users: if you make something.users love enough to tell their friends, you grow exponentially,.and that will convince any investor.being good is a particularly useful strategy for making decisions.in complex situations because it's stateless.  it's like telling.the truth.  the trouble with lying is that you have to remember.everything you've said in the past to make sure you don't contradict.yourself.  if you tell the truth you don't have to remember anything,.and that's a really useful property in domains where things happen.fast.for example, y combinator has now invested in 80 startups, 57 of.which are still alive.  (the rest have died or merged or been.acquired.)  when you're trying to advise 57 startups, it turns out.you have to have a stateless algorithm.  you can't have ulterior.motives when you have 57 things going on at once, because you can't.remember them.  so our rule is just to do whatever's best for the.founders.  not because we're particularly benevolent, but because.it's the only algorithm that works on that scale.when you write something telling people to be good, you seem to be.claiming to be good yourself.  so i want to say explicitly that i.am not a particularly good person.  when i was a kid i was firmly.in the camp of bad.  the way adults used the word good, it seemed.to be synonymous with quiet, so i grew up very suspicious of it.you know how there are some people whose names come up in conversation.and everyone says "he's such a great guy?"  people never say.that about me.  the best i get is "he means well."  i am not claiming.to be good.  at best i speak good as a second language.so i'm not suggesting you be good in the usual sanctimonious way..i'm suggesting it because it works.  it will work not just as a.statement of "values," but as a guide to strategy,.and even a design spec for software.  don't just not be evil.  be.good.notes[1] fifty years ago.it would have seemed shocking for a public company not to pay.dividends.  now many tech companies don't.  the markets seem to.have figured out how to value potential dividends.  maybe that isn't.the last step in this evolution.  maybe markets will eventually get.comfortable with potential earnings. (vcs already are, and at least.some of them consistently make money.)i realize this sounds like the stuff one used to hear about the."new economy" during the bubble.  believe me, i was not drinking.that kool-aid at the time.  but i'm convinced there were some.good.ideas buried in bubble thinking.  for example, it's ok to focus on.growth instead of profits—but only if the growth is genuine..you can't be buying users; that's a pyramid scheme.   but a company.with rapid, genuine growth is valuable, and eventually markets learn.how to value valuable things.[2] the idea of starting.a company with benevolent aims is currently undervalued, because.the kind of people who currently make that their explicit goal don't.usually do a very good job.it's one of the standard career paths of trustafarians to start.some vaguely benevolent business.  the problem with most of them.is that they either have a bogus political agenda or are feebly.executed.  the trustafarians' ancestors didn't get rich by preserving.their traditional culture; maybe people in bolivia don't want to.either.  and starting an organic farm, though it's at least.straightforwardly benevolent, doesn't help people on the scale that.google does.most explicitly benevolent projects don't hold themselves sufficiently.accountable.  they act as if having good intentions were enough to.guarantee good effects.[3] users dislike their.new operating system so much that they're starting petitions to.save the old one.  and the old one was nothing special.  the hackers.within microsoft must know in their hearts that if the company.really cared about users they'd just advise them to switch to osx.thanks to trevor blackwell, paul buchheit, jessica livingston,.and robert morris for reading drafts of this.russian translationgerman translation<eot><sot>why there aren't more googles.want to start a startup?  get funded by.y combinator..april 2008
umair haque.wrote recently that the reason there aren't more googles is.that most startups get bought before they can change the world..google, despite serious interest from microsoft and yahoo—what.must have seemed like lucrative interest at the time—didn't.sell out. google might simply have been nothing but yahoo's or.msn's search box.why isn't it? because google had a deeply felt sense of purpose:.a conviction to change the world for the better..this has a nice sound to it, but it isn't true..google's founders were willing to sell early on..they just wanted more than acquirers were willing to pay.it was the same with facebook.  they would have sold, but yahoo blew it.by offering too little.tip for acquirers: when a startup turns you down, consider raising.your offer, because there's a good chance the outrageous price they.want will later seem a bargain..[1]from the evidence i've seen so far,.startups that turn down acquisition offers usually end up doing better..not always, but usually there's a bigger offer coming, or.perhaps even an ipo.of course, the reason startups do better when they turn down.acquisition offers is not necessarily that all such offers undervalue.startups.  more likely the reason is that the kind of founders who.have the balls to turn down a big offer also tend to be very.successful.  that spirit is exactly what you want in a startup.while i'm sure larry and sergey do want to change the world, at.least now, the reason google survived to become a big, independent.company is the same reason facebook has so far remained independent:.acquirers underestimated them.corporate m&a is a strange business in that respect.  they consistently.lose the best deals, because turning down reasonable offers is the.most reliable test you could invent for whether a startup will make.it big.vcsso what's the real reason there aren't more googles?  curiously.enough, it's the same reason google and facebook have remained.independent: money guys undervalue the most innovative startups.the reason there aren't more googles is not that investors encourage.innovative startups to sell out, but that they won't even fund them..i've learned a lot about vcs during the 3 years we've been doing y.combinator, because we often have to work quite closely with them..the most surprising thing i've learned is how conservative they.are.  vc firms present an image of boldly encouraging innovation..only a handful actually do, and even they are more conservative in.reality than you'd guess from reading their sites.i used to think of vcs as piratical: bold but unscrupulous.  on.closer acquaintance they turn out to be more like bureaucrats..they're more upstanding than i used to think (the good ones, at.least), but less bold.  maybe the vc industry has changed.  maybe.they used to be bolder..but i suspect it's the startup world that has.changed, not them.  the low cost of starting a startup means the.average good bet is a riskier one, but most existing vc firms still.operate as if they were investing in hardware startups in 1985.howard aiken said "don't worry about people stealing your ideas..if your ideas are any good, you'll have to ram them down people's.throats." i have a similar feeling when i'm trying to convince vcs.to invest in startups y combinator has funded.  they're terrified.of really novel ideas, unless the founders are good enough salesmen.to compensate.but it's the bold ideas that generate the biggest returns.  any.really good new idea will seem bad to most people; otherwise someone.would already be doing it.  and.yet most vcs are driven by consensus, not just within their firms,.but within the vc community.  the biggest factor determining how a.vc will feel about your startup is how other vcs feel about it.  i.doubt they realize it, but this algorithm guarantees they'll miss.all the very best ideas.  the more people who have to like a new.idea, the more outliers you lose.whoever the next google is, they're probably being told right now.by vcs to come back when they have more "traction."why are vcs so conservative?  it's probably a combination of factors..the large size of their investments makes them conservative..plus they're investing other people's money, which makes.them worry they'll get in trouble if they do something risky and.it fails.  plus most of them are money guys rather than technical.guys, so they don't understand what the startups they're investing.in do.what's nextthe exciting thing about market economies is that stupidity equals.opportunity.  and so it is in this case.  there is a huge, unexploited.opportunity in startup investing.  y combinator funds startups at.the very beginning.  vcs will fund them once they're already starting.to succeed.  but between the two there is a substantial gap.there are companies that will give $20k to a startup that has nothing.more than the founders, and there are companies that will give $2.million to a startup that's already taking off,.but there aren't enough investors who will give $200k to a startup.that seems very promising but still has some things to figure out..this territory is occupied mostly by.individual angel investors—people like andy bechtolsheim, who.gave google $100k when they seemed promising but still had some.things to figure out. i like angels, but there just aren't enough.of them, and investing is for most of them a part time job.and yet as it gets cheaper to start startups, this sparsely occupied.territory is becoming more and more valuable.   nowadays a lot of.startups don't want to raise multi-million dollar series a rounds..they don't need that much money, and they don't want the hassles.that come with it.  the median startup coming out of y combinator.wants to raise $250-500k.  when they go to vc firms they have to.ask for more because they know vcs aren't interested in such small.deals.vcs are money managers.  they're looking for ways to put large sums.to work.  but the startup world is evolving away from their current.model.startups have gotten cheaper.  that means they want less money, but.also that there are more of them.  so you can still get large returns.on large amounts of money; you just have to spread it more broadly.i've tried to explain this to vc firms.  instead of making one $2.million investment, make five $400k investments.  would that mean.sitting on too many boards?  don't sit on their boards.  would that.mean too much due diligence?  do less.  if you're investing at a.tenth the valuation, you only have to be a tenth as sure.it seems obvious.  but i've proposed to several vc firms that they.set aside some money and designate one partner to make more, smaller.bets, and they react as if i'd proposed the partners all get nose.rings.  it's remarkable how wedded they are to their standard m.o.but there is a big opportunity here, and one way or the other it's.going to get filled.  either vcs will evolve down into this gap or,.more likely, new investors will appear to fill it.  that will be a.good thing when it happens, because these new investors will be.compelled by the structure of the investments they make to be ten.times bolder than present day vcs.  and that will get us a lot more.googles.  at least, as long as acquirers remain stupid..notes[1].another tip: if you want to get all that value, don't destroy the.startup after you buy it.  give the founders enough autonomy that.they can grow the acquisition into what it would have become.thanks to sam altman, paul buchheit, david hornik, jessica.livingston, robert morris, and fred wilson for reading drafts of this.russian translation<eot><sot>some heroes.april 2008
there are some topics i save up because they'll be so much fun to.write about.  this is one of them: a list of my heroes.i'm not claiming this is a list of the n most admirable people..who could make such a list, even if they wanted to?einstein isn't on the list, for example, even though he probably.deserves to be on any shortlist of admirable people.  i once asked.a physicist friend if einstein was really as smart as his fame.implies, and she said that yes, he was.  so why isn't he on the.list?  because i had to ask.  this is a list of people who've.influenced me, not people who would have if i understood their work.my test was to think of someone and ask "is this person my.hero?"  it often returned surprising answers.  for example,.it returned false for montaigne, who was arguably the inventor of.the essay.  why?  when i thought.about what it meant to call someone a hero, it meant i'd decide what.to do by asking what they'd do in the same situation.  that's a.stricter standard than admiration.after i made the list, i looked to see if there was a pattern, and.there was, a very clear one.  everyone on the list had two qualities:.they cared almost excessively about their work, and they were.absolutely honest.  by honest i don't mean trustworthy so much as.that they never pander: they never say or do something because.that's what the audience wants.  they are all fundamentally subversive.for this reason, though they conceal it to varying degrees..jack lamberti grew up in pittsburgh in the 1970s.  unless you were there it's.hard to imagine how that town felt about the steelers.   locally,.all the news was bad.  the steel industry was dying.  but the.steelers were the best team in football — and moreover, in a.way that seemed to reflect the personality of the city.  they didn't.do anything fancy.  they just got the job done.other players were more famous: terry bradshaw, franco harris, lynn.swann.  but they played offense, and you always get more attention.for that.  it seemed to me as a twelve year old football expert.that the best of them all was.jack lambert.  and what made him so.good was that he was utterly relentless.  he didn't just care about.playing well; he cared almost too much.  he seemed to regard it as.a personal insult when someone from the other team had possession.of the ball on his side of the line of scrimmage.the suburbs of pittsburgh in the 1970s were a pretty dull place..school was boring.  all the adults around were bored with their.jobs working for big companies. everything that came to us through.the mass media was (a) blandly uniform and (b) produced elsewhere..jack lambert was the exception.  he was like nothing else i'd seen..kenneth clarkkenneth clark is the best nonfiction writer i know of, on any.subject.  most people who write about art history don't really like.art; you can tell from a thousand little signs.  but clark did, and.not just intellectually, but the way one anticipates a delicious.dinner.what really makes him stand out, though, is the quality of his.ideas.  his style is deceptively casual, but there is more in.his books than in a library.of art monographs.  reading.the nude is like a ride in a.ferrari.  just as you're getting settled, you're slammed back in.your seat by the acceleration.  before you can adjust, you're thrown.sideways as the car screeches into the first turn.  his brain throws.off ideas almost too fast to grasp them.  finally at the end of the.chapter you come to a halt, with your eyes wide and a big smile on.your face.kenneth clark was a star in his day, thanks to the documentary.series.civilisation.  and if you read only one book about.art history,.civilisation is the one i'd recommend.  it's.much better than the drab sears catalogs of art that undergraduates.are forced to buy for art history 101..larry mihalkoa lot of people have a great teacher at some point in their childhood..larry mihalko was mine.  when i look back it's like there's a line.drawn between third and fourth grade.  after mr. mihalko, everything.was different.why?  first of all, he was intellectually curious.  i had a few.other teachers who were smart, but i wouldn't describe them as.intellectually curious.  in retrospect, he was out of place as an.elementary school teacher, and i think he knew it.  that must have.been hard for him, but it was wonderful for us, his students.  his.class was a constant adventure.  i used to like going to school.every day.the other thing that made him different was that he liked us.  kids.are good at telling that.  the other teachers were at best benevolently.indifferent.  but mr.  mihalko seemed like he actually wanted to.be our friend.  on the last day of fourth grade, he got out one of.the heavy school record players and played james taylor's "you've.got a friend" to us.  just call out my name, and you know wherever.i am, i'll come running.  he died at 59 of lung cancer.  i've never.cried like i cried at his funeral..leonardoone of the things i've learned about making things that i didn't.realize when i was a kid is that much of the best stuff isn't made.for audiences, but for oneself.  you see paintings and drawings in.museums and imagine they were made for you to look at.  actually a.lot of the best ones were made as a way of exploring the world, not.as a way to please other people.  the best of these explorations.are sometimes more pleasing than stuff made explicitly to please.leonardo did a lot of things.  one of his most admirable qualities.was that he did so many different things that were admirable.  what.people know of him now is his paintings and his more flamboyant.inventions, like flying machines.  that makes him seem like some.kind of dreamer who sketched artists' conceptions of rocket ships.on the side.  in fact he made a large number of far more practical.technical discoveries.  he was as good an engineer as a painter.his most impressive work, to me, is his.drawings.  they're clearly.made more as a way of studying the world than producing something.beautiful. and yet they can hold their own with any work of art.ever made.  no one else, before or since, was that good when no one.was looking..robert morrisrobert morris has a very unusual quality: he's never wrong.  it.might seem this would require you to be omniscient, but actually.it's surprisingly easy. don't say anything unless you're fairly.sure of it.  if you're not omniscient, you just don't end up saying.much.more precisely, the trick is to pay careful attention to how you.qualify what you say.  by using this trick, robert has, as far as.i know, managed to be mistaken only once, and that was when he was.an undergrad.  when the mac came out, he said that little desktop.computers would never be suitable for real hacking.it's wrong to call it a trick in his case, though.  if it were a.conscious trick, he would have slipped in a moment of excitement..with robert this quality is wired-in.  he has an almost superhuman.integrity.  he's not just generally correct, but also correct about.how correct he is.you'd think it would be such a great thing never to be wrong that.everyone would do this.  it doesn't seem like that much extra work.to pay as much attention to the error on an idea as to the idea.itself.  and yet practically no one does.  i know how hard it is,.because since meeting robert i've tried to do in software what he.seems to do in hardware..p. g. wodehousepeople are finally starting to admit that wodehouse was a great.writer.  if you want to be thought a great novelist in your own.time, you have to sound intellectual.  if what you write is popular,.or entertaining, or funny, you're ipso facto suspect.  that makes.wodehouse doubly impressive, because it meant that to write as he.wanted to, he had to commit to being despised in his own lifetime.evelyn waugh called him a great writer, but to most people at the.time that would have read as a chivalrous or deliberately perverse.gesture. at the time any random autobiographical novel by a recent.college grad could count on more respectful treatment from the.literary establishment.wodehouse may have begun with simple atoms, but the way he composed.them into molecules was near faultless.  his rhythm in particular..it makes me self-conscious to write about it.  i can think of only.two other writers who came near him for style: evelyn waugh and.nancy mitford.  those three used the english language like they.owned it.but wodehouse has something neither of them did.  he's at ease..evelyn waugh and nancy mitford cared what other people thought of.them: he wanted to seem aristocratic; she was afraid she wasn't.smart enough.  but wodehouse didn't give a damn what anyone thought.of him.  he wrote exactly what he wanted..alexander caldercalder's on this list because he makes me happy.  can his work stand.up to leonardo's?  probably not.  there might not be anything from.the 20th century that can.  but what was good about modernism,.calder had, and had in a way that he made seem effortless.what was good about modernism was its freshness.  art became stuffy.in the nineteenth century.  the paintings that were popular at the.time were mostly the art equivalent of mcmansions—big,.pretentious, and fake.  modernism meant starting over, making things.with the same earnest motives that children might.  the artists who.benefited most from this were the ones who had preserved a child's.confidence, like klee and calder.klee was impressive because he could work in so many different.styles.  but between the two i like calder better, because his work.seemed happier.  ultimately the point of art is to engage the viewer..it's hard to predict what will; often something that seems interesting.at first will bore you after a month.  calder's.sculptures never.get boring.  they just sit there quietly radiating optimism, like.a battery that never runs out.  as far as i can tell from books and.photographs, the happiness of calder's work is his own happiness.showing through..jane austeneveryone admires jane austen.  add my name to the list.  to me she.seems the best novelist of all time.i'm interested in how things work.  when i read most novels, i pay.as much attention to the author's choices as to the story.  but in.her novels i can't see the gears at work.  though i'd really like.to know how she does what she does, i can't figure it out, because.she's so good that her stories don't seem made up.  i feel like i'm.reading a description of something that actually happened.i used to read a lot of novels when i was younger.  i can't read.most anymore, because they don't have enough information in them..novels seem so impoverished compared to history and biography.  but.reading austen is like reading.nonfiction.  she writes so well you don't even notice her..john mccarthyjohn mccarthy invented lisp, the field of (or at least the term).artificial intelligence, and was an early member of both of the top.two computer science departments, mit and stanford.  no one would.dispute that he's one of the greats, but he's an especial hero to.me because of.lisp.it's hard for us now to understand what a conceptual leap that was.at the time.  paradoxically, one of the reasons his achievement is.hard to appreciate is that it was so successful.  practically every.programming language invented in the last 20 years includes ideas.from lisp, and each year the median language gets more lisplike.in 1958 these ideas were anything but obvious.  in 1958 there seem.to have been two ways of thinking about programming.  some people.thought of it as math, and proved things about turing machines..others thought of it as a way to get things done, and designed.languages all too influenced by the technology of the day.  mccarthy.alone bridged the gap.  he designed a language that was math.  but.designed is not really the word; discovered is more like it..the spitfireas i was making this list i found myself thinking of people like.douglas bader.and.r.j. mitchell.and.jeffrey quill and i realized.that though all of them had done many things in their lives, there.was one factor above all that connected them: the spitfire.this is supposed to be a list of heroes.  how can a machine be on.it?  because that machine was not just a machine.  it was a lens.of heroes.  extraordinary devotion went into it, and extraordinary.courage came out.it's a cliche to call world war ii a contest between good and evil,.but between fighter designs, it really was.  the spitfire's original.nemesis, the me 109, was a brutally practical plane.  it was a.killing machine.  the spitfire was optimism embodied.  and not just.in its beautiful lines: it was at the edge of what could be.manufactured.  but taking the high road worked.  in the air, beauty.had the edge, just..steve jobspeople alive when kennedy was killed  usually remember exactly where.they were when they heard about it.  i remember exactly where i was.when a friend asked if i'd heard steve jobs had cancer.  it was.like the floor dropped out.   a few seconds later she told me that.it was a rare operable type, and that he'd be ok.  but those seconds.seemed long.i wasn't sure whether to include jobs on this list.  a lot of people.at apple seem to be afraid of him, which is a bad sign.  but he.compels admiration.there's no name for what steve jobs is, because there hasn't been.anyone quite like him before.  he doesn't design apple's products.himself.  historically the closest analogy to what he does are the.great renaissance patrons of the arts.  as the ceo of a company,.that makes him unique.most ceos delegate.taste to a subordinate..the.design paradox.means they're choosing more or less at random.  but steve.jobs actually has taste himself — such good taste that he's shown.the world how much more important taste is than they realized..isaac newtonnewton has a strange role in my pantheon of heroes: he's the one i.reproach myself with.  he worked on big things, at least for part.of his life.  it's so easy to get distracted working on small stuff..the questions you're answering are pleasantly familiar.  you get.immediate rewards — in fact, you get bigger rewards in your.time if you work on matters of passing importance.  but i'm.uncomfortably aware that this is the route to well-deserved obscurity.to do really great things, you have to seek out questions people.didn't even realize were questions.  there have probably been other.people who did this as well as newton, for their time, but newton.is my model of this kind of thought.  i can just begin to understand.what it must have felt like for him.you only get one life.  why not do something huge?  the phrase "paradigm.shift" is overused now, but kuhn was onto something.  and you know.more are out there, separated from us by what will later seem a.surprisingly thin wall of laziness and stupidity.  if we work like.newton.thanks to trevor blackwell, jessica livingston, and jackie mcdonough for reading drafts of this.japanese translation<eot><sot>how to disagree.march 2008
the web is turning writing into a conversation.  twenty years ago,.writers wrote and readers read.  the web lets readers respond, and.increasingly they do—in comment threads, on forums, and in their.own blog posts.many who respond to something disagree with it.  that's to be.expected.  agreeing tends to motivate people less than disagreeing..and when you agree there's less to say.  you could expand on something.the author said, but he has probably already explored the.most interesting implications.  when you disagree you're entering.territory he may not have explored.the result is there's a lot more disagreeing going on, especially.measured by the word.  that doesn't mean people are getting angrier..the structural change in the way we communicate is enough to account.for it.  but though it's not anger that's driving the increase in.disagreement, there's a danger that the increase in disagreement.will make people angrier.  particularly online, where it's easy to.say things you'd never say face to face.if we're all going to be disagreeing more, we should be careful to.do it well.  what does it mean to disagree well?   most readers can.tell the difference between mere name-calling and a carefully.reasoned refutation, but i think it would help to put names on the.intermediate stages.  so here's an attempt at a disagreement.hierarchy:.dh0. name-calling.this is the lowest form of disagreement, and probably also the most.common.  we've all seen comments like this:.u r a fag!!!!!!!!!!.but it's important to realize that more articulate name-calling has.just as little weight.  a comment like.the author is a self-important dilettante..is really nothing more than a pretentious version of "u r a fag.".dh1. ad hominem.an ad hominem attack is not quite as weak as mere name-calling.  it.might actually carry some weight.  for example, if a senator wrote.an article saying senators' salaries should be increased, one could.respond:.of course he would say that.  he's a senator..this wouldn't refute the author's argument, but it may at least be.relevant to the case.  it's still a very weak form of disagreement,.though.  if there's something wrong with the senator's argument,.you should say what it is; and if there isn't, what difference does.it make that he's a senator?saying that an author lacks the authority to write about a topic.is a variant of ad hominem—and a particularly useless sort, because.good ideas often come from outsiders.  the question is whether the.author is correct or not.  if his lack of authority caused him to.make mistakes, point those out.  and if it didn't, it's not a.problem..dh2. responding to tone.the next level up we start to see responses to the writing, rather.than the writer.  the lowest form of these is to disagree with the.author's tone.  e.g..i can't believe the author dismisses intelligent design in such.a cavalier fashion..though better than attacking the author, this is still a weak form.of disagreement.  it matters much more whether the author is wrong.or right than what his tone is.  especially since tone is so hard.to judge.  someone who has a chip on their shoulder about some topic.might be offended by a tone that to other readers seemed neutral.so if the worst thing you can say about something is to criticize.its tone, you're not saying much.  is the author flippant, but.correct?  better that than grave and wrong.  and if the author is.incorrect somewhere, say where.dh3. contradiction.in this stage we finally get responses to what was said, rather.than how or by whom.  the lowest form of response to an argument.is simply to state the opposing case, with little or no supporting.evidence.this is often combined with dh2 statements, as in:.i can't believe the author dismisses intelligent design in such.a cavalier fashion.  intelligent design is a legitimate scientific.theory..contradiction can sometimes have some weight.  sometimes merely.seeing the opposing case stated explicitly is enough to see that.it's right.  but usually evidence will help.dh4. counterargument.at level 4 we reach the first form of convincing disagreement:.counterargument.  forms up to this point can usually be ignored as.proving nothing.  counterargument might prove something.  the problem.is, it's hard to say exactly what.counterargument is contradiction plus reasoning and/or evidence..when aimed squarely at the original argument, it can be convincing..but unfortunately it's common for counterarguments to be aimed at.something slightly different.  more often than not, two people.arguing passionately about something are actually arguing about two.different things.  sometimes they even agree with one another, but.are so caught up in their squabble they don't realize it.there could be a legitimate reason for arguing against something.slightly different from what the original author said: when you.feel they missed the heart of the matter.  but when you do that,.you should say explicitly you're doing it.dh5. refutation.the most convincing form of disagreement is refutation.  it's also.the rarest, because it's the most work.  indeed, the disagreement.hierarchy forms a kind of pyramid, in the sense that the higher you.go the fewer instances you find.to refute someone you probably have to quote them.  you have to.find a "smoking gun," a passage in whatever you disagree with that.you feel is mistaken, and then explain why it's mistaken.  if you.can't find an actual quote to disagree with, you may be arguing.with a straw man.while refutation generally entails quoting, quoting doesn't necessarily.imply refutation.  some writers quote parts of things they disagree.with to give the appearance of legitimate refutation, then follow.with a response as low as dh3 or even dh0.dh6. refuting the central point.the force of a refutation depends on what you refute.  the most.powerful form of disagreement is to refute someone's central point.even as high as dh5 we still sometimes see deliberate dishonesty,.as when someone picks out minor points of an argument and refutes.those.  sometimes the spirit in which this is done makes it more.of a sophisticated form of ad hominem than actual refutation.  for.example, correcting someone's grammar, or harping on minor mistakes.in names or numbers.  unless the opposing argument actually depends.on such things, the only purpose of correcting them is to.discredit one's opponent.truly refuting something requires one to refute its central point,.or at least one of them.  and that means one has to commit explicitly.to what the central point is.  so a truly effective refutation would.look like:.the author's main point seems to be x.  as he says:.<quotation>.but this is wrong for the following reasons....the quotation you point out as mistaken need not be the actual.statement of the author's main point.  it's enough to refute something.it depends upon..what it meansnow we have a way of classifying forms of disagreement.  what good.is it?  one thing the disagreement hierarchy doesn't give us is.a way of picking a winner.  dh levels merely describe the form of.a statement, not whether it's correct.  a dh6 response could still.be completely mistaken.but while dh levels don't set a lower bound on the convincingness.of a reply, they do set an upper bound.  a dh6 response might be.unconvincing, but a dh2 or lower response is always unconvincing.the most obvious advantage of classifying the forms of disagreement.is that it will help people to evaluate what they read.  in particular,.it will help them to see through intellectually dishonest arguments..an eloquent speaker or writer can give the impression of vanquishing.an opponent merely by using forceful words.  in fact that is probably.the defining quality of a demagogue.  by giving names to the different.forms of disagreement, we give critical readers a pin for popping.such balloons.such labels may help writers too.  most intellectual dishonesty is.unintentional.  someone arguing against the tone of something he.disagrees with may believe he's really saying something.  zooming.out and seeing his current position on the disagreement hierarchy.may inspire him to try moving up to counterargument or refutation.but the greatest benefit of disagreeing well is not just that it.will make conversations better, but that it will make the people.who have them happier.  if you study conversations, you find there.is a lot more meanness down in dh1 than up in dh6.  you don't have.to be mean when you have a real point to make.  in fact, you don't.want to.  if you have something real to say, being mean just gets.in the way.if moving up the disagreement hierarchy makes people less mean,.that will make most of them happier.  most people don't really enjoy.being mean; they do it because they can't help it..thanks to trevor blackwell and jessica livingston for reading.drafts of this.related:what you can't saythe age of the essayitalian translationrussian translationswedish translationspanish translationgerman translationfrench translationarabic translationfinnish translationitalian translationturkish translation<eot><sot>you weren't meant to have a boss.want to start a startup?  get funded by.y combinator..march 2008
, rev. june 2008technology tends to separate normal from natural.  our bodies.weren't designed to eat the foods that people in rich countries eat, or.to get so little exercise..there may be a similar problem with the way we work:.a normal job may be as bad for us intellectually as white flour.or sugar is for us physically.i began to suspect this after spending several years working.with startup founders.  i've now worked with over 200 of them, and i've.noticed a definite difference between programmers working on their.own startups and those working for large organizations..i wouldn't say founders seem happier, necessarily;.starting a startup can be very stressful. maybe the best way to put.it is to say that they're happier in the sense that your body is.happier during a long run than sitting on a sofa eating.doughnuts.though they're statistically abnormal, startup founders seem to be.working in a way that's more natural for humans.i was in africa last year and saw a lot of animals in the wild that.i'd only seen in zoos before. it was remarkable how different they.seemed. particularly lions. lions in the wild seem about ten times.more alive. they're like different animals. i suspect that working.for oneself feels better to humans in much the same way that living.in the wild must feel better to a wide-ranging predator like a lion..life in a zoo is easier, but it isn't the life they were designed.for..treeswhat's so unnatural about working for a big company?  the root of.the problem is that humans weren't meant to work in such large.groups.another thing you notice when you see animals in the wild is that.each species thrives in groups of a certain size.  a herd of impalas.might have 100 adults; baboons maybe 20; lions rarely 10.  humans.also seem designed to work in groups, and what i've read about.hunter-gatherers accords with research on organizations and my own.experience to suggest roughly what the ideal size is: groups of 8.work well; by 20 they're getting hard to manage; and a group of 50.is really unwieldy..[1].whatever the upper limit is, we are clearly not meant to work in.groups of several hundred.  and yet—for reasons having more.to do with technology than human nature—a great many people.work for companies with hundreds or thousands of employees.companies know groups that large wouldn't work, so they divide.themselves into units small enough to work together.  but to.coordinate these they have to introduce something new: bosses.these smaller groups are always arranged in a tree structure.  your.boss is the point where your group attaches to the tree.  but when.you use this trick for dividing a large group into smaller ones,.something strange happens that i've never heard anyone mention.explicitly.  in the group one level up from yours, your boss.represents your entire group.  a group of 10 managers is not merely.a group of 10 people working together in the usual way.  it's really.a group of groups.  which means for a group of 10 managers to work.together as if they were simply a group of 10 individuals, the group.working for each manager would have to work as if they were a single.person—the workers and manager would each share only one.person's worth of freedom between them.in practice a group of people are never able to act as if they were.one person.  but in a large organization divided into groups in.this way, the pressure is always in that direction.  each group.tries its best to work as if it were the small group of individuals.that humans were designed to work in.  that was the point of creating.it.  and when you propagate that constraint, the result is that.each person gets freedom of action in inverse proportion to the.size of the entire tree..[2]anyone who's worked for a large organization has felt this.  you.can feel the difference between working for a company with 100.employees and one with 10,000, even if your group has only 10 people..corn syrupa group of 10 people within a large organization is a kind of fake.tribe.  the number of people you interact with is about right.  but.something is missing: individual initiative.  tribes of hunter-gatherers.have much more freedom.  the leaders have a little more power than other.members of the tribe, but they don't generally tell them what to.do and when the way a boss can.it's not your boss's fault.  the real problem is that in the group.above you in the hierarchy, your entire group is one virtual person..your boss is just the way that constraint is imparted to you.so working in a group of 10 people within a large organization feels.both right and wrong at the same time.   on the surface it feels.like the kind of group you're meant to work in, but something major.is missing.  a job at a big company is like high fructose corn.syrup: it has some of the qualities of things you're meant to like,.but is disastrously lacking in others.indeed, food is an excellent metaphor to explain what's wrong with.the usual sort of job.for example, working for a big company is the default thing to do,.at least for programmers.  how bad could it be?  well, food shows.that pretty clearly.  if you were dropped at a random point in.america today, nearly all the food around you would be bad for you..humans were not designed to eat white flour, refined sugar, high.fructose corn syrup, and hydrogenated vegetable oil.  and yet if.you analyzed the contents of the average grocery store you'd probably.find these four ingredients accounted for most of the calories.."normal" food is terribly bad for you.  the only people who eat.what humans were actually designed to eat are a few birkenstock-wearing.weirdos in berkeley.if "normal" food is so bad for us, why is it so common?  there are.two main reasons. one is that it has more immediate appeal.  you.may feel lousy an hour after eating that pizza, but eating the first.couple bites feels great.  the other is economies of scale..producing junk food scales; producing fresh vegetables doesn't..which means (a) junk food can be very cheap, and (b) it's worth.spending a lot to market it.if people have to choose between something that's cheap, heavily.marketed, and appealing in the short term, and something that's.expensive, obscure, and appealing in the long term, which do you.think most will choose?it's the same with work.  the average mit graduate wants to work.at google or microsoft, because it's a recognized brand, it's safe,.and they'll get paid a good salary right away.  it's the job.equivalent of the pizza they had for lunch.  the drawbacks will.only become apparent later, and then only in a vague sense of.malaise.and founders and early employees of startups, meanwhile, are like.the birkenstock-wearing weirdos of berkeley:  though a tiny minority.of the population, they're the ones living as humans are meant to..in an artificial world, only extremists live naturally..programmersthe restrictiveness of big company jobs is particularly hard on.programmers, because the essence of programming is to build new.things.  sales people make much the same pitches every day; support.people answer much the same questions; but once you've written a.piece of code you don't need to write it again.  so a programmer.working as programmers are meant to is always making new things..and when you're part of an organization whose structure gives each.person freedom in inverse proportion to the size of the tree, you're.going to face resistance when you do something new.this seems an inevitable consequence of bigness.  it's true even.in the smartest companies.  i was talking recently to a founder who.considered starting a startup right out of college, but went to.work for google instead because he thought he'd learn more there..he didn't learn as much as he expected.  programmers learn by doing,.and most of the things he wanted to do, he couldn't—sometimes.because the company wouldn't let him, but often because the company's.code wouldn't let him.  between the drag of legacy code, the overhead.of doing development in such a large organization, and the restrictions.imposed by interfaces owned by other groups, he could only try a.fraction of the things he would have liked to.  he said he has.learned much more in his own startup, despite the fact that he has.to do all the company's errands as well as programming, because at.least when he's programming he can do whatever he wants.an obstacle downstream propagates upstream.  if you're not allowed.to implement new ideas, you stop having them.  and vice versa: when.you can do whatever you want, you have more ideas about what to do..so working for yourself makes your brain more powerful in the same.way a low-restriction exhaust system makes an engine more powerful.working for yourself doesn't have to mean starting a startup, of.course.  but a programmer deciding between a regular job at a big.company and their own startup is probably going to learn more doing.the startup.you can adjust the amount of freedom you get by scaling the size.of company you work for.  if you start the company, you'll have the.most freedom.  if you become one of the first 10 employees you'll.have almost as much freedom as the founders.  even a company with.100 people will feel different from one with 1000.working for a small company doesn't ensure freedom.  the tree.structure of large organizations sets an upper bound on freedom,.not a lower bound.  the head of a small company may still choose.to be a tyrant.  the point is that a large organization is compelled.by its structure to be one..consequencesthat has real consequences for both organizations and individuals..one is that companies will inevitably slow down as they grow larger,.no matter how hard they try to keep their startup mojo.  it's a.consequence of the tree structure that every large organization is.forced to adopt.or rather, a large organization could only avoid slowing down if.they avoided tree structure.  and since human nature limits the.size of group that can work together, the only way i can imagine.for larger groups to avoid tree structure would be to have no.structure: to have each group actually be independent, and to work.together the way components of a market economy do.that might be worth exploring.  i suspect there are already some.highly partitionable businesses that lean this way.  but i don't.know any technology companies that have done it.there is one thing companies can do short of structuring themselves.as sponges:  they can stay small.  if i'm right, then it really.pays to keep a company as small as it can be at every stage..particularly a technology company.  which means it's doubly important.to hire the best people.  mediocre hires hurt you twice: they get.less done, but they also make you big, because you need more of.them to solve a given problem.for individuals the upshot is the same: aim small.  it will always.suck to work for large organizations, and the larger the organization,.the more it will suck.in an essay i wrote a couple years ago.i advised graduating seniors.to work for a couple years for another company before starting their.own.  i'd modify that now.  work for another company if you want.to, but only for a small one, and if you want to start your own.startup, go ahead.the reason i suggested college graduates not start startups immediately.was that i felt most would fail.  and they will.  but ambitious.programmers are better off doing their own thing and failing than.going to work at a big company.  certainly they'll learn more.  they.might even be better off financially.  a lot of people in their.early twenties get into debt, because their expenses grow even.faster than the salary that seemed so high when they left school..at least if you start a startup and fail your net worth will be.zero rather than negative..[3]we've now funded so many different types of founders that we have.enough data to see patterns, and there seems to be no benefit from.working for a big company.  the people who've worked for a few years.do seem better than the ones straight out of college, but only.because they're that much older.the people who come to us from big companies often seem kind of.conservative.  it's hard to say how much is because big companies.made them that way, and how much is the natural conservatism that.made them work for the big companies in the first place.  but.certainly a large part of it is learned.  i know because i've seen.it burn off.having seen that happen so many times is one of the things that.convinces me that working for oneself, or at least for a small.group, is the natural way for programmers to live.  founders arriving.at y combinator often have the downtrodden air of refugees.  three.months later they're transformed: they have so much more.confidence.that they seem as if they've grown several inches taller..[4].strange as this sounds, they seem both more worried and happier at the same.time.  which is exactly how i'd describe the way lions seem in the.wild.watching employees get transformed into founders makes it clear.that the difference between the two is due mostly to environment—and.in particular that the environment in big companies is toxic to.programmers.   in the first couple weeks of working on their own.startup they seem to come to life, because finally they're working.the way people are meant to.notes[1].when i talk about humans being meant or designed to live a.certain way, i mean by evolution.[2].it's not only the leaves who suffer.  the constraint propagates.up as well as down.  so managers are constrained too; instead of.just doing things, they have to act through subordinates.[3].do not finance your startup with credit cards.  financing a.startup with debt is usually a stupid move, and credit card debt.stupidest of all.  credit card debt is a bad idea, period.  it is.a trap set by evil companies for the desperate and the foolish.[4].the founders we fund used to be younger (initially we encouraged.undergrads to apply), and the first couple times i saw this i used.to wonder if they were actually getting physically taller.thanks to trevor blackwell, ross boucher, aaron iba, abby.kirigin, ivan kirigin, jessica livingston, and robert morris for.reading drafts of this.french translationrussian translation<eot><sot>a new venture animal.march 2008
, rev may 2013(this essay grew out of something i wrote for myself to figure.out what we do.  even though y combinator is now 3 years old, we're still.trying to understand its implications.).i was annoyed recently to read a description of y combinator that.said "y combinator does seed funding for startups."  what was.especially annoying about it was that i wrote it.  this doesn't.really convey what we do.  and the reason it's inaccurate is that,.paradoxically, funding very early stage startups is not mainly about.funding.saying yc does seed funding for startups is a description in terms.of earlier models.  it's like calling a car a horseless carriage.when you scale animals you can't just keep everything in proportion..for example, volume grows as the cube of linear dimension, but.surface area only as the square.  so as animals get bigger they.have trouble radiating heat.  that's why mice and rabbits are furry.and elephants and hippos aren't.  you can't make a mouse by scaling.down an elephant.yc represents a new, smaller kind of animal—so much smaller.that all the rules are different.before us, most companies in the startup funding business were.venture capital funds.  vcs generally fund later stage companies.than we do.  and they supply so much money that, even though the.other things they do may be very valuable, it's not that inaccurate.to regard vcs as sources of money.  good vcs are "smart money," but.they're still money.all good investors supply a combination of money and help.  but.these scale differently, just as volume and surface area do.  late.stage investors supply huge amounts of money and.comparatively little help: when a company about to go public gets.a mezzanine round of $50 million, the deal tends to be almost.entirely about money.  as you move earlier in the venture.funding process, the ratio of help to money increases, because.earlier stage companies have different needs.  early stage companies.need less money because they're smaller and cheaper to run, but.they need more help because life is so precarious for them.  so.when vcs do a series a round for, say, $2 million, they generally.expect to offer a significant amount of help along with the money.y combinator occupies the earliest end of the spectrum.  we're at.least one and generally two steps before vc funding.  (though some.startups go straight from yc to vc, the most common trajectory is.to do an angel round first.)  and what happens at y combinator is.as different from what happens in a series a round as a series a.round is from a mezzanine financing.at our end, money is almost a negligible factor.  the startup usually.consists of just the founders. their living expenses are the.company's main expense, and since most founders are under 30, their.living expenses are low.  but at this early stage companies need a.lot of help.  practically every question is still unanswered.  some.companies we've funded have been working on their software for a.year or more, but others haven't decided what to work on, or even.who the founders should be.when pr people and journalists recount the histories of startups.after they've become big, they always underestimate how uncertain.things were at first.  they're not being deliberately misleading..when you look at a company like google, it's hard to imagine they.could once have been small and helpless.  sure, at one point they.were a just a couple guys in a garage—but even then their.greatness was assured, and all they had to do was roll forward along.the railroad tracks of destiny.far from it.  a lot of startups with just as promising beginnings.end up failing.  google has such momentum now that it would be hard.for anyone to stop them.  but all it would have taken in the beginning.would have been for two google employees to focus on the wrong.things for six months, and the company could have died.we know, because we've been there, just how vulnerable startups are.in the earliest phases.  curiously enough, that's why founders tend.to get so rich from them.  reward is always proportionate to risk,.and very early stage startups are insanely risky.what we really do at y combinator is get startups launched straight..one of many metaphors you could use for yc is a steam catapult on.an aircraft carrier.  we get startups airborne.  barely airborne,.but enough that they can accelerate fast.when you're launching planes they have to be set up properly or.you're just launching projectiles.  they have to be pointed straight.down the deck; the wings have to be trimmed properly; the engines.have to be at full power; the pilot has to be ready.  these are the.kind of problems we deal with.  after we fund startups we work.closely with them for three months—so closely in fact that.we insist they move to where we are.  and what we do in those three.months is make sure everything is set up for launch.  if there are.tensions between cofounders we help sort them out.  we get all the.paperwork set up properly so there are no nasty surprises later..if the founders aren't sure what to focus on first, we try to figure.that out.  if there is some obstacle right in front of them, we.either try to remove it, or shift the startup sideways.  the goal.is to get every distraction out of the way so the founders can use.that time to build (or finish building) something impressive.  and.then near the end of the three months we push the button on the.steam catapult in the form of demo day, where the current group of.startups present to pretty much every investor in silicon valley.launching companies isn't identical with launching products.  though.we do spend a lot of time on launch strategies for products, there.are some things that take too long to build for a startup to launch.them before raising their next round of funding.  several of the.most promising startups we've funded haven't launched their products.yet, but are definitely launched as companies.in the earliest stage, startups not only have more questions to.answer, but they tend to be different kinds of questions.  in later.stage startups the questions are about deals, or hiring, or.organization.  in the earliest phase they tend to be about technology.and design.  what do you make?  that's the first problem to solve..that's why our motto is "make something people want."  this is.always a good thing for companies to do, but it's even more important.early on, because it sets the bounds for every other question.  who.you hire, how much money you raise, how you market yourself—they.all depend on what you're making.because the early problems are so much about technology and design,.you probably need to be hackers to do what we do.  while some vcs.have technical backgrounds, i don't know any who still write code..their expertise is mostly in business—as it should be, because.that's the kind of expertise you need in the phase between series.a and (if you're lucky) ipo.we're so different from vcs that we're really a different kind of.animal.  can we claim founders are better off as a result of this.new type of venture firm?  i'm pretty sure the answer is yes, because.yc is an improved version of what happened to our startup, and our.case was not atypical.  we started viaweb with $10,000 in seed money.from our friend julian.  he was a lawyer and arranged all our.paperwork, so we could just code.  we spent three months building.a version 1, which we then presented to investors to raise more.money.  sounds familiar, doesn't it?  but yc improves on that.significantly.  julian knew a lot about law and business, but his.advice ended there; he was not a startup guy.  so we made some basic.mistakes early on.  and when we presented to investors, we presented.to only 2, because that was all we knew.  if we'd had our later.selves to encourage and advise us, and demo day to present at, we.would have been in much better shape.  we probably could have raised.money at 3 to 5 times the valuation we did.if we take 7% of a company we fund, the founders only have to do.7.5% better in their next round of funding.to end up net ahead.  we certainly manage that.so who is our 7% coming out of?  if the founders end up net ahead.it's not coming out of them.  so is it coming out of later stage.investors?  well, they do end up paying more.  but i think they pay.more because the company is actually more valuable.  and later stage.investors have no problem with that.  the returns of a vc fund.depend on the quality of the companies they invest in, not how.cheaply they can buy stock in them.if what we do is useful, why wasn't anyone doing it before?  there.are two answers to that.  one is that people were doing it before,.just haphazardly on a smaller scale.  before us, seed funding came.primarily from individual angel investors.  larry and sergey, for.example, got their seed funding from andy bechtolsheim, one of the.founders of sun.  and because he was a startup guy he probably gave.them useful advice.  but raising money from angel investors is a.hit or miss thing.  it's a sideline for most of them, so they only.do a handful of deals a year and they don't spend a lot of time on.the startups they invest in.  and they're hard to reach, because.they don't want random startups pestering them with business plans..the google guys were lucky because they knew someone who knew.bechtolsheim.  it generally takes a personal introduction with.angels.the other reason no one was doing quite what we do is that till.recently it was a lot more expensive to start a startup.  you'll.notice we haven't funded any biotech startups.  that's still.expensive.  but advancing technology has made web startups so cheap.that you really can get a company airborne for $15,000.  if you.understand how to operate a steam catapult, at least.so in effect what's happened is that a new ecological niche has.opened up, and y combinator is the new kind of animal that has moved.into it.  we're not a replacement for venture capital funds.  we.occupy a new, adjacent niche.  and conditions in our niche are.really quite different.  it's not just that the problems we face.are different; the whole structure of the business is different..vcs are playing a zero-sum game.  they're all competing for a slice.of a fixed amount of "deal flow," and that explains a lot of their.behavior.  whereas our m.o. is to create new deal flow, by encouraging.hackers who would have gotten jobs to start their own startups.instead.  we compete more with employers than vcs.it's not surprising something like this would happen.  most fields.become more specialized—more articulated—as they develop,.and startups are certainly an area in which there has been a lot.of development over the past couple decades.  the venture business.in its present form is only about forty years old.  it stands to.reason it would evolve.and it's natural that the new niche would at first be described,.even by its inhabitants, in terms of the old one.  but really y.combinator is not in the startup funding business.  really we're.more of a small, furry steam catapult.thanks to trevor blackwell, jessica livingston, and robert morris.for reading drafts of this..comment on this essay.<eot><sot>trolls.february 2008
a user on hacker news recently posted a.comment.that set me thinking:.something about hacker culture that never really set well with.me was this  the nastiness. ... i just don't understand why people.troll like they do..i've thought a lot over the last couple years about the problem of.trolls.  it's an old one, as old as forums, but.we're still just learning what the causes are and how to address.them.there are two senses of the word "troll."  in the original sense.it meant someone, usually an outsider, who deliberately stirred up.fights in a forum by saying controversial things..[1].for example,.someone who didn't use a certain programming language might go to.a forum for users of that language and make disparaging remarks.about it, then sit back and watch as people rose to the bait.  this.sort of trolling was in the nature of a practical joke, like letting.a bat loose in a room full of people.the definition then spread to people who behaved like assholes in.forums, whether intentionally or not.  now when people talk about.trolls they usually mean this broader sense of the word.  though.in a sense this is historically inaccurate, it is in other ways.more accurate, because when someone is being an asshole it's usually.uncertain even in their own mind how much is deliberate..that is arguably one of the defining qualities of an asshole.i think trolling in the broader sense has four causes.  the most.important is distance.  people will say things in anonymous forums.that they'd never dare say to someone's face, just as they'll do.things in cars that they'd never do as pedestrians  like tailgate.people, or honk at them, or cut them off.trolling tends to be particularly bad in forums related to computers,.and i think that's due to the kind of people you find there.  most.of them (myself included) are more comfortable dealing with abstract.ideas than with people.  hackers can be abrupt even in person.  put.them on an anonymous forum, and the problem gets worse.the third cause of trolling is incompetence.  if you disagree with.something, it's easier to say "you suck" than to figure out and.explain exactly what you disagree with.  you're also safe that way.from refutation.  in this respect trolling is a lot like graffiti..graffiti happens at the intersection of ambition and incompetence:.people want to make their mark on the world, but have no other way.to do it than literally making a mark on the world..[2]the final contributing factor is the culture of the forum.  trolls.are like children (many are children) in that they're capable of.a wide range of behavior depending on what they think will be.tolerated.  in a place where rudeness isn't tolerated, most can be.polite.  but vice versa as well.there's a sort of gresham's law of trolls: trolls are willing to.use a forum with a lot of thoughtful people in it, but thoughtful.people aren't willing to use a forum with a lot of trolls in it..which means that once trolling takes hold, it tends to become the.dominant culture.  that had already happened to slashdot and digg by.the time i paid attention to comment threads there, but i watched.it happen to reddit.news.yc is, among other things, an experiment to see if this fate.can be avoided.  the sites's guidelines.explicitly ask people not to say things they wouldn't say face to.face.  if someone starts being rude, other users will step in and.tell them to stop.  and when people seem to be deliberately trolling,.we ban them ruthlessly.technical tweaks may also help.  on reddit, votes on your comments.don't affect your karma score, but they do on news.yc.  and it does.seem to influence people when they can see their reputation in the.eyes of their peers drain away after making an asshole remark..often users have second thoughts and delete such comments.one might worry this would prevent people from expressing controversial.ideas, but empirically that doesn't seem to be what happens.  when.people say something substantial that gets modded down, they.stubbornly leave it up.  what people delete are wisecracks, because.they have less invested in them.so far the experiment seems to be working.  the level of conversation.on news.yc is as high as on any forum i've seen.  but we still only.have about 8,000 uniques a day.  the conversations on reddit were.good when it was that small.  the challenge is whether we can keep.things this way.i'm optimistic we will.  we're not depending just on technical.tricks.  the core users of news.yc are mostly refugees from other.sites that were overrun by trolls.  they feel about trolls roughly.the way refugees from cuba or eastern europe feel about dictatorships..so there are a lot of people working to keep this from happening.again..notes[1].i mean forum in the general sense of a place to exchange views..the original internet forums were not web sites but usenet newsgroups.[2].i'm talking here about everyday tagging.  some graffiti is.quite impressive (anything becomes art if you do it well enough).but the median tag is just visual spam.russian translation<eot><sot>six principles for making new things.february 2008
the fiery reaction to the release of arc had.an unexpected consequence: it made me realize i had a design.philosophy.  the main complaint of the more articulate critics was.that arc seemed so flimsy. after years of working on it, all i had.to show for myself were a few thousand lines of macros?  why hadn't.i worked on more substantial problems?as i was mulling over these remarks it struck me how familiar they.seemed.  this was exactly the kind of thing people said at first.about viaweb, and y combinator, and most of my essays.when we launched viaweb, it seemed laughable to vcs and e-commerce."experts."  we were just a couple guys in an apartment,.which did not seem cool in 1995 the way it does now.  and the thing.we'd built, as far as they could tell, wasn't even software..software, to them, equalled big, honking windows apps.  since viaweb.was the first web-based app.they'd seen, it seemed to be nothing.more than a website.  they were even more contemptuous when they.discovered that viaweb didn't process credit card transactions (we.didn't for the whole first year).  transaction processing seemed.to them what e-commerce was all about.  it sounded serious and.difficult.and yet, mysteriously, viaweb ended up crushing all its competitors.the initial reaction to.y combinator was almost identical.  it.seemed laughably lightweight.  startup funding meant series a rounds:.millions of dollars given to a small number of startups founded by.people with established credentials after months of serious,.businesslike meetings, on terms described in a document a foot.thick.  y combinator seemed inconsequential.  it's too early to say.yet whether y combinator will turn out like viaweb, but judging.from the number of imitations, a lot of people seem to think we're.on to something.i can't measure whether my essays are successful, except in page.views, but the reaction to them is at least different from when i.started.  at first the default reaction of the slashdot trolls was.(translated into articulate terms): "who is this guy and what.authority does he have to write about these topics?  i haven't read.the essay, but there's no way anything so short and written in such.an informal style could have anything useful to say about such and.such topic, when people with degrees in the subject have already.written many thick books about it." now there's a new generation.of trolls on a new generation of sites, but they have at least.started to omit the initial "who is this guy?"now people are saying the same things about arc that they said at.first about viaweb and y combinator and most of my essays.  why the.pattern?  the answer, i realized, is that my m.o. for all four has.been the same.here it is: i like to find (a) simple solutions (b) to overlooked.problems (c) that actually need to be solved, and (d) deliver them.as informally as possible, (e) starting with a very crude version.1, then (f) iterating rapidly.when i first laid out these principles explicitly, i noticed something.striking: this is practically a recipe for generating a contemptuous.initial reaction.  though simple solutions are better, they don't.seem as impressive as complex ones.  overlooked problems are by.definition problems that most people think don't matter.  delivering.solutions in an informal way means that instead of judging something.by the way it's presented, people have to actually understand it,.which is more work.  and starting with a crude version 1 means your.initial effort is always small and incomplete.i'd noticed, of course, that people never seemed to grasp new ideas.at first.  i thought it was just because most people were stupid..now i see there's more to it than that.   like a.contrarian investment fund, someone following this strategy will.almost always be doing things that seem wrong to the average person.as with contrarian investment strategies, that's exactly the point..this technique is successful (in the long term) because it gives you.all the advantages other people forgo by trying to seem legit.  if.you work on overlooked problems, you're more likely to discover new.things, because you have less competition.  if you deliver solutions.informally, you (a) save all the effort you would have had to expend.to make them look impressive, and (b) avoid the danger of fooling.yourself as well as your audience.  and if you release a crude.version 1 then iterate, your solution can benefit from the imagination.of nature, which, as feynman pointed out, is more powerful than.your own.in the case of viaweb, the simple solution was to make the software.run on the server.  the overlooked problem was to generate web sites.automatically; in 1995, online stores were all made by hand by human.designers, but we knew this wouldn't scale.  the part that actually.mattered was graphic design, not transaction processing..the informal delivery mechanism was me, showing up in jeans and a.t-shirt at some retailer's office.  and the crude version 1 was,.if i remember correctly, less than 10,000 lines of code when we.launched.the power of this technique extends beyond startups and programming.languages and essays.  it probably extends to any kind of creative.work.  certainly it can be used in painting: this is exactly.what cezanne and klee did.at y combinator we bet money on it, in the sense that we encourage.the startups we fund to work this way. there are always new ideas.right under your nose.  so look for simple things that other people.have overlooked—things people will later claim were."obvious"—especially when they've been led astray by obsolete.conventions,.or by trying to do things that are superficially impressive.  figure.out what the real problem is, and make sure you solve that.  don't.worry about trying to look corporate; the product is what wins in.the long term.  and launch as soon as you can, so you start learning.from users what you should have been making.reddit is a classic example of.this approach.  when reddit first.launched, it seemed like there was nothing to it.  to the graphically.unsophisticated its deliberately minimal design seemed like no.design at all.  but reddit solved the real problem, which was to.tell people what was new and otherwise stay out of the way.  as a.result it became massively successful.  now that conventional ideas.have caught up with it, it seems obvious.  people look at reddit.and think the founders were lucky.  like all such things, it was.harder than it looked.  the reddits pushed so hard against the.current that they reversed it; now it looks like they're merely.floating downstream.so when you look at something like reddit and think "i wish i could.think of an idea like that," remember: ideas like that are all.around you.  but you ignore them because they look wrong.<eot><sot>why to move to a startup hub.october 2007
after the last.talk i gave, one of the organizers.got up on the.stage to deliver an impromptu rebuttal.  that never happened before..i only heard the first few sentences, but that was enough to tell.what i said that upset him: that startups would do better if they.moved to silicon valley.this conference was in london, and most of the audience seemed to.be from the uk.  so saying startups should move to silicon valley.seemed like a nationalistic remark: an obnoxious american telling.them that if they wanted to do things right they should all just.move to america.actually i'm less american than i seem.  i didn't say so, but i'm.british by birth.  and just as jews are ex officio allowed to tell.jewish jokes, i don't feel like i have to bother being diplomatic.with a british audience.the idea that startups would do better to move to silicon valley.is not even a nationalistic one..[1].it's the same thing i say to.startups in the us.  y combinator alternates between coasts every.6 months. every other funding cycle is in boston.  and even though.boston is the second biggest startup hub in the us (and the world),.we tell the startups from those cycles that their best bet is to.move to silicon valley.  if that's true of boston, it's even more.true of every other city.this is about cities, not countries.and i think i can prove i'm right.  you can easily reduce the.opposing argument ad what most people would agree was absurdum..few would be willing to claim that it doesn't matter at all where.a startup is—that a startup operating out of a small agricultural.town wouldn't benefit from moving to a startup hub.  most people.could see how it might be helpful to be in a place where there was.infrastructure for startups, accumulated knowledge about how to.make them work, and other people trying to do it.  and yet whatever.argument you use to prove that startups don't need to move from.london to silicon valley could equally well be used to prove startups.don't need to move from smaller towns to london.the difference between cities is a matter of degree.  and if, as.nearly everyone who knows agrees, startups are better off in silicon.valley than boston, then they're better off in silicon valley than.everywhere else too.i realize i might seem to have a vested interest in this conclusion,.because startups that move to the us might do it through y combinator..but the american startups we've funded will attest that i say the.same thing to them.i'm not claiming of course that every startup has to go to silicon.valley to succeed.  just that all other things being equal, the.more of a startup hub a place is, the better startups will do there..but other considerations can outweigh the advantages of moving..i'm not saying founders with families should uproot them to move.halfway around the world; that might be too much of a distraction.immigration difficulties might be another reason to stay put..dealing with immigration problems is like raising money: for some.reason it seems to consume all your attention.  a startup can't.afford much of that.  one canadian startup we funded spent about 6.months working on moving to the us.  eventually they just gave up,.because they couldn't afford to take so much time away from working.on their software.(if another country wanted to establish a rival to silicon valley,.the single best thing they could do might be to create a special.visa for startup founders.  us immigration policy is one of silicon.valley's biggest weaknesses.)if your startup is connected to a specific industry, you may be.better off in one of its centers.  a startup doing something related.to entertainment might want to be in new york or la.and finally, if a good investor has committed to fund.you if you stay where you are, you should probably stay.  finding.investors is hard.  you generally shouldn't pass up a definite.funding offer to move..[2]in fact, the quality of the investors may be the main advantage of.startup hubs.  silicon valley investors are noticeably more aggressive.than boston ones.  over and over, i've seen startups we've funded.snatched by west coast investors out from under the noses of boston.investors who saw them first but acted too slowly.  at this year's.boston demo day, i told the audience that this happened every year,.so if they saw a startup they liked, they should make them an offer..and yet within a month it had happened again: an aggressive west.coast vc who had met the founder of a yc-funded startup a week.before beat out a boston vc who had known him for years.  by the.time the boston vc grasped what was happening, the deal was already.gone.boston investors will admit they're more conservative.  some want.to believe this comes from the city's prudent yankee character..but occam's razor suggests the truth is less flattering.  boston.investors are probably more conservative than silicon valley investors.for the same reason chicago investors are more conservative than.boston ones.  they don't understand startups as well.west coast investors aren't bolder because they're irresponsible.cowboys, or because the good weather makes them optimistic.  they're.bolder because they know what they're doing.  they're the skiers.who ski on the diamond slopes.  boldness is the essence of venture.investing.  the way you get big returns is not by trying to avoid.losses, but by trying to ensure you get some of the big hits. and.the big hits often look risky at first.like facebook.  facebook was started in boston.  boston vcs had the.first shot at them.  but they said no, so facebook moved to silicon.valley and raised money there.  the partner who turned them down.now says that "may turn out to have been a mistake."empirically, boldness wins.  if the aggressive ways of west coast.investors are going to come back to bite them, it has been a long.time coming.  silicon valley has been pulling ahead of boston since.the 1970s.  if there was going to be a comeuppance for the west.coast investors, the bursting of the bubble would have been it..but since then the west coast has just pulled further ahead.west coast investors are confident enough of their judgement to act.boldly; east coast investors, not so much; but anyone who thinks.east coast investors act that way out of prudence should see the.frantic reactions of an east coast vc in the process of losing a.deal to a west coast one.in addition to the concentration that comes from specialization,.startup hubs are also markets.  and markets are usually centralized..even now, when traders could be anywhere, they cluster in a few.cities.  it's hard to say exactly what it is about face to face.contact that makes deals happen, but whatever it is, it hasn't yet.been duplicated by technology.walk down university ave at the right time, and you might overhear.five different people talking on the phone about deals.  in fact,.this is part of the reason y combinator is in boston half the time:.it's hard to stand that year round.  but though it can sometimes.be annoying to be surrounded by people who only think about one.thing, it's the place to be if that one thing is what you're trying.to do.i was talking recently to someone who works on search at google..he knew a lot of people at yahoo, so he was in a good position to.compare the two companies.  i asked him why google was better at.search.  he said it wasn't anything specific google did, but simply.that they understood search so much better.and that's why startups thrive in startup hubs like silicon valley..startups are a very specialized business, as specialized as diamond.cutting.  and in startup hubs they understand it..notes[1].the nationalistic idea is the converse: that startups should.stay in a certain city because of the country it's in.  if you.really have a "one world" viewpoint, deciding to move from london.to silicon valley is no different from deciding to move from chicago.to silicon valley.[2].an investor who merely seems like he will fund you, however,.you can ignore.  seeming like they will fund you one day is the way.investors say no.thanks to sam altman, jessica livingston, harjeet taggar, and kulveer.taggar for reading drafts of this..comment on this essay.japanese translation<eot><sot>the future of web startups.want to start a startup?  get funded by.y combinator..october 2007
(this essay is derived from a keynote at fowa in october 2007.)there's something interesting happening right now.  startups are.undergoing the same transformation that technology does when it becomes.cheaper.it's a pattern we see over and over in technology.  initially.there's some device that's very expensive and made.in small quantities.  then someone discovers how to make them cheaply;.many more get built; and as a result they can be used in new ways.computers are a familiar example.  when i was a kid, computers were.big, expensive machines built one at a time.  now they're a commodity..now we can stick computers in everything.this pattern is very old.  most of the turning.points in economic history are instances of it.  it happened to.steel in the 1850s, and to power in the 1780s..it happened to cloth manufacture in the thirteenth century, generating.the wealth that later brought about the renaissance.  agriculture.itself was an instance of this pattern.now as well as being produced by startups, this pattern.is happening to startups.  it's so cheap to start web startups.that orders of magnitudes more will be started.   if the pattern.holds true, that should cause dramatic changes.1. lots of startupsso my first prediction about the future of web startups is pretty.straightforward: there will be a lot of them.  when starting a.startup was expensive, you had to get the permission of investors.to do it.  now the only threshold is courage.even that threshold is getting lower, as people watch others take.the plunge and survive.  in the last batch of startups we funded,.we had several founders who said they'd thought of applying before,.but weren't sure and got jobs instead.  it was only after hearing.reports of friends who'd done it that they decided to try it.themselves.starting a startup is hard, but having a 9 to 5 job is hard too,.and in some ways a worse kind of hard.  in a startup you have lots.of worries, but you don't have that feeling that your life is flying.by like you do in a big company.  plus in a startup you could make.much more money.as word spreads that startups work, the number may grow.to a point that would now seem surprising.we now think of it as normal to have a job at a company, but this.is the thinnest of historical veneers.  just two or three.lifetimes ago, most people in what are now called industrialized.countries lived by farming.  so while it may seem surprising to.propose that large numbers of people will change the way they make.a living, it would be more surprising if they didn't.2. standardizationwhen technology makes something dramatically cheaper, standardization.always follows.  when you make things in large volumes you tend.to standardize everything that doesn't need to change.at y combinator we still only have four people, so we try to.standardize everything.  we could hire employees, but we want to be.forced to figure out how to scale investing.we often tell startups to release a minimal version one quickly,.then let the needs of the users determine what to do.next.  in essense, let the market design the product.  we've.done the same thing ourselves.  we think of the techniques we're.developing for dealing with large numbers of startups as like.software.  sometimes it literally is software, like.hacker news and.our application system.one of the most important things we've been working on standardizing.are investment terms.  till now investment terms have been.individually negotiated..this is a problem for founders, because it makes raising money.take longer and cost more in legal fees.  so as well as using the.same paperwork for every deal we do, we've commissioned generic.angel paperwork that all the startups we fund can use for future.rounds.some investors will still want to cook up their own deal terms..series a rounds, where you raise a million dollars or more, will.be custom deals for the forseeable future.  but i think angel rounds.will start to be done mostly with standardized agreements.  an angel.who wants to insert a bunch of complicated terms into the agreement.is probably not one you want anyway.3. new attitude to acquisitionanother thing i see starting to get standardized is acquisitions..as the volume of startups increases, big companies will start to.develop standardized procedures that make acquisitions little.more work than hiring someone.google is the leader here, as in so many areas of technology.  they.buy a lot of startups— more than most people realize, because they.only announce a fraction of them.   and being google, they're.figuring out how to do it efficiently.one problem they've solved is how to think about acquisitions.  for.most companies, acquisitions still carry some stigma of inadequacy..companies do them because they have to, but there's usually some.feeling they shouldn't have to—that their own programmers should.be able to build everything they need.google's example should cure the rest of the world of this idea..google has by far the best programmers of any public technology.company.  if they don't have a problem doing acquisitions, the.others should have even less problem.  however many google does,.microsoft should do ten times as many.one reason google doesn't have a problem with acquisitions.is that they know first-hand the quality of the people they can get.that way.  larry and sergey only started google after making the.rounds of the search engines trying to sell their idea and finding.no takers.  they've been the guys coming in to visit the big.company, so they know who might be sitting across that conference.table from them.4. riskier strategies are possiblerisk is always proportionate to reward.  the way to get really big.returns is to do things that seem crazy, like starting a new search.engine in 1998, or turning down a billion dollar acquisition offer.this has traditionally been a problem in venture funding.  founders.and investors have different attitudes to risk.  knowing that risk.is on average proportionate to reward, investors like risky strategies,.while founders, who don't have a big enough sample size to care.what's true on average, tend to be more conservative.if startups are easy to start, this conflict goes away, because.founders can start them younger, when it's rational to take more.risk, and can start more startups total in their careers.  when.founders can do lots of startups, they can start to look at the.world in the same portfolio-optimizing way as investors.  and that.means the overall amount of wealth created can be greater, because.strategies can be riskier.5. younger, nerdier foundersif startups become a cheap commodity, more people will be able to.have them, just as more people could have computers once microprocessors.made them cheap.  and in particular, younger and more technical.founders will be able to start startups than could before.back when it cost a lot to start a startup, you had to convince.investors to let you do it.  and that required very different skills.from actually doing the startup.  if investors were perfect judges,.the two would require exactly the same skills.  but unfortunately.most investors are terrible judges.  i know because i see behind.the scenes what an enormous amount of work it takes to raise money,.and the amount of selling required in an industry is always inversely.proportional to the judgement of the buyers.fortunately, if startups get cheaper to start, there's another way.to convince investors.  instead of going to venture capitalists.with a business plan and trying to convince them to fund it, you.can get a product launched on a few tens of thousands of dollars.of seed money from us or your uncle, and approach them with a.working company instead of a plan for one.  then instead of.having to seem smooth and confident, you can just point them to.alexa.this way of convincing investors is better suited to hackers, who.often went into technology in part because they felt uncomfortable.with the amount of fakeness required in other fields.6. startup hubs will persistit might seem that if startups get cheap to start, it will mean the.end of startup hubs like silicon valley.  if all you need to start.a startup is rent money, you should be able to do it anywhere.this is kind of true and kind of false.  it's true that you can now.start a startup anywhere.  but you have to do more with a.startup than just start it.  you have to make it succeed.  and that.is more likely to happen in a startup hub.i've thought a lot about this question, and it seems to me the.increasing cheapness of web startups will if anything increase the.importance of startup hubs.  the value of startup hubs, like centers.for any kind of business, lies in something very old-fashioned:.face to face meetings.  no technology in the immediate future will.replace walking down university ave and running into a friend who.tells you how to fix a bug that's been bothering you all weekend,.or visiting a friend's startup down the street and ending up in a.conversation with one of their investors.the question of whether to be in a startup hub is like the question.of whether to take outside investment.  the question is not whether.you need it, but whether it brings any advantage at all..because anything that brings an advantage will give your competitors.an advantage over you if they do it and you don't.  so if you hear.someone saying "we don't need to be in silicon valley," that use.of the word "need" is a sign they're not even thinking about the.question right.and while startup hubs are as powerful magnets as ever, the increasing.cheapness of starting a startup means the particles they're attracting.are getting lighter.  a startup now can be just a pair of 22 year.old guys.  a company like that can move much more easily than one.with 10 people, half of whom have kids.we know because we make people move for y combinator, and it doesn't.seem to be a problem. the advantage of being able to work together.face to face for three months outweighs the inconvenience of moving..ask anyone who's done it.the mobility of seed-stage startups means that seed funding is a.national business.  one of the most common emails we get is from.people asking if we can help them set up a local clone of y combinator..but this just wouldn't work. seed funding isn't regional, just as.big research universities aren't.is seed funding not merely national, but international?  interesting.question.  there are signs it may be.  we've had an ongoing.stream of founders from outside the us, and they tend to do.particularly well, because they're all people who were so determined.to succeed that they were willing to move to another country to do.it.the more mobile startups get, the harder it would be to start new.silicon valleys.  if startups are mobile, the best local talent.will go to the real silicon valley,.and all they'll get at the local one will be the people who didn't.have the energy to move.this is not a nationalistic idea, incidentally.  it's cities that.compete, not countries.  atlanta is just as hosed as munich.7. better judgement neededif the number of startups increases dramatically, then the people.whose job is to judge them are going to have to get better at.it.  i'm thinking particularly of investors and acquirers.  we now.get on the order of 1000 applications a year.  what are we going.to do if we get 10,000?that's actually an alarming idea.  but we'll figure out some kind.of answer.  we'll have to.  it will probably involve writing some.software, but fortunately we can do that.acquirers will also have to get better at picking winners..they generally do better than investors, because they pick.later, when there's more performance to measure.  but even at the.most advanced acquirers, identifying companies to.buy is extremely ad hoc, and completing the acquisition often.involves a great deal of unneccessary friction.i think acquirers may eventually have chief acquisition officers.who will both identify good acquisitions and make the deals happen..at the moment those two functions are separate.  promising new.startups are often discovered by developers.  if someone powerful.enough wants to buy them, the deal is handed over to corp dev guys.to negotiate.  it would be better if both were combined in.one group, headed by someone with a technical background and some.vision of what they wanted to accomplish.  maybe in the future big.companies will have both a vp of engineering responsible for.technology developed in-house, and a cao responsible for bringing.technology in from outside.at the moment, there is no one within big companies who gets in.trouble when they buy a startup for $200 million that they could.have bought earlier for $20 million.  there should start to be.someone who gets in trouble for that.8. college will changeif the best hackers start their own companies after college.instead of getting jobs, that will change what happens in college..most of these changes will be for the better.  i think the experience.of college is warped in a bad way by the expectation that afterward.you'll be judged by potential employers.one change will be in the meaning of "after.college," which will switch from when one graduates from college.to when one leaves it.  if you're starting your own company, why.do you need a degree?  we don't encourage people to start startups.during college, but the best founders are certainly.capable of it.  some of the most successful companies we've funded.were started by undergrads.i grew up in a time where college degrees seemed really important,.so i'm alarmed to be saying things like this, but there's nothing.magical about a degree.  there's nothing that magically changes.after you take that last exam.  the importance of degrees is due.solely to the administrative needs of large organizations.  these.can certainly affect your life—it's hard to get into grad.school, or to get a work visa in the us, without an undergraduate.degree—but tests like this will matter less and.less.as well as mattering less whether students get degrees, it will.also start to matter less where they go to college.  in a startup.you're judged by users, and they don't care where you went to.college.  so in a world of startups, elite universities will play.less of a role as gatekeepers.  in the us it's a national scandal.how easily children of rich parents game college admissions..but the way this problem ultimately gets solved may not be by.reforming the universities but by going around them.  we in the.technology world are used to that sort of solution: you don't beat.the incumbents; you redefine the problem to make them irrelevant.the greatest value of universities is not the brand name or perhaps.even the classes so much as the people you meet.  if.it becomes common to start a startup after college, students may start.trying to maximize this.  instead of focusing on getting.internships at companies they want to work for, they may start.to focus on working with other students they want as cofounders.what students do in their classes will change too.  instead of.trying to get good grades to impress future employers, students.will try to learn things.  we're talking about some pretty dramatic.changes here.9. lots of competitorsif it gets easier to start a startup, it's easier for competitors too..that doesn't erase the advantage of.increased cheapness, however.  you're not all playing a zero-sum.game.  there's not some fixed number of startups that can succeed,.regardless of how many are started.in fact, i don't think there's any limit to the number of startups.that could succeed.  startups succeed by creating wealth, which is.the satisfaction of people's desires.  and people's desires seem.to be effectively infinite, at least in the short term.what the increasing number of startups does mean is that you won't.be able to sit on a good idea.  other people have your idea, and.they'll be increasingly likely to do something about it.10. faster advancesthere's a good side to that, at least for consumers of.technology.  if people get right to work implementing ideas instead.of sitting on them, technology will evolve faster.some kinds of innovations happen a company at a time, like the.punctuated equilibrium model of evolution.  there are some kinds.of ideas that are so threatening that it's hard for big companies.even to think of them.  look at what a hard time microsoft is.having discovering web apps.  they're like a character in a movie.that everyone in the audience can see something bad is about to.happen to, but who can't see it himself.  the big innovations.that happen a company at a time will obviously happen faster if.the rate of new companies increases.but in fact there will be a double speed increase.  people won't.wait as long to act on new ideas, but also those ideas will.increasingly be developed within startups rather than big companies..which means technology will evolve faster per company as well.big companies are just not a good place to make things happen fast..i talked recently to a founder whose startup had been acquired by.a big company.  he was a precise sort of guy, so he'd measured their.productivity before and after.  he counted lines of code, which can.be a dubious measure, but in this case was meaningful because it.was the same group of programmers.  he found they were one thirteenth.as productive after the acquisition.the company that bought them was not a particularly stupid one..i think what he was measuring was mostly the cost of bigness.  i.experienced this myself, and his number sounds about right.  there's.something about big companies that just sucks the energy out of.you.imagine what all that energy could do if it were put to use.  there.is an enormous latent capacity in the world's hackers that most.people don't even realize is there.  that's the main reason we do.y combinator: to let loose all this energy by making it easy for.hackers to start their own startups.a series of tubesthe process of starting startups is currently like the plumbing in.an old house.  the pipes are narrow and twisty, and there are leaks.in every joint.  in the future this mess will gradually be replaced.by a single, huge pipe.  the water will still have to get from a.to b, but it will get there faster and without the risk of spraying.out through some random leak.this will change a lot of things for the better.  in a big, straight.pipe like that, the force of being measured by one's performance.will propagate back through the whole system.  performance is always.the ultimate test, but there are so many kinks in the plumbing now.that most people are insulated from it most of the time.  so you.end up with a world in which high school students think they need.to get good grades to get into elite colleges, and college students.think they need to get good grades to impress employers, within.which the employees waste most of their time in political battles,.and from which consumers have to buy anyway because there are so.few choices.  imagine if that sequence became a big, straight pipe..then the effects of being measured by performance would propagate.all the way back to high school, flushing out all the arbitrary.stuff people are measured by now.  that is the future of web startups.thanks to brian oberkirch and simon willison for inviting me to.speak, and the crew at carson systems for making everything run smoothly.japanese translation<eot><sot>how to do philosophy.september 2007
in high school i decided i was going to study philosophy in college..i had several motives, some more honorable than others.  one of the.less honorable was to shock people.  college was regarded as job.training where i grew up, so studying philosophy seemed an impressively.impractical thing to do.  sort of like slashing holes in your clothes.or putting a safety pin through your ear, which were other forms.of impressive impracticality then just coming into fashion.but i had some more honest motives as well.  i thought studying.philosophy would be a shortcut straight to wisdom.  all the people.majoring in other things would just end up with a bunch of domain.knowledge.  i would be learning what was really what.i'd tried to read a few philosophy books.  not recent ones; you.wouldn't find those in our high school library.  but i tried to.read plato and aristotle.  i doubt i believed i understood them,.but they sounded like they were talking about something important..i assumed i'd learn what in college.the summer before senior year i took some college classes.  i learned.a lot in the calculus class, but i didn't learn much in philosophy.101.  and yet my plan to study philosophy remained intact.  it was.my fault i hadn't learned anything.  i hadn't read the books we.were assigned carefully enough.  i'd give berkeley's principles.of human knowledge another shot in college.  anything so admired.and so difficult to read must have something in it, if one could.only figure out what.twenty-six years later, i still don't understand berkeley.  i have.a nice edition of his collected works.  will i ever read it?  seems.unlikely.the difference between then and now is that now i understand why.berkeley is probably not worth trying to understand.  i think i see.now what went wrong with philosophy, and how we might fix it.wordsi did end up being a philosophy major for most of college.  it.didn't work out as i'd hoped.  i didn't learn any magical truths.compared to which everything else was mere domain knowledge.  but.i do at least know now why i didn't.  philosophy doesn't really.have a subject matter in the way math or history or most other.university subjects do.  there is no core of knowledge one must.master.  the closest you come to that is a knowledge of what various.individual philosophers have said about different topics over the.years.  few were sufficiently correct that people have forgotten.who discovered what they discovered.formal logic has some subject matter. i took several classes in.logic.  i don't know if i learned anything from them..[1].it does seem to me very important to be able to flip ideas around in.one's head: to see when two ideas don't fully cover the space of.possibilities, or when one idea is the same as another but with a.couple things changed.  but did studying logic teach me the importance.of thinking this way, or make me any better at it?  i don't know.there are things i know i learned from studying philosophy.  the.most dramatic i learned immediately, in the first semester of.freshman year, in a class taught by sydney shoemaker.  i learned.that i don't exist.  i am (and you are) a collection of cells that.lurches around driven by various forces, and calls itself i.  but.there's no central, indivisible thing that your identity goes with..you could conceivably lose half your brain and live.  which means.your brain could conceivably be split into two halves and each.transplanted into different bodies.  imagine waking up after such.an operation.  you have to imagine being two people.the real lesson here is that the concepts we use in everyday life.are fuzzy, and break down if pushed too hard.  even a concept as.dear to us as i.  it took me a while to grasp this, but when i.did it was fairly sudden, like someone in the nineteenth century.grasping evolution and realizing the story of creation they'd been.told as a child was all wrong..[2].outside of math there's a limit.to how far you can push words; in fact, it would not be a bad.definition of math to call it the study of terms that have precise.meanings.  everyday words are inherently imprecise.  they work well.enough in everyday life that you don't notice.  words seem to work,.just as newtonian physics seems to.  but you can always make them.break if you push them far enough.i would say that this has been, unfortunately for philosophy, the.central fact of philosophy.  most philosophical debates are not.merely afflicted by but driven by confusions over words.  do we.have free will?  depends what you mean by "free." do abstract ideas.exist?  depends what you mean by "exist."wittgenstein is popularly credited with the idea that most philosophical.controversies are due to confusions over language.  i'm not sure.how much credit to give him.  i suspect a lot of people realized.this, but reacted simply by not studying philosophy, rather than.becoming philosophy professors.how did things get this way?  can something people have spent.thousands of years studying really be a waste of time?  those are.interesting questions.  in fact, some of the most interesting.questions you can ask about philosophy.  the most valuable way to.approach the current philosophical tradition may be neither to get.lost in pointless speculations like berkeley, nor to shut them down.like wittgenstein, but to study it as an example of reason gone.wrong.historywestern philosophy really begins with socrates, plato, and aristotle..what we know of their predecessors comes from fragments and references.in later works; their doctrines could be described as speculative.cosmology that occasionally strays into analysis.  presumably they.were driven by whatever makes people in every other society invent.cosmologies..[3]with socrates, plato, and particularly aristotle, this tradition.turned a corner.  there started to be a lot more analysis.  i suspect.plato and aristotle were encouraged in this by progress in math..mathematicians had by then shown that you could figure things out.in a much more conclusive way than by making up fine sounding stories.about them..[4]people talk so much about abstractions now that we don't realize.what a leap it must have been when they first started to.  it was.presumably many thousands of years between when people first started.describing things as hot or cold and when someone asked "what is.heat?"  no doubt it was a very gradual process.  we don't know if.plato or aristotle were the first to ask any of the questions they.did.  but their works are the oldest we have that do this on a large.scale, and there is a freshness (not to say naivete) about them.that suggests some of the questions they asked were new to them,.at least.aristotle in particular reminds me of the phenomenon that happens.when people discover something new, and are so excited by it that.they race through a huge percentage of the newly discovered territory.in one lifetime.  if so, that's evidence of how new this kind of.thinking was..[5]this is all to explain how plato and aristotle can be very impressive.and yet naive and mistaken.  it was impressive even to ask the.questions they did.  that doesn't mean they always came up with.good answers.  it's not considered insulting to say that ancient.greek mathematicians were naive in some respects, or at least lacked.some concepts that would have made their lives easier.  so i hope.people will not be too offended if i propose that ancient philosophers.were similarly naive.  in particular, they don't seem to have fully.grasped what i earlier called the central fact of philosophy: that.words break if you push them too far."much to the surprise of the builders of the first digital computers,".rod brooks wrote, "programs written for them usually did not work.".[6].something similar happened when people first started trying.to talk about abstractions.  much to their surprise, they didn't.arrive at answers they agreed upon.  in fact, they rarely seemed.to arrive at answers at all.they were in effect arguing about artifacts induced by sampling at.too low a resolution.the proof of how useless some of their answers turned out to be is.how little effect they have.  no one after reading aristotle's.metaphysics does anything differently as a result..[7]surely i'm not claiming that ideas have to have practical applications.to be interesting?  no, they may not have to.  hardy's boast that.number theory had no use whatsoever wouldn't disqualify it.  but.he turned out to be mistaken.  in fact, it's suspiciously hard to.find a field of math that truly has no practical use.  and aristotle's.explanation of the ultimate goal of philosophy in book a of the.metaphysics implies that philosophy should be useful too.theoretical knowledgearistotle's goal was to find the most general of general principles..the examples he gives are convincing: an ordinary worker builds.things a certain way out of habit; a master craftsman can do more.because he grasps the underlying principles.  the trend is clear:.the more general the knowledge, the more admirable it is.  but then.he makes a mistake—possibly the most important mistake in the.history of philosophy.  he has noticed that theoretical knowledge.is often acquired for its own sake, out of curiosity, rather than.for any practical need.  so he proposes there are two kinds of.theoretical knowledge: some that's useful in practical matters and.some that isn't.  since people interested in the latter are interested.in it for its own sake, it must be more noble.  so he sets as his.goal in the metaphysics the exploration of knowledge that has no.practical use.  which means no alarms go off when he takes on grand.but vaguely understood questions and ends up getting lost in a sea.of words.his mistake was to confuse motive and result.  certainly, people.who want a deep understanding of something are often driven by.curiosity rather than any practical need.  but that doesn't mean.what they end up learning is useless.  it's very valuable in practice.to have a deep understanding of what you're doing; even if you're.never called on to solve advanced problems, you can see shortcuts.in the solution of simple ones, and your knowledge won't break down.in edge cases, as it would if you were relying on formulas you.didn't understand.  knowledge is power.  that's what makes theoretical.knowledge prestigious.  it's also what causes smart people to be.curious about certain things and not others; our dna is not so.disinterested as we might think.so while ideas don't have to have immediate practical applications.to be interesting, the kinds of things we find interesting will.surprisingly often turn out to have practical applications.the reason aristotle didn't get anywhere in the metaphysics was.partly that he set off with contradictory aims: to explore the most.abstract ideas, guided by the assumption that they were useless..he was like an explorer looking for a territory to the north of.him, starting with the assumption that it was located to the south.and since his work became the map used by generations of future.explorers, he sent them off in the wrong direction as well..[8].perhaps worst of all, he protected them from both the criticism of.outsiders and the promptings of their own inner compass by establishing.the principle that the most noble sort of theoretical knowledge had.to be useless.the metaphysics is mostly a failed experiment.  a few ideas from.it turned out to be worth keeping; the bulk of it has had no effect.at all.  the metaphysics is among the least read of all famous.books.  it's not hard to understand the way newton's principia.is, but the way a garbled message is.arguably it's an interesting failed experiment.  but unfortunately.that was not the conclusion aristotle's successors derived from.works like the metaphysics..[9].soon after, the western world.fell on intellectual hard times.  instead of version 1s to be.superseded, the works of plato and aristotle became revered texts.to be mastered and discussed.  and so things remained for a shockingly.long time.  it was not till around 1600 (in europe, where the center.of gravity had shifted by then) that one found people confident.enough to treat aristotle's work as a catalog of mistakes.  and.even then they rarely said so outright.if it seems surprising that the gap was so long, consider how little.progress there was in math between hellenistic times and the.renaissance.in the intervening years an unfortunate idea took hold:  that it.was not only acceptable to produce works like the metaphysics,.but that it was a particularly prestigious line of work, done by a.class of people called philosophers.  no one thought to go back and.debug aristotle's motivating argument.  and so instead of correcting.the problem aristotle discovered by falling into it—that you can.easily get lost if you talk too loosely about very abstract ideas—they.continued to fall into it.the singularitycuriously, however, the works they produced continued to attract.new readers.  traditional philosophy occupies a kind of singularity.in this respect.  if you write in an unclear way about big ideas,.you produce something that seems tantalizingly attractive to.inexperienced but intellectually ambitious students.  till one knows.better, it's hard to distinguish something that's hard to understand.because the writer was unclear in his own mind from something like.a mathematical proof that's hard to understand because the ideas.it represents are hard to understand.  to someone who hasn't learned.the difference, traditional philosophy seems extremely attractive:.as hard (and therefore impressive) as math, yet broader in scope..that was what lured me in as a high school student.this singularity is even more singular in having its own defense.built in.  when things are hard to understand, people who suspect.they're nonsense generally keep quiet.  there's no way to prove a.text is meaningless.  the closest you can get is to show that the.official judges of some class of texts can't distinguish them from.placebos..[10]and so instead of denouncing philosophy, most people who suspected.it was a waste of time just studied other things.  that alone is.fairly damning evidence, considering philosophy's claims.  it's.supposed to be about the ultimate truths. surely all smart people.would be interested in it, if it delivered on that promise.because philosophy's flaws turned away the sort of people who might.have corrected them, they tended to be self-perpetuating.  bertrand.russell wrote in a letter in 1912:.hitherto the people attracted to philosophy have been mostly those.who loved the big generalizations, which were all wrong, so that.few people with exact minds have taken up the subject..[11].his response was to launch wittgenstein at it, with dramatic results.i think wittgenstein deserves to be famous not for the discovery.that most previous philosophy was a waste of time, which judging.from the circumstantial evidence must have been made by every smart.person who studied a little philosophy and declined to pursue it.further, but for how he acted in response..[12].instead of quietly.switching to another field, he made a fuss, from inside.  he was.gorbachev.the field of philosophy is still shaken from the fright wittgenstein.gave it..[13].later in life he spent a lot of time talking about.how words worked.  since that seems to be allowed, that's what a.lot of philosophers do now.  meanwhile, sensing a vacuum in the.metaphysical speculation department, the people who used to do.literary criticism have been edging kantward, under new names like."literary theory," "critical theory," and when they're feeling.ambitious, plain "theory."  the writing is the familiar word salad:.gender is not like some of the other grammatical modes which.express precisely a mode of conception without any reality that.corresponds to the conceptual mode, and consequently do not express.precisely something in reality by which the intellect could be.moved to conceive a thing the way it does, even where that motive.is not something in the thing as such..[14].the singularity i've described is not going away.  there's a market.for writing that sounds impressive and can't be disproven. there.will always be both supply and demand.  so if one group abandons.this territory, there will always be others ready to occupy it.a proposalwe may be able to do better.  here's an intriguing possibility..perhaps we should do what aristotle meant to do, instead of what.he did.  the goal he announces in the metaphysics seems one worth.pursuing: to discover the most general truths.  that sounds good..but instead of trying to discover them because they're useless,.let's try to discover them because they're useful.i propose we try again, but that we use that heretofore despised.criterion, applicability, as a guide to keep us from wondering.off into a swamp of abstractions.  instead of trying to answer the.question:.what are the most general truths?.let's try to answer the question.of all the useful things we can say, which are the most general?.the test of utility i propose is whether we cause people who read.what we've written to do anything differently afterward.  knowing.we have to give definite (if implicit) advice will keep us from.straying beyond the resolution of the words we're using.the goal is the same as aristotle's; we just approach it from a.different direction.as an example of a useful, general idea, consider that of the.controlled experiment.  there's an idea that has turned out to be.widely applicable.  some might say it's part of science, but it's.not part of any specific science; it's literally meta-physics (in.our sense of "meta").   the idea of evolution is another. it turns.out to have quite broad applications—for example, in genetic.algorithms and even product design.  frankfurt's distinction between.lying and bullshitting seems a promising recent example..[15]these seem to me what philosophy should look like: quite general.observations that would cause someone who understood them to do.something differently.such observations will necessarily be about things that are imprecisely.defined.  once you start using words with precise meanings, you're.doing math.  so starting from utility won't entirely solve the.problem i described above—it won't flush out the metaphysical.singularity.  but it should help.  it gives people with good.intentions a new roadmap into abstraction.  and they may thereby.produce things that make the writing of the people with bad intentions.look bad by comparison.one drawback of this approach is that it won't produce the sort of.writing that gets you tenure.  and not just because it's not currently.the fashion.  in order to get tenure in any field you must not.arrive at conclusions that members of tenure committees can disagree.with.  in practice there are two kinds of solutions to this problem..in math and the sciences, you can prove what you're saying, or at.any rate adjust your conclusions so you're not claiming anything.false ("6 of 8 subjects had lower blood pressure after the treatment")..in the humanities you can either avoid drawing any definite conclusions.(e.g. conclude that an issue is a complex one), or draw conclusions.so narrow that no one cares enough to disagree with you.the kind of philosophy i'm advocating won't be able to take either.of these routes.  at best you'll be able to achieve the essayist's.standard of proof, not the mathematician's or the experimentalist's..and yet you won't be able to meet the usefulness test without.implying definite and fairly broadly applicable conclusions.  worse.still, the usefulness test will tend to produce results that annoy.people: there's no use in telling people things they already believe,.and people are often upset to be told things they don't.here's the exciting thing, though.  anyone can do this.  getting.to general plus useful by starting with useful and cranking up the.generality may be unsuitable for junior professors trying to get.tenure, but it's better for everyone else, including professors who.already have it.  this side of the mountain is a nice gradual slope..you can start by writing things that are useful but very specific,.and then gradually make them more general.  joe's has good burritos..what makes a good burrito?  what makes good food?  what makes.anything good?  you can take as long as you want.  you don't have.to get all the way to the top of the mountain.  you don't have to.tell anyone you're doing philosophy.if it seems like a daunting task to do philosophy, here's an.encouraging thought.  the field is a lot younger than it seems..though the first philosophers in the western tradition lived about.2500 years ago, it would be misleading to say the field is 2500.years old, because for most of that time the leading practitioners.weren't doing much more than writing commentaries on plato or.aristotle while watching over their shoulders for the next invading.army.  in the times when they weren't, philosophy was hopelessly.intermingled with religion.  it didn't shake itself free till a.couple hundred years ago, and even then was afflicted by the.structural problems i've described above.  if i say this, some will.say it's a ridiculously overbroad and uncharitable generalization,.and others will say it's old news, but here goes: judging from their.works, most philosophers up to the present have been wasting their.time.  so in a sense the field is still at the first step..[16]that sounds a preposterous claim to make.  it won't seem so.preposterous in 10,000 years.  civilization always seems old, because.it's always the oldest it's ever been.  the only way to say whether.something is really old or not is by looking at structural evidence,.and structurally philosophy is young; it's still reeling from the.unexpected breakdown of words.philosophy is as young now as math was in 1500.  there is a lot.more to discover.notes.[1].in practice formal logic is not much use, because despite.some progress in the last 150 years we're still only able to formalize.a small percentage of statements.  we may never do that much better,.for the same reason 1980s-style "knowledge representation" could.never have worked; many statements may have no representation more.concise than a huge, analog brain state.[2].it was harder for darwin's contemporaries to grasp this than.we can easily imagine.  the story of creation in the bible is not.just a judeo-christian concept; it's roughly what everyone must.have believed since before people were people.  the hard part of.grasping evolution was to realize that species weren't, as they.seem to be, unchanging, but had instead evolved from different,.simpler organisms over unimaginably long periods of time.now we don't have to make that leap.  no one in an industrialized.country encounters the idea of evolution for the first time as an.adult.  everyone's taught about it as a child, either as truth or.heresy.[3].greek philosophers before plato wrote in verse.  this must.have affected what they said.  if you try to write about the nature.of the world in verse, it inevitably turns into incantation.  prose.lets you be more precise, and more tentative.[4].philosophy is like math's.ne'er-do-well brother.  it was born when plato and aristotle looked.at the works of their predecessors and said in effect "why can't.you be more like your brother?"  russell was still saying the same.thing 2300 years later.math is the precise half of the most abstract ideas, and philosophy.the imprecise half.  it's probably inevitable that philosophy will.suffer by comparison, because there's no lower bound to its precision..bad math is merely boring, whereas bad philosophy is nonsense.  and.yet there are some good ideas in the imprecise half.[5].aristotle's best work was in logic and zoology, both of which.he can  be said to have invented.  but the most dramatic departure.from his predecessors was a new, much more analytical style of.thinking.  he was arguably the first scientist.[6].brooks, rodney, programming in common lisp, wiley, 1985, p..94.[7].some would say we depend on aristotle more than we realize,.because his ideas were one of the ingredients in our common culture..certainly a lot of the words we use have a connection with aristotle,.but it seems a bit much to suggest that we wouldn't have the concept.of the essence of something or the distinction between matter and.form if aristotle hadn't written about them.one way to see how much we really depend on aristotle would be to.diff european culture with chinese: what ideas did european culture.have in 1800 that chinese culture didn't, in virtue of aristotle's.contribution?[8].the meaning of the word "philosophy" has changed over time..in ancient times it covered a broad range of topics, comparable in.scope to our "scholarship" (though without the methodological.implications).  even as late as newton's time it included what we.now call "science."  but core of the subject today is still what.seemed to aristotle the core: the attempt to discover the most.general truths.aristotle didn't call this "metaphysics."  that name got assigned.to it because the books we now call the metaphysics came after.(meta = after) the physics in the standard edition of aristotle's.works compiled by andronicus of rhodes three centuries later.  what.we call "metaphysics" aristotle called "first philosophy."[9].some of aristotle's immediate successors may have realized.this, but it's hard to say because most of their works are lost.[10].sokal, alan, "transgressing the boundaries: toward a transformative.hermeneutics of quantum gravity," social text 46/47, pp. 217-252.abstract-sounding nonsense seems to be most attractive when it's.aligned with some axe the audience already has to grind.  if this.is so we should find it's most popular with groups that are (or.feel) weak.  the powerful don't need its reassurance.[11].letter to ottoline morrell, december 1912.  quoted in:monk, ray, ludwig wittgenstein: the duty of genius, penguin, 1991,.p. 75.[12].a preliminary result, that all metaphysics between aristotle.and 1783 had been a waste of time, is due to i. kant.[13].wittgenstein asserted a sort of mastery to which the inhabitants.of early 20th century cambridge seem to have been peculiarly.vulnerable—perhaps partly because so many had been raised religious.and then stopped believing, so had a vacant space in their heads.for someone to tell them what to do (others chose marx or cardinal.newman), and partly because a quiet, earnest place like cambridge.in that era had no natural immunity to messianic figures, just as.european politics then had no natural immunity to dictators.[14].this is actually from the ordinatio of duns scotus (ca..1300), with "number" replaced by "gender."  plus ca change.wolter, allan (trans), duns scotus: philosophical writings, nelson,.1963, p. 92.[15].frankfurt, harry, on bullshit,  princeton university press,.2005.[16].some introductions to philosophy now take the line that.philosophy is worth studying as a process rather than for any.particular truths you'll learn.  the philosophers whose works they.cover would be rolling in their graves at that.  they hoped they.were doing more than serving as examples of how to argue: they hoped.they were getting results.  most were wrong, but it doesn't seem.an impossible hope.this argument seems to me like someone in 1500 looking at the lack.of results achieved by alchemy and saying its value was as a process..no, they were going about it wrong.  it turns out it is possible.to transmute lead into gold (though not economically at current.energy prices), but the route to that knowledge was to.backtrack and try another approach.thanks to trevor blackwell, paul buchheit, jessica livingston,.robert morris, mark nitzberg, and peter norvig for reading drafts of this.french translation<eot><sot>news from the front.september 2007
a few weeks ago i had a thought so heretical that it really surprised.me. it may not matter all that much where you go to college.for me, as for a lot of middle class kids, getting into a good.college was more or less the meaning of life when i was growing up..what was i?  a student.  to do that well meant to get good grades..why did one have to get good grades?  to get into a good college..and why did one want to do that?  there seemed to be several reasons:.you'd learn more, get better jobs, make more money.  but it didn't.matter exactly what the benefits would be.  college was a bottleneck.through which all your future prospects passed; everything would.be better if you went to a better college.a few weeks ago i realized that somewhere along the line i had.stopped believing that.what first set me thinking about this was the new trend of worrying.obsessively about what.kindergarten.your kids go to.  it seemed to.me this couldn't possibly matter.  either it won't help your kid.get into harvard, or if it does, getting into harvard won't mean.much anymore.  and then i thought: how much does it mean even now?it turns out i have a lot of data about that.  my three partners.and i run a seed stage investment firm called.y combinator.  we.invest when the company is just a couple guys and an idea.  the.idea doesn't matter much; it will change anyway.  most of our.decision is based on the founders.  the average founder is three.years out of college.  many have just graduated; a few are still.in school.  so we're in much the same position as a graduate program,.or a company hiring people right out of college.  except our choices.are immediately and visibly tested.  there are two possible outcomes.for a startup: success or failure—and usually you know within a.year which it will be.the test applied to a startup is among the purest of real world.tests.  a startup succeeds or fails depending almost entirely on.the efforts of the founders.  success is decided by the market: you.only succeed if users like what you've built.  and users don't care.where you went to college.as well as having precisely measurable results, we have a lot of.them.  instead of doing a small number of large deals like a.traditional venture capital fund, we do a large number of small.ones.  we currently fund about 40 companies a year, selected from.about 900 applications representing a total of about 2000 people..[1]between the volume of people we judge and the rapid, unequivocal.test that's applied to our choices, y combinator has been an.unprecedented opportunity for learning how to pick winners.  one.of the most surprising things we've learned is how little it matters.where people went to college.i thought i'd already been cured of caring about that.  there's.nothing like going to grad school at harvard to cure you of any.illusions you might have about the average harvard undergrad.  and.yet y combinator showed us we were still overestimating people who'd.been to elite colleges.  we'd interview people from mit or harvard.or stanford and sometimes find ourselves thinking: they must be.smarter than they seem.  it took us a few iterations to learn to.trust our senses.practically everyone thinks that someone who went to mit or harvard.or stanford must be smart.  even people who hate you for it believe.it.but when you think about what it means to have gone to an elite.college, how could this be true?   we're talking about a decision.made by admissions officers—basically, hr people—based on a.cursory examination of a huge pile of depressingly similar applications.submitted by seventeen year olds.  and what do they have to go on?.an easily gamed standardized test; a short essay telling you what.the kid thinks you want to hear; an interview with a random alum;.a high school record that's largely an index of obedience.  who.would rely on such a test?and yet a lot of companies do.  a lot of companies are very much.influenced by where applicants went to college.  how could they be?.i think i know the answer to that.there used to be a saying in the corporate world: "no one ever got.fired for buying ibm."  you no longer hear this about ibm specifically,.but the idea is very much alive; there is a whole category of."enterprise" software companies that exist to take advantage of it..people buying technology for large organizations don't care if they.pay a fortune for mediocre software.  it's not their money.  they.just want to buy from a supplier who seems safe—a company with.an established name, confident salesmen, impressive offices, and.software that conforms to all the current fashions.  not necessarily.a company that will deliver so much as one that, if they do let you.down, will still seem to have been a prudent choice.  so companies.have evolved to fill that niche.a recruiter at a big company is in much the same position as someone.buying technology for one.  if someone went to stanford and is not.obviously insane, they're probably a safe bet.  and a safe bet is.enough.  no one ever measures recruiters by the later performance.of people they turn down..[2]i'm not saying, of course, that elite colleges have evolved to prey.upon the weaknesses of large organizations the way enterprise.software companies have.  but they work as if they had.  in addition.to the power of the brand name, graduates of elite colleges have.two critical qualities that plug right into the way large organizations.work.  they're good at doing what they're asked, since that's what.it takes to please the adults who judge you at seventeen.  and.having been to an elite college makes them more confident.back in the days when people might spend their whole career at one.big company, these qualities must have been very valuable.  graduates.of elite colleges would have been capable, yet amenable to authority..and since individual performance is so hard to measure in large.organizations, their own confidence would have been the starting.point for their reputation.things are very different in the new world of startups.  we couldn't.save someone from the market's judgement even if we wanted to.  and.being charming and confident counts for nothing with users.  all.users care about is whether you make something they like.  if you.don't, you're dead.knowing that test is coming makes us work a lot harder to get the.right answers than anyone would if they were merely hiring people..we can't afford to have any illusions about the predictors of.success.  and what we've found is that the variation between schools.is so much smaller than the variation between individuals that it's.negligible by comparison.  we can learn more about someone in the.first minute of talking to them than by knowing where they went to.school.it seems obvious when you put it that way.  look at the individual,.not where they went to college.  but that's a weaker statement than.the idea i began with, that it doesn't matter much where a given.individual goes to college.  don't you learn things at the best.schools that you wouldn't learn at lesser places?apparently not.  obviously you can't prove this in the case of a.single individual, but you can tell from aggregate evidence: you.can't, without asking them, distinguish people who went to one.school from those who went to another three times as far down the.us news list..[3].try it and see.how can this be?  because how much you learn in college depends a.lot more on you than the college.  a determined party animal can.get through the best school without learning anything.  and someone.with a real thirst for knowledge will be able to find a few smart.people to learn from at a school that isn't prestigious at all..the other students are the biggest advantage of going to an elite.college; you learn more from them than the professors.  but.you should be able to reproduce this at most colleges if you make.a conscious effort to find smart friends.  at.most colleges you can find at least a handful of other smart students,.and most people have only a handful of close friends in college.anyway..[4].the odds of finding smart professors are even better..the curve for faculty is a lot flatter than for students, especially.in math and the hard sciences; you have to go pretty far down the.list of colleges before you stop finding smart professors in the.math department.so it's not surprising that we've found the relative prestige of.different colleges useless in judging individuals.  there's a lot.of randomness in how colleges select people, and what they learn.there depends much more on them than the college.  between these.two sources of variation, the college someone went to doesn't mean.a lot.  it is to some degree a predictor of ability, but so weak.that we regard it mainly as a source of error and try consciously.to ignore it.i doubt what we've discovered is an anomaly specific to startups..probably people have always overestimated the importance of where.one goes to college.  we're just finally able to measure it.the unfortunate thing is not just that people are judged by such a.superficial test, but that so many judge themselves by it.  a lot.of people, probably the majority of people in america, have.some amount of insecurity about where, or whether, they went to.college.  the tragedy of the situation is that by far the greatest.liability of not having gone to the college you'd have liked is.your own feeling that you're thereby lacking something.  colleges.are a bit like exclusive clubs in this respect.  there is only one.real advantage to being a member of most exclusive clubs: you know.you wouldn't be missing much if you weren't.  when you're excluded,.you can only imagine the advantages of being an insider.  but.invariably they're larger in your imagination than in real life.so it is with colleges.  colleges differ, but they're nothing like.the stamp of destiny so many imagine them to be.  people aren't.what some admissions officer decides about them at seventeen..they're what they make themselves.indeed, the great advantage of not caring where people went to.college is not just that you can stop judging them (and yourself).by superficial measures, but that you can focus instead on what.really matters.  what matters is what you make of yourself..i think that's what we.should tell kids.  their job isn't to get good grades so they can.get into a good college, but to learn and do.  and not just because.that's more rewarding than worldly success.  that will increasingly.be the route to worldly success..notes[1].is what we measure worth measuring?  i think so.  you can get.rich simply by being energetic and unscrupulous, but getting rich.from a technology startup takes some amount of brains.   it is just.the kind of work the upper middle class values; it has about the.same intellectual component as being a doctor.[2].actually, someone did, once.  mitch kapor's wife freada was.in charge of hr at lotus in the early years.  (as he is at pains.to point out, they did not become romantically involved till.afterward.)  at one point they worried lotus was losing its startup.edge and turning into a big company.  so as an experiment she sent.their recruiters the resumes of the first 40 employees, with.identifying details changed.  these were the people who had made.lotus into the star it was.  not one got an interview.[3].the us news list?  surely no one trusts that.  even if the.statistics they consider are useful, how do they decide on the.relative weights?  the reason the us news list is meaningful is.precisely because they are so intellectually dishonest in that.respect.  there is no external source they can use to calibrate the.weighting of the statistics they use; if there were, we could just.use that instead.  what they must do is adjust the weights till the.top schools are the usual suspects in about the right order.  so.in effect what the us news list tells us is what the editors think.the top schools are, which is probably not far from the conventional.wisdom on the matter.  the amusing thing is, because some schools.work hard to game the system, the editors will have to keep tweaking.their algorithm to get the rankings they want.[4].possible doesn't mean easy, of course.  a smart student at a party school.will inevitably be something of an outcast, just as he or.she would be in most high schools..thanks to trevor blackwell, sarah harlin, jessica livingston, jackie.mcdonough, peter norvig, and robert morris for reading drafts of.this.french translation<eot><sot>how not to die.want to start a startup?  get funded by.y combinator..august 2007
(this is a talk i gave at the last.y combinator dinner of the summer..usually we don't have a speaker at the last dinner; it's more of.a party.  but it seemed worth spoiling the atmosphere if i could.save some of the startups from.preventable deaths.  so at the last minute i cooked up this rather.grim talk.  i didn't mean this as an essay; i wrote it down.because i only had two hours before dinner and think fastest while.writing.).a couple days ago i told a reporter that we expected about a third.of the companies we funded to succeed.  actually i was being.conservative.  i'm hoping it might be as much as a half.  wouldn't.it be amazing if we could achieve a 50% success rate?another way of saying that is that half of you are going to die.  phrased.that way, it doesn't sound good at all.  in fact, it's kind of weird.when you think about it, because our definition of success is that.the founders get rich.  if half the startups we fund succeed, then.half of you are going to get rich and the other half are going to.get nothing.if you can just avoid dying, you get rich.  that sounds like a joke,.but it's actually a pretty good description of what happens in a.typical startup.  it certainly describes what happened in viaweb..we avoided dying till we got rich.it was really close, too.  when we were visiting yahoo to talk about.being acquired, we had to interrupt everything and borrow one of.their conference rooms to talk down an investor who was about to.back out of a new funding round we needed to stay alive.   so even.in the middle of getting rich we were fighting off the grim reaper.you may have heard that quote about luck consisting of opportunity.meeting preparation.  you've now done the preparation.  the work.you've done so far has, in effect, put you in a position to get.lucky: you can now get rich by not letting your company die.  that's.more than most people have.  so let's talk about how not to die.we've done this five times now, and we've seen a bunch of startups.die.  about 10 of them so far.  we don't know exactly what happens.when they die, because they generally don't die loudly and heroically..mostly they crawl off somewhere and die.for us the main indication of impending doom is when we don't hear.from you.  when we haven't heard from, or about, a startup for a.couple months, that's a bad sign.  if we send them an email asking.what's up, and they don't reply, that's a really bad sign.  so far.that is a 100% accurate predictor of death.whereas if a startup regularly does new deals and releases and.either sends us mail or shows up at yc events, they're probably.going to live.i realize this will sound naive, but maybe the linkage works in.both directions.  maybe if you can arrange that we keep hearing.from you, you won't die.that may not be so naive as it sounds.  you've probably noticed.that having dinners every tuesday with us and the other founders.causes you to get more done than you would otherwise, because every.dinner is a mini demo day.  every dinner is a kind of a deadline..so the mere constraint of staying in regular contact with us will.push you to make things happen, because otherwise you'll be embarrassed.to tell us that you haven't done anything new since the last time.we talked.if this works, it would be an amazing hack.  it would be pretty.cool if merely by staying in regular contact with us you could get.rich.  it sounds crazy, but there's a good chance that would work.a variant is to stay in touch with other yc-funded startups.  there.is now a whole neighborhood of them in san francisco.  if you move.there, the peer pressure that made you work harder all summer will.continue to operate.when startups die, the official cause of death is always either.running out of money or a critical founder bailing.  often the two.occur simultaneously.  but i think the underlying cause is usually.that they've become demoralized.  you rarely hear of a startup.that's working around the clock doing deals and pumping out new.features, and dies because they can't pay their bills and their isp.unplugs their server.startups rarely die in mid keystroke.  so keep typing!if so many startups get demoralized and fail when merely by hanging.on they could get rich, you have to assume that running a startup.can be demoralizing.  that is certainly true.  i've been there, and.that's why i've never done another startup.  the low points in a.startup are just unbelievably low.  i bet even google had moments.where things seemed hopeless.knowing that should help.  if you know it's going to feel terrible.sometimes, then when it feels terrible you won't think "ouch, this.feels terrible, i give up."  it feels that way for everyone.  and.if you just hang on, things will probably get better.  the metaphor.people use to describe the way a startup feels is at least a roller.coaster and not drowning.  you don't just sink and sink; there are.ups after the downs.another feeling that seems alarming but is in fact normal in a.startup is the feeling that what you're doing isn't working.  the.reason you can expect to feel this is that what you do probably.won't work.  startups almost never get it right the first time..much more commonly you launch something, and no one cares.  don't.assume when this happens that you've failed.  that's normal for.startups.  but don't sit around doing nothing.  iterate.i like paul buchheit's suggestion of trying to make something that.at least someone really loves.  as long as you've made something.that a few users are ecstatic about, you're on the right track.  it.will be good for your morale to have even a handful of users who.really love you, and startups run on morale.  but also it.will tell you what to focus on.  what is it about you that they.love?  can you do more of that?  where can you find more people who.love that sort of thing?  as long as you have some core of users.who love you, all you have to do is expand it.  it may take a while,.but as long as you keep plugging away, you'll win in the end.  both.blogger and delicious did that.  both took years to succeed.  but.both began with a core of fanatically devoted users, and all evan.and joshua had to do was grow that core incrementally..wufoo is.on the same trajectory now.so when you release something and it seems like no one cares, look.more closely.  are there zero users who really love you, or is there.at least some little group that does?  it's quite possible there.will be zero.  in that case, tweak your product and try again..every one of you is working on a space that contains at least one.winning permutation somewhere in it.  if you just keep trying,.you'll find it.let me mention some things not to do.  the number one thing not to.do is other things.  if you find yourself saying a sentence that.ends with "but we're going to keep working on the startup," you are.in big trouble.  bob's going to grad school, but we're going to.keep working on the startup.  we're moving back to minnesota, but.we're going to keep working on the startup.  we're taking on some.consulting projects, but we're going to keep working on the startup..you may as well just translate these to "we're giving up on the.startup, but we're not willing to admit that to ourselves," because.that's what it means most of the time.  a startup is so hard that.working on it can't be preceded by "but."in particular, don't go to graduate school, and don't start other.projects.  distraction is fatal to startups.  going to (or back to).school is a huge predictor of death because in addition to the.distraction it gives you something to say you're doing.  if you're.only doing a startup, then if the startup fails, you fail.  if.you're in grad school and your startup fails, you can say later "oh.yeah, we had this startup on the side when i was in grad school,.but it didn't go anywhere."you can't use euphemisms like "didn't go anywhere" for something.that's your only occupation.  people won't let you.one of the most interesting things we've discovered from working.on y combinator is that founders are more motivated by the fear of.looking bad than by the hope of getting millions of dollars.   so.if you want to get millions of dollars, put yourself in a position.where failure will be public and humiliating.when we first met the founders of.octopart, they seemed very smart,.but not a great bet to succeed, because they didn't seem especially.committed.  one of the two founders was still in grad school.  it.was the usual story: he'd drop out if it looked like the startup.was taking off.  since then he has not only dropped out of grad.school, but appeared full length in.newsweek.with the word "billionaire".printed across his chest.  he just cannot fail now.  everyone he.knows has seen that picture.  girls who dissed him in high school.have seen it.  his mom probably has it on the fridge.  it would be.unthinkably humiliating to fail now.  at this point he is committed.to fight to the death.i wish every startup we funded could appear in a newsweek article.describing them as the next generation of billionaires, because.then none of them would be able to give up.  the success rate would.be 90%.  i'm not kidding.when we first knew the octoparts they were lighthearted, cheery.guys.  now when we talk to them they seem grimly determined.  the.electronic parts distributors are trying to squash them to keep.their monopoly pricing.  (if it strikes you as odd that people still.order electronic parts out of thick paper catalogs in 2007, there's.a reason for that.  the distributors want to prevent the transparency.that comes from having prices online.)  i feel kind of bad that.we've transformed these guys from lighthearted to grimly determined..but that comes with the territory.  if a startup succeeds, you get.millions of dollars, and you don't get that kind of money just by.asking for it.  you have to assume it takes some amount of pain.and however tough things get for the octoparts, i predict they'll.succeed.  they may have to morph themselves into something totally.different, but they won't just crawl off and die.  they're smart;.they're working in a promising field; and they just cannot give up.all of you guys already have the first two.  you're all smart and.working on promising ideas.  whether you end up among the living.or the dead comes down to the third ingredient, not giving up.so i'll tell you now: bad shit is coming.  it always is in a startup..the odds of getting from launch to liquidity without some kind of.disaster happening are one in a thousand.  so don't get demoralized..when the disaster strikes, just say to yourself, ok, this was what.paul was talking about.  what did he say to do?  oh, yeah.  don't.give up.japanese translationarabic translation<eot><sot>holding a program in one's head.august 2007
a good programmer working intensively on his own code can hold it.in his mind the way a mathematician holds a problem he's working.on.  mathematicians don't answer questions by working them out on.paper the way schoolchildren are taught to.  they do more in their.heads: they try to understand a problem space well enough that they.can walk around it the way you can walk around the memory of the.house you grew up in.  at its best programming is the same.  you.hold the whole program in your head, and you can manipulate it at.will.that's particularly valuable at the start of a project, because.initially the most important thing is to be able to change what.you're doing.  not just to solve the problem in a different way,.but to change the problem you're solving.your code is your understanding of the problem you're exploring..so it's only when you have your code in your head that you really.understand the problem.it's not easy to get a program into your head.  if you leave a.project for a few months, it can take days to really understand it.again when you return to it.  even when you're actively working on.a program it can take half an hour to load into your head when you.start work each day.  and that's in the best case.  ordinary.programmers working in typical office conditions never enter this.mode.  or to put it more dramatically, ordinary programmers working.in typical office conditions never really understand the problems.they're solving.even the best programmers don't always have the whole program they're.working on loaded into their heads.   but there are things you can.do to help:.avoid distractions.  distractions are bad for many types of work,.but especially bad for programming, because programmers tend to.operate at the limit of the detail they can handle.the danger of a distraction depends not on how long it is, but.on how much it scrambles your brain.  a programmer can leave the.office and go and get a sandwich without losing the code in his.head.  but the wrong kind of interruption can wipe your brain.in 30 seconds.oddly enough, scheduled distractions may be worse than unscheduled.ones.  if you know you have a meeting in an hour, you don't even.start working on something hard. work in long stretches.  since there's a fixed cost each time.you start working on a program, it's more efficient to work in.a few long sessions than many short ones.  there will of course.come a point where you get stupid because you're tired.  this.varies from person to person.  i've heard of people hacking for.36 hours straight, but the most i've ever been able to manage.is about 18, and i work best in chunks of no more than 12.the optimum is not the limit you can physically endure.  there's.an advantage as well as a cost of breaking up a project.  sometimes.when you return to a problem after a rest, you find your unconscious.mind has left an answer waiting for you. use succinct languages.  more.powerful programming languages.make programs shorter. and programmers seem to think of programs.at least partially in the language they're using to write them..the more succinct the language, the shorter the program, and the.easier it is to load and keep in your head.you can magnify the effect of a powerful language by using a.style called bottom-up programming, where you write programs in.multiple layers, the lower ones acting as programming languages.for those above.  if you do this right, you only have to keep.the topmost layer in your head. keep rewriting your program.  rewriting a program often yields.a cleaner design.  but it would have advantages even if it didn't:.you have to understand a program completely to rewrite it, so.there is no better way to get one loaded into your head. write rereadable code.  all programmers know it's good to write.readable code.  but you yourself are the most important reader..especially in the beginning; a prototype is a conversation with.yourself.  and when writing for yourself you have different.priorities.  if you're writing for other people, you may not.want to make code too dense.  some parts of a program may be.easiest to read if you spread things out, like an introductory.textbook.  whereas if you're writing code to make it easy to reload.into your head, it may be best to go for brevity. work in small groups.  when you manipulate a program in your.head, your vision tends to stop at the edge of the code you own..other parts you don't understand as well, and more importantly,.can't take liberties with.  so the smaller the number of.programmers, the more completely a project can mutate.  if there's.just one programmer, as there often is at first, you can do.all-encompassing redesigns. don't have multiple people editing the same piece of code.  you.never understand other people's code as well as your own.  no.matter how thoroughly you've read it, you've only read it, not.written it.  so if a piece of code is written by multiple authors,.none of them understand it as well as a single author would.and of course you can't safely redesign something other people.are working on.  it's not just that you'd have to ask permission..you don't even let yourself think of such things.  redesigning.code with several authors is like changing laws; redesigning.code you alone control is like seeing the other interpretation.of an ambiguous image.if you want to put several people to work on a project, divide.it into components and give each to one person. start small.  a program gets easier to hold in your head as you.become familiar with it.  you can start to treat parts as black.boxes once you feel confident you've fully explored them.  but.when you first start working on a project, you're forced to see.everything.  if you start with too big a problem, you may never.quite be able to encompass it.  so if you need to write a big,.complex program, the best way to begin may not be to write a.spec for it, but to write a prototype that solves a subset of.the problem.  whatever the advantages of planning, they're often.outweighed by the advantages of being able to keep a program in.your head..it's striking how often programmers manage to hit all eight points.by accident.  someone has an idea for a new project, but because.it's not officially sanctioned, he has to do it in off hours—which.turn out to be more productive because there are no distractions..driven by his enthusiasm for the new project he works on it for.many hours at a stretch.  because it's initially just an.experiment, instead of a "production" language he uses a mere."scripting" language—which is in fact far more powerful.  he.completely rewrites the program several times; that wouldn't be.justifiable for an official project, but this is a labor of love.and he wants it to be perfect.  and since no one is going to see.it except him, he omits any comments except the note-to-self variety..he works in a small group perforce, because he either hasn't told.anyone else about the idea yet, or it seems so unpromising that no.one else is allowed to work on it.  even if there is a group, they.couldn't have multiple people editing the same code, because it.changes too fast for that to be possible.  and the project starts.small because the idea is small at first; he just has some cool.hack he wants to try out.even more striking are the number of officially sanctioned projects.that manage to do all eight things wrong.  in fact, if you look at.the way software gets written in most organizations, it's almost.as if they were deliberately trying to do things wrong. in a sense,.they are.  one of the defining qualities of organizations since.there have been such a thing is to treat individuals as interchangeable.parts.  this works well for more parallelizable tasks, like fighting.wars.  for most of history a well-drilled army of professional.soldiers could be counted on to beat an army of individual warriors,.no matter how valorous.  but having ideas is not very parallelizable..and that's what programs are: ideas.it's not merely true that organizations dislike the idea of depending.on individual genius, it's a tautology.  it's part of the definition.of an organization not to.  of our current concept of an organization,.at least.maybe we could define a new kind of organization that combined the.efforts of individuals without requiring them to be interchangeable..arguably a market is such a form of organization, though it may be.more accurate to describe a market as a degenerate case—as what.you get by default when organization isn't possible.probably the best we'll do is some kind of hack, like making the.programming parts of an organization work differently from the rest..perhaps the optimal solution is for big companies not even to try.to develop ideas in house, but simply to.buy them.  but regardless.of what the solution turns out to be, the first step is to realize.there's a problem.  there is a contradiction in the very phrase."software company."   the two words are pulling in opposite directions..any good programmer in a large organization is going to be at odds.with it, because organizations are designed to prevent what.programmers strive for.good programmers manage to get a lot done anyway..but often it.requires practically an act of rebellion against the organizations.that employ them.  perhaps it will help if more people understand that the way.programmers behave is driven by the demands of the work they do..it's not because they're irresponsible that they work in long binges.during which they blow off all other obligations, plunge straight into.programming instead of writing specs first, and rewrite code that.already works.  it's not because they're unfriendly that they prefer.to work alone, or growl at people who pop their head in the door.to say hello.  this apparently random collection of annoying habits.has a single explanation: the power of holding a program in one's.head.whether or not understanding this can help large organizations, it.can certainly help their competitors.  the weakest point in big.companies is that they don't let individual programmers do great.work.  so if you're a little startup, this is the place to attack.them.  take on the kind of problems that have to be solved in one.big brain..thanks to sam altman, david greenspan, aaron iba, jessica livingston,.robert morris, peter norvig, lisa randall, emmett shear, sergei tsarev,.and stephen wolfram for reading drafts of this.japanese translationsimplified chinese translationportuguese translationbulgarian translationrussian translation<eot><sot>stuff.july 2007
i have too much stuff.  most people in america do.  in fact, the.poorer people are, the more stuff they seem to have.  hardly anyone.is so poor that they can't afford a front yard full of old cars.it wasn't always this way.  stuff used to be rare and valuable..you can still see evidence of that if you look for it.  for example,.in my house in cambridge, which was built in 1876, the bedrooms.don't have closets.  in those days people's stuff fit in a chest.of drawers.  even as recently as a few decades ago there was a lot.less stuff.  when i look back at photos from the 1970s, i'm surprised.how empty houses look.  as a kid i had what i thought was a huge.fleet of toy cars, but they'd be dwarfed by the number of toys my.nephews have.  all together my matchboxes and corgis took up about.a third of the surface of my bed.  in my nephews' rooms the bed is.the only clear space.stuff has gotten a lot cheaper, but our attitudes toward it haven't.changed correspondingly.  we overvalue stuff.that was a big problem.for me when i had no money.  i felt poor, and stuff seemed valuable,.so almost instinctively i accumulated it.  friends would leave.something behind when they moved, or i'd see something as i was.walking down the street on trash night (beware of anything you find.yourself describing as "perfectly good"), or i'd find something in.almost new condition for a tenth its retail price at a garage sale..and pow, more stuff.in fact these free or nearly free things weren't bargains, because.they were worth even less than they cost.  most of the stuff i.accumulated was worthless, because i didn't need it.what i didn't understand was that the value of some new acquisition.wasn't the difference between its retail price and what i paid for.it.  it was the value i derived from it.  stuff is an extremely.illiquid asset.  unless you have some plan for selling that valuable.thing you got so cheaply, what difference does it make what it's."worth?"  the only way you're ever going to extract any value from.it is to use it.  and if you don't have any immediate use for it,.you probably never will.companies that sell stuff have spent huge sums training us to think.stuff is still valuable.  but it would be closer to the truth to.treat stuff as worthless.in fact, worse than worthless, because once you've accumulated a.certain amount of stuff, it starts to own you rather than the other.way around.  i know of one couple who couldn't retire to the town.they preferred because they couldn't afford a place there big enough.for all their stuff.  their house isn't theirs; it's their stuff's.and unless you're extremely organized, a house full of stuff can.be very depressing. a cluttered room saps one's spirits.  one.reason, obviously, is that there's less room for people in a room.full of stuff.  but there's more going on than that.  i think humans.constantly scan their environment to build a mental model of what's.around them.  and the harder a scene is to parse, the less energy.you have left for conscious thoughts.  a cluttered room is literally.exhausting.(this could explain why clutter doesn't seem to bother kids as much.as adults. kids are less perceptive.  they build a coarser model.of their surroundings, and this consumes less energy.)i first realized the worthlessness of stuff when i lived in italy.for a year.  all i took with me was one large backpack of stuff..the rest of my stuff i left in my landlady's attic back in the us..and you know what?  all i missed were some of the books.  by the.end of the year i couldn't even remember what else i had stored in.that attic.and yet when i got back i didn't discard so much as a box of it..throw away a perfectly good rotary telephone?  i might need that.one day.the really painful thing to recall is not just that i accumulated.all this useless stuff, but that i often spent money i desperately.needed on stuff that i didn't.why would i do that?  because the people whose job is to sell you.stuff are really, really good at it.  the average 25 year old is.no match for companies that have spent years figuring out how to.get you to spend money on stuff.  they make the experience of buying.stuff so pleasant that "shopping" becomes a leisure activity.how do you protect yourself from these people?  it can't be easy..i'm a fairly skeptical person, and their tricks worked on me well.into my thirties.  but one thing that might work is to ask yourself,.before buying something, "is this going to make my life noticeably.better?"a friend of mine cured herself of a clothes buying habit by asking.herself before she bought anything "am i going to wear this all the.time?"  if she couldn't convince herself that something she was.thinking of buying would become one of those few things she wore.all the time, she wouldn't buy it.  i think that would work for any.kind of purchase.  before you buy anything, ask yourself: will this.be something i use constantly?  or is it just something nice?  or.worse still, a mere bargain?the worst stuff in this respect may be stuff you don't use much.because it's too good.  nothing owns you like fragile stuff.  for.example, the "good china" so many households have, and whose defining.quality is not so much that it's fun to use, but that one must be.especially careful not to break it.another way to resist acquiring stuff is to think of the overall.cost of owning it.  the purchase price is just the beginning.  you're.going to have to think about that thing for years—perhaps for.the rest of your life.  every thing you own takes energy away from.you.  some give more than they take.  those are the only things.worth having.i've now stopped accumulating stuff.  except books—but books are.different.  books are more like a fluid than individual objects..it's not especially inconvenient to own several thousand books,.whereas if you owned several thousand random possessions you'd be.a local celebrity.  but except for books, i now actively avoid.stuff.  if i want to spend money on some kind of treat, i'll take.services over.goods any day.i'm not claiming this is because i've achieved some kind of zenlike.detachment from material things.  i'm talking about something more.mundane.  a historical change has taken place, and i've now realized.it.  stuff used to be valuable, and now it's not.in industrialized countries the same thing happened with food in.the middle of the twentieth century.  as food got cheaper (or we.got richer; they're indistinguishable), eating too much started to.be a bigger danger than eating too little.   we've now reached that.point with stuff.  for most people, rich or poor, stuff has become.a burden.the good news is, if you're carrying a burden without knowing it,.your life could be better than you realize.  imagine walking around.for years with five pound ankle weights, then suddenly having them.removed..spanish translationrussian translationitalian translationpolish translationturkish translationfrench translationslovak translationromanian translationgerman translation<eot><sot>the equity equation.july 2007
an investor wants to give you money for a certain percentage of.your startup.  should you take it?  you're about to hire your first.employee.  how much stock should you give him?these are some of the hardest questions founders face.  and yet.both have the same answer:1/(1 - n)whenever you're trading stock in your company for anything, whether.it's money or an employee or a deal with another company, the test.for whether to do it is the same.  you should give up n% of your.company if what you trade it for improves your average outcome.enough that the (100 - n)% you have left is worth more than the.whole company was before.for example, if an investor wants to buy half your company, how.much does that investment have to improve your average outcome for.you to break even?  obviously it has to double: if you trade half.your company for something that more than doubles the company's.average outcome, you're net ahead.  you have half as big a share.of something worth more than twice as much.in the general case, if n is the fraction of the company you're.giving up, the deal is a good one if it makes the company worth.more than 1/(1 - n).for example, suppose y combinator offers to fund you in return for.7% of your company.  in this case, n is .07 and 1/(1 - n) is 1.075..so you should take the deal if you believe we can improve your.average outcome by more than 7.5%.  if we improve your outcome by.10%, you're net ahead, because the remaining .93 you hold is worth..93 x 1.1 = 1.023..[1]one of the things the equity equation shows us is that, financially.at least, taking money from a top vc firm can be a really good deal..greg mcadoo from sequoia recently said at a yc dinner that when.sequoia invests alone they like to take about 30% of a company..1/.7 = 1.43, meaning that deal is worth taking if they can improve.your outcome by more than 43%.  for the average startup, that would.be an extraordinary bargain.  it would improve the average startup's.prospects by more than 43% just to be able to say they were funded.by sequoia, even if they never actually got the money.the reason sequoia is such a good deal is that the percentage of.the company they take is artificially low.  they don't even try to.get market price for their investment; they limit their holdings.to leave the founders enough stock to feel the company is still.theirs.the catch is that sequoia gets about 6000 business plans a year and.funds about 20 of them, so the odds of getting this great deal are.1 in 300. the companies that make it through are not average startups.of course, there are other factors to consider in a vc deal.  it's.never just a straight trade of money for stock.  but if it were,.taking money from a top firm would generally be a bargain.you can use the same formula when giving stock to employees, but.it works in the other direction.  if i is the average outcome for.the company with the addition of some new person, then they're worth.n such that i = 1/(1 - n).  which means n = (i - 1)/i.for example, suppose you're just two founders and you want to hire.an additional hacker who's so good you feel he'll increase the.average outcome of the whole company by 20%.  n = (1.2 - 1)/1.2 =..167.  so you'll break even if you trade 16.7% of the company.for him.that doesn't mean 16.7% is the right amount of stock to give him..stock is not the only cost of hiring someone: there's usually salary.and overhead as well.  and if the company merely breaks even on the.deal, there's no reason to do it.i think to translate salary and overhead into stock you should.multiply the annual rate by about 1.5.  most startups grow fast or.die; if you die you don't have to pay the guy, and if you grow fast.you'll be paying next year's salary out of next year's valuation,.which should be 3x this year's.  if your valuation grows 3x a year,.the total cost in stock of a new hire's salary and overhead is 1.5.years' cost at the present valuation.  [2]how much of an additional margin should the company need as the."activation energy" for the deal?  since this is in effect the.company's profit on a hire, the market will determine that: if.you're a hot opportunity, you can charge more.let's run through an example.  suppose the company wants to make a."profit" of 50% on the new hire mentioned above.  so subtract a.third from 16.7% and we have 11.1% as his "retail" price.  suppose.further that he's going to cost $60k a year in salary and overhead,.x 1.5 = $90k total.  if the company's valuation is $2 million, $90k.is 4.5%.  11.1% - 4.5% = an offer of 6.6%.incidentally, notice how important it is for early employees to.take little salary.  it comes right out of stock that could otherwise.be given to them.obviously there is a great deal of play in these numbers.  i'm not.claiming that stock grants can now be reduced to a formula.  ultimately.you always have to guess.  but at least know what you're guessing..if you choose a number based on your gut feel, or a table of typical.grant sizes supplied by a vc firm, understand what those are estimates.of.and more generally, when you make any decision involving equity,.run it through 1/(1 - n) to see if it makes sense.  you should.always feel richer after trading equity.  if the trade didn't.increase the value of your remaining shares enough to put you net.ahead, you wouldn't have (or shouldn't have) done it.notes[1] this is why we.can't believe anyone would think y combinator was a bad deal.  does.anyone really think we're so useless that in three months we can't.improve a startup's prospects by 7.5%?.[2] the obvious choice.for your present valuation is the post-money valuation of your last.funding round.  this probably undervalues the company, though,.because (a) unless your last round just happened, the company is.presumably worth more, and (b) the valuation of an early funding.round usually reflects some other contribution by the investors.thanks to sam altman, trevor blackwell, paul buchheit,.hutch fishman, david hornik, paul kedrosky, jessica livingston, gary sabot, and.joshua schachter for reading drafts of this.<eot><sot>an alternative theory of unions.may 2007
people who worry about the increasing gap between rich and poor.generally look back on the mid twentieth century as a golden age..in those days we had a large number of high-paying union manufacturing.jobs that boosted the median income.  i wouldn't quite call the.high-paying union job a myth, but i think people who dwell on it.are reading too much into it.oddly enough, it was working with startups that made me realize.where the high-paying union job came from.  in a rapidly growing.market, you don't worry too much about efficiency.  it's more.important to grow fast.  if there's some mundane problem getting.in your way, and there's a simple solution that's somewhat expensive,.just take it and get on with more important things.  ebay didn't.win by paying less for servers than their competitors.difficult though it may be to imagine now, manufacturing was a.growth industry in the mid twentieth century.  this was an era when.small firms making everything from cars to candy were getting.consolidated into a new kind of corporation with national reach and.huge economies of scale.  you had to grow fast or die.  workers.were for these companies what servers are for an internet startup..a reliable supply was more important than low cost.if you looked in the head of a 1950s auto executive, the attitude.must have been: sure, give 'em whatever they ask for, so long as.the new model isn't delayed.in other words, those workers were not paid what their work was.worth.  circumstances being what they were, companies would have.been stupid to insist on paying them so little.if you want a less controversial example of this phenomenon, ask.anyone who worked as a consultant building web sites during the.internet bubble.  in the late nineties you could get paid huge sums.of money for building the most trivial things.  and yet does anyone.who was there have any expectation those days will ever return?  i.doubt it.  surely everyone realizes that was just a temporary.aberration.the era of labor unions seems to have been the same kind of aberration,.just spread.over a longer period, and mixed together with a lot of ideology.that prevents people from viewing it with as cold an eye as they.would something like consulting during the bubble.basically, unions were just razorfish.people who think the labor movement was the creation of heroic union.organizers have a problem to explain: why are unions shrinking now?.the best they can do is fall back on the default explanation of.people living in fallen civilizations.  our ancestors were giants..the workers of the early twentieth century must have had a moral.courage that's lacking today.in fact there's a simpler explanation.  the early twentieth century.was just a fast-growing startup overpaying for infrastructure.  and.we in the present are not a fallen people, who have abandoned.whatever mysterious high-minded principles produced the high-paying.union job.  we simply live in a time when the fast-growing companies.overspend on different things.<eot><sot>the hacker's guide to investors.april 2007
(this essay is derived from a keynote talk at the 2007 ases summit.at stanford.)the world of investors is a foreign one to most hackers—partly.because investors are so unlike hackers, and partly because they.tend to operate in secret.  i've been dealing with this world for.many years, both as a founder and an investor, and i still don't.fully understand it.in this essay i'm going to list some of the more surprising things.i've learned about investors.  some i only learned in the past year.teaching hackers how to deal with investors is probably the second.most important thing we do at y combinator.  the most important.thing for a startup is to make something good.  but everyone knows.that's important.  the dangerous thing about investors is that.hackers don't know how little they know about this strange world.1. the investors are what make a startup hub.about a year ago i tried to figure out what you'd need to reproduce.silicon valley.  i decided the.critical ingredients were rich people.and nerds—investors and founders.  people are all you need to.make technology, and all the other people will move.if i had to narrow that down, i'd say investors are the limiting.factor.  not because they contribute more to the startup, but simply.because they're least willing to move.  they're rich.  they're not.going to move to albuquerque just because there are some smart.hackers there they could invest in.  whereas hackers will move to.the bay area to find investors.2. angel investors are the most critical.there are several types of investors.  the two main categories are.angels and vcs: vcs invest other people's money, and angels invest.their own.though they're less well known, the angel investors are probably.the more critical ingredient in creating a silicon valley.  most.companies that vcs invest in would never have made it that far if angels.hadn't invested first.  vcs say between half and three quarters of.companies that raise series a rounds have taken some outside.investment already..[1]angels are willing to fund riskier projects than vcs.  they also.give valuable advice, because (unlike vcs) many have been startup.founders themselves.google's story shows the key role angels play. a lot of people know.google raised money from kleiner and sequoia.  what most don't realize.is how late.  that vc round was a series b round; the premoney.valuation was $75 million.  google was already a successful company.at that point.  really, google was funded with angel money.it may seem odd that the canonical silicon valley startup was funded.by angels, but this is not so surprising.  risk is always proportionate.to reward.  so the most successful startup of all is likely to have.seemed an extremely risky bet at first, and that is exactly the.kind vcs won't touch.where do angel investors come from?  from other startups.  so startup.hubs like silicon valley benefit from something like the marketplace.effect, but shifted in time: startups are there because startups.were there.3. angels don't like publicity.if angels are so important, why do we hear more about vcs?  because.vcs like publicity.  they need to market themselves to the investors.who are their "customers"—the endowments and pension funds and.rich families whose money they invest—and also to founders who.might come to them for funding.angels don't need to market themselves to investors because they.invest their own money.  nor do they want to market themselves to.founders: they don't want random people pestering them with business.plans.  actually, neither do vcs.  both angels and vcs get deals.almost exclusively through personal introductions..[2]the reason vcs want a strong brand is not to draw in more business.plans over the transom, but so they win deals when competing.against other vcs.  whereas angels are rarely in direct competition,.because (a) they do fewer deals, (b) they're happy to split them,.and (c) they invest at a point where the stream is broader.4. most investors, especially vcs, are not like founders.some angels are, or were, hackers.  but most vcs are a different.type of people: they're dealmakers.if you're a hacker, here's a thought experiment you can run to.understand why there are basically no hacker vcs: how would you.like a job where you never got to make anything, but instead spent.all your time listening to other people pitch (mostly terrible).projects, deciding whether to fund them, and sitting on their boards.if you did?  that would not be fun for most hackers.  hackers like.to make things.  this would be like being an administrator.because most vcs are a different species of people from.founders, it's hard to know what they're thinking.  if you're a.hacker, the last time you had to deal with these guys was in high.school.  maybe in college you walked past their fraternity on your.way to the lab.  but don't underestimate them.  they're as expert.in their world as you are in yours.  what they're good at is reading.people, and making deals work to their advantage.  think twice.before you try to beat them at that.5. most investors are momentum investors.because most investors are dealmakers rather than technology people,.they generally don't understand what you're doing.  i knew as a.founder that most vcs didn't get technology.  i also knew some made.a lot of money.  and yet it never occurred to me till recently to.put those two ideas together and ask "how can vcs make money by.investing in stuff they don't understand?"the answer is that they're like momentum investors.  you can (or.could once) make a lot of money by noticing sudden changes in stock.prices.  when a stock jumps upward, you buy, and when it suddenly.drops, you sell.  in effect you're insider trading, without knowing.what you know.  you just know someone knows something, and that's.making the stock move.this is how most venture investors operate.  they don't try to look.at something and predict whether it will take off.  they win by.noticing that something is taking off a little sooner than everyone.else.  that generates almost as good returns as actually being able.to pick winners.  they may have to pay a little more than they would.if they got in at the very beginning, but only a little.investors always say what they really care about is the team..actually what they care most about is your traffic, then what other.investors think, then the team.  if you don't yet have any traffic,.they fall back on number 2, what other investors think.  and this,.as you can imagine, produces wild oscillations in the "stock price".of a startup.  one week everyone wants you, and they're begging not.to be cut out of the deal.  but all it takes is for one big investor.to cool on you, and the next week no one will return your phone.calls.  we regularly have startups go from hot to cold or cold to.hot in a matter of days, and literally nothing has changed.there are two ways to deal with this phenomenon.  if you're feeling.really confident, you can try to ride it.  you can start by asking.a comparatively lowly vc for a small amount of money, and then after.generating interest there, ask more prestigious vcs for larger.amounts, stirring up a crescendo of buzz, and then "sell" at the.top.  this is extremely risky, and takes months even if you succeed..i wouldn't try it myself.  my advice is to err on the side of safety:.when someone offers you a decent deal, just take it and get on with.building the company.  startups win or lose based on the quality.of their product, not the quality of their funding deals.6. most investors are looking for big hits.venture investors like companies that could go public.  that's where.the big returns are.  they know the odds of any individual startup.going public are small, but they want to invest in those that at.least have a chance of going public.currently the way vcs seem to operate is to invest in a bunch of.companies, most of which fail, and one of which is google.  those.few big wins compensate for losses on their other investments.  what this.means is that most vcs will only invest in you if you're a potential.google.  they don't care about companies that are a safe bet to be.acquired for $20 million.  there needs to be a chance, however.small, of the company becoming really big.angels are different in this respect.  they're happy to invest in.a company where the most likely outcome is a $20 million acquisition.if they can do it at a low enough valuation.  but of course they.like companies that could go public too.  so having an ambitious.long-term plan pleases everyone.if you take vc money, you have to mean it, because the structure.of vc deals prevents early acquisitions.  if you take vc money,.they won't let you sell early.7. vcs want to invest large amounts.the fact that they're running investment funds makes vcs want to.invest large amounts.  a typical vc fund is now hundreds of millions.of dollars.  if $400 million has to be invested by 10 partners,.they have to invest $40 million each.  vcs usually sit on the boards.of companies they fund.  if the average deal size was $1 million,.each partner would have to sit on 40 boards, which would not be.fun.  so they prefer bigger deals, where they can put a lot of money.to work at once.vcs don't regard you as a bargain if you don't need a lot of money..that may even make you less attractive, because it means their.investment creates less of a barrier to entry for competitors.angels are in a different position because they're investing their.own money.  they're happy to invest small amounts—sometimes as.little as $20,000—as long as the potential returns look good.enough.  so if you're doing something inexpensive, go to angels.8. valuations are fiction.vcs admit that valuations are an artifact.  they decide how much.money you need and how much of the company they want, and those two.constraints yield a valuation.valuations increase as the size of the investment does.  a company.that an angel is willing to put $50,000 into at a valuation of a.million can't take $6 million from vcs at that valuation.  that.would leave the founders less than a seventh of the company between.them (since the option pool would also come out of that seventh)..most vcs wouldn't want that, which is why you never hear of deals.where a vc invests $6 million at a premoney valuation of $1 million.if valuations change depending on the amount invested, that shows.how far they are from reflecting any kind of value of the company.since valuations are made up, founders shouldn't care too much about.them.  that's not the part to focus on.  in fact, a high valuation.can be a bad thing.  if you take funding at a premoney valuation.of $10 million, you won't be selling the company for 20.  you'll.have to sell for over 50 for the vcs to get even a 5x return, which.is low to them.  more likely they'll want you to hold out for 100..but needing to get a high price decreases the chance of getting.bought at all; many companies can buy you for $10 million, but only.a handful for 100.  and since a startup is like a pass/fail course.for the founders, what you want to optimize is your chance of a.good outcome, not the percentage of the company you keep.so why do founders chase high valuations?  they're tricked by.misplaced ambition.  they feel they've achieved more if they get a.higher valuation.  they usually know other founders, and if they.get a higher valuation they can say "mine is bigger than yours.".but funding is not the real test.  the real test is the final outcome.for the founder, and getting too high a valuation may just make a.good outcome less likely.the one advantage of a high valuation is that you get less dilution..but there is another less sexy way to achieve that: just take less.money.9. investors look for founders like the current stars.ten years ago investors were looking for the next bill gates.  this.was a mistake, because microsoft was a very anomalous startup.  they.started almost as a contract programming operation, and the reason.they became huge was that ibm happened to drop the pc standard in.their lap.now all the vcs are looking for the next larry and sergey.  this.is a good trend, because larry and sergey are closer to the ideal.startup founders.historically investors thought it was important for a founder to.be an expert in business.  so they were willing to fund teams of.mbas who planned to use the money to pay programmers to build their.product for them.  this is like funding steve ballmer in the hope.that the programmer he'll hire is bill gates—kind of backward,.as the events of the bubble showed.  now most vcs know they should.be funding technical guys.  this is more pronounced among the very.top funds; the lamer ones still want to fund mbas.if you're a hacker, it's good news that investors are looking for.larry and sergey.  the bad news is, the only investors who can do.it right are the ones who knew them when they were a.couple of cs grad students, not the confident media stars they are.today.  what investors still don't get is how clueless and tentative.great founders can seem at the very beginning.10. the contribution of investors tends to be underestimated.investors do more for startups than give them money.  they're helpful.in doing deals and arranging introductions, and some of the smarter.ones, particularly angels, can give good advice about the product.in fact, i'd say what separates the great investors from the mediocre.ones is the quality of their advice.  most investors give advice,.but the top ones give good advice.whatever help investors give a startup tends to be underestimated..it's to everyone's advantage to let the world think the founders.thought of everything.  the goal of the investors is for the company.to become valuable, and the company seems more valuable if it seems.like all the good ideas came from within.this trend is compounded by the obsession that the press has with.founders.  in a company founded by two people, 10% of the ideas.might come from the first guy they hire.  arguably they've done a.bad job of hiring otherwise.  and yet this guy will be almost.entirely overlooked by the press.i say this as a founder: the contribution of founders is always.overestimated.  the danger here is that new founders, looking at.existing founders, will think that they're supermen that one couldn't.possibly equal oneself.  actually they have a hundred different.types of support people just offscreen making the whole show possible..[3]11. vcs are afraid of looking bad.i've been very surprised to discover how timid most vcs are.  they.seem to be afraid of looking bad to their partners, and perhaps.also to the limited partners—the people whose money they invest.you can measure this fear in how much less risk vcs are willing to.take.  you can tell they won't make investments for their fund that.they might be willing to make themselves as angels.  though it's.not quite accurate to say that vcs are less willing to take risks..they're less willing to do things that might look bad.  that's not.the same thing.for example, most vcs would be very reluctant to invest in a startup.founded by a pair of 18 year old hackers, no matter how brilliant,.because if the startup failed their partners could turn on them and.say "what, you invested $x million of our money in a pair of 18.year olds?"  whereas if a vc invested in a startup founded by.three former banking executives in their 40s who planned to outsource.their product development—which to my mind is actually a lot.riskier than investing in a pair of really smart 18 year olds—he.couldn't be faulted, if it failed, for making such an apparently.prudent investment.as a friend of mine said, "most vcs can't do anything that would.sound bad to the kind of doofuses who run pension funds." angels.can take greater risks because they don't have to answer to anyone.12. being turned down by investors doesn't mean much.some founders are quite dejected when they get turned down by.investors.  they shouldn't take it so much to heart.  to start with,.investors are often wrong.  it's hard to think of a successful.startup that wasn't turned down by investors at some point.  lots.of vcs rejected google.  so obviously the reaction of investors is.not a very meaningful test.investors will often reject you for what seem to be superficial.reasons.  i read of one vc who.turned.down a startup simply because.they'd given away so many little bits of stock that the deal required.too many signatures to close..[4].the reason investors can get away.with this is that they see so many deals.  it doesn't matter if.they underestimate you because of some surface imperfection, because.the next best deal will be almost as good..imagine picking out.apples at a grocery store.  you grab one with a little bruise..maybe it's just a surface bruise, but why even bother checking when.there are so many other unbruised apples to choose from?investors would be the first to admit they're often wrong.  so when.you get rejected by investors, don't think "we suck," but instead.ask "do we suck?"  rejection is a question, not an answer.13. investors are emotional.i've been surprised to discover how emotional investors can be..you'd expect them to be cold and calculating, or at least businesslike,.but often they're not.  i'm not sure if it's their position of power.that makes them this way, or the large sums of money involved, but.investment negotiations can easily turn personal.  if you offend.investors, they'll leave in a huff.a while ago an eminent vc firm offered a series a round to a startup.we'd seed funded.  then they heard a rival vc firm was also interested..they were so afraid that they'd be rejected in favor of this other.firm that they gave the startup what's known as an "exploding.termsheet."  they had, i think, 24 hours to say yes or no, or the.deal was off.  exploding termsheets are a somewhat dubious device,.but not uncommon.  what surprised me was their reaction when i.called to talk about it.  i asked if they'd still be interested in.the startup if the rival vc didn't end up making an offer, and they.said no.  what rational basis could they have had for saying that?.if they thought the startup was worth investing in, what difference.should it make what some other vc thought?  surely it was their.duty to their limited partners simply to invest in the best.opportunities they found; they should be delighted if the other vc.said no, because it would mean they'd overlooked a good opportunity..but of course there was no rational basis for their decision.  they.just couldn't stand the idea of taking this rival firm's rejects.in this case the exploding termsheet was not (or not only) a tactic.to pressure the startup.  it was more like the high school trick.of breaking up with someone before they can break up with you.  in.an earlier essay i said that vcs were a lot like high school girls..a few vcs have joked about that characterization, but none have.disputed it.14. the negotiation never stops till the closing.most deals, for investment or acquisition, happen in two phases..there's an initial phase of negotiation about the big questions..if this succeeds you get a termsheet, so called because it outlines.the key terms of a deal.  a termsheet is not legally binding,.but it is a definite step.  it's supposed to mean that a.deal is going to happen, once the lawyers work out all the details..in theory these details are minor ones; by definition all the.important points are supposed to be covered in the termsheet.inexperience and wishful thinking combine to make founders feel.that when they have a termsheet, they have a deal.  they want there.to be a deal; everyone acts like they have a deal; so there must.be a deal.  but there isn't and may not be for several months.  a.lot can change for a startup in several months.  it's not uncommon.for investors and acquirers to get buyer's remorse.  so you have.to keep pushing, keep selling, all the way to the close.  otherwise.all the "minor" details left unspecified in the termsheet will be.interpreted to your disadvantage.  the other side may even break.the deal; if they do that, they'll usually seize on some technicality.or claim you misled them, rather than admitting they changed their.minds.it can be hard to keep the pressure on an investor or acquirer all.the way to the closing, because the most effective pressure is.competition from other investors or acquirers, and these tend to.drop away when you get a termsheet.  you should try to stay as close.friends as you can with these rivals, but the most important thing.is just to keep up the momentum in your startup.  the investors or.acquirers chose you because you seemed hot.  keep doing whatever.made you seem hot.  keep releasing new features; keep getting new.users; keep getting mentioned in the press and in blogs.15. investors like to co-invest.i've been surprised how willing investors are to split deals.  you.might think that if they found a good deal they'd want it all to.themselves, but they seem positively eager to syndicate.  this is.understandable with angels; they invest on a smaller scale and don't.like to have too much money tied up in any one deal.  but vcs also.share deals a lot.  why?partly i think this is an artifact of the rule i quoted earlier:.after traffic, vcs care most what other vcs think.  a deal that has.multiple vcs interested in it is more likely to close, so of deals.that close, more will have multiple investors.there is one rational reason to want multiple vcs in a deal: any.investor who co-invests with you is one less investor who could.fund a competitor.  apparently kleiner and sequoia didn't like.splitting the google deal, but it did at least have the advantage,.from each one's point of view, that there probably wouldn't be a.competitor funded by the other.  splitting deals thus has similar.advantages to confusing paternity.but i think the main reason vcs like splitting deals is the fear.of looking bad.  if another firm shares the deal, then in the event.of failure it will seem to have been a prudent choice—a consensus.decision, rather than just the whim of an individual partner.16. investors collude.investing is not covered by antitrust law.  at least, it better not.be, because investors regularly do things that would be illegal.otherwise.  i know personally of cases where one investor has talked.another out of making a competitive offer, using the promise of.sharing future deals.in principle investors are all competing for the same deals, but.the spirit of cooperation is stronger than the spirit of competition..the reason, again, is that there are so many deals.  though a.professional investor may have a closer relationship with a founder.he invests in than with other investors, his relationship with the.founder is only going to last a couple years, whereas his relationship.with other firms will last his whole career.  there isn't so much.at stake in his interactions with other investors, but there will.be a lot of them.  professional investors are constantly trading.little favors.another reason investors stick together is to preserve the power.of investors as a whole.  so you will not, as of this writing, be.able to get investors into an auction for your series a round..they'd rather lose the deal than establish a precedent of vcs.competitively bidding against one another.  an efficient startup.funding market may be coming in the distant future; things tend to.move in that direction; but it's certainly not here now..17. large-scale investors care about their portfolio, not any.individual company.the reason startups work so well is that everyone with power also.has equity.  the only way any of them can succeed is if they all.do.  this makes everyone naturally pull in the same direction,.subject to differences of opinion about tactics.the problem is, larger scale investors don't have exactly the same.motivation.  close, but not identical. they don't need any given.startup to succeed, like founders do, just their portfolio as a.whole to.  so in borderline cases the rational thing for them to.do is to sacrifice unpromising startups.large-scale investors tend to put startups in three categories:.successes, failures, and the "living dead"—companies that are.plugging along but don't seem likely in the immediate future to get.bought or go public.  to the founders, "living dead" sounds harsh..these companies may be far from failures by ordinary standards. but.they might as well be from a venture investor's point of view, and.they suck up just as much time and attention as the successes.  so.if such a company has two possible strategies, a conservative one.that's slightly more likely to work in the end, or a risky one that.within a short time will either yield a giant success or kill the.company, vcs will push for the kill-or-cure option.  to them the.company is already a write-off.  better to have resolution, one way.or the other, as soon as possible.if a startup gets into real trouble, instead of trying to save it.vcs may just sell it at a low price to another of their portfolio.companies.  philip greenspun said in founders at work that ars digita's vcs did this to them.18. investors have different risk profiles from founders.most people would rather a 100% chance of $1 million than a 20%.chance of $10 million.  investors are rich enough to be rational.and prefer the latter.  so they'll always tend to encourage founders.to keep rolling the dice.  if a company is doing well, investors.will want founders to turn down most acquisition offers.  and indeed,.most startups that turn down acquisition offers ultimately do better..but it's still hair-raising for the founders, because they might.end up with nothing.  when someone's offering to buy you for a price.at which your stock is worth $5 million, saying no is equivalent.to having $5 million and betting it all on one spin of the roulette.wheel.investors will tell you the company is worth more.  and they may.be right.  but that doesn't mean it's wrong to sell.  any financial.advisor who put all his client's assets in the stock of a single,.private company would probably lose his license for it.more and more, investors are letting founders cash out partially..that should correct the problem. most founders have such low standards.that they'll feel rich with a sum that doesn't seem huge to investors..but this custom is spreading too slowly, because vcs are afraid of.seeming irresponsible.  no one wants to be the first vc to give.someone fuck-you money and then actually get told "fuck you." but.until this does start to happen, we know vcs are being too conservative.19. investors vary greatly.back when i was a founder i used to think all vcs were the same..and in fact they do all look.the same.  they're all what hackers.call "suits."  but since i've been dealing with vcs more i've learned.that some suits are smarter than others.they're also in a business where winners tend to keep winning and.losers to keep losing.  when a vc firm has been successful in the.past, everyone wants funding from them, so they get the pick of all.the new deals.  the self-reinforcing nature of the venture funding.market means that the top ten firms live in a completely different.world from, say, the hundredth.  as well as being smarter, they.tend to be calmer and more upstanding; they don't need to do iffy.things to get an edge, and don't want to because they have more.brand to protect.there are only two kinds of vcs you want to take money from, if you.have the luxury of choosing: the "top tier" vcs, meaning about the.top 20 or so firms, plus a few new ones that are not among the top.20 only because they haven't been around long enough.it's particularly important to raise money from a top firm if you're.a hacker, because they're more confident.  that means they're less.likely to stick you with a business guy as ceo, like vcs used to.do in the 90s.  if you seem smart and want to do it, they'll let.you run the company.20. investors don't realize how much it costs to raise money from.them.raising money is a huge time suck at just the point where startups.can least afford it. it's not unusual for it to take five or six.months to close a funding round.  six weeks is fast.  and raising.money is not just something you can leave running as a background.process.  when you're raising money, it's inevitably the main focus.of the company.  which means building the product isn't.suppose a y combinator company starts talking to vcs after demo.day, and is successful in raising money from them, closing the deal.after a comparatively short 8 weeks.  since demo day occurs after.10 weeks, the company is now 18 weeks old.  raising money, rather.than working on the product, has been the company's main focus for.44% of its existence.  and mind you, this an example where things.turned out well.when a startup does return to working on the product after a funding.round finally closes, it's as if they were returning to work after.a months-long illness.  they've lost most of their momentum.investors have no idea how much they damage the companies they.invest in by taking so long to do it.  but companies do. so there.is a big opportunity here for a new kind of venture fund that invests.smaller amounts at lower valuations, but promises to either close.or say no very quickly.  if there were such a firm, i'd recommend.it to startups in preference to any other, no matter how prestigious..startups live on speed and momentum.21. investors don't like to say no.the reason funding deals take so long to close is mainly that.investors can't make up their minds.  vcs are not big companies;.they can do a deal in 24 hours if they need to.  but they usually.let the initial meetings stretch out over a couple weeks.  the.reason is the selection algorithm i mentioned earlier.  most don't.try to predict whether a startup will win, but to notice quickly.that it already is winning.  they care what the market thinks of.you and what other vcs think of you, and they can't judge those.just from meeting you.because they're investing in things that (a) change fast and (b).they don't understand, a lot of investors will reject you in a way.that can later be claimed not to have been a rejection.  unless you.know this world, you may not even realize you've been rejected..here's a vc saying no:.we're really excited about your project, and we want to keep in.close touch as you develop it further..translated into more straightforward language, this means: we're.not investing in you, but we may change our minds if it looks like.you're taking off.  sometimes they're more candid and say explicitly.that they need to "see some traction."  they'll invest in you if.you start to get lots of users.  but so would any vc.  so all they're.saying is that you're still at square 1.here's a test for deciding whether a vc's response was yes or no..look down at your hands.  are you holding a termsheet?22. you need investors.some founders say "who needs investors?"  empirically the answer.seems to be: everyone who wants to succeed.  practically every.successful startup takes outside investment at some point.why? what the people who think they don't need investors forget is.that they will have competitors.  the question is not whether you.need outside investment, but whether it could help you at all..if the answer is yes, and you don't take investment, then competitors.who do will have an advantage over you.  and in the startup world.a little advantage can expand into a lot.mike moritz famously said that he invested in yahoo because he.thought they had a few weeks' lead over their competitors.  that.may not have mattered quite so much as he thought, because google.came along three years later and kicked yahoo's ass.  but there is.something in what he said.  sometimes a small lead can grow into.the yes half of a binary choice.maybe as it gets cheaper to start a startup, it will start to be.possible to succeed in a competitive market without outside funding..there are certainly.costs to raising money.  but as of this writing the empirical.evidence says it's a net win.23. investors like it when you don't need them.a lot of founders approach investors as if they needed their.permission to start a company—as if it were like getting into.college.  but you don't need investors to start most companies;.they just make it easier.and in fact, investors greatly prefer it if you don't need them..what excites them, both consciously and unconsciously, is the sort.of startup that approaches them saying "the train's leaving the.station; are you in or out?" not the one saying "please can we have.some money to start a company?"most investors are "bottoms" in the sense that the startups they.like most are those that are rough with them.  when google stuck.kleiner and sequoia with a $75 million premoney valuation, their.reaction was probably "ouch! that feels so good." and they were.right, weren't they?  that deal probably made them more than any.other they've done.the thing is, vcs are pretty good at reading people.  so don't try.to act tough with them unless you really are the next google, or.they'll see through you in a second.  instead of acting tough, what.most startups should do is simply always have a backup plan.  always.have some alternative plan for getting started if any given investor.says no.  having one is the best insurance against needing one.so you shouldn't start a startup that's expensive to start, because.then you'll be at the mercy of investors.  if you ultimately want.to do something that will cost a lot, start by doing a cheaper.subset of it, and expand your ambitions when and if you raise more.money.apparently the most likely animals to be left alive after a nuclear.war are cockroaches, because they're so hard to kill.  that's what.you want to be as a startup, initially.  instead of a beautiful.but fragile flower that needs to have its stem in a plastic tube.to support itself, better to be small, ugly, and indestructible.notes[1].i may be underestimating vcs.  they may play some behind the scenes.role in ipos, which you ultimately need if you want to create a silicon.valley.[2].a few vcs have an email address you can send your business.plan to, but the number of startups that get funded this way is.basically zero.  you should always get a personal introduction—and.to a partner, not an associate.[3].several people have told us that the most valuable thing about.startup school.was that they got to see famous startup founders and realized.they were just ordinary guys.  though we're happy to provide this.service, this is not generally the way we pitch startup school to.potential speakers.[4].actually this sounds to me like a vc who got buyer's remorse,.then used a technicality to get out of the deal.  but it's telling.that it even seemed a plausible excuse.thanks to sam altman, paul buchheit, hutch fishman, and robert.morris for reading drafts of.this, and to kenneth king of ases for inviting me to speak..comment on this essay.<eot><sot>two kinds of judgement.april 2007
there are two different ways people judge you.  sometimes judging.you correctly is the end goal.  but there's a second much more.common type of judgement where it isn't.  we tend to regard all.judgements of us as the first type.  we'd probably be happier if.we realized which are and which aren't.the first type of judgement, the type where judging you is the end.goal, include court cases, grades in classes, and most competitions..such judgements can of course be mistaken, but because the goal is.to judge you correctly, there's usually some kind of appeals process..if you feel you've been misjudged, you can protest that you've been.treated unfairly.nearly all the judgements made on children are of this type, so we.get into the habit early in life of thinking that all judgements.are.but in fact there is a second much larger class of judgements where.judging you is only a means to something else.  these include college.admissions, hiring and investment decisions, and of course the.judgements made in dating.  this kind of judgement is not really.about you.put yourself in the position of someone selecting players for a.national team.  suppose for the sake of simplicity that this is a.game with no positions, and that you have to select 20 players..there will be a few stars who clearly should make the team, and.many players who clearly shouldn't.  the only place your judgement.makes a difference is in the borderline cases.  suppose you screw.up and underestimate the 20th best player, causing him not to make.the team, and his place to be taken by the 21st best.  you've still.picked a good team.  if the players have the usual distribution of.ability, the 21st best player will be only slightly worse than the.20th best.  probably the difference between them will be less than.the measurement error.the 20th best player may feel he has been misjudged.  but your goal.here wasn't to provide a service estimating people's ability.  it.was to pick a team, and if the difference between the 20th and 21st.best players is less than the measurement error, you've still done.that optimally.it's a false analogy even to use the word unfair to describe this.kind of misjudgement.  it's not aimed at producing a correct estimate.of any given individual, but at selecting a reasonably optimal set.one thing that leads us astray here is that the selector seems to.be in a position of power.  that makes him seem like a judge.  if.you regard someone judging you as a customer instead of a judge,.the expectation of fairness goes away.  the author of a good novel.wouldn't complain that readers were unfair for preferring a.potboiler with a racy cover.  stupid, perhaps, but not unfair.our early training and our self-centeredness combine to make us.believe that every judgement of us is about us.  in fact most aren't..this is a rare case where being less self-centered will make people.more confident.  once you realize how little most people judging.you care about judging you accurately—once you realize that because.of the normal distribution of most applicant pools, it matters least.to judge accurately in precisely the cases where judgement has the.most effect—you won't take rejection so personally.and curiously enough, taking rejection less personally may help you.to get rejected less often.  if you think someone judging you will.work hard to judge you correctly, you can afford to be passive..but the more you realize that most judgements are greatly influenced.by random, extraneous factors—that most people judging you are.more like a fickle novel buyer than a wise and perceptive.magistrate—the more you realize you can do things to influence the.outcome.one good place to apply this principle is in college applications..most high school students applying to college do it with the usual.child's mix of inferiority and self-centeredness: inferiority in.that they assume that admissions committees must be all-seeing;.self-centeredness in that they assume admissions committees care.enough about them to dig down into their application and figure out.whether they're good or not.  these combine to make applicants.passive in applying and hurt when they're rejected.  if college.applicants realized how quick and impersonal most selection processes.are, they'd make more effort to sell themselves, and take the outcome.less personally.spanish translationrussian translationarabic translation<eot><sot>microsoft is dead.april 2007
a few days ago i suddenly realized microsoft was dead.  i was talking.to a young startup founder about how google was different from.yahoo.  i said that yahoo had been warped from the start by.their fear of microsoft.  that was why they'd positioned themselves.as a "media company" instead of a technology company.  then i looked.at his face and realized he didn't understand.  it was as if i'd.told him how much girls liked barry manilow in the mid.80s.  barry who?microsoft?  he didn't say anything, but i could tell he didn't quite.believe anyone would be frightened of them.microsoft cast.a shadow over the software world for almost 20 years.starting in the late 80s..i can remember when it was ibm before them.  i mostly ignored this.shadow.  i never used microsoft software, so it only affected me.indirectly—for example, in the spam i got from botnets.  and.because i wasn't paying attention, i didn't notice when the shadow.disappeared.but it's gone now.  i can sense that.  no one is even afraid of.microsoft anymore.  they still make a lot of money—so does ibm,.for that matter.  but they're not dangerous.when did microsoft die, and of what?  i know they seemed dangerous.as late as 2001, because i wrote an essay then.about how they were.less dangerous than they seemed.   i'd guess they were dead by 2005..i know when we started y combinator we didn't worry about microsoft.as competition for the startups we funded.  in fact, we've never.even invited them to the demo days we organize for startups to.present to investors.  we invite yahoo and google and some other.internet companies, but we've never bothered to invite microsoft..nor has anyone there ever even sent us an email.  they're in a.different world.what killed them?  four things, i think, all of them occurring.simultaneously in the mid 2000s.the most obvious is google.  there can only be one big man in town,.and they're clearly it.  google is the most dangerous company.now by far, in both the good and bad senses of the word.  microsoft.can at best limp along afterward.when did google take the lead?  there will be a tendency to push.it back to their ipo in august 2004, but they weren't setting the.terms of the debate then.  i'd say they took the lead in.2005.  gmail was one of the things that put them over the edge..gmail showed they could do more than search.gmail also showed how much you could do with web-based software,.if you took advantage of what later came to be called "ajax." and.that was the second cause of microsoft's death: everyone can see the.desktop is over.  it now seems inevitable that applications will.live on the web—not just email, but everything, right up to.photoshop.  even microsoft sees that now.ironically, microsoft unintentionally helped create ajax.  the x.in ajax is from the xmlhttprequest object, which lets the browser.communicate with the server in the background while displaying a page..(originally the only way to communicate with the server was to.ask for a new page.) xmlhttprequest was created by microsoft in the late 90s.because they needed it for outlook.  what they didn't realize was.that it would be useful to a lot of other people too—in fact, to.anyone who wanted to make web apps work like desktop ones.the other critical component of ajax is javascript, the programming.language that runs in the browser.  microsoft saw the danger of.javascript and tried to keep it broken for as long as they could..[1].but eventually the open source world won, by producing.javascript libraries that grew over the brokenness of explorer.the way a tree grows over barbed wire.the third cause of microsoft's death was broadband internet.  anyone.who cares can have fast internet access.now.  and the bigger the pipe to the server, the less you need the.desktop.the last nail in the coffin came, of all places, from apple..thanks to os x, apple has come back from the dead in a way.that is extremely rare in technology..[2].their victory is so complete that i'm now surprised when i come across.a computer running windows.  nearly all the people we fund at y.combinator use apple laptops.  it was the same in the audience at.startup.school.  all the computer people use macs or linux now.  windows is for.grandmas, like macs used to be in the 90s.  so not only does the.desktop no longer matter, no one who cares about computers uses.microsoft's anyway.and of course apple has microsoft on the run in music.too, with tv and phones on the way.i'm glad microsoft is dead.  they were like nero or.commodus—evil.in the way only inherited power can make you.  because remember,.the microsoft monopoly didn't begin with microsoft.  they got it.from ibm.  the software business was overhung by a.monopoly from about the mid-1950s to about 2005.  for practically.its whole existence, that is.  one of the reasons "web 2.0" has.such an air of euphoria about it is the feeling, conscious or not,.that this era of monopoly may finally be over.of course, as a hacker i can't help thinking about how something.broken could be fixed.  is there some way microsoft could come back?.in principle, yes.  to see how, envision two things: (a) the amount.of cash microsoft now has on hand, and (b) larry and sergey making.the rounds of all the search engines ten years ago trying to sell.the idea for google for a million dollars, and being turned down.by everyone.the surprising fact is, brilliant hackers—dangerously brilliant.hackers—can be had very cheaply, by the standards of a.company as rich as microsoft.  they can't.hire smart people anymore,.but they could buy as many as they wanted for only an order of magnitude.more. so if they wanted to be a contender.again, this is how they could do it:.buy all the good "web 2.0" startups.  they could get substantially.all of them for less than they'd have to pay for facebook. put them all in a building in silicon valley, surrounded by.lead shielding to protect them from any contact with redmond..i feel safe suggesting this, because they'd never do it.  microsoft's.biggest weakness is that they still don't realize how much they.suck.  they still think they can write software in house.  maybe they.can, by the standards of the desktop world.  but that world ended.a few years ago.i already know what the reaction to this essay will be.  half the.readers will say that microsoft is still an enormously profitable.company, and that i should be more.careful about drawing conclusions based on what a few people think.in our insular little "web 2.0" bubble.  the other half, the younger.half, will complain that this is old news.see also: microsoft is dead: the cliffs notesnotes[1].it doesn't take a conscious effort to make software incompatible..all you have to do is not work too hard at fixing bugs—which, if.you're a big company, you produce in copious quantities.  the.situation is analogous to the writing of "literary.theorists."  most don't try to be obscure; they just don't make an.effort to be clear.  it wouldn't pay.[2].in part because steve jobs got pushed out by john sculley in.a way that's rare among technology companies.  if apple's board.hadn't made that blunder, they wouldn't have had to bounce back.portuguese translationsimplified chinese translationkorean translation<eot><sot>why to not not start a startup.want to start a startup?  get funded by.y combinator..march 2007
(this essay is derived from talks at the 2007.startup school and the berkeley csua.)we've now been doing y combinator long enough to have some data.about success rates.  our first batch, in the summer of 2005, had.eight startups in it.  of those eight, it now looks as if at least.four succeeded.  three have been acquired:.reddit was a merger of.two, reddit and infogami, and a third was acquired that we can't.talk about yet.  another from that batch was.loopt, which is doing.so well they could probably be acquired in about ten minutes if.they wanted to.so about half the founders from that first summer, less than two.years ago, are now rich, at least by their standards.  (one thing.you learn when you get rich is that there are many degrees of it.)i'm not ready to predict our success rate will stay as high as 50%..that first batch could have been an anomaly.  but we should be able.to do better than the oft-quoted (and probably made.up) standard figure of 10%.  i'd feel safe aiming at 25%.even the founders who fail don't seem to have such a bad time.  of.those first eight startups, three are now probably dead.  in two.cases the founders just went on to do other things at the end of.the summer.   i don't think they were traumatized by the experience..the closest to a traumatic failure was kiko, whose founders kept.working on their startup for a whole year before being squashed by.google calendar.  but they ended up happy.  they sold their software.on ebay for a quarter of a million dollars.  after they paid back.their angel investors, they had about a year's salary each..[1].then they immediately went on to start a new and much more exciting.startup, justin.tv.so here is an even more striking statistic: 0% of that first batch.had a terrible experience.  they had ups and downs, like every.startup, but i don't think any would have traded it for a job in a.cubicle.  and that statistic is probably not an anomaly.  whatever.our long-term success rate ends up being, i think the rate of people.who wish they'd gotten a regular job will stay close to 0%.the big mystery to me is: why don't more people start startups?  if.nearly everyone who does it prefers it to a regular job, and a.significant percentage get rich, why doesn't everyone want to do.this?  a lot of people think we get thousands of applications for.each funding cycle.  in fact we usually only get several hundred..why don't more people apply?  and while it must seem to anyone.watching this world that startups are popping up like crazy, the.number is small compared to the number of people with the necessary.skills.  the great majority of programmers still go straight from.college to cubicle, and stay there.it seems like people are not acting in their own interest.  what's.going on?   well, i can answer that.  because of y combinator's.position at the very start of the venture funding process, we're.probably the world's leading experts on the psychology of people.who aren't sure if they want to start a company.there's nothing wrong with being unsure.  if you're a hacker thinking.about starting a startup and hesitating before taking the leap,.you're part of a grand tradition.  larry and sergey seem to have.felt the same before they started google, and so did jerry and filo.before they started yahoo.  in fact, i'd guess the most successful.startups are the ones started by uncertain hackers rather than.gung-ho business guys.we have some evidence to support this.  several of the most successful.startups we've funded told us later that they only decided to apply.at the last moment.  some decided only hours before the deadline.the way to deal with uncertainty is to analyze it into components..most people who are reluctant to do something have about eight.different reasons mixed together in their heads, and don't know.themselves which are biggest.  some will be justified and some.bogus, but unless you know the relative proportion of each, you.don't know whether your overall uncertainty is mostly justified or.mostly bogus.so i'm going to list all the components of people's reluctance to.start startups, and explain which are real.  then would-be founders.can use this as a checklist to examine their own feelings.i admit my goal is to increase your self-confidence.  but there are.two things different here from the usual confidence-building exercise..one is that i'm motivated to be honest.  most people in the.confidence-building business have already achieved their goal when.you buy the book or pay to attend the seminar where they tell you.how great you are.  whereas if i encourage people to start startups.who shouldn't, i make my own life worse.  if i encourage too many.people to apply to y combinator, it just means more work for me,.because i have to read all the applications.the other thing that's going to be different is my approach.  instead.of being positive, i'm going to be negative.  instead of telling.you "come on, you can do it" i'm going to consider all the reasons.you aren't doing it, and show why most (but not all) should be.ignored.  we'll start with the one everyone's born with.1. too younga lot of people think they're too young to start a startup.  many.are right.  the median age worldwide is about 27, so probably a.third of the population can truthfully say they're too young.what's too young?  one of our goals with y combinator was to discover.the lower bound on the age of startup founders.  it always seemed.to us that investors were too conservative here—that they wanted.to fund professors, when really they should be funding grad students.or even undergrads.the main thing we've discovered from pushing the edge of this.envelope is not where the edge is, but how fuzzy it is.  the outer.limit may be as low as 16.  we don't look beyond 18 because people.younger than that can't legally enter into contracts.  but the most.successful founder we've funded so far, sam altman, was 19 at the.time.sam altman, however, is an outlying data point.  when he was 19,.he seemed like he had a 40 year old inside him.  there are other.19 year olds who are 12 inside.there's a reason we have a distinct word "adult" for people over a.certain age.  there is a threshold you cross.  it's conventionally.fixed at 21, but different people cross it at greatly varying ages..you're old enough to start a startup if you've crossed this threshold,.whatever your age.how do you tell?  there are a couple tests adults use.  i realized.these tests existed after meeting sam altman, actually.  i noticed.that i felt like i was talking to someone much older.  afterward i.wondered, what am i even measuring?  what made him seem older?one test adults use is whether you still have the kid flake reflex..when you're a little kid and you're asked to do something hard, you.can cry and say "i can't do it" and the adults will probably let.you off.  as a kid there's a magic button you can press by saying."i'm just a kid" that will get you out of most difficult situations..whereas adults, by definition, are not allowed to flake.  they still.do, of course, but when they do they're ruthlessly pruned.the other way to tell an adult is by how they react to a challenge..someone who's not yet an adult will tend to respond to a challenge.from an adult in a way that acknowledges their dominance.  if an.adult says "that's a stupid idea," a kid will either crawl away.with his tail between his legs, or rebel.  but rebelling presumes.inferiority as much as submission.  the adult response to."that's a stupid idea," is simply to look the other person in the.eye and say "really?  why do you think so?"there are a lot of adults who still react childishly to challenges,.of course.  what you don't often find are kids who react to challenges.like adults.  when you do, you've found an adult, whatever their.age.2. too inexperiencedi once wrote that startup founders should be at least 23, and that.people should work for another company for a few years before.starting their own.  i no longer believe that, and what changed my.mind is the example of the startups we've funded.i still think 23 is a better age than 21.  but the best way to get.experience if you're 21 is to start a startup.  so, paradoxically,.if you're too inexperienced to start a startup, what you should do.is start one.  that's a way more efficient cure for inexperience.than a normal job.  in fact, getting a normal job may actually make.you less able to start a startup, by turning you into a tame animal.who thinks he needs an office to work in and a product manager to.tell him what software to write.what really convinced me of this was the kikos.  they started a.startup right out of college.  their inexperience caused them to.make a lot of mistakes.  but by the time we funded their second.startup, a year later, they had become extremely formidable.  they.were certainly not tame animals.  and there is no way they'd have.grown so much if they'd spent that year working at microsoft, or.even google.  they'd still have been diffident junior programmers.so now i'd advise people to go ahead and start startups right out.of college.  there's no better time to take risks than when you're.young.  sure, you'll probably fail.  but even failure will get you.to the ultimate goal faster than getting a job.it worries me a bit to be saying this, because in effect we're.advising people to educate themselves by failing at our expense,.but it's the truth.3. not determined enoughyou need a lot of determination to succeed as a startup founder..it's probably the single best predictor of success.some people may not be determined enough to make it.  it's.hard for me to say for sure, because i'm so determined that i can't.imagine what's going on in the heads of people who aren't.  but i.know they exist.most hackers probably underestimate their determination.  i've seen.a lot become visibly more determined as they get used to running a.startup.  i can think of.several we've funded who would have been delighted at first to be.bought for $2 million, but are now set on world domination.how can you tell if you're determined enough, when larry and sergey.themselves were unsure at first about starting a company?  i'm.guessing here, but i'd say the test is whether you're sufficiently.driven to work on your own projects.  though they may have been.unsure whether they wanted to start a company, it doesn't seem as.if larry and sergey were meek little research assistants, obediently.doing their advisors' bidding.  they started projects of their own..4. not smart enoughyou may need to be moderately smart to succeed as a startup founder..but if you're worried about this, you're probably mistaken.  if.you're smart enough to worry that you might not be smart enough to.start a startup, you probably are.and in any case, starting a startup just doesn't require that much.intelligence.  some startups do.  you have to be good at math to.write mathematica.  but most companies do more mundane stuff where.the decisive factor is effort, not brains.  silicon valley can warp.your perspective on this, because there's a cult of smartness here..people who aren't smart at least try to act that way.  but if you.think it takes a lot of intelligence to get rich, try spending a.couple days in some of the fancier bits of new york or la.if you don't think you're smart enough to start a startup doing.something technically difficult, just write enterprise software..enterprise software companies aren't technology companies, they're.sales companies, and sales depends mostly on effort.5. know nothing about businessthis is another variable whose coefficient should be zero.  you.don't need to know anything about business to start a startup.  the.initial focus should be the product.  all you need to know in this.phase is how to build things people want.  if you succeed, you'll.have to think about how to make money from it.  but this is so easy.you can pick it up on the fly.i get a fair amount of flak for telling founders just to make.something great and not worry too much about making money.  and yet.all the empirical evidence points that way: pretty much 100% of.startups that make something popular manage to make money from it..and acquirers tell me privately that revenue is not what they buy.startups for, but their strategic value.  which means, because they.made something people want.  acquirers know the rule holds for them.too: if users love you, you can always make money from that somehow,.and if they don't, the cleverest business model in the world won't.save you.so why do so many people argue with me?  i think one reason is that.they hate the idea that a bunch of twenty year olds could get rich.from building something cool that doesn't make any money.  they.just don't want that to be possible.  but how possible it is doesn't.depend on how much they want it to be.for a while it annoyed me to hear myself described as some kind of.irresponsible pied piper, leading impressionable young hackers down.the road to ruin.  but now i realize this kind of controversy is a.sign of a good idea.the most valuable truths are the ones most people don't believe..they're like undervalued stocks.  if you start with them, you'll.have the whole field to yourself.  so when you find an idea you.know is good but most people disagree with, you should not.merely ignore their objections, but push aggressively in that.direction.  in this case, that means you should seek out ideas that.would be popular but seem hard to make money from.we'll bet a seed round you can't make something popular that we.can't figure out how to make money from.6. no cofoundernot having a cofounder is a real problem.  a startup is too much.for one person to bear.  and though we differ from other investors.on a lot of questions, we all agree on this.  all investors, without.exception, are more likely to fund you with a cofounder than without.we've funded two single founders, but in both cases we suggested.their first priority should be to find a cofounder.  both did.  but.we'd have preferred them to have cofounders before they applied..it's not super hard to get a cofounder for a project that's just.been funded, and we'd rather have cofounders committed enough to.sign up for something super hard.if you don't have a cofounder, what should you do?  get one.  it's.more important than anything else.  if there's no one where you.live who wants to start a startup with you, move where there are.people who do.  if no one wants to work with you on your current.idea, switch to an idea people want to work on.if you're still in school, you're surrounded by potential cofounders..a few years out it gets harder to find them.  not only do you have.a smaller pool to draw from, but most already have jobs, and perhaps.even families to support.  so if you had friends in college you.used to scheme about startups with, stay in touch with them as well.as you can.  that may help keep the dream alive.it's possible you could meet a cofounder through something like a.user's group or a conference.  but i wouldn't be too optimistic..you need to work with someone to know whether you want them as a.cofounder..[2]the real lesson to draw from this is not how to find a cofounder,.but that you should start startups when you're young and there are.lots of them around.7. no ideain a sense, it's not a problem if you don't have a good idea, because.most startups change their idea anyway.  in the average y combinator.startup, i'd guess 70% of the idea is new at the end of the.first three months.  sometimes it's 100%.in fact, we're so sure the founders are more important than the.initial idea that we're going to try something new this funding.cycle. we're going to let people apply with no idea at all.  if you.want, you can answer the question on the application form that asks.what you're going to do with "we have no idea."  if you seem really.good we'll accept you anyway.  we're confident we can sit down with.you and cook up some promising project.really this just codifies what we do already.  we put little weight.on the idea.  we ask mainly out of politeness.  the kind of question.on the application form that we really care about is the one where.we ask what cool things you've made.  if what you've made is version.one of a promising startup, so much the better, but the main thing.we care about is whether you're good at making things.  being lead.developer of a popular open source project counts almost as much.that solves the problem if you get funded by y combinator.  what.about in the general case?  because in another sense, it is a problem.if you don't have an idea.  if you start a startup with no idea,.what do you do next?so here's the brief recipe for getting startup ideas.  find something.that's missing in your own life, and supply that need—no matter.how specific to you it seems.  steve wozniak built himself a computer;.who knew so many other people would want them?  a need that's narrow.but genuine is a better starting point than one that's broad but.hypothetical.  so even if the problem is simply that you don't have.a date on saturday night, if you can think of a way to fix that by.writing software, you're onto something, because a lot of other.people have the same problem.8. no room for more startupsa lot of people look at the ever-increasing number of startups and.think "this can't continue."  implicit in their thinking is a.fallacy: that there is some limit on the number of startups there.could be.  but this is false.  no one claims there's any limit on.the number of people who can work for salary at 1000-person companies..why should there be any limit on the number who can work for equity.at 5-person companies?.[3]nearly everyone who works is satisfying some kind of need.  breaking.up companies into smaller units doesn't make those needs go away..existing needs would probably get satisfied more efficiently by a.network of startups than by a few giant, hierarchical organizations,.but i don't think that would mean less opportunity, because satisfying.current needs would lead to more.  certainly this tends to be the.case in individuals.  nor is there anything wrong with that.  we.take for granted things that medieval kings would have considered.effeminate luxuries, like whole buildings heated to spring temperatures.year round.  and if things go well, our descendants will take for.granted things we would consider shockingly luxurious.  there is.no absolute standard for material wealth.  health care is a component.of it, and that alone is a black hole.  for the foreseeable future,.people will want ever more material wealth, so there is no limit.to the amount of work available for companies, and for startups in.particular.usually the limited-room fallacy is not expressed directly.  usually.it's implicit in statements like "there are only so many startups.google, microsoft, and yahoo can buy."  maybe, though the list of.acquirers is a lot longer than that.  and whatever you think of.other acquirers, google is not stupid.  the reason big companies.buy startups is that they've created something valuable.  and why.should there be any limit to the number of valuable startups companies.can acquire, any more than there is a limit to the amount of wealth.individual people want?  maybe there would be practical limits on.the number of startups any one acquirer could assimilate, but if.there is value to be had, in the form of upside that founders are.willing to forgo in return for an immediate payment, acquirers will.evolve to consume it.  markets are pretty smart that way.9. family to supportthis one is real.  i wouldn't advise anyone with a family to start.a startup.  i'm not saying it's a bad idea, just that i don't want.to take responsibility for advising it.  i'm willing to take.responsibility for telling 22 year olds to start startups.  so what.if they fail?  they'll learn a lot, and that job at microsoft will.still be waiting for them if they need it.  but i'm not prepared.to cross moms.what you can do, if you have a family and want to start a startup,.is start a consulting business you can then gradually turn into a.product business.  empirically the chances of pulling that off seem.very small. you're never going to produce google this way.  but at.least you'll never be without an income.another way to decrease the risk is to join an existing startup.instead of starting your own.  being one of the first employees of.a startup is a lot like being a founder, in both the good ways and.the bad.  you'll be roughly 1/n^2 founder, where n is your employee.number.as with the question of cofounders, the real lesson here is to start.startups when you're young.10. independently wealthythis is my excuse for not starting a startup.  startups are stressful..why do it if you don't need the money?  for every "serial entrepreneur,".there are probably twenty sane ones who think "start another.company?  are you crazy?"i've come close to starting new startups a couple times, but i.always pull back because i don't want four years of my life to be.consumed by random schleps.  i know this business well enough to.know you can't do it half-heartedly.  what makes a good startup.founder so dangerous is his willingness to endure infinite schleps.there is a bit of a problem with retirement, though.  like a lot.of people, i like to work.  and one of the many weird little problems.you discover when you get rich is that a lot of the interesting.people you'd like to work with are not rich.  they need to work at.something that pays the bills.  which means if you want to have.them as colleagues, you have to work at something that pays the.bills too, even though you don't need to.  i think this is what.drives a lot of serial entrepreneurs, actually.that's why i love working on y combinator so much.  it's an excuse.to work on something interesting with people i like.11.  not ready for commitmentthis was my reason for not starting a startup for most of my twenties..like a lot of people that age, i valued freedom most of all.  i was.reluctant to do anything that required a commitment of more than a.few months.  nor would i have wanted to do anything that completely.took over my life the way a startup does.  and that's fine.  if you.want to spend your time travelling around, or playing in a band,.or whatever, that's a perfectly legitimate reason not to start a.company.if you start a startup that succeeds, it's going to consume at least.three or four years.  (if it fails, you'll be done a lot quicker.).so you shouldn't do it if you're not ready for commitments on that.scale.  be aware, though, that if you get a regular job, you'll.probably end up working there for as long as a startup would take,.and you'll find you have much less spare time than you might expect..so if you're ready to clip on that id badge and go to that orientation.session, you may also be ready to start that startup.12.  need for structurei'm told there are people who need structure in their lives.  this.seems to be a nice way of saying they need someone to tell them.what to do.  i believe such people exist.  there's plenty of empirical.evidence: armies, religious cults, and so on.  they may even be the.majority.if you're one of these people, you probably shouldn't start a.startup.  in fact, you probably shouldn't even go to work for one..in a good startup, you don't get told what to do very much.  there.may be one person whose job title is ceo, but till the company has.about twelve people no one should be telling anyone what to do..that's too inefficient.  each person should just do what they need.to without anyone telling them.if that sounds like a recipe for chaos, think about a soccer team..eleven people manage to work together in quite complicated ways,.and yet only in occasional emergencies does anyone tell anyone else.what to do.  a reporter once asked david beckham if there were any.language problems at real madrid, since the players were from about.eight different countries.  he said it was never an issue, because.everyone was so good they never had to talk.  they all just did the.right thing.how do you tell if you're independent-minded enough to start a.startup?  if you'd bristle at the suggestion that you aren't, then.you probably are.13. fear of uncertaintyperhaps some people are deterred from starting startups because.they don't like the uncertainty.  if you go to work for microsoft,.you can predict fairly accurately what the next few years will be.like—all too accurately, in fact.  if you start a startup, anything.might happen.well, if you're troubled by uncertainty, i can solve that problem.for you: if you start a startup, it will probably fail.  seriously,.though, this is not a bad way to think.about the whole experience.  hope for the best, but expect the.worst.  in the worst case, it will at least be interesting.  in the.best case you might get rich.no one will blame you if the startup tanks, so long as you made a.serious effort.  there may once have been a time when employers.would regard that as a mark against you, but they wouldn't now.  i.asked managers at big companies, and they all said they'd prefer.to hire someone who'd tried to start a startup and failed over.someone who'd spent the same time working at a big company.nor will investors hold it against you, as long as you didn't fail.out of laziness or incurable stupidity.   i'm told there's a lot.of stigma attached to failing in other places—in europe, for.example.  not here.  in america, companies, like practically.everything else, are disposable.14. don't realize what you're avoidingone reason people who've been out in the world for a year or two.make better founders than people straight from college is that they.know what they're avoiding.  if their startup fails, they'll have.to get a job, and they know how much jobs suck.if you've had summer jobs in college, you may think you know what.jobs are like, but you probably don't.  summer jobs at technology.companies are not real jobs.  if you get a summer job as a waiter,.that's a real job.  then you have to carry your weight.  but software.companies don't hire students for the summer as a source of cheap.labor.  they do it in the hope of recruiting them when they graduate..so while they're happy if you produce, they don't expect you to.that will change if you get a real job after you graduate.  then.you'll have to earn your keep.  and since most of what big companies.do is boring, you're going to have to work on boring stuff.  easy,.compared to college, but boring.  at first it may seem cool to get.paid for doing easy stuff, after paying to do hard stuff in college..but that wears off after a few months.  eventually it gets demoralizing.to work on dumb stuff, even if it's easy and you get paid a lot.and that's not the worst of it.  the thing that really sucks about.having a regular job is the expectation that you're supposed to be.there at certain times.  even google is afflicted with this,.apparently.  and what this means, as everyone who's had a regular.job can tell you, is that there are going to be times when you have.absolutely no desire to work on anything, and you're going to have.to go to work anyway and sit in front of your screen and pretend.to.  to someone who likes work, as most good hackers do, this is.torture.in a startup, you skip all that.  there's no concept of office hours.in most startups.  work and life just get mixed together.  but the.good thing about that is that no one minds if you have a life at.work.  in a startup you can do whatever you want most of the time..if you're a founder, what you want to do most of the time is work..but you never have to pretend to.if you took a nap in your office in a big company, it would seem.unprofessional.  but if you're starting a startup and you fall.asleep in the middle of the day, your cofounders will just assume.you were tired.15. parents want you to be a doctora significant number of would-be startup founders are probably.dissuaded from doing it by their parents.  i'm not going to say you.shouldn't listen to them.  families are entitled to their own.traditions, and who am i to argue with them?  but i will give you.a couple reasons why a safe career might not be what your parents.really want for you.one is that parents tend to be more conservative for their kids.than they would be for themselves.  this is actually a rational.response to their situation.  parents end up sharing more of their.kids' ill fortune than good fortune.  most parents don't mind this;.it's part of the job; but it does tend to make them excessively.conservative.  and erring on the side of conservatism is still.erring.  in almost everything, reward is proportionate to risk.  so.by protecting their kids from risk, parents are, without realizing.it, also protecting them from rewards.  if they saw that, they'd.want you to take more risks.the other reason parents may be mistaken is that, like generals,.they're always fighting the last war.  if they want you to be a.doctor, odds are it's not just because they want you to help the.sick, but also because it's a prestigious and lucrative career..[4].but not so lucrative or prestigious as it was when their.opinions were formed.  when i was a kid in the seventies, a doctor.was the thing to be.  there was a sort of golden triangle involving.doctors, mercedes 450sls, and tennis.  all three vertices now seem.pretty dated.the parents who want you to be a doctor may simply not realize how.much things have changed.  would they be that unhappy if you were.steve jobs instead?  so i think the way to deal with your parents'.opinions about what you should do is to treat them like feature.requests.  even if your only goal is to please them, the way to do.that is not simply to give them what they ask for.  instead think.about why they're asking for something, and see if there's a better.way to give them what they need.16.  a job is the defaultthis leads us to the last and probably most powerful reason people.get regular jobs: it's the default thing to do.  defaults are.enormously powerful, precisely because they operate without any.conscious choice.to almost everyone except criminals, it seems an axiom that if you.need money, you should get a job.  actually this tradition is not.much more than a hundred years old.  before that, the default way.to make a living was by farming.  it's a bad plan to treat something.only a hundred years old as an axiom.  by historical standards,.that's something that's changing pretty rapidly.we may be seeing another such change right now.  i've read a lot.of economic history, and i understand the startup world pretty well,.and it now seems to me fairly likely that we're seeing the beginning.of a change like the one from farming to manufacturing.and you know what?  if you'd been around when that change began.(around 1000 in europe) it would have seemed to nearly everyone.that running off to the city to make your fortune was a crazy thing.to do.  though serfs were in principle forbidden to leave their.manors, it can't have been that hard to run away to a city.  there.were no guards patrolling the perimeter of the village.  what.prevented most serfs from leaving was that it seemed insanely risky..leave one's plot of land?  leave the people you'd spent your whole.life with, to live in a giant city of three or four thousand complete.strangers?  how would you live?  how would you get food, if you.didn't grow it?frightening as it seemed to them, it's now the default with us to.live by our wits.  so if it seems risky to you to start a startup,.think how risky it once seemed to your ancestors to live as we do.now.  oddly enough, the people who know this best are the very ones.trying to get you to stick to the old model.  how can larry and.sergey say you should come work as their employee, when they didn't.get jobs themselves?now we look back on medieval peasants and wonder how they stood it..how grim it must have been to till the same fields your whole life.with no hope of anything better, under the thumb of lords and priests.you had to give all your surplus to and acknowledge as your masters..i wouldn't be surprised if one day people look back on what we.consider a normal job in the same way.  how grim it would be to.commute every day to a cubicle in some soulless office complex, and.be told what to do by someone you had to acknowledge as a boss—someone.who could call you into their office and say "take a seat,".and you'd sit!  imagine having to ask permission to release.software to users.  imagine being sad on sunday afternoons because.the weekend was almost over, and tomorrow you'd have to get up and.go to work.  how did they stand it?it's exciting to think we may be on the cusp of another shift like.the one from farming to manufacturing.  that's why i care about.startups.  startups aren't interesting just because they're a way.to make a lot of money.  i couldn't care less about other ways to.do that, like speculating in securities.  at most those are interesting.the way puzzles are.  there's more going on with startups.  they.may represent one of those rare, historic shifts in the way.wealth is created.that's ultimately what drives us to work on y combinator.  we want.to make money, if only so we don't have to stop doing it, but that's.not the main goal.  there have only been a handful of these great.economic shifts in human history.  it would be an amazing hack to.make one happen faster..notes[1].the only people who lost were us.  the angels had convertible.debt, so they had first claim on the proceeds of the auction. y.combinator only got 38 cents on the dollar.[2].the best kind of organization for that might be an open source.project, but those don't involve a lot of face to face meetings..maybe it would be worth starting one that did.[3].there need to be some number of big companies to acquire the.startups, so the number of big companies couldn't decrease to zero.[4].thought experiment: if doctors did the same work, but as.impoverished outcasts, which parents would still want their kids.to be doctors?thanks to trevor blackwell, jessica livingston, and robert.morris for reading drafts of this, to the founders of zenter.for letting me use their web-based powerpoint killer even though.it isn't launched yet, and to ming-hay luk.of the berkeley csua for inviting me to speak..comment on this essay.russian translationjapanese translationkorean translation<eot><sot>is it worth being wise?.february 2007
a few days ago i finally figured out something i've wondered about.for 25 years: the relationship between wisdom and intelligence..anyone can see they're not the same by the number of people who are.smart, but not very wise.  and yet intelligence and wisdom do seem.related.  how?what is wisdom?  i'd say it's knowing what to do in a lot of.situations.  i'm not trying to make a deep point here about the.true nature of wisdom, just to figure out how we use the word.  a.wise person is someone who usually knows the right thing to do.and yet isn't being smart also knowing what to do in certain.situations?  for example, knowing what to do when the teacher tells.your elementary school class to add all the numbers from 1 to 100?.[1]some say wisdom and intelligence apply to different types of.problems—wisdom to human problems and intelligence to abstract.ones.  but that isn't true.  some wisdom has nothing to do with.people: for example, the wisdom of the engineer who knows certain.structures are less prone to failure than others.  and certainly.smart people can find clever solutions to human problems as well.as abstract ones..[2]another popular explanation is that wisdom comes from experience.while intelligence is innate.  but people are not simply wise in.proportion to how much experience they have.  other things must.contribute to wisdom besides experience, and some may be innate: a.reflective disposition, for example.neither of the conventional explanations of the difference between.wisdom and intelligence stands up to scrutiny.  so what is the.difference?  if we look at how people use the words "wise" and."smart," what they seem to mean is different shapes of performance.curve"wise" and "smart" are both ways of saying someone knows what to.do.  the difference is that "wise" means one has a high average.outcome across all situations, and "smart" means one does spectacularly.well in a few.  that is, if you had a graph in which the x axis.represented situations and the y axis the outcome, the graph of the.wise person would be high overall, and the graph of the smart person.would have high peaks.the distinction is similar to the rule that one should judge talent.at its best and character at its worst.  except you judge intelligence.at its best, and wisdom by its average.  that's how the two are.related: they're the two different senses in which the same curve.can be high.so a wise person knows what to do in most situations, while a smart.person knows what to do in situations where few others could.  we.need to add one more qualification: we should ignore cases where.someone knows what to do because they have inside information..[3].but aside from that, i don't think we can get much more specific.without starting to be mistaken.nor do we need to.  simple as it is, this explanation predicts, or.at least accords with, both of the conventional stories about the.distinction between wisdom and intelligence.  human problems are.the most common type, so being good at solving those is key in.achieving a high average outcome.   and it seems natural that a.high average outcome depends mostly on experience, but that dramatic.peaks can only be achieved by people with certain rare, innate.qualities; nearly anyone can learn to be a good swimmer, but to be.an olympic swimmer you need a certain body type.this explanation also suggests why wisdom is such an elusive concept:.there's no such thing.  "wise" means something—that one is.on average good at making the right choice.  but giving the name."wisdom" to the supposed quality that enables one to do that doesn't.mean such a thing exists.  to the extent "wisdom" means anything,.it refers to a grab-bag of qualities as various as self-discipline,.experience, and empathy..[4]likewise, though "intelligent" means something, we're asking for.trouble if we insist on looking for a single thing called "intelligence.".and whatever its components, they're not all innate.  we use the.word "intelligent" as an indication of ability: a smart person can.grasp things few others could.  it does seem likely there's some.inborn predisposition to intelligence (and wisdom too), but this.predisposition is not itself intelligence.one reason we tend to think of intelligence as inborn is that people.trying to measure it have concentrated on the aspects of it that.are most measurable.  a quality that's inborn will obviously be.more convenient to work with than one that's influenced by experience,.and thus might vary in the course of a study.  the problem comes.when we drag the word "intelligence" over onto what they're measuring..if they're measuring something inborn, they can't be measuring.intelligence.  three year olds aren't smart.   when we describe one.as smart, it's shorthand for "smarter than other three year olds."splitperhaps it's a technicality to point out that a predisposition to.intelligence is not the same as intelligence.  but it's an important.technicality, because it reminds us that we can become smarter,.just as we can become wiser.the alarming thing is that we may have to choose between the two.if wisdom and intelligence are the average and peaks of the same.curve, then they converge as the number of points on the curve.decreases.  if there's just one point, they're identical: the average.and maximum are the same.  but as the number of points increases,.wisdom and intelligence diverge.  and historically the number of.points on the curve seems to have been increasing: our ability is.tested in an ever wider range of situations.in the time of confucius and socrates, people seem to have regarded.wisdom, learning, and intelligence as more closely related than we.do.  distinguishing between "wise" and "smart" is a modern habit..[5].and the reason we do is that they've been diverging.  as knowledge.gets more specialized, there are more points on the curve, and the.distinction between the spikes and the average becomes sharper,.like a digital image rendered with more pixels.one consequence is that some old recipes may have become obsolete..at the very least we have to go back and figure out if they were.really recipes for wisdom or intelligence.  but the really striking.change, as intelligence and wisdom drift apart, is that we may have.to decide which we prefer.  we may not be able to optimize for both.simultaneously.society seems to have voted for intelligence.  we no longer admire.the sage—not the way people did two thousand years ago.  now.we admire the genius.  because in fact the distinction we began.with has a rather brutal converse: just as you can be smart without.being very wise, you can be wise without being very smart.  that.doesn't sound especially admirable.  that gets you james bond, who.knows what to do in a lot of situations, but has to rely on q for.the ones involving math.intelligence and wisdom are obviously not mutually exclusive.  in.fact, a high average may help support high peaks.  but there are.reasons to believe that at some point you have to choose between.them.  one is the example of very smart people, who are so often.unwise that in popular culture this now seems to be regarded as the.rule rather than the exception.  perhaps the absent-minded professor.is wise in his way, or wiser than he seems, but he's not wise in.the way confucius or socrates wanted people to be..[6]newfor both confucius and socrates, wisdom, virtue, and happiness were.necessarily related.  the wise man was someone who knew what the.right choice was and always made it; to be the right choice, it had.to be morally right; he was therefore always happy, knowing he'd.done the best he could.  i can't think of many ancient philosophers.who would have disagreed with that, so far as it goes."the superior man is always happy; the small man sad," said confucius..[7]whereas a few years ago i read an interview with a mathematician.who said that most nights he went to bed discontented, feeling he.hadn't made enough progress..[8].the chinese and greek words we.translate as "happy" didn't mean exactly what we do by it, but.there's enough overlap that this remark contradicts them.is the mathematician a small man because he's discontented?  no;.he's just doing a kind of work that wasn't very common in confucius's.day.human knowledge seems to grow fractally.  time after time, something.that seemed a small and uninteresting area—experimental error,.even—turns out, when examined up close, to have as much in.it as all knowledge up to that point.  several of the fractal buds.that have exploded since ancient times involve inventing and.discovering new things.  math, for example, used to be something a.handful of people did part-time.  now it's the career of thousands..and in work that involves making new things, some old rules don't.apply.recently i've spent some time advising people, and there i find the.ancient rule still works: try to understand the situation as well.as you can, give the best advice you can based on your experience,.and then don't worry about it, knowing you did all you could.  but.i don't have anything like this serenity when i'm writing an essay..then i'm worried.  what if i run out of ideas?  and when i'm writing,.four nights out of five i go to bed discontented, feeling i didn't.get enough done.advising people and writing are fundamentally different types of.work.  when people come to you with a problem and you have to figure.out the right thing to do, you don't (usually) have to invent.anything.  you just weigh the alternatives and try to judge which.is the prudent choice.  but prudence can't tell me what sentence.to write next.  the search space is too big.someone like a judge or a military officer can in much of his work.be guided by duty, but duty is no guide in making things.  makers.depend on something more precarious: inspiration.  and like most.people who lead a precarious existence, they tend to be worried,.not contented.  in that respect they're more like the small man of.confucius's day, always one bad harvest (or ruler) away from.starvation. except instead of being at the mercy of weather and.officials, they're at the mercy of their own imagination.limitsto me it was a relief just to realize it might be ok to be discontented..the idea that a successful person should be happy has thousands of.years of momentum behind it.  if i was any good, why didn't i have.the easy confidence winners are supposed to have?  but that, i now.believe, is like a runner asking "if i'm such a good athlete, why.do i feel so tired?" good runners still get tired; they just get.tired at higher speeds.people whose work is to invent or discover things are in the same.position as the runner.  there's no way for them to do the best.they can, because there's no limit to what they could do.  the.closest you can come is to compare yourself to other people.  but.the better you do, the less this matters.  an undergrad who gets.something published feels like a star.  but for someone at the top.of the field, what's the test of doing well?  runners can at least.compare themselves to others doing exactly the same thing; if you.win an olympic gold medal, you can be fairly content, even if you.think you could have run a bit faster.  but what is a novelist to.do?whereas if you're doing the kind of work in which problems are.presented to you and you have to choose between several alternatives,.there's an upper bound on your performance: choosing the best every.time.  in ancient societies, nearly all work seems to have been of.this type.  the peasant had to decide whether a garment was worth.mending, and the king whether or not to invade his neighbor, but.neither was expected to invent anything.  in principle they could.have; the king could have invented firearms, then invaded his.neighbor.  but in practice innovations were so rare that they weren't.expected of you, any more than goalkeepers are expected to score.goals..[9].in practice, it seemed as if there was a correct decision.in every situation, and if you made it you'd done your job perfectly,.just as a goalkeeper who prevents the other team from scoring is.considered to have played a perfect game.in this world, wisdom seemed paramount..[10].even now, most people.do work in which problems are put before them and they have to.choose the best alternative.  but as knowledge has grown more.specialized, there are more and more types of work in which people.have to make up new things, and in which performance is therefore.unbounded.  intelligence has become increasingly important relative.to wisdom because there is more room for spikes.recipesanother sign we may have to choose between intelligence and wisdom.is how different their recipes are.  wisdom seems to come largely.from curing childish qualities, and intelligence largely from.cultivating them.recipes for wisdom, particularly ancient ones, tend to have a.remedial character.  to achieve wisdom one must cut away all the.debris that fills one's head on emergence from childhood, leaving.only the important stuff.  both self-control and experience have.this effect: to eliminate the random biases that come from your own.nature and from the circumstances of your upbringing respectively..that's not all wisdom is, but it's a large part of it.  much of.what's in the sage's head is also in the head of every twelve year.old.  the difference is that in the head of the twelve year old.it's mixed together with a lot of random junk.the path to intelligence seems to be through working on hard problems..you develop intelligence as you might develop muscles, through.exercise.  but there can't be too much compulsion here.  no amount.of discipline can replace genuine curiosity.  so cultivating.intelligence seems to be a matter of identifying some bias in one's.character—some tendency to be interested in certain types of.things—and nurturing it.  instead of obliterating your.idiosyncrasies in an effort to make yourself a neutral vessel for.the truth, you select one and try to grow it from a seedling into.a tree.the wise are all much alike in their wisdom, but very smart people.tend to be smart in distinctive ways.most of our educational traditions aim at wisdom. so perhaps one.reason schools work badly is that they're trying to make intelligence.using recipes for wisdom.  most recipes for wisdom have an element.of subjection.  at the very least, you're supposed to do what the.teacher says.  the more extreme recipes aim to break down your.individuality the way basic training does.  but that's not the route.to intelligence.  whereas wisdom comes through humility, it may.actually help, in cultivating intelligence, to have a mistakenly.high opinion of your abilities, because that encourages you to keep.working.  ideally till you realize how mistaken you were.(the reason it's hard to learn new skills late in life is not just.that one's brain is less malleable.  another probably even worse.obstacle is that one has higher standards.)i realize we're on dangerous ground here.  i'm not proposing the.primary goal of education should be to increase students' "self-esteem.".that just breeds laziness.  and in any case, it doesn't really fool.the kids, not the smart ones.  they can tell at a young age that a.contest where everyone wins is a fraud.a teacher has to walk a narrow path: you want to encourage kids to.come up with things on their own, but you can't simply applaud.everything they produce.  you have to be a good audience: appreciative,.but not too easily impressed.  and that's a lot of work.  you have.to have a good enough grasp of kids' capacities at different ages.to know when to be surprised.that's the opposite of traditional recipes for education.  traditionally.the student is the audience, not the teacher; the student's job is.not to invent, but to absorb some prescribed body of material.  (the.use of the term "recitation" for sections in some colleges is a.fossil of this.) the problem with these old traditions is that.they're too much influenced by recipes for wisdom.differenti deliberately gave this essay a provocative title; of course it's.worth being wise.  but i think it's important to understand the.relationship between intelligence and wisdom, and particularly what.seems to be the growing gap between them.  that way we can avoid.applying rules and standards to intelligence that are really meant.for wisdom.  these two senses of "knowing what to do" are more.different than most people realize.  the path to wisdom is through.discipline, and the path to intelligence through carefully selected.self-indulgence.  wisdom is universal, and intelligence idiosyncratic..and while wisdom yields calmness, intelligence much of the time.leads to discontentment.that's particularly worth remembering.  a physicist friend recently.told me half his department was on prozac.  perhaps if we acknowledge.that some amount of frustration is inevitable in certain kinds.of work, we can mitigate its effects.  perhaps we can box it up and.put it away some of the time, instead of letting it flow together.with everyday sadness to produce what seems an alarmingly large.pool.  at the very least, we can avoid being discontented about.being discontented.if you feel exhausted, it's not necessarily because there's something.wrong with you.  maybe you're just running fast.notes[1].gauss was supposedly asked this when he was 10.  instead of.laboriously adding together the numbers like the other students,.he saw that they consisted of 50 pairs that each summed to 101 (100.+ 1, 99 + 2, etc), and that he could just multiply 101 by 50 to get.the answer, 5050.[2].a variant is that intelligence is the ability to solve problems,.and wisdom the judgement to know how to use those solutions.   but.while this is certainly an important relationship between wisdom.and intelligence, it's not the distinction between them.  wisdom.is useful in solving problems too, and intelligence can help in.deciding what to do with the solutions.[3].in judging both intelligence and wisdom we have to factor out.some knowledge. people who know the combination of a safe will be.better at opening it than people who don't, but no one would say.that was a test of intelligence or wisdom.but knowledge overlaps with wisdom and probably also intelligence..a knowledge of human nature is certainly part of wisdom.  so where.do we draw the line?perhaps the solution is to discount knowledge that at some point.has a sharp drop in utility.  for example, understanding french.will help you in a large number of situations, but its value drops.sharply as soon as no one else involved knows french.  whereas the.value of understanding vanity would decline more gradually.the knowledge whose utility drops sharply is the kind that has.little relation to other knowledge.  this includes mere conventions,.like languages and safe combinations, and also what we'd call."random" facts, like movie stars' birthdays, or how to distinguish.1956 from 1957 studebakers.[4].people seeking some single thing called "wisdom" have been.fooled by grammar.  wisdom is just knowing the right thing to do,.and there are a hundred and one different qualities that help in.that.  some, like selflessness, might come from meditating in an.empty room, and others, like a knowledge of human nature, might.come from going to drunken parties.perhaps realizing this will help dispel the cloud of semi-sacred.mystery that surrounds wisdom in so many people's eyes.  the mystery.comes mostly from looking for something that doesn't exist.  and.the reason there have historically been so many different schools.of thought about how to achieve wisdom is that they've focused on.different components of it.when i use the word "wisdom" in this essay, i mean no more than.whatever collection of qualities helps people make the right choice.in a wide variety of situations.[5].even in english, our sense of the word "intelligence" is.surprisingly recent.  predecessors like "understanding" seem to.have had a broader meaning.[6].there is of course some uncertainty about how closely the remarks.attributed to confucius and socrates resemble their actual opinions..i'm using these names as we use the name "homer," to mean the.hypothetical people who said the things attributed to them.[7].analects vii:36, fung trans.some translators use "calm" instead of "happy."  one source of.difficulty here is that present-day english speakers have a different.idea of happiness from many older societies.  every language probably.has a word meaning "how one feels when things are going well," but.different cultures react differently when things go well.  we react.like children, with smiles and laughter.  but in a more reserved.society, or in one where life was tougher, the reaction might be a.quiet contentment.[8].it may have been andrew wiles, but i'm not sure.  if anyone.remembers such an interview, i'd appreciate hearing from you.[9].confucius claimed proudly that he had never invented.anything—that he had simply passed on an accurate account of.ancient traditions.  [analects vii:1] it's hard for us now to.appreciate how important a duty it must have been in preliterate.societies to remember and pass on the group's accumulated knowledge..even in confucius's time it still seems to have been the first duty.of the scholar.[10].the bias toward wisdom in ancient philosophy may be exaggerated.by the fact that, in both greece and china, many of the first.philosophers (including confucius and plato) saw themselves as.teachers of administrators, and so thought disproportionately about.such matters.  the few people who did invent things, like storytellers,.must have seemed an outlying data point that could be ignored.thanks to trevor blackwell, sarah harlin, jessica livingston,.and robert morris for reading drafts of this.polish translationfrench translationrussian translationrussian translation<eot><sot>learning from founders.january 2007
(foreword to jessica livingston's.founders at work.)apparently sprinters reach their highest speed right out of the.blocks, and spend the rest of the race slowing down.  the winners.slow down the least.  it's that way with most startups too.  the.earliest phase is usually the most productive.  that's when they.have the really big ideas.  imagine what apple was like when 100%.of its employees were either steve jobs or steve wozniak.the striking thing about this phase is that it's completely different.from most people's idea of what business is like.  if you looked.in people's heads (or stock photo collections) for images representing."business," you'd get images of people dressed up in suits, groups.sitting around conference tables looking serious, powerpoint.presentations, people producing thick reports for one another to.read.   early stage startups are the exact opposite of this.  and.yet they're probably the most productive part of the whole economy.why the disconnect?  i think there's a general principle at work.here: the less energy people expend on performance, the more they.expend on appearances to compensate.  more often than not the energy.they expend on seeming impressive makes their actual performance.worse.  a few years ago i read an article in which a car magazine.modified the "sports" model of some production car to get the fastest.possible standing quarter mile.  you know how they did it?  they.cut off all the crap the manufacturer had bolted onto the car to.make it look fast.business is broken the same way that car was.  the effort that goes.into looking productive is not merely wasted, but actually makes.organizations less productive.  suits, for example.  suits do not.help people to think better.  i bet most executives at big companies.do their best thinking when they wake up on sunday morning and go.downstairs in their bathrobe to make a cup of coffee.  that's when.you have ideas.  just imagine what a company would be like if people.could think that well at work.  people do in startups, at least.some of the time.  (half the time you're in a panic because your.servers are on fire, but the other half you're thinking as deeply.as most people only get to sitting alone on a sunday morning.)ditto for most of the other differences between startups and what.passes for productivity in big companies.  and yet conventional.ideas of professionalism have such an iron grip on our minds that.even startup founders are affected by them.  in our startup, when.outsiders came to visit we tried hard to seem "professional." we'd.clean up our offices, wear better clothes, try to arrange that a.lot of people were there during conventional office hours.  in fact,.programming didn't get done by well-dressed people at clean desks.during office hours.  it got done by badly dressed people (i was.notorious for programmming wearing just a towel) in offices strewn.with junk at 2 in the morning.  but no visitor would understand.that.  not even investors, who are supposed to be able to recognize.real productivity when they see it.  even we were affected by the.conventional wisdom.  we thought of ourselves as impostors, succeeding.despite being totally unprofessional.  it was as if we'd created a.formula 1 car but felt sheepish because it didn't look like a car.was supposed to look.in the car world, there are at least some people who know that a.high performance car looks like a formula 1 racecar, not a sedan.with giant rims and a fake spoiler bolted to the trunk.  why not.in business?  probably because startups are so small.  the really.dramatic growth happens when a startup only has three or four people,.so only three or four people see that, whereas tens of thousands.see business as it's practiced by boeing or philip morris.this book can help fix that problem, by showing everyone what, till.now, only a handful people got to see: what happens in the first.year of a startup.  this is what real productivity looks like. this.is the formula 1 racecar.  it looks weird, but it goes fast.of course, big companies won't be able to do everything these.startups do.  in big companies there's always going to be more.politics, and less scope for individual decisions.  but seeing what.startups are really like will at least show other organizations.what to aim for.  the time may soon be coming when instead of.startups trying to seem more corporate, corporations will try to.seem more like startups.  that would be a good thing..japanese.translation.founders at workthere can't be more than a couple thousand.people who know first-hand what happens in the first month of a.successful startup.   jessica livingston got them to tell us..so despite the interview format, this is.really a how-to book.  it is probably the single most valuable.book a startup founder could read.<eot><sot>how art can be good.december 2006
i grew up believing that taste is just a matter of personal preference..each person has things they like, but no one's preferences are any.better than anyone else's.  there is no such thing as good taste.like a lot of things i grew up believing, this turns out to be.false, and i'm going to try to explain why.one problem with saying there's no such thing as good taste is that.it also means there's no such thing as good art.  if there were.good art, then people who liked it would have better taste than.people who didn't.  so if you discard taste, you also have to discard.the idea of art being good, and artists being good at making it.it was pulling on that thread that unravelled my childhood faith.in relativism.  when you're trying to make things, taste becomes a.practical matter.  you have to decide what to do next.  would it.make the painting better if i changed that part?  if there's no.such thing as better, it doesn't matter what you do.  in fact, it.doesn't matter if you paint at all.  you could just go out and buy.a ready-made blank canvas.  if there's no such thing as good, that.would be just as great an achievement as the ceiling of the sistine.chapel.  less laborious, certainly, but if you can achieve the same.level of performance with less effort, surely that's more impressive,.not less.yet that doesn't seem quite right, does it?audiencei think the key to this puzzle is to remember that art has an.audience.  art has a purpose, which is to interest its audience..good art (like good anything) is art that achieves its purpose.particularly well.  the meaning of "interest" can vary.  some works.of art are meant to shock, and others to please; some are meant to.jump out at you, and others to sit quietly in the background. but.all art has to work on an audience, and—here's the critical.point—members of the audience share things in common.for example, nearly all humans find human faces engaging.  it seems.to be wired into us.  babies can recognize faces practically from.birth.  in fact, faces seem to have co-evolved with our interest.in them; the face is the body's billboard.  so all other things.being equal, a painting with faces in it will interest people more.than one without..[1]one reason it's easy to believe that taste is merely personal.preference is that, if it isn't, how do you pick out the people.with better taste?  there are billions of people, each with their.own opinion; on what grounds can you prefer one to another?.[2]but if audiences have a lot in common, you're not in a position of.having to choose one out of a random set of individual biases,.because the set isn't random.  all humans find faces.engaging—practically by definition: face recognition is.in our dna.  and so.having a notion of good art, in the sense of art that does its job.well, doesn't require you to pick out a few individuals and label.their opinions as correct.  no matter who you pick, they'll find.faces engaging.of course, space aliens probably wouldn't find human faces engaging..but there might be other things they shared in common with us.  the.most likely source of examples is math.  i expect space aliens would.agree with us most of the time about which of two proofs was better..erdos thought so.  he called a maximally elegant proof one out of.god's book, and presumably god's book is universal..[3]once you start talking about audiences, you don't have to argue.simply that there are or aren't standards of taste.  instead tastes.are a series of concentric rings, like ripples in a pond.  there.are some things that will appeal to you and your friends, others.that will appeal to most people your age, others that will appeal.to most humans, and perhaps others that would appeal to most sentient.beings (whatever that means).the picture is slightly more complicated than that, because in the.middle of the pond there are overlapping sets of ripples.  for.example, there might be things that appealed particularly to men,.or to people from a certain culture.if good art is art that interests its audience, then when you talk.about art being good, you also have to say for what audience.  so.is it meaningless to talk about art simply being good or bad?  no,.because one audience is the set of all possible humans.  i think.that's the audience people are implicitly talking about when they.say a work of art is good: they mean it would engage any human..[4]and that is a meaningful test, because although, like any everyday.concept, "human" is fuzzy around the edges, there are a lot of.things practically all humans have in common.  in addition to our.interest in faces, there's something special about primary colors.for nearly all of us, because it's an artifact of the way our eyes.work.  most humans will also find images of 3d objects engaging,.because that also seems to be built into our visual perception..[5].and beneath that there's edge-finding, which makes images.with definite shapes more engaging than mere blur.humans have a lot more in common than this, of course.  my goal is.not to compile a complete list, just to show that there's some solid.ground here.  people's preferences aren't random.  so an artist.working on a painting and trying to decide whether to change some.part of it doesn't have to think "why bother?  i might as well flip.a coin." instead he can ask "what would make the painting more.interesting to people?"  and the reason you can't equal michelangelo.by going out and buying a blank canvas is that the ceiling of the.sistine chapel is more interesting to people.a lot of philosophers have had a hard time believing it was possible.for there to be objective standards for art. it seemed obvious that.beauty, for example, was something that happened in the head of the observer,.not something that was a property of objects.  it was thus."subjective" rather than "objective."  but in fact if you narrow the.definition of beauty to something that works a certain way on.humans, and you observe how much humans have in common, it turns out.to be a property of objects after all.   you don't.have to choose between something being a property of the.subject or the object if subjects all react similarly..being good art is thus a property of objects as much as, say, being.toxic to humans is: it's good art if it consistently affects humans.in a certain way..errorso could we figure out what the best art is by taking a vote?  after.all, if appealing to humans is the test, we should be able to just.ask them, right?well, not quite.  for products of nature that might work.  i'd be.willing to eat the apple the world's population had voted most.delicious, and i'd probably be willing to visit the beach they voted.most beautiful, but having to look at the painting they voted the.best would be a crapshoot.man-made stuff is different.  for one thing, artists, unlike apple.trees, often deliberately try to trick us.  some tricks are quite.subtle.  for example, any work of art sets expectations by its level.of finish.  you don't expect photographic accuracy in something.that looks like a quick sketch.  so one widely used trick, especially.among illustrators, is to intentionally make a painting or drawing.look like it was done faster than it was.  the average person looks.at it and thinks: how amazingly skillful.  it's like saying something.clever in a conversation as if you'd thought of it on the spur of.the moment, when in fact you'd worked it out the day before.another much less subtle influence is brand.  if you go to see the.mona lisa, you'll probably be disappointed, because it's hidden.behind a thick glass wall and surrounded by a frenzied crowd taking.pictures of themselves in front of it.  at best you can see it the.way you see a friend across the room at a crowded party.  the louvre.might as well replace it with copy; no one would be able to tell..and yet the mona lisa is a small, dark painting.  if you found.people who'd never seen an image of it and sent them to a museum.in which it was hanging among other paintings with a tag labelling.it as a portrait by an unknown fifteenth century artist, most would.walk by without giving it a second look.for the average person, brand dominates all other factors in the.judgement of art.  seeing a painting they recognize from reproductions.is so overwhelming that their response to it as a painting is drowned.out.and then of course there are the tricks people play on themselves..most adults looking at art worry that if they don't like what they're.supposed to, they'll be thought uncultured.  this doesn't just.affect what they claim to like; they actually make themselves like.things they're supposed to.that's why you can't just take a vote.  though appeal to people is.a meaningful test, in practice you can't measure it, just as you.can't find north using a compass with a magnet sitting next to it..there are sources of error so powerful that if you take a vote, all.you're measuring is the error.we can, however, approach our goal from another direction, by using.ourselves as guinea pigs.  you're human.  if you want to know what.the basic human reaction to a piece of art would be, you can at.least approach that by getting rid of the sources of error in your.own judgements.for example, while anyone's reaction to a famous painting will be.warped at first by its fame, there are ways to decrease its effects..one is to come back to the painting over and over.  after a few.days the fame wears off, and you can start to see it as a painting..another is to stand close.  a painting familiar from reproductions.looks more familiar from ten feet away; close in you see details.that get lost in reproductions, and which you're therefore seeing.for the first time.there are two main kinds of error that get in the way of seeing a.work of art: biases you bring from your own circumstances, and.tricks played by the artist.  tricks are straightforward to correct.for. merely being aware of them usually prevents them from working..for example, when i was ten i used to be very impressed by airbrushed.lettering that looked like shiny metal.  but once you study how.it's done, you see that it's a pretty cheesy trick—one of the.sort that relies on pushing a few visual buttons really hard to.temporarily overwhelm the viewer.  it's like trying to convince.someone by shouting at them.the way not to be vulnerable to tricks is to explicitly seek out.and catalog them.  when you notice a whiff of dishonesty coming.from some kind of art, stop and figure out what's going on.  when.someone is obviously pandering to an audience that's easily fooled,.whether it's someone making shiny stuff to impress ten year olds,.or someone making conspicuously avant-garde stuff to impress would-be.intellectuals, learn how they do it.  once you've seen enough.examples of specific types of tricks, you start to become a connoisseur.of trickery in general, just as professional magicians are.what counts as a trick?  roughly, it's something done with contempt.for the audience.  for example, the guys designing ferraris in the.1950s were probably designing cars that they themselves admired..whereas i suspect over at general motors the marketing people are.telling the designers, "most people who buy suvs do it to seem.manly, not to drive off-road. so don't worry about the suspension;.just make that sucker as big and tough-looking as you can.".[6]i think with some effort you can make yourself nearly immune to.tricks.  it's harder to escape the influence of your own circumstances,.but you can at least move in that direction.  the way to do it is.to travel widely, in both time and space.  if you go and see all.the different kinds of things people like in other cultures, and.learn about all the different things people have liked in the past,.you'll probably find it changes what you like.  i doubt you could.ever make yourself into a completely universal person, if only.because you can only travel in one direction in time.  but if you.find a work of art that would appeal equally to your friends, to.people in nepal, and to the ancient greeks, you're probably onto.something.my main point here is not how to have good taste, but that there.can even be such a thing.  and i think i've shown that.  there is.such a thing as good art. it's art that interests its human audience,.and since humans have a lot in common, what interests them is not.random.  since there's such a thing as good art, there's.also such a thing as good taste, which is the ability to recognize.it.if we were talking about the taste of apples, i'd agree that taste.is just personal preference.  some people like certain kinds of.apples and others like other kinds, but how can you say that one.is right and the other wrong?.[7]the thing is, art isn't apples.  art is man-made. it comes with a.lot of cultural baggage, and in addition the people who make it.often try to trick us.  most people's judgement of art is dominated.by these extraneous factors; they're like someone trying to judge.the taste of apples in a dish made of equal parts apples and jalapeno.peppers.  all they're tasting is the peppers.  so it turns out you.can pick out some people and say that they have better taste than.others: they're the ones who actually taste art like apples.or to put it more prosaically, they're the people who (a) are hard.to trick, and (b) don't just like whatever they grew up with.  if.you could find people who'd eliminated all such influences on their.judgement, you'd probably still see variation in what they liked..but because humans have so much in common, you'd also find they.agreed on a lot.  they'd nearly all prefer the ceiling of the sistine.chapel to a blank canvas.making iti wrote this essay because i was tired of hearing "taste is subjective".and wanted to kill it once and for all. anyone who makes things.knows intuitively that's not true.  when you're trying to make art,.the temptation to be lazy is as great as in any other kind of work..of course it matters to do a good job.  and yet you can see how.great a hold "taste is subjective" has even in the art world by how.nervous it makes people to talk about art being good or bad.  those.whose jobs require them to judge art, like curators, mostly resort.to euphemisms like "significant" or "important" or (getting dangerously.close) "realized.".[8]i don't have any illusions that being able to talk about art being.good or bad will cause the people who talk about it to have anything.more useful to say.  indeed, one of the reasons "taste is subjective".found such a receptive audience is that, historically, the things.people have said about good taste have generally been such nonsense.it's not for the people who talk about art that i want to free the.idea of good art, but for those who.make it.  right now, ambitious.kids going to art school run smack into a brick wall.  they arrive.hoping one day to be as good as the famous artists they've seen in.books, and the first thing they learn is that the concept of good.has been retired.  instead everyone is just supposed to explore.their own personal vision..[9]when i was in art school, we were looking one day at a slide of.some great fifteenth century painting, and one of the students asked."why don't artists paint like that now?" the room suddenly got.quiet.  though rarely asked out loud, this question lurks uncomfortably.in the back of every art student's mind.  it was as if someone had.brought up the topic of lung cancer in a meeting within philip.morris."well," the professor replied, "we're interested in different.questions now."  he was a pretty nice guy, but at the time i couldn't.help wishing i could send him back to fifteenth century florence.to explain in person to leonardo & co. how we had moved beyond their.early, limited concept of art.  just imagine that conversation.in fact, one of the reasons artists in fifteenth century florence made.such great things was that they believed you could make great things..[10].they were intensely competitive and were always trying to outdo.one another, like mathematicians or physicists today—maybe like.anyone who has ever done anything really well.the idea that you could make great things was not just a useful.illusion.  they were actually right.  so the most important consequence.of realizing there can be good art is that it frees artists to try.to make it.  to the ambitious kids arriving at art school this year.hoping one day to make great things, i say: don't believe it when.they tell you this is a naive and outdated ambition.  there is such.a thing as good art, and if you try to make it, there are people.who will notice.notes[1].this is not to say, of course, that good paintings must.have faces in them, just that everyone's visual piano has that key.on it.  there are situations in which you want to avoid faces,.precisely because they attract so much attention.  but you can see.how universally faces work by their prevalence in.advertising.[2].the other reason it's easy to believe is that it makes people.feel good.  to a kid, this idea is crack.  in every other respect.they're constantly being told that they have a lot to learn.  but.in this they're perfect.  their opinion carries the same weight as.any adult's.  you should probably question anything you believed.as a kid that you'd want to believe this much.[3].it's conceivable that the elegance of proofs is quantifiable,.in the sense that there may be some formal measure that turns out.to coincide with mathematicians' judgements.  perhaps it would be.worth trying to make a formal language for proofs in which those.considered more elegant consistently came out shorter (perhaps after.being macroexpanded or compiled).[4].maybe it would be possible to make art that would appeal to.space aliens, but i'm not going to get into that because (a) it's.too hard to answer, and (b) i'm satisfied if i can establish that.good art is a meaningful idea for human audiences.[5].if early abstract paintings seem more interesting than later.ones, it may be because the first abstract painters were trained.to paint from life, and their hands thus tended to make the kind.of gestures you use in representing physical things.  in effect.they were saying "scaramara" instead of "uebfgbsb."[6].it's a bit more complicated, because sometimes artists.unconsciously use tricks by imitating art that does.[7].i phrased this in terms of the taste of apples because if.people can see the apples, they can be fooled.  when i was a kid.most apples were a variety called red delicious that had been bred.to look appealing in stores, but which didn't taste very good.[8].to be fair, curators are in a difficult position.  if they're.dealing with recent art, they have to include things in shows that.they think are bad.  that's because the test for what gets included.in shows is basically the market price, and for recent art that is.largely determined by successful businessmen and their wives.  so.it's not always intellectual dishonesty that makes curators and.dealers use neutral-sounding language.[9].what happens in practice is that everyone gets really good at.talking about art.  as the art itself gets more random, the effort.that would have gone into the work goes instead into the intellectual.sounding theory behind it.  "my work represents an exploration of.gender and sexuality in an urban context," etc.  different people.win at that game.[10].there were several other reasons, including that florence was.then the richest and most sophisticated city in the world, and that.they lived in a time before photography had (a) killed portraiture.as a source of income and (b) made brand the dominant factor in the.sale of art.incidentally, i'm not saying that good art = fifteenth century.european art.  i'm not saying we should make what they made, but.that we should work like they worked.  there are fields now in which.many people work with the same energy and honesty that fifteenth.century artists did, but art is not one of them.thanks to trevor blackwell, jessica livingston, and robert morris.for reading drafts of this, and to paul watson for permission to.use the image at the top.japanese translationsimplified chinese translation<eot><sot>the 18 mistakes that kill startups.want to start a startup?  get funded by.y combinator..october 2006
in the q & a period after a recent talk, someone asked what made.startups fail.  after standing there gaping for a few seconds i.realized this was kind of a trick question.  it's equivalent to.asking how to make a startup succeed — if you avoid every cause of.failure, you succeed — and that's too big a question to answer on.the fly.afterwards i realized it could be helpful to look at the problem.from this direction.  if you have a list of all the things you.shouldn't do, you can turn that into a recipe for succeeding just.by negating.  and this form of list may be more useful in practice..it's easier to catch yourself doing something you shouldn't than.always to remember to do something you should..[1]in a sense there's just one mistake that kills startups: not making.something users want.  if you make something users want, you'll.probably be fine, whatever else you do or don't do.  and if you.don't make something users want, then you're dead, whatever else.you do or don't do.  so really this is a list of 18 things that.cause startups not to make something users want.  nearly all failure.funnels through that.1. single founderhave you ever noticed how few successful startups were founded by.just one person?  even companies you think of as having one founder,.like oracle, usually turn out to have more.  it seems unlikely this.is a coincidence.what's wrong with having one founder?  to start with, it's a vote.of no confidence.  it probably means the founder couldn't talk any.of his friends into starting the company with him.  that's pretty.alarming, because his friends are the ones who know him best.but even if the founder's friends were all wrong and the company.is a good bet, he's still at a disadvantage.  starting a startup.is too hard for one person.  even if you could do all the work.yourself, you need colleagues to brainstorm with, to talk you out.of stupid decisions, and to cheer you up when things go wrong.the last one might be the most important.  the low points in a.startup are so low that few could bear them alone.  when you have.multiple founders, esprit de corps binds them together in a way.that seems to violate conservation laws.  each thinks "i can't let.my friends down."  this is one of the most powerful forces in human.nature, and it's missing when there's just one founder.2. bad locationstartups prosper in some places and not others.  silicon valley.dominates, then boston, then seattle, austin, denver, and new york.  after.that there's not much.  even in new york the number of startups per.capita is probably a 20th of what it is in silicon valley.  in towns.like houston and chicago and detroit it's too small to measure.why is the falloff so sharp?  probably for the same reason it is.in other industries.  what's the sixth largest fashion center in.the us?  the sixth largest center for oil, or finance, or publishing?.whatever they are they're probably so far from the top that it would.be misleading even to call them centers.it's an interesting question why cities.become startup hubs, but.the reason startups prosper in them is probably the same as it is.for any industry: that's where the experts are.  standards are.higher; people are more sympathetic to what you're doing; the kind.of people you want to hire want to live there; supporting industries.are there; the people you run into in chance meetings are in the.same business.  who knows exactly how these factors combine to boost.startups in silicon valley and squish them in detroit, but it's.clear they do from the number of startups per capita in each.3. marginal nichemost of the groups that apply to y combinator suffer from a common.problem: choosing a small, obscure niche in the hope of avoiding.competition.if you watch little kids playing sports, you notice that below a.certain age they're afraid of the ball.  when the ball comes near.them their instinct is to avoid it.  i didn't make a lot of catches.as an eight year old outfielder, because whenever a fly ball came.my way, i used to close my eyes and hold my glove up more for.protection than in the hope of catching it.choosing a marginal project is the startup equivalent of my eight.year old strategy for dealing with fly balls.  if you make anything.good, you're going to have competitors, so you may as well face.that.  you can only avoid competition by avoiding good ideas.i think this shrinking from big problems is mostly unconscious..it's not that people think of grand ideas but decide to pursue.smaller ones because they seem safer.  your unconscious won't even.let you think of grand ideas.  so the solution may be to think about.ideas without involving yourself.  what would be a great idea for.someone else to do as a startup?4. derivative ideamany of the applications we get are imitations of some existing.company.  that's one source of ideas, but not the best.  if you.look at the origins of successful startups, few were started in.imitation of some other startup.  where did they get their ideas?.usually from some specific, unsolved problem the founders identified.our startup made software for making online stores.  when we started.it, there wasn't any; the few sites you could order from were.hand-made at great expense by web consultants.  we knew that if.online shopping ever took off, these sites would have to be generated.by software, so we wrote some.  pretty straightforward.it seems like the best problems to solve are ones that affect you.personally.  apple happened because steve wozniak wanted a computer,.google because larry and sergey couldn't find stuff online, hotmail.because sabeer bhatia and jack smith couldn't exchange email at.work.so instead of copying the facebook, with some variation that the.facebook rightly ignored, look for ideas from the other direction..instead of starting from companies and working back to the problems.they solved, look for problems and imagine the company that might.solve them..[2].what do people complain about?  what do you wish there was?5. obstinacyin some fields the way to succeed is to have a vision of what you.want to achieve, and to hold true to it no matter what setbacks you.encounter.  starting startups is not one of them.  the stick-to-your-vision.approach works for something like winning an olympic gold medal,.where the problem is well-defined.  startups are more like science,.where you need to follow the trail wherever it leads.so don't get too attached to your original plan, because it's.probably wrong.  most successful startups end up doing something.different than they originally intended — often so different that.it doesn't even seem like the same company.  you have to be prepared.to see the better idea when it arrives.  and the hardest part of.that is often discarding your old idea.but openness to new ideas has to be tuned just right.  switching.to a new idea every week will be equally fatal.  is there some kind.of external test you can use?  one is to ask whether the ideas.represent some kind of progression.  if in each new idea you're.able to re-use most of what you built for the previous ones, then.you're probably in a process that converges.  whereas if you keep.restarting from scratch, that's a bad sign.fortunately there's someone you can ask for advice: your users.  if.you're thinking about turning in some new direction and your users.seem excited about it, it's probably a good bet.6. hiring bad programmersi forgot to include this in the early versions of the list,.because nearly all the founders i know are programmers.  this is.not a serious problem for them.  they might accidentally hire someone.bad, but it's not going to kill the company.  in a pinch they can.do whatever's required themselves.but when i think about what killed most of the startups in the.e-commerce business back in the 90s, it was bad programmers.  a lot.of those companies were started by business guys who thought the.way startups worked was that you had some clever idea and then hired.programmers to implement it.  that's actually much harder than it.sounds — almost impossibly hard in fact — because business guys.can't tell which are the good programmers.  they don't even get a.shot at the best ones, because no one really good wants a job.implementing the vision of a business guy.in practice what happens is that the business guys choose people.they think are good programmers (it says here on his resume that.he's a microsoft certified developer) but who aren't.  then they're.mystified to find that their startup lumbers along like a world war.ii bomber while their competitors scream past like jet fighters..this kind of startup is in the same position as a big company,.but without the advantages.so how do you pick good programmers if you're not a programmer?  i.don't think there's an answer.  i was about to say you'd have to.find a good programmer to help you hire people.  but if you can't.recognize good programmers, how would you even do that?7. choosing the wrong platforma related problem (since it tends to be done by bad programmers).is choosing the wrong platform.  for example, i think a lot of.startups during the bubble killed themselves by deciding to build.server-based applications on windows.  hotmail was still running.on freebsd for years after microsoft bought it, presumably because.windows couldn't handle the load.  if hotmail's founders.had chosen to use windows, they would have been swamped.paypal only just dodged this bullet.  after they merged with x.com,.the new ceo wanted to switch to windows — even after paypal cofounder.max levchin showed that their software scaled only 1% as well on.windows as unix.  fortunately for paypal they switched ceos instead.platform is a vague word.  it could mean an operating system, or a.programming language, or a "framework" built on top of a programming.language.  it implies something that both supports and limits, like.the foundation of a house.the scary thing about platforms is that there are always some that.seem to outsiders to be fine, responsible choices and yet, like.windows in the 90s, will destroy you if you choose them.  java.applets were probably the most spectacular example.  this was.supposed to be the new way of delivering applications.  presumably.it killed just about 100% of the startups who believed that.how do you pick the right platforms?  the usual way is to hire good.programmers and let them choose.  but there is a trick you could.use if you're not a programmer: visit a top computer science.department and see what they use in research projects.8. slowness in launchingcompanies of all sizes have a hard time getting software done.  it's.intrinsic to the medium; software is always 85% done.  it takes an.effort of will to push through this and get something released to.users..[3]startups make all kinds of excuses for delaying their launch.  most.are equivalent to the ones people use for procrastinating in everyday.life.  there's something that needs to happen first.  maybe.  but.if the software were 100% finished and ready to launch at the push.of a button, would they still be waiting?one reason to launch quickly is that it forces you to actually.finish some quantum of work.  nothing is truly finished till it's.released; you can see that from the rush of work that's always.involved in releasing anything, no matter how finished you thought.it was.  the other reason you need to launch is that it's only by.bouncing your idea off users that you fully understand it.several distinct problems manifest themselves as delays in launching:.working too slowly; not truly understanding the problem; fear of.having to deal with users; fear of being judged; working on too.many different things; excessive perfectionism.  fortunately you.can combat all of them by the simple expedient of forcing yourself.to launch something fairly quickly.9. launching too earlylaunching too slowly has probably killed a hundred times more.startups than launching too fast, but it is possible to launch too.fast.  the danger here is that you ruin your reputation.  you launch.something, the early adopters try it out, and if it's no good they.may never come back.so what's the minimum you need to launch?  we suggest startups think.about what they plan to do, identify a core that's both (a) useful.on its own and (b) something that can be incrementally expanded.into the whole project, and then get that done as soon as possible.this is the same approach i (and many other programmers) use for.writing software.  think about the overall goal, then start by.writing the smallest subset of it that does anything useful.  if.it's a subset, you'll have to write it anyway, so in the worst case.you won't be wasting your time.  but more likely you'll find that.implementing a working subset is both good for morale and helps you.see more clearly what the rest should do.the early adopters you need to impress are fairly tolerant.  they.don't expect a newly launched product to do everything; it just has.to do something.10. having no specific user in mindyou can't build things users like without understanding them.  i.mentioned earlier that the most successful startups seem to have.begun by trying to solve a problem their founders had.  perhaps.there's a rule here: perhaps you create wealth in proportion to how.well you understand the problem you're solving, and the problems.you understand best are your own..[4]that's just a theory.  what's not a theory is the converse: if.you're trying to solve problems you don't understand, you're hosed.and yet a surprising number of founders seem willing to.assume that someone, they're not sure exactly who, will want what.they're building.  do the founders want it?  no, they're not the.target market.  who is?  teenagers.  people interested in local.events (that one is a perennial tarpit).  or "business" users.  what.business users?  gas stations?  movie studios?  defense contractors?you can of course build something for users other than yourself..we did.  but you should realize you're stepping into dangerous.territory.  you're flying on instruments, in effect, so you should.(a) consciously shift gears, instead of assuming you can rely on.your intuitions as you ordinarily would, and (b) look at the.instruments.in this case the instruments are the users.  when designing for.other people you have to be empirical.  you can no longer guess.what will work; you have to find users and measure their responses..so if you're going to make something for teenagers or "business".users or some other group that doesn't include you, you have to be.able to talk some specific ones into using what you're making.  if.you can't, you're on the wrong track.11. raising too little moneymost successful startups take funding at some point.  like having.more than one founder, it seems a good bet statistically.  how much.should you take, though?startup funding is measured in time.  every startup that isn't.profitable (meaning nearly all of them, initially) has a certain.amount of time left before the money runs out and they have to stop..this is sometimes referred to as runway, as in "how much runway do.you have left?"  it's a good metaphor because it reminds you that.when the money runs out you're going to be airborne or dead.too little money means not enough to get airborne.  what airborne.means depends on the situation.  usually you have to advance to a.visibly higher level: if all you have is an idea, a working prototype;.if you have a prototype, launching; if you're launched, significant.growth.  it depends on investors, because until you're profitable.that's who you have to convince.so if you take money from investors, you have to take enough to get.to the next step, whatever that is..[5].fortunately you have some.control over both how much you spend and what the next step is.  we.advise startups to set both low, initially: spend practically.nothing, and make your initial goal simply to build a solid prototype..this gives you maximum flexibility.12. spending too muchit's hard to distinguish spending too much from raising too little..if you run out of money, you could say either was the cause.  the.only way to decide which to call it is by comparison with other.startups.  if you raised five million and ran out of money, you.probably spent too much.burning through too much money is not as common as it used to be..founders seem to have learned that lesson.  plus it keeps getting.cheaper to start a startup.  so as of this writing few startups.spend too much.  none of the ones we've funded have.  (and not just.because we make small investments; many have gone on to raise further.rounds.)the classic way to burn through cash is by hiring a lot of people..this bites you twice: in addition to increasing your costs, it slows.you down—so money that's getting consumed faster has to last.longer.  most hackers understand why that happens; fred brooks.explained it in the mythical man-month.we have three general suggestions about hiring: (a) don't do it if.you can avoid it, (b) pay people with equity rather than salary,.not just to save money, but because you want the kind of people who.are committed enough to prefer that, and (c) only hire people who.are either going to write code or go out and get users, because.those are the only things you need at first.13. raising too much moneyit's obvious how too little money could kill you, but is there such.a thing as having too much?yes and no.  the problem is not so much the money itself as what.comes with it.  as one vc who spoke at y combinator said, "once you.take several million dollars of my money, the clock is ticking.".if vcs fund you, they're not going to let you just put the money.in the bank and keep operating as two guys living on ramen.  they.want that money to go to work..[6].at the very least you'll move.into proper office space and hire more people.  that will change.the atmosphere, and not entirely for the better.  now most of your.people will be employees rather than founders. they won't be as.committed; they'll need to be told what to do; they'll start to.engage in office politics.when you raise a lot of money, your company moves to the suburbs.and has kids.perhaps more dangerously, once you take a lot of money it gets.harder to change direction.  suppose your initial plan was to sell.something to companies.  after taking vc money you hire a sales.force to do that. what happens now if you realize you should be.making this for consumers instead of businesses?  that's a completely.different kind of selling.  what happens, in practice, is that you.don't realize that.  the more people you have, the more you stay.pointed in the same direction.another drawback of large investments is the time they take.  the.time required to raise money grows with the amount..[7].when the.amount rises into the millions, investors get very cautious.  vcs.never quite say yes or no; they just engage you in an apparently.endless conversation.  raising vc scale investments is thus a huge.time sink — more work, probably, than the startup itself.   and you.don't want to be spending all your time talking to investors while.your competitors are spending theirs building things.we advise founders who go on to seek vc money to take the first.reasonable deal they get.  if you get an offer from a reputable.firm at a reasonable valuation with no unusually onerous terms,.just take it and get on with building the company..[8].who cares.if you could get a 30% better deal elsewhere?  economically, startups.are an all-or-nothing game.  bargain-hunting among investors is a.waste of time.14. poor investor managementas a founder, you have to manage your investors.  you shouldn't.ignore them, because they may have useful insights.  but neither.should you let them run the company.  that's supposed to be your.job.  if investors had sufficient vision to run the companies.they fund, why didn't they start them?pissing off investors by ignoring them is probably less dangerous.than caving in to them.  in our startup, we erred on the ignoring.side.  a lot of our energy got drained.away in disputes with investors instead of going into the product..but this was less costly than giving in, which would probably have.destroyed the company.  if the founders know what they're doing,.it's better to have half their attention focused on the product.than the full attention of investors who don't.how hard you have to work on managing investors usually depends on.how much money you've taken.  when you raise vc-scale money, the.investors get a great deal of control.  if they have a board majority,.they're literally your bosses.  in the more common case, where.founders and investors are equally represented and the deciding.vote is cast by neutral outside directors, all the investors have.to do is convince the outside directors and they control the company.if things go well, this shouldn't matter.  so long as you seem to.be advancing rapidly, most investors will leave you alone.  but.things don't always go smoothly in startups.  investors have made.trouble even for the most successful companies.  one of the most.famous examples is apple, whose board made a nearly fatal blunder.in firing steve jobs.  apparently even google got a lot of grief.from their investors early on.15. sacrificing users to (supposed) profitwhen i said at the beginning that if you make something users want,.you'll be fine, you may have noticed i didn't mention anything about.having the right business model.  that's not because making money.is unimportant.  i'm not suggesting that founders start companies.with no chance of making money in the hope of unloading them before.they tank.  the reason we tell founders not to worry about the.business model initially is that making something people want is.so much harder.i don't know why it's so hard to make something people want.  it.seems like it should be straightforward.  but you can tell it must.be hard by how few startups do it.because making something people want is so much harder than making.money from it, you should leave business models for later, just as.you'd leave some trivial but messy feature for version 2.  in version.1, solve the core problem.  and the core problem in a startup is.how to create wealth.(= how much people want something x the number.who want it), not how to convert that wealth into money.the companies that win are the ones that put users first.  google,.for example.  they made search work, then worried about how to make.money from it.  and yet some startup founders still think it's.irresponsible not to focus on the business model from the beginning..they're often encouraged in this by investors whose experience comes.from less malleable industries.it is irresponsible not to think about business models.  it's.just ten times more irresponsible not to think about the product.16. not wanting to get your hands dirtynearly all programmers would rather spend their time writing code.and have someone else handle the messy business of extracting money.from it.  and not just the lazy ones.  larry and sergey apparently.felt this way too at first.  after developing their new search.algorithm, the first thing they tried was to get some other company.to buy it.start a company?  yech.  most hackers would rather just have ideas..but as larry and sergey found, there's not much of a market for.ideas.  no one trusts an idea till you embody it in a product and.use that to grow a user base.  then they'll pay big time.maybe this will change, but i doubt it will change much.  there's.nothing like users for convincing acquirers.  it's not just that.the risk is decreased.  the acquirers are human, and they have a.hard time paying a bunch of young guys millions of dollars just for.being clever.  when the idea is embodied in a company with a lot.of users, they can tell themselves they're buying the users rather.than the cleverness, and this is easier for them to swallow..[9]if you're going to attract users, you'll probably have to get up.from your computer and go find some.  it's unpleasant work, but if.you can make yourself do it you have a much greater chance of.succeeding.  in the first batch of startups we funded, in the summer.of 2005, most of the founders spent all their time building their.applications.  but there was one who was away half the time talking.to executives at cell phone companies, trying to arrange deals..can you imagine anything more painful for a hacker?.[10].but it.paid off, because this startup seems the most successful of that.group by an order of magnitude.if you want to start a startup, you have to face the fact that you.can't just hack.  at least one hacker will have to spend some of.the time doing business stuff.17. fights between foundersfights between founders are surprisingly common.  about 20% of the.startups we've funded have had a founder leave.  it happens so often.that we've reversed our attitude to vesting.  we still don't require.it, but now we advise founders to vest so there will be an orderly.way for people to quit.a founder leaving doesn't necessarily kill a startup, though.  plenty.of successful startups have had that happen..[11].fortunately it's.usually the least committed founder who leaves.  if there are three.founders and one who was lukewarm leaves, big deal.  if you have.two and one leaves, or a guy with critical technical skills leaves,.that's more of a problem.  but even that is survivable.  blogger.got down to one person, and they bounced back.most of the disputes i've seen between founders could have been.avoided if they'd been more careful about who they started a company.with.  most disputes are not due to the situation but the people..which means they're inevitable.  and most founders who've been.burned by such disputes probably had misgivings, which they suppressed,.when they started the company.  don't suppress misgivings.  it's.much easier to fix problems before the company is started than.after.  so don't include your housemate in your startup because.he'd feel left out otherwise.  don't start a company with someone.you dislike because they have some skill you need and you worry you.won't find anyone else.  the people are the most important ingredient.in a startup, so don't compromise there.18. a half-hearted effortthe failed startups you hear most about are the spectacular.flameouts.  those are actually the elite of failures.  the most.common type is not the one that makes spectacular mistakes, but the.one that doesn't do much of anything — the one we never even hear.about, because it was some project a couple guys started on the.side while working on their day jobs, but which never got anywhere.and was gradually abandoned.statistically, if you want to avoid failure, it would seem like the.most important thing is to quit your day job.  most founders of.failed startups don't quit their day jobs, and most founders of.successful ones do.  if startup failure were a disease, the cdc.would be issuing bulletins warning people to avoid day jobs.does that mean you should quit your day job?  not necessarily.  i'm.guessing here, but i'd guess that many of these would-be founders.may not have the kind of determination it takes to start a company,.and that in the back of their minds, they know it.  the reason they.don't invest more time in their startup is that they know it's a.bad investment..[12]i'd also guess there's some band of people who could have succeeded.if they'd taken the leap and done it full-time, but didn't. i have.no idea how wide this band is, but if the winner/borderline/hopeless.progression has the sort of distribution you'd expect, the number.of people who could have made it, if they'd quit their day job, is.probably an order of magnitude larger than the number who do make.it..[13]if that's true, most startups that could succeed fail because the.founders don't devote their whole efforts to them.  that certainly.accords with what i see out in the world.  most startups fail because.they don't make something people want, and the reason most don't.is that they don't try hard enough.in other words, starting startups is just like everything else..the biggest mistake you can make is not to try hard enough.  to the.extent there's a secret to success, it's not to be in denial about.that..notes[1].this is not a complete list of the causes of failure,.just those you can control.  there are also several you can't,.notably ineptitude and bad luck.[2].ironically, one variant of the facebook that might work is a.facebook exclusively for college students.[3].steve jobs tried to motivate people by saying "real artists.ship."  this is a fine sentence, but unfortunately not true.  many.famous works of art are unfinished.  it's true in fields that have.hard deadlines, like architecture and filmmaking, but even there.people tend to be tweaking stuff till it's yanked out of their.hands.[4].there's probably also a second factor: startup founders tend.to be at the leading edge of technology, so problems they face are.probably especially valuable.[5].you should take more than you think you'll need, maybe 50% to.100% more, because software takes longer to write and deals longer.to close than you expect.[6].since people sometimes call us vcs, i should add that we're.not.  vcs invest large amounts of other people's money.  we invest.small amounts of our own, like angel investors.[7].not linearly of course, or it would take forever to raise five.million dollars.  in practice it just feels like it takes forever.though if you include the cases where vcs don't invest, it would.literally take forever in the median case.  and maybe we should,.because the danger of chasing large investments is not just that.they take a long time.  that's the best case.  the real danger.is that you'll expend a lot of time and get nothing.[8].some vcs will offer you an artificially low valuation to see.if you have the balls to ask for more.  it's lame that vcs play.such games, but some do.  if you're dealing with one of those you.should push back on the valuation a bit.[9].suppose youtube's founders had gone to google in 2005 and told.them "google video is badly designed.  give us $10 million and we'll.tell you all the mistakes you made."  they would have gotten.the royal raspberry.  eighteen months later google paid $1.6 billion.for the same lesson, partly because they could then tell themselves.that they were buying a phenomenon, or a community, or some vague.thing like that.i don't mean to be hard on google.  they did better than their.competitors, who may have now missed the video boat entirely.[10].yes, actually: dealing with the government.  but phone companies.are up there.[11].many more than most people realize, because companies don't advertise.this.  did you know apple originally had three founders?[12].i'm not dissing these people.  i don't have the determination.myself.  i've twice come close to starting startups since viaweb,.and both times i bailed because i realized that without the spur.of poverty i just wasn't willing to endure the stress of a startup.[13].so how do you know whether you're in the category of people.who should quit their day job, or the presumably larger one who.shouldn't?  i got to the point of saying that this was hard to judge.for yourself and that you should seek outside advice, before realizing.that that's what we do.  we think of ourselves as investors, but.viewed from the other direction y combinator is a service for.advising people whether or not to quit their day job.  we could be.mistaken, and no doubt often are, but we do at least bet money on.our conclusions.thanks to sam altman, jessica livingston, greg mcadoo, and robert morris.for reading drafts of this..japanese translationspanish translationromanian translationchinese translationarabic translation<eot><sot>a student's guide to startups.want to start a startup?  get funded by.y combinator..october 2006
(this essay is derived from a talk at mit.)till recently graduating seniors had two choices: get a job or go.to grad school.  i think there will increasingly be a third option:.to start your own startup.  but how common will that be?i'm sure the default will always be to get a job, but starting a.startup could well become as popular as grad school.  in the late.90s my professor friends used to complain that they couldn't get.grad students, because all the undergrads were going to work for.startups.  i wouldn't be surprised if that situation returns, but.with one difference: this time they'll be starting their own.instead of going to work for other people's.the most ambitious students will at this point be asking: why wait.till you graduate?  why not start a startup while you're in college?.in fact, why go to college at all?  why not start a startup instead?a year and a half ago i gave a talk.where i said that the average age of the founders of.yahoo, google, and microsoft was 24, and that if grad students could.start startups, why not undergrads?  i'm glad i phrased that as a.question, because now i can pretend it wasn't merely a rhetorical.one.  at the time i couldn't imagine why there should be any lower.limit for the age of startup founders.  graduation is a bureaucratic.change, not a biological one.  and certainly there are undergrads.as competent technically as most grad students.  so why shouldn't.undergrads be able to start startups as well as grad students?i now realize that something does change at graduation: you lose a.huge excuse for failing.  regardless of how complex your life is,.you'll find that everyone else, including your family and friends,.will discard all the low bits and regard you as having a single.occupation at any given time.  if you're in college and have a.summer job writing software, you still read as a student.  whereas.if you graduate and get a job programming, you'll be instantly.regarded by everyone as a programmer.the problem with starting a startup while you're still in school.is that there's a built-in escape hatch.  if you start a startup.in the summer between your junior and senior year, it reads to.everyone as a summer job..so if it goes nowhere, big deal; you return to school in the.fall with all the other seniors; no one regards you as a failure,.because your occupation is student, and you didn't fail at that..whereas if you start a startup just one year later, after you.graduate, as long as you're not accepted to grad school in the fall.the startup reads to everyone as your occupation.  you're.now a startup founder, so you have to do well at that.for nearly everyone, the opinion of one's peers is the most powerful.motivator of all—more powerful even than the nominal goal of most.startup founders, getting rich..[1].about a month into each funding.cycle we have an event called prototype day where each startup.presents to the others what they've got so far.  you might think.they wouldn't need any more motivation.  they're working on their.cool new idea; they have funding for the immediate future; and.they're playing a game with only two outcomes: wealth or failure..you'd think that would be motivation enough.  and yet the prospect.of a demo pushes most of them into a.rush of activity.even if you start a startup explicitly to get rich, the money you.might get seems pretty theoretical most of the time.  what drives.you day to day is not wanting to look bad.you probably can't change that.  even if you could, i don't think.you'd want to; someone who really, truly doesn't care what his peers.think of him is probably a psychopath.  so the best you can do is.consider this force like a wind, and set up your boat accordingly..if you know your peers are going to push you in some direction,.choose good peers, and position yourself so they push you in a.direction you like.graduation changes the prevailing winds, and those make a difference..starting a startup is so hard.that it's a close call even for the ones that succeed.  however.high a startup may be flying now, it probably has a few leaves stuck.in the landing gear from those trees it barely cleared at the end.of the runway.  in such a close game, the smallest increase in the.forces against you can be enough to flick you over the edge into.failure.when we first started y combinator.we encouraged people to start.startups while they were still in college.  that's partly because.y combinator began as a kind of summer program.  we've kept the.program shape—all of us having dinner together once a week turns.out to be a good idea—but we've decided now.that the party line should be to tell people to wait till they.graduate.does that mean you can't start a startup in college?  not at all..sam altman, the co-founder of loopt,.had just finished his sophomore year when we funded them, and loopt.is probably the most promising of all the startups we've funded so.far.  but sam altman is a very unusual guy.  within about three.minutes of meeting him, i remember thinking "ah, so this is what.bill gates must have been like when he was 19."if it can work to start a startup during college, why do.we tell people not to?  for the same reason that the probably.apocryphal violinist, whenever he was asked to judge someone's.playing, would always say they didn't have enough talent to make.it as a pro.  succeeding as a musician takes determination as well.as talent, so this answer works out to be the right advice for.everyone.  the ones who are uncertain believe it and give up, and.the ones who are sufficiently determined think "screw that, i'll.succeed anyway."so our official policy now is only to fund undergrads we can't talk.out of it.  and frankly, if you're not certain, you should wait..it's not as if all the opportunities to start companies are going.to be gone if you don't do it now.  maybe the window will close on.some idea you're working on, but that won't be the last idea you'll.have.  for every idea that times out, new ones become feasible..historically the opportunities to start startups have only increased.with time.in that case, you might ask, why not wait longer?  why not go work.for a while, or go to grad school, and then start a startup?  and.indeed, that might be a good idea.  if i had to pick the sweet spot.for startup founders, based on who we're most excited to see.applications from, i'd say it's probably the mid-twenties.  why?.what advantages does someone in their mid-twenties have over someone.who's 21?  and why isn't it older?  what can 25 year olds do that.32 year olds can't?  those turn out to be questions worth examining.plusif you start a startup soon after college, you'll be a young founder.by present standards, so you should know what the relative advantages.of young founders are.  they're not what you might think.  as a.young founder your strengths are: stamina, poverty, rootlessness,.colleagues, and ignorance.the importance of stamina shouldn't be surprising.  if you've heard.anything about startups you've probably heard about the long hours..as far as i can tell these are universal.  i can't think of any.successful startups whose founders worked 9 to 5.  and it's.particularly necessary for younger founders to work long hours.because they're probably not as efficient as they'll be later.your second advantage, poverty, might not sound like an advantage,.but it is a huge one.  poverty implies you can live cheaply,.and this is critically important for startups.  nearly every startup.that fails, fails by running out of money.  it's a little misleading.to put it this way, because there's usually some other underlying.cause.  but regardless of the source of your problems, a low burn.rate gives you more opportunity to recover from them.  and since.most startups make all kinds of mistakes at first, room to recover.from mistakes is a valuable thing to have.most startups end up doing something different than they planned..the way the successful ones find something that works is by trying.things that don't.  so the worst thing you can do in a startup is.to have a rigid, pre-ordained plan and then start spending a lot.of money to implement it.  better to operate cheaply and give your.ideas time to evolve.recent grads can live on practically nothing, and this gives you.an edge over older founders, because the main cost in software.startups is people.  the guys with kids and mortgages are at a.real disadvantage.  this is one reason i'd bet on the 25 year old.over the 32 year old.  the 32 year old probably is a better programmer,.but probably also has a much more expensive life.  whereas a 25.year old has some work experience (more on that later) but can live.as cheaply as an undergrad.robert morris and i were 29 and 30 respectively when we started.viaweb, but fortunately we still lived like 23 year olds.  we both had.roughly zero assets.  i would have loved to have a mortgage,.since that would have meant i had a house.  but in retrospect.having nothing turned out to be convenient. i wasn't tied down and.i was used to living cheaply.even more important than living cheaply, though, is thinking cheaply..one reason the apple ii was so popular was that it was cheap.  the.computer itself was cheap, and it used cheap, off-the-shelf peripherals.like a cassette tape recorder for data storage and a tv as a monitor..and you know why?  because woz designed this computer for himself,.and he couldn't afford anything more.we benefitted from the same phenomenon.  our prices were.daringly low for the time.  the top level of service was.$300 a month, which was an order of magnitude below the norm.  in.retrospect this was a smart move, but we didn't do it because we.were smart.  $300 a month seemed like a lot of money to us.  like.apple, we created something inexpensive, and therefore popular,.simply because we were poor.a lot of startups have that form: someone comes along and makes.something for a tenth or a hundredth of what it used to cost, and.the existing players can't follow because they don't even want to.think about a world in which that's possible.  traditional long.distance carriers, for example, didn't even want to think about.voip.  (it was coming, all the same.)  being poor helps in this.game, because your own personal bias points in the same direction.technology evolves in.the advantages of rootlessness are similar to those of poverty..when you're young you're more mobile—not just because you don't.have a house or much stuff, but also because you're less likely to.have serious relationships.  this turns out to be important, because.a lot of startups involve someone moving.the founders of kiko, for example, are now en route to the bay area.to start their next startup.  it's a better place for what they.want to do.  and it was easy for them to decide to go, because.neither as far as i know has a serious girlfriend, and everything.they own will fit in one car—or more precisely, will either fit.in one car or is crappy enough that they don't mind leaving it.behind.they at least were in boston.  what if they'd been in nebraska,.like evan williams was at their age?   someone wrote recently that.the drawback of y combinator was that you had to move to participate..it couldn't be any other way. the kind of conversations we have.with founders, we have to have in person.  we fund a dozen startups.at a time, and we can't be in a dozen places at once.  but even if.we could somehow magically save people from moving, we wouldn't..we wouldn't be doing founders a favor by letting them stay in.nebraska.  places that aren't.startup hubs are toxic to startups..you can tell that from indirect evidence.  you can tell how hard.it must be to start a startup in houston or chicago or miami from.the microscopically small number, per capita, that succeed.there.  i don't know exactly what's suppressing all the startups in these.towns—probably a hundred subtle little things—but something.must be..[2]maybe this will change.  maybe the increasing cheapness of startups.will mean they'll be able to survive anywhere, instead of only in.the most hospitable environments.  maybe 37signals is the pattern.for the future.  but maybe not.  historically there have always.been certain towns that were centers for certain industries, and.if you weren't in one of them you were at a disadvantage.  so my.guess is that 37signals is an anomaly.  we're looking at a pattern.much older than "web 2.0" here.perhaps the reason more startups per capita happen in the bay area.than miami is simply that there are more founder-type people there..successful startups are almost never started by one person.  usually.they begin with a conversation in which someone mentions that.something would be a good idea for a company, and his friend says,."yeah, that is a good idea, let's try it."  if you're missing that.second person who says "let's try it," the startup never happens..and that is another area where undergrads have an edge.  they're.surrounded by people willing to say that.  at a good college you're.concentrated together with a lot of other ambitious and technically.minded people—probably more concentrated than you'll ever be.again.  if your nucleus spits out a neutron, there's a good chance.it will hit another nucleus.the number one question people ask us at y combinator is: where can.i find a co-founder?  that's the biggest problem for someone starting.a startup at 30.  when they were in school they knew a lot of good.co-founders, but by 30 they've either lost touch with them or these.people are tied down by jobs they don't want to leave.viaweb was an anomaly in this respect too.  though we were comparatively.old, we weren't tied down by impressive jobs.  i was trying to be.an artist, which is not very constraining, and robert, though 29,.was still in grad school due to a little interruption in his academic.career back in 1988.  so arguably the worm made viaweb possible..otherwise robert would have been a junior professor at that age,.and he wouldn't have had time to work on crazy speculative projects.with me.most of the questions people ask y combinator we have some kind of.answer for, but not the co-founder question.  there is no good.answer.  co-founders really should be people you already know.  and.by far the best place to meet them is school. you have a large.sample of smart people; you get to compare how they all perform on.identical tasks; and everyone's life is pretty fluid.  a lot of.startups grow out of schools for this reason.  google, yahoo, and.microsoft, among others, were all founded by people who met in.school.  (in microsoft's case, it was high school.)many students feel they should wait and get a little more experience.before they start a company.  all other things being equal, they.should.  but all other things are not quite as equal as they look..most students don't realize how rich they are in the scarcest.ingredient in startups, co-founders.  if you wait too long, you may.find that your friends are now involved in some project they don't.want to abandon.  the better they are, the more likely this is to.happen.one way to mitigate this problem might be to actively plan your.startup while you're getting those n years of experience.  sure,.go off and get jobs or go to grad school or whatever, but get.together regularly to scheme, so the idea of starting a startup.stays alive in everyone's brain.  i don't know if this works, but.it can't hurt to try.it would be helpful just to realize what an advantage you have as.students.  some of your classmates are probably going to be successful.startup founders; at a great technical university, that is a near.certainty.  so which ones?  if i were you i'd look for the people.who are not just smart, but incurable.builders..look.for the people who keep starting projects, and finish at least some.of them.  that's what we look for.  above all else, above academic.credentials and even the idea you apply with, we look for people.who build things.the other place co-founders meet is at work.  fewer do than at.school, but there are things you can do to improve the odds.  the.most important, obviously, is to work somewhere that has a lot of.smart, young people.  another is to work for a company located in.a startup hub.  it will be easier to talk a co-worker into quitting.with you in a place where startups are happening all around you.you might also want to look at the employment agreement you sign.when you get hired.  most will say that any ideas you think of while.you're employed by the company belong to them.  in practice it's.hard for anyone to prove what ideas you had when, so the line gets.drawn at code.  if you're going to start a startup, don't write any.of the code while you're still employed.  or at least discard any.code you wrote while still employed and start over.  it's not so.much that your employer will find out and sue you.  it won't come.to that; investors or acquirers or (if you're so lucky) underwriters.will nail you first.  between t = 0 and when you buy that yacht,.someone is going to ask if any of your code legally belongs.to anyone else, and you need to be able to say no..[3]the most overreaching employee agreement i've seen so far is amazon's..in addition to the usual clauses about owning your ideas, you also.can't be a founder of a startup that has another founder who worked.at amazon—even if you didn't know them or even work there at the.same time. i suspect they'd have a hard time enforcing this, but.it's a bad sign they even try.  there are plenty of other places.to work; you may as well choose one that keeps more of your options.open.speaking of cool places to work, there is of course google.  but i.notice something slightly frightening about google: zero startups.come out of there.  in that respect it's a black hole.  people seem.to like working at google too much to leave.  so if you hope to start.a startup one day, the evidence so far suggests you shouldn't work.there.i realize this seems odd advice.  if they make your life so good.that you don't want to leave, why not work there?  because, in.effect, you're probably getting a local maximum.  you need a certain.activation energy to start a startup.  so an employer who's fairly.pleasant to work for can lull you into staying indefinitely, even.if it would be a net win for you to leave..[4]the best place to work, if you want to start a startup, is probably.a startup.  in addition to being the right sort of experience, one.way or another it will be over quickly.  you'll either end up rich,.in which case problem solved, or the startup will get bought, in.which case it it will start to suck to work there and it will be.easy to leave, or most likely, the thing will blow up and you'll.be free again.your final advantage, ignorance, may not sound very useful.  i.deliberately used a controversial word for it; you might equally.call it innocence.  but it seems to be a powerful force.  my y.combinator co-founder jessica livingston is just about to publish.a book of interviews.with startup founders, and i noticed a remarkable pattern in them..one after another said that if they'd known how hard it would be,.they would have been too intimidated to start.ignorance can be useful when it's a counterweight to other forms.of stupidity.  it's useful in starting startups because you're.capable of more than you realize.  starting startups is harder than.you expect, but you're also capable of more than you expect, so.they balance out.most people look at a company like apple and think, how could i.ever make such a thing?  apple is an institution, and i'm just a.person.  but every institution was at one point just a handful of.people in a room deciding to start something.  institutions are.made up, and made up by people no different from you.i'm not saying everyone could start a startup.  i'm sure most people.couldn't; i don't know much about the population at large.  when.you get to groups i know well, like hackers, i can say more precisely..at the top schools, i'd guess as many as a quarter of the cs majors.could make it as startup founders if they wanted.that "if they wanted" is an important qualification—so important.that it's almost cheating to append it like that—because once you.get over a certain threshold of intelligence, which most cs majors.at top schools are past, the deciding factor in whether you succeed.as a founder is how much you want to.  you don't have to be that.smart.  if you're not a genius, just start a startup in some unsexy.field where you'll have less competition, like software for human.resources departments.  i picked that example at random, but i feel.safe in predicting that whatever they have now, it wouldn't take.genius to do better.   there are a lot of people out there working.on boring stuff who are desperately in need of better software, so.however short you think you fall of larry and sergey, you can ratchet.down the coolness of the idea far enough to compensate.as well as preventing you from being intimidated, ignorance can.sometimes help you discover new ideas.  steve wozniak.put this very strongly:.all the best things that i did at apple came from (a) not having.money and (b) not having done it before, ever. every single thing.that we came out with that was really great, i'd never once done.that thing in my life..when you know nothing, you have to reinvent stuff for yourself, and.if you're smart your reinventions may be better than what preceded.them.  this is especially true in fields where the rules change..all our ideas about software were developed in a time when processors.were slow, and memories and disks were tiny.  who knows what obsolete.assumptions are embedded in the conventional wisdom?  and the way.these assumptions are going to get fixed is not by explicitly.deallocating them, but by something more akin to garbage collection..someone ignorant but smart will come along and reinvent everything,.and in the process simply fail to reproduce certain existing ideas.minusso much for the advantages of young founders.  what about the.disadvantages? i'm going to start with what goes wrong and try to.trace it back to the root causes.what goes wrong with young founders is that they build stuff that.looks like class projects.  it was only recently that we figured.this out ourselves.  we noticed a lot of similarities between the.startups that seemed to be falling behind, but we couldn't figure.out how to put it into words.  then finally we realized what it.was: they were building class projects.but what does that really mean?  what's wrong with class projects?.what's the difference between a class project and a real startup?.if we could answer that question it would be useful not just to.would-be startup founders but to students in general, because we'd.be a long way toward explaining the mystery of the so-called real.world.there seem to be two big things missing in class projects: (1) an.iterative definition of a real problem and (2) intensity.the first is probably unavoidable.  class projects will inevitably.solve fake problems.  for one thing, real problems are rare and.valuable.  if a professor wanted to have students solve real problems,.he'd face the same paradox as someone trying to give an example of.whatever "paradigm" might succeed the standard model of physics..there may well be something that does, but if you could think of.an example you'd be entitled to the nobel prize.  similarly, good.new problems are not to be had for the asking.in technology the difficulty is compounded by the fact that real.startups tend to discover the problem they're solving by a process.of evolution.  someone has an idea for something; they build it;.and in doing so (and probably only by doing so) they realize.the problem they should be solving is another one.  even if the.professor let you change your project description on the fly, there.isn't time enough to do that in a college class, or a market to.supply evolutionary pressures.  so class.projects are mostly about implementation, which is the least.of your problems in a startup.it's not just that in a startup you work on the idea as well as.implementation.  the very implementation is different.  its main.purpose is to refine the idea.  often the only value of most of the.stuff you build in the first six months is that it proves your.initial idea was mistaken.  and that's extremely valuable.  if.you're free of a misconception that everyone else still shares,.you're in a powerful position.  but you're not thinking that way.about a class project.  proving your initial plan was mistaken would.just get you a bad grade.  instead of building stuff to throw away,.you tend to want every line of code to go toward that final goal.of showing you did a lot of work.that leads to our second difference: the way class projects are.measured.  professors will tend to judge you by the distance between.the starting point and where you are now.  if someone has achieved.a lot, they should get a good grade.  but customers will judge you.from the other direction: the distance remaining between where you.are now and the features they need.  the market doesn't give a shit.how hard you worked.  users just want your software to do what they.need, and you get a zero otherwise.  that is one of the most.distinctive differences between school and the real world: there.is no reward for putting in a good effort.  in fact, the whole.concept of a "good effort" is a fake idea adults invented to encourage.kids.  it is not found in nature.such lies seem to be helpful to kids.  but unfortunately when you.graduate they don't give you a list of all the lies they told you.during your education.  you have to get them beaten out of you by.contact with the real world.  and this is why so many jobs want.work experience.  i couldn't understand that when i was in college..i knew how to program.  in fact, i could tell i knew how to program.better than most people doing it for a living.  so what was this.mysterious "work experience" and why did i need it?now i know what it is, and part of the confusion is grammatical..describing it as "work experience" implies it's like experience.operating a certain kind of machine, or using a certain programming.language.  but really what work experience refers to is not some.specific expertise, but the elimination of certain habits left over.from childhood.one of the defining qualities of kids is that they flake.  when.you're a kid and you face some hard test, you can cry and say "i.can't" and they won't make you do it.  of course, no one can make.you do anything in the grownup world either.  what they do instead.is fire you.  and when motivated by that.you find you can do a lot more than you realized.  so one of the.things employers expect from someone with "work experience" is the.elimination of the flake reflex—the ability to get things done,.with no excuses.the other thing you get from work experience is an understanding.of what work is, and in particular, how intrinsically horrible it.is.  fundamentally the equation is a brutal one: you have to spend.most of your waking hours doing stuff someone else wants, or starve..there are a few places where the work is so interesting that this.is concealed, because what other people want done happens to coincide.with what you want to work on.  but you only have to imagine what.would happen if they diverged to see the underlying reality.it's not so much that adults lie to kids about this as never explain.it.  they never explain what the deal is with money.  you know from.an early age that you'll have some sort of job, because everyone.asks what you're going to "be" when you grow up. what they.don't tell you is that as a kid you're sitting on the shoulders of.someone else who's treading water, and that starting working means.you get thrown into the water on your own, and have to start treading.water yourself or sink.  "being" something is incidental; the.immediate problem is not to drown.the relationship between work and money tends to dawn on you only.gradually.  at least it did for me.  one's first thought tends to.be simply "this sucks.  i'm in debt. plus i have to get up on monday.and go to work."  gradually you realize that these two things are.as tightly connected as only a market can make them.so the most important advantage 24 year old founders have over 20.year old founders is that they know what they're trying to avoid..to the average undergrad the idea of getting rich translates into.buying ferraris, or being admired.  to someone who has learned from.experience about the relationship between money and work, it.translates to something way more important: it means you get to opt.out of the brutal equation that governs the lives of 99.9% of people..getting rich means you can stop treading water.someone who gets this will work much harder at making a startup.succeed—with the proverbial energy of a drowning man, in fact..but understanding the relationship between money and work also.changes the way you work.  you don't get money just for working,.but for doing things other people want.  someone who's figured that.out will automatically focus more on the user.  and that cures the.other half of the class-project syndrome.  after you've been working.for a while, you yourself tend to measure what you've done the same.way the market does.of course, you don't have to spend years working to learn this.stuff.  if you're sufficiently perceptive you can grasp these things.while you're still in school.  sam altman did.  he must have, because.loopt is no class project.  and as his example suggests, this can.be valuable knowledge.  at a minimum, if you get this stuff, you.already have most of what you gain from the "work experience".employers consider so desirable.  but of course if you really get.it, you can use this information in a way that's more valuable to.you than that.nowso suppose you think you might start a startup at some point, either.when you graduate or a few years after.  what should you do now?.for both jobs and grad school, there are ways to prepare while.you're in college.  if you want to get a job when you graduate, you.should get summer jobs at places you'd like to work.  if you want.to go to grad school, it will help to work on research projects as.an undergrad.  what's the equivalent for startups?  how do you keep.your options maximally open?one thing you can do while you're still in school is to learn how.startups work.  unfortunately that's not easy.  few if any colleges.have classes about startups.  there may be business school classes.on entrepreneurship, as they call it over there, but these are.likely to be a waste of time.  business schools like to talk about.startups, but philosophically they're at the opposite end of the.spectrum.  most books on startups also seem to be useless.  i've.looked at a few and none get it right.  books in most fields are.written by people who know the subject from experience, but for.startups there's a unique problem:  by definition the founders of.successful startups don't need to write books to make money. as a.result most books on the subject end up being written by people who.don't understand it.so i'd be skeptical of classes and books.  the way to learn about.startups is by watching them in action, preferably by working at.one.  how do you do that as an undergrad?  probably by sneaking in.through the back door. just hang around a lot and gradually start.doing things for them.  most startups are (or should be) very.cautious about hiring.  every hire increases the burn rate, and bad.hires early on are hard to recover from.  however, startups usually.have a fairly informal atmosphere, and there's always a lot that.needs to be done.  if you just start doing stuff for them, many.will be too busy to shoo you away.  you can thus gradually work.your way into their confidence, and maybe turn it into an official.job later, or not, whichever you prefer.  this won't work for all.startups, but it would work for most i've known.number two, make the most of the great advantage of school: the.wealth of co-founders.  look at the people around you and ask.yourself which you'd like to work with.  when you apply that test,.you may find you get surprising results.  you may find you'd prefer.the quiet guy you've mostly ignored to someone who seems impressive.but has an attitude to match.  i'm not suggesting you suck up to.people you don't really like because you think one day they'll be.successful.  exactly the opposite, in fact: you should only start.a startup with someone you like, because a startup will put your.friendship through a stress test.  i'm just saying you should think.about who you really admire and hang out with them, instead of.whoever circumstances throw you together with.another thing you can do is learn skills that will be useful to you.in a startup.  these may be different from the skills you'd learn.to get a job.  for example, thinking about getting a job will make.you want to learn programming languages you think employers want,.like java and c++.  whereas if you start a startup, you get to pick.the language, so you have to think about which will actually let.you get the most done.  if you use that test you might end up.learning ruby or python instead..but the most important skill for a startup founder isn't a programming.technique.  it's a knack for understanding users and figuring out.how to give them what they want.  i know i repeat this, but that's.because it's so important.  and it's a skill you can learn, though.perhaps habit might be a better word.  get into the habit of thinking.of software as having users.  what do those users want?  what would.make them say wow?this is particularly valuable for undergrads, because the concept.of users is missing from most college programming classes.  the way.you get taught programming in college would be like teaching writing.as grammar, without mentioning that its purpose is to communicate.something to an audience.  fortunately an audience for software is.now only an http request away.  so in addition to the programming.you do for your classes, why not build some kind of website people.will find useful?  at the very least it will teach you how to write.software with users.  in the best case, it might not just be.preparation for a startup, but the startup itself, like it was for.yahoo and google.notes[1].even the desire to protect one's children seems weaker, judging.from things people have historically done to their kids.rather than risk their community's disapproval.  (i assume we still.do things that will be regarded in the future as barbaric, but.historical abuses are easier for us to see.)[2].worrying that y combinator makes founders move for 3 months.also suggests one underestimates how hard it is to start a startup..you're going to have to put up with much greater inconveniences than.that.[3].most employee agreements.say that any idea relating to the company's present or potential.future business belongs to them.  often as not the second clause could.include any possible startup, and anyone doing due diligence for an.investor or acquirer will assume the worst.to be safe either (a) don't use code written while you.were still employed in your previous job, or (b) get your employer to.renounce, in writing, any claim to the code you write for your side.project.  many will consent to (b) rather than.lose a prized employee.  the downside is that you'll have to tell them.exactly what your project does.[4].geshke and warnock only founded adobe because xerox ignored.them.  if xerox had used what they built, they would probably.never have left parc.thanks to jessica livingston and robert morris for reading.drafts of this, and to jeff arnold and the sipb for inviting me to.speak..comment on this essay.chinese translationarabic translation<eot><sot>how to present to investors.want to start a startup?  get funded by.y combinator..august 2006
, rev. april 2007, september 2010in a few days it will be demo day, when the startups we funded.this summer present to investors.  y combinator funds startups twice.a year, in january and june.  ten weeks later we invite all the.investors we know to hear them present what they've built so far.ten weeks is not much time.  the average startup probably doesn't.have much to show for itself after ten weeks.  but the average.startup fails.  when you look at the ones that went on to do great.things, you find a lot that began with someone pounding out a.prototype in a week or two of nonstop work.  startups are a.counterexample to the rule that haste makes waste.(too much money seems to be as bad for startups as too much time,.so we don't give them much money either.)a week before demo day, we have a dress rehearsal called rehearsal day..at other y combinator events we allow outside guests, but not at.rehearsal day.  no one except the other founders gets to see the rehearsals.the presentations on rehearsal day are often pretty rough.  but this is.to be expected.  we try to pick founders who are good at building.things, not ones who are slick presenters.  some of the founders.are just out of college, or even still in it, and have never spoken.to a group of people they didn't already know.so we concentrate on the basics.  on demo day each startup will.only get ten minutes, so we encourage them to focus on just two.goals: (a) explain what you're doing, and (b) explain why users.will want it.that might sound easy, but it's not when the speakers have no.experience presenting, and they're explaining technical matters to.an audience that's mostly non-technical.this situation is constantly repeated when startups present to.investors: people who are bad at explaining, talking to people who.are bad at understanding.  practically every successful startup,.including stars like google, presented at some point to investors.who didn't get it and turned them down.  was it because the founders.were bad at presenting, or because the investors were obtuse?  it's.probably always some of both.at the most recent rehearsal day, we four y combinator partners found.ourselves saying a lot of the same things we said at the last two..so at dinner afterward we collected all our tips about presenting.to investors.  most startups face similar challenges, so we hope.these will be useful to a wider audience..1. explain what you're doing.investors' main question when judging a very early startup is whether.you've made a compelling product.  before they can judge whether.you've built a good x, they have to understand what kind of x you've.built.  they will get very frustrated if instead of telling them.what you do, you make them sit through some kind of preamble.say what you're doing as soon as possible, preferably in the first.sentence. "we're jeff and bob and we've built an easy to use web-based.database.  now we'll show it to you and explain why people need.this."if you're a great public speaker you may be able to violate this.rule.  last year one founder spent the whole first half of his talk.on a fascinating analysis of the limits of the conventional desktop.metaphor.  he got away with it, but unless you're a captivating.speaker, which most hackers aren't, it's better to play it safe.2. get rapidly to demo.this section is now obsolete for yc founders presenting.at demo day, because demo day presentations are now so short.that they rarely include much if any demo.  they seem to work.just as well without, however, which makes me think i was.wrong to emphasize demos so much before.a demo explains what you've made more effectively than any verbal.description.  the only thing worth talking about first is the problem.you're trying to solve and why it's important.  but don't spend.more than a tenth of your time on that.  then demo.when you demo, don't run through a catalog of features.  instead.start with the problem you're solving, and then show how your product.solves it.  show features in an order driven by some kind of purpose,.rather than the order in which they happen to appear on the screen.if you're demoing something web-based, assume that the network.connection will mysteriously die 30 seconds into your presentation,.and come prepared with a copy of the server software running on.your laptop.3. better a narrow description than a vague one.one reason founders resist describing their projects concisely is.that, at this early stage, there are all kinds of possibilities..the most concise descriptions seem misleadingly narrow.  so for.example a group that has built an easy web-based database might.resist calling their applicaton that, because it could be so much.more.  in fact, it could be anything...the problem is, as you approach (in the calculus sense) a description.of something that could be anything, the content of your description.approaches zero.  if you describe your web-based database as "a.system to allow people to collaboratively leverage the value of.information," it will go in one investor ear and out the other..they'll just discard that sentence as meaningless boilerplate, and.hope, with increasing impatience, that in the next sentence you'll.actually explain what you've made.your primary goal is not to describe everything your system might.one day become, but simply to convince investors you're worth talking.to further.  so approach this like an algorithm that gets the right.answer by successive approximations.  begin with a description.that's gripping but perhaps overly narrow, then flesh it out to the.extent you can.  it's the same principle as incremental development:.start with a simple prototype, then add features, but at every point.have working code.  in this case, "working code" means a working.description in the investor's head.4. don't talk and drive.have one person talk while another uses the computer.  if the same.person does both, they'll inevitably mumble downwards at the computer.screen instead of talking clearly at the audience.as long as you're standing near the audience and looking at them,.politeness (and habit) compel them to pay attention to you.  once.you stop looking at them to fuss with something on your computer,.their minds drift off to the errands they have to run later.5. don't talk about secondary matters at length.if you only have a few minutes, spend them explaining what your.product does and why it's great.  second order issues like competitors.or resumes should be single slides you go through quickly at the.end.  if you have impressive resumes, just flash them on the screen.for 15 seconds and say a few words.  for competitors, list the top.3 and explain in one sentence each what they lack.that you have.  and put this kind of thing at the end, after you've.made it clear what you've built.6. don't get too deeply into business models.it's good to talk about how you plan to make money, but mainly.because it shows you care about that and have thought about it..don't go into detail about your business model, because (a) that's.not what smart investors care about in a brief presentation, and.(b) any business model you have at this point is probably wrong.anyway.recently a vc who came to speak at y combinator talked about a.company he just invested in.  he said their business model was wrong.and would probably change three times before they got it right..the founders were experienced guys who'd done startups before and.who'd just succeeded in getting millions from one of the top vc.firms, and even their business model was crap.  (and yet he invested.anyway, because he expected it to be crap at this stage.)if you're solving an important problem, you're going to sound a lot.smarter talking about that than the business model.  the business.model is just a bunch of guesses, and guesses about stuff that's.probably not your area of expertise.  so don't spend your precious.few minutes talking about crap when you could be talking about.solid, interesting things you know a lot about: the problem you're.solving and what you've built so far.as well as being a bad use of time, if your business model seems.spectacularly wrong, that will push the stuff you want investors.to remember out of their heads.  they'll just remember you as the.company with the boneheaded plan for making money, rather than the.company that solved that important problem.7. talk slowly and clearly at the audience.everyone at rehearsal day could see the difference between the people.who'd been out in the world for a while and had presented to groups,.and those who hadn't.you need to use a completely different voice and manner talking to.a roomful of people than you would in conversation.  everyday life.gives you no practice in this.  if you can't already do it, the.best solution is to treat it as a consciously artificial trick,.like juggling.however, that doesn't mean you should talk like some kind of.announcer.  audiences tune that out.  what you need to do is talk.in this artificial way, and yet make it seem conversational.  (writing.is the same.  good writing is an elaborate effort to seem spontaneous.)if you want to write out your whole presentation beforehand and.memorize it, that's ok.  that has worked for some groups in the.past.  but make sure to write something that sounds like spontaneous,.informal speech, and deliver it that way too.err on the side of speaking slowly.  at rehearsal day, one of the founders.mentioned a rule actors use: if you feel you're speaking too slowly,.you're speaking at about the right speed.8. have one person talk.startups often want to show that all the founders are equal partners..this is a good instinct; investors dislike unbalanced teams.  but.trying to show it by partitioning the presentation is going too.far.  it's distracting.  you can demonstrate your respect.for one another in more subtle ways.  for example, when one of the.groups presented at demo day, the more extroverted of the two.founders did most of the talking, but he described his co-founder.as the best hacker he'd ever met, and you could tell he meant it.pick the one or at most two best speakers, and have them do most.of the talking.exception: if one of the founders is an expert in some specific.technical field, it can be good for them to talk about that for a.minute or so.  this kind of "expert witness" can add credibility,.even if the audience doesn't understand all the details.  if jobs.and wozniak had 10 minutes to present the apple ii, it might be a good plan.to have jobs speak for 9 minutes and have woz speak for a minute.in the middle about some of the technical feats he'd pulled off in.the design.  (though of course if it were actually those two, jobs.would speak for the entire 10 minutes.)9. seem confident.between the brief time available and their lack of technical.background, many in the audience will have a hard time evaluating.what you're doing.  probably the single biggest piece of evidence,.initially, will be your own confidence in it.   you have.to show you're impressed with what you've made.and i mean show, not tell.  never say "we're passionate" or "our.product is great."  people just ignore that—or worse, write you.off as bullshitters.  such messages must be implicit.what you must not do is seem nervous and apologetic.  if you've.truly made something good, you're doing investors a favor by.telling them about it.  if you don't genuinely believe that, perhaps.you ought to change what your company is doing.  if you don't believe.your startup has such promise that you'd be doing them a favor by.letting them invest, why are you investing your time in it?10. don't try to seem more than you are.don't worry if your company is just a few months old and doesn't.have an office yet, or your founders are technical people with no.business experience.  google was like that once, and they turned out.ok.  smart investors can see past such superficial flaws.  they're.not looking for finished, smooth presentations.  they're looking.for raw talent.  all you need to convince them of is that you're.smart and that you're onto something good.  if you try too hard to.conceal your rawness—by trying to seem corporate, or pretending.to know about stuff you don't—you may just conceal your talent.you can afford to be candid about what you haven't figured out yet..don't go out of your way to bring it up (e.g. by having a slide.about what might go wrong), but don't try to pretend either that.you're further along than you are.  if you're a hacker and you're.presenting to experienced investors, they're probably better at.detecting bullshit than you are at producing it.11. don't put too many words on slides.when there are a lot of words on a slide, people just skip reading.it.  so look at your slides and ask of each word "could i cross.this out?"  this includes gratuitous clip art.  try to get your.slides under 20 words if you can.don't read your slides.  they should be something in the background.as you face the audience and talk to them, not something you face.and read to an audience sitting behind you.cluttered sites don't do well in demos, especially when they're.projected onto a screen.  at the very least, crank up the font size.big enough to make all the text legible.  but cluttered sites are.bad anyway, so perhaps you should use this opportunity to make your.design simpler.12. specific numbers are good.if you have any kind of data, however preliminary, tell the audience..numbers stick in people's heads.  if you can claim that the median.visitor generates 12 page views, that's great.but don't give them more than four or five numbers, and only give.them numbers specific to you.  you don't need to tell them the size.of the market you're in.  who cares, really, if it's 500 million.or 5 billion a year?  talking about that is like an actor at the.beginning of his career telling his parents how much tom hanks.makes.  yeah, sure, but first you have to become tom hanks.  the.important part is not whether he makes ten million a year or a.hundred, but how you get there.13. tell stories about users.the biggest fear of investors looking at early stage startups is.that you've built something based on your own a priori theories of.what the world needs, but that no one will actually want.  so it's.good if you can talk about problems specific users have and how you.solve them.greg mcadoo said one thing sequoia looks for is the "proxy for.demand."  what are people doing now, using inadequate tools, that.shows they need what you're making?another sign of user need is when people pay a lot for something..it's easy to convince investors there will be demand for.a cheaper alternative to something popular, if you preserve.the qualities that made it popular.the best stories about user needs are about your own.  a remarkable.number of famous startups grew out of some need the founders had:.apple, microsoft, yahoo, google.  experienced investors know that,.so stories of this type will get their attention.  the next best.thing is to talk about the needs of people you know personally,.like your friends or siblings.14. make a soundbite stick in their heads.professional investors hear a lot of pitches.  after a while they.all blur together.  the first cut is simply to be one of those.they remember.  and the way to ensure that is to create a descriptive.phrase about yourself that sticks in their heads.in hollywood, these phrases seem to be of the form "x meets y.".in the startup world, they're usually "the x of y" or "the x y.".viaweb's was "the microsoft word of ecommerce."find one and launch it clearly (but apparently casually) in your.talk, preferably near the beginning.it's a good exercise for you, too, to sit down and try to figure.out how to describe your startup in one compelling phrase.  if you.can't, your plans may not be sufficiently focused.how to fund a startuphackers' guide to investorsspanish translationjapanese translationrussian translation.image: casey muller: trevor blackwell at rehearsal day, summer 2006<eot><sot>copy what you like.july 2006
.when i was in high school i spent a lot of time imitating bad.writers.  what we studied in english classes was mostly fiction,.so i assumed that was the highest form of writing.  mistake number.one.  the stories that seemed to be most admired were ones in which.people suffered in complicated ways.  anything funny or.gripping was ipso facto suspect, unless it was old enough to be hard to.understand, like shakespeare or chaucer.  mistake number two.  the.ideal medium seemed the short story, which i've since learned had.quite a brief life, roughly coincident with the peak of magazine.publishing.  but since their size made them perfect for use in.high school classes, we read a lot of them, which gave us the.impression the short story was flourishing.  mistake number three..and because they were so short, nothing really had to happen; you.could just show a randomly truncated slice of life, and that was.considered advanced.  mistake number four.  the result was that i.wrote a lot of stories in which nothing happened except that someone.was unhappy in a way that seemed deep.for most of college i was a philosophy major.  i was very impressed.by the papers published in philosophy journals.  they were so.beautifully typeset, and their tone was just captivating—alternately.casual and buffer-overflowingly technical.  a fellow would be walking.along a street and suddenly modality qua modality would spring upon.him.  i didn't ever quite understand these papers, but i figured.i'd get around to that later, when i had time to reread them more.closely.  in the meantime i tried my best to imitate them.  this.was, i can now see, a doomed undertaking, because they weren't.really saying anything.  no philosopher ever refuted another, for.example, because no one said anything definite enough to refute..needless to say, my imitations didn't say anything either.in grad school i was still wasting time imitating the wrong things..there was then a fashionable type of program called an expert system,.at the core of which was something called an inference engine.  i.looked at what these things did and thought "i could write that in.a thousand lines of code."  and yet eminent professors were writing.books about them, and startups were selling them for a year's salary.a copy.  what an opportunity, i thought; these impressive things.seem easy to me; i must be pretty sharp.  wrong.  it was simply a.fad.  the books the professors wrote about expert systems are now.ignored.  they were not even on a path to anything interesting..and the customers paying so much for them were largely the same.government agencies that paid thousands for screwdrivers and toilet.seats.how do you avoid copying the wrong things?  copy only what you.genuinely like.  that would have saved me in all three cases.  i.didn't enjoy the short stories we had to read in english classes;.i didn't learn anything from philosophy papers; i didn't use expert.systems myself.  i believed these things were good because they.were admired.it can be hard to separate the things you like from the things.you're impressed with.  one trick is to ignore presentation.  whenever.i see a painting impressively hung in a museum, i ask myself: how.much would i pay for this if i found it at a garage sale, dirty and.frameless, and with no idea who painted it?  if you walk around a.museum trying this experiment, you'll find you get some truly.startling results.  don't ignore this data point just because it's.an outlier.another way to figure out what you like is to look at what you enjoy.as guilty pleasures.  many things people like, especially if they're.young and ambitious, they like largely for the feeling of virtue.in liking them.  99% of people reading ulysses are thinking."i'm reading ulysses" as they do it. a guilty pleasure is.at least a pure one.  what do you read when you don't feel up to being.virtuous?  what kind of book do you read and feel sad that there's.only half of it left, instead of being impressed that you're half.way through?  that's what you really like.even when you find genuinely good things to copy, there's another.pitfall to be avoided.  be careful to copy what makes them good,.rather than their flaws.  it's easy to be drawn into imitating.flaws, because they're easier to see, and of course easier to copy.too.  for example, most painters in the eighteenth and nineteenth.centuries used brownish colors.  they were imitating the great.painters of the renaissance, whose paintings by that time were brown.with dirt.  those paintings have since been cleaned, revealing.brilliant colors; their imitators are of course still brown.it was painting, incidentally, that cured me of copying the wrong.things.  halfway through grad school i decided i wanted to try being.a painter, and the art world was so manifestly corrupt that it.snapped the leash of credulity.  these people made philosophy.professors seem as scrupulous as mathematicians.  it was so clearly.a choice of doing good work xor being an insider that i was forced.to see the distinction.  it's there to some degree in almost every.field, but i had till then managed to avoid facing it.that was one of the most valuable things i learned from painting:.you have to figure out for yourself what's.good.  you can't trust.authorities. they'll lie to you on this one..comment on this essay.chinese translationromanian translationspanish translationrussian translation<eot><sot>the island test.july 2006
i've discovered a handy test for figuring out what you're addicted.to.  imagine you were going to spend the weekend at a friend's house.on a little island off the coast of maine.  there are no shops on.the island and you won't be able to leave while you're there.  also,.you've never been to this house before, so you can't assume it will.have more than any house might.what, besides clothes and toiletries, do you make a point of packing?.that's what you're addicted to.  for example, if you find yourself.packing a bottle of vodka (just in case), you may want to stop and.think about that.for me the list is four things: books, earplugs, a notebook, and a.pen.there are other things i might bring if i thought of it, like music,.or tea, but i can live without them.  i'm not so addicted to caffeine.that i wouldn't risk the house not having any tea, just for a.weekend.quiet is another matter.  i realize it seems a bit eccentric to.take earplugs on a trip to an island off the coast of maine.  if.anywhere should be quiet, that should.  but what if the person in.the next room snored?  what if there was a kid playing basketball?.(thump, thump, thump... thump.)  why risk it?  earplugs are small.sometimes i can think with noise.  if i already have momentum on.some project, i can work in noisy places.  i can edit an essay or.debug code in an airport.  but airports are not so bad: most of the.noise is whitish.  i couldn't work with the sound of a sitcom coming.through the wall, or a car in the street playing thump-thump music.and of course there's another kind of thinking, when you're starting.something new, that requires complete quiet.   you never.know when this will strike. it's just as well to carry plugs.the notebook and pen are professional equipment, as it were.  though.actually there is something druglike about them, in the sense that.their main purpose is to make me feel better.  i hardly ever go.back and read stuff i write down in notebooks.  it's just that if.i can't write things down, worrying about remembering one idea gets.in the way of having the next.  pen and paper wick ideas.the best notebooks i've found are made by a company called miquelrius..i use their smallest size, which is about 2.5 x 4 in..the secret to writing on such.narrow pages is to break words only when you run out of space, like.a latin inscription.  i use the cheapest plastic bic ballpoints,.partly because their gluey ink doesn't seep through pages, and.partly so i don't worry about losing them.i only started carrying a notebook about three years ago.  before.that i used whatever scraps of paper i could find.  but the problem.with scraps of paper is that they're not ordered.  in a notebook.you can guess what a scribble means by looking at the pages.around it.  in the scrap era i was constantly finding notes i'd.written years before that might say something i needed to remember,.if i could only figure out what.as for books, i know the house would probably have something to.read.  on the average trip i bring four books and only read one of.them, because i find new books to read en route.  really bringing.books is insurance.i realize this dependence on books is not entirely good—that what.i need them for is distraction.  the books i bring on trips are.often quite virtuous, the sort of stuff that might be assigned.reading in a college class.  but i know my motives aren't virtuous..i bring books because if the world gets boring i need to be able.to slip into another distilled by some writer.  it's like eating.jam when you know you should be eating fruit.there is a point where i'll do without books.  i was walking in.some steep mountains once, and decided i'd rather just think, if i.was bored, rather than carry a single unnecessary ounce.  it wasn't.so bad.  i found i could entertain myself by having ideas instead.of reading other people's.  if you stop eating jam, fruit starts.to taste better.so maybe i'll try not bringing books on some future trip.  they're.going to have to pry the plugs out of my cold, dead ears, however.spanish translationjapanese translation<eot><sot>the power of the marginal.want to start a startup?  get funded by.y combinator..june 2006
(this essay is derived from talks at usenix 2006 and.railsconf 2006.)a couple years ago my friend trevor and i went to look at the apple.garage.  as we stood there, he said that as a kid growing up in.saskatchewan he'd been amazed at the dedication jobs and wozniak.must have had to work in a garage."those guys must have been.freezing!"that's one of california's hidden advantages: the mild climate means.there's lots of marginal space.  in cold places that margin gets.trimmed off.  there's a sharper line between outside and inside,.and only projects that are officially sanctioned — by organizations,.or parents, or wives, or at least by oneself — get proper indoor.space.  that raises the activation energy for new ideas.  you can't.just tinker. you have to justify.some of silicon valley's most famous companies began in garages:.hewlett-packard in 1938, apple in 1976, google in 1998.  in apple's.case the garage story is a bit of an urban legend.  woz says all.they did there was assemble some computers, and that he did all the.actual design of the apple i and apple ii in his apartment or his.cube at hp..[1].this was apparently too marginal even for apple's pr.people.by conventional standards, jobs and wozniak were marginal people.too.  obviously they were smart, but they can't have looked good.on paper.  they were at the time a pair of college dropouts with.about three years of school between them, and hippies to boot..their previous business experience consisted of making "blue boxes".to hack into the phone system, a business with the rare distinction.of being both illegal and unprofitable.outsidersnow a startup operating out of a garage in silicon valley would.feel part of an exalted tradition, like the poet in his garret, or.the painter who can't afford to heat his studio and thus has to.wear a beret indoors.  but in 1976 it didn't seem so cool.  the.world hadn't yet realized that starting a computer company was in.the same category as being a writer or a painter. it hadn't been.for long.  only in the preceding couple years had the dramatic fall.in the cost of hardware allowed outsiders to compete.in 1976, everyone looked down on a company operating out of a garage,.including the founders.  one of the first things jobs did when they.got some money was to rent office space.  he wanted apple to seem.like a real company.they already had something few real companies ever have: a fabulously well.designed product.  you'd think they'd have had more confidence..but i've talked to a lot of startup founders, and it's always this.way.  they've built something that's going to change the world, and.they're worried about some nit like not having proper business.cards.that's the paradox i want to explore: great new things often come.from the margins, and yet the people who discover them are looked.down on by everyone, including themselves.it's an old idea that new things come from the margins. i want to.examine its internal structure.  why do great ideas come from the.margins?  what kind of ideas?  and is there anything we can do to.encourage the process?insidersone reason so many good ideas come from the margin is simply that.there's so much of it. there have to be more outsiders than insiders,.if insider means anything.  if the number of outsiders is huge it.will always seem as if a lot of ideas come from them, even if few.do per capita.  but i think there's more going on than this.  there.are real disadvantages to being an insider, and in some kinds of.work they can outweigh the advantages.imagine, for example, what would happen if the government decided.to commission someone to write an official great american novel..first there'd be a huge ideological squabble over who to choose..most of the best writers would be excluded for having offended one.side or the other.  of the remainder, the smart ones would refuse.such a job, leaving only a few with the wrong sort of ambition..the committee would choose one at the height of his career — that.is, someone whose best work was behind him — and hand over the.project with copious free advice about how the book should show in.positive terms the strength and diversity of the american people,.etc, etc.the unfortunate writer would then sit down to work with a huge.weight of expectation on his shoulders.  not wanting to blow such.a public commission, he'd play it safe.  this book had better command.respect, and the way to ensure that would be to make it a tragedy..audiences have to be enticed to laugh, but if you kill people they.feel obliged to take you seriously.  as everyone knows, america.plus tragedy equals the civil war, so that's what it would have to.be about. when finally.completed twelve years later, the book would be a 900-page pastiche.of existing popular novels — roughly gone with the wind plus.roots.  but its bulk and celebrity would make it a bestseller.for a few months, until blown out of the water by a talk-show host's.autobiography.  the book would be made into a movie and thereupon.forgotten, except by the more waspish sort of reviewers, among whom.it would be a byword for bogusness like milli vanilli or battlefield.earth.maybe i got a little carried away with this example.  and yet is.this not at each point the way such a project would play out?  the.government knows better than to get into the novel business, but.in other fields where they have a natural monopoly, like nuclear.waste dumps, aircraft carriers, and regime change, you'd find plenty.of projects isomorphic to this one — and indeed, plenty that were.less successful.this little thought experiment suggests a few of the disadvantages.of insider projects: the selection of the wrong kind of people, the.excessive scope, the inability to take risks, the need to seem.serious, the weight of expectations, the power of vested interests,.the undiscerning audience, and perhaps most dangerous, the tendency.of such work to become a duty rather than a pleasure.testsa world with outsiders and insiders implies some kind of test for.distinguishing between them.  and the trouble with most tests for.selecting elites is that there are two ways to pass them: to be.good at what they try to measure, and to be good at hacking the.test itself.so the first question to ask about a field is how honest its tests.are, because this tells you what it means to be an outsider.  this.tells you how much to trust your instincts when you disagree with.authorities, whether it's worth going through the usual channels.to become one yourself, and perhaps whether you want to work in.this field at all.tests are least hackable when there are consistent standards for.quality, and the people running the test really care about its.integrity.  admissions to phd programs in the hard sciences are.fairly honest, for example.  the professors will get whoever they.admit as their own grad students, so they try hard to choose well,.and they have a fair amount of data to go on.  whereas undergraduate.admissions seem to be much more hackable.one way to tell whether a field has consistent standards is the.overlap between the leading practitioners and the people who teach.the subject in universities.  at one end of the scale you have.fields like math and physics, where nearly all the teachers are.among the best practitioners.  in the middle are medicine, law,.history, architecture, and computer science, where many are.  at.the bottom are business, literature, and the visual arts, where.there's almost no overlap between the teachers and the leading.practitioners.  it's this end that gives rise to phrases like "those.who can't do, teach."incidentally, this scale might be helpful in deciding what to study.in college.  when i was in college the rule seemed to be that you.should study whatever you were most interested in.  but in retrospect.you're probably better off studying something moderately interesting.with someone who's good at it than something very interesting with.someone who isn't.  you often hear people say that you shouldn't.major in business in college, but this is actually an instance of.a more general rule: don't learn things from teachers who are bad.at them.how much you should worry about being an outsider depends on the.quality of the insiders.  if you're an amateur mathematician and.think you've solved a famous open problem, better go back and check..when i was in grad school, a friend in the math department had the.job of replying to people who sent in proofs of fermat's last theorem.and so on, and it did not seem as if he saw it as a valuable source.of tips — more like manning a mental health hotline.  whereas if.the stuff you're writing seems different from what english professors.are interested in, that's not necessarily a problem.anti-testswhere the method of selecting the elite is thoroughly corrupt, most.of the good people will be outsiders.  in art, for example, the.image of the poor, misunderstood genius is not just one possible.image of a great artist: it's the standard image.  i'm not.saying it's correct, incidentally, but it is telling how well this.image has stuck.  you couldn't make a rap like that stick to math.or medicine..[2]if it's corrupt enough, a test becomes an anti-test, filtering out.the people it should select by making them to do things only the.wrong people would do.  popularity in high school.seems to be such a test.  there are plenty of similar ones in the grownup.world.  for example, rising up through the hierarchy of the average.big company demands an attention to politics few thoughtful people.could spare..[3].someone like bill gates can grow a company under.him, but it's hard to imagine him having the patience to climb the.corporate ladder at general electric — or microsoft, actually.it's kind of strange when you think about it, because lord-of-the-flies.schools and bureaucratic companies are both the default.  there are.probably a lot of people who go from one to the other and never.realize the whole world doesn't work this way.i think that's one reason big companies are so often blindsided by.startups..people at big companies don't realize the extent to which.they live in an environment that is one large, ongoing test for the.wrong qualities.if you're an outsider, your best chances for beating insiders are.obviously in fields where corrupt tests select a lame elite.  but.there's a catch: if the tests are corrupt, your victory won't be.recognized, at least in your lifetime.  you may feel you don't need.that, but history suggests it's dangerous to work in fields with.corrupt tests.  you may beat the insiders, and yet not do as good.work, on an absolute scale, as you would in a field that was more.honest.standards in art, for example, were almost as corrupt in the first.half of the eighteenth century as they are today.  this was the era.of those fluffy idealized portraits of countesses with their lapdogs..chardin.decided to skip all that and paint ordinary things as he.saw them.  he's now considered the best of that period — and yet.not the equal of leonardo or bellini or memling, who all had the.additional encouragement of honest standards.it can be worth participating in a corrupt contest, however, if.it's followed by another that isn't corrupt.  for example, it would.be worth competing with a company that can spend more than you on.marketing, as long as you can survive to the next round, when.customers compare your actual products.  similarly, you shouldn't.be discouraged by the comparatively corrupt test of college admissions,.because it's followed immediately by less hackable tests..[4]riskeven in a field with honest tests, there are still advantages to.being an outsider.  the most obvious is that outsiders have nothing.to lose.  they can do risky things, and if they fail, so what?  few.will even notice.the eminent, on the other hand, are weighed down by their eminence..eminence is like a suit: it impresses the wrong people, and it.constrains the wearer.outsiders should realize the advantage they have here.  being able.to take risks is hugely valuable.  everyone values safety too much,.both the obscure and the eminent.  no one wants to look like a fool..but it's very useful to be able to.  if most of your ideas aren't.stupid, you're probably being too conservative.  you're not bracketing.the problem.lord acton said we should judge talent at its best and character.at its worst.  for example, if you write one great book and ten bad.ones, you still count as a great writer — or at least, a better.writer than someone who wrote eleven that were merely good.  whereas.if you're a quiet, law-abiding citizen most of the time but.occasionally cut someone up and bury them in your backyard, you're.a bad guy.almost everyone makes the mistake of treating ideas as if they were.indications of character rather than talent — as if having a stupid.idea made you stupid.   there's a huge weight of tradition advising.us to play it safe.  "even a fool is thought wise if he keeps.silent," says the old testament (proverbs 17:28).well, that may be fine advice for a bunch of goatherds in bronze.age palestine.  there conservatism would be the order of the day..but times have changed.  it might still be reasonable to stick with.the old testament in political questions, but materially the world.now has a lot more state.  tradition is less of a guide, not just.because things change faster, but because the space of possibilities.is so large.   the more complicated the world gets, the more valuable.it is to be willing to look like a fool.delegationand yet the more successful people become, the more heat they get.if they screw up — or even seem to screw up.  in this respect, as.in many others, the eminent are prisoners of their own success.  so.the best way to understand the advantages of being an outsider may.be to look at the disadvantages of being an insider.if you ask eminent people what's wrong with their lives, the first.thing they'll complain about is the lack of time.  a friend of mine.at google is fairly high up in the company and went to work for.them long before they went public.  in other words, he's now rich.enough not to have to work.  i asked him if he could still endure.the annoyances of having a job, now that he didn't have to.  and.he said that there weren't really any annoyances, except — and he.got a wistful look when he said this — that he got so much.email.the eminent feel like everyone wants to take a bite out of them..the problem is so widespread that people pretending to be eminent.do it by pretending to be overstretched.the lives of the eminent become scheduled, and that's not good for.thinking.  one of the great advantages of being an outsider is long,.uninterrupted blocks of time.  that's what i remember about grad.school: apparently endless supplies of time, which i spent worrying.about, but not writing, my dissertation.  obscurity is like health.food — unpleasant, perhaps, but good for you.  whereas fame tends.to be like the alcohol produced by fermentation. when it reaches.a certain concentration, it kills off the yeast that produced it.the eminent generally respond to the shortage of time by turning.into managers.  they don't have time to work.  they're surrounded.by junior people they're supposed to help or supervise.  the obvious.solution is to have the junior people do the work.  some good.stuff happens this way, but there are problems it doesn't work so.well for: the kind where it helps to have everything in one head.for example, it recently emerged that the famous glass artist dale.chihuly hasn't actually blown glass for 27 years.  he has assistants.do the work for him.  but one of the most valuable sources of ideas.in the visual arts is the resistance of the medium.  that's why oil.paintings look so different from watercolors.  in principle you.could make any mark in any medium; in practice the medium steers.you.  and if you're no longer doing the work yourself, you stop.learning from this.so if you want to beat those eminent enough to delegate, one way.to do it is to take advantage of direct contact with the medium..in the arts it's obvious how: blow your own glass, edit your own.films, stage your own plays.  and in the process pay close attention.to accidents and to new ideas you have on the fly.  this technique.can be generalized to any sort of work: if you're an outsider, don't.be ruled by plans.  planning is often just a weakness forced on.those who delegate.is there a general rule for finding problems best solved in one.head?  well, you can manufacture them by taking any project usually.done by multiple people and trying to do it all yourself.  wozniak's.work was a classic example: he did everything himself, hardware and.software, and the result was miraculous.  he claims not one bug was.ever found in the apple ii, in either hardware or software.another way to find good problems to solve in one head is to focus.on the grooves in the chocolate bar — the places where tasks are.divided when they're split between several people.  if you want to.beat delegation, focus on a vertical slice: for example, be both.writer and editor, or both design buildings and construct them.one especially good groove to span is the one between tools and.things made with them.  for example, programming languages and.applications are usually written by different people, and this is.responsible for a lot of the worst flaws in.programming languages..i think every language should be designed simultaneously with a.large application written in it, the way c was with unix.techniques for competing with delegation translate well into business,.because delegation is endemic there.  instead of avoiding it as a.drawback of senility, many companies embrace it as a sign of maturity..in big companies software is often designed, implemented, and sold.by three separate types of people.  in startups one person may have.to do all three.  and though this feels stressful, it's one reason.startups win.  the needs of customers and the means of satisfying.them are all in one head.focusthe very skill of insiders can be a weakness.  once someone is good.at something, they tend to spend all their time doing that.  this.kind of focus is very valuable, actually.  much of the skill of.experts is the ability to ignore false trails.  but focus has.drawbacks: you don't learn from other fields, and when a new approach.arrives, you may be the last to notice.for outsiders this translates into two ways to win.  one is to work.on a variety of things.  since you can't derive as much benefit.(yet) from a narrow focus, you may as well cast a wider net and.derive what benefit you can from similarities between fields.  just.as you can compete with delegation by working on larger vertical.slices, you can compete with specialization by working on larger.horizontal slices — by both writing and illustrating your book, for.example.the second way to compete with focus is to see what focus overlooks..in particular, new things.  so if you're not good at anything yet,.consider working on something so new that no one else is either..it won't have any prestige yet, if no one is good at it, but you'll.have it all to yourself.the potential of a new medium is usually underestimated, precisely.because no one has yet explored its possibilities.  before.durer.tried making engravings, no one took them very seriously.  engraving.was for making little devotional images — basically fifteenth century.baseball cards of saints.  trying to make masterpieces in this.medium must have seemed to durer's contemporaries the way that,.say, making masterpieces in.comics.might seem to the average person.today.in the computer world we get not new mediums but new platforms: the.minicomputer, the microprocessor, the web-based application.  at.first they're always dismissed as being unsuitable for real work..and yet someone always decides to try anyway, and it turns out you.can do more than anyone expected.  so in the future when you hear.people say of a new platform: yeah, it's popular and cheap, but not.ready yet for real work, jump on it.as well as being more comfortable working on established lines,.insiders generally have a vested interest in perpetuating them..the professor who made his reputation by discovering some new idea.is not likely to be the one to discover its replacement.  this is.particularly true with companies, who have not only skill and pride.anchoring them to the status quo, but money as well. the achilles.heel of successful companies is their inability to cannibalize.themselves.  many innovations consist of replacing something with.a cheaper alternative, and companies just don't want to see a path.whose immediate effect is to cut an existing source of revenue.so if you're an outsider you should actively seek out contrarian.projects.  instead of working on things the eminent have made.prestigious, work on things that could steal that prestige.the really juicy new approaches are not the ones insiders reject.as impossible, but those they ignore as undignified.  for example,.after wozniak designed the apple ii he offered it first to his.employer, hp.  they passed.  one of the reasons was that, to save.money, he'd designed the apple ii to use a tv as a monitor, and hp.felt they couldn't produce anything so declasse.lesswozniak used a tv as a monitor for the simple reason that he couldn't.afford a monitor.  outsiders are not merely free but compelled to.make things that are cheap and lightweight.  and both are good bets.for growth: cheap things spread faster, and lightweight things.evolve faster.the eminent, on the other hand, are almost forced to work on a large.scale.  instead of garden sheds they must design huge art museums..one reason they work on big things is that they can: like our.hypothetical novelist, they're flattered by such opportunities..they also know that big projects will by their sheer bulk impress.the audience.  a garden shed, however lovely, would be easy to.ignore; a few might even snicker at it.  you can't snicker at a.giant museum, no matter how much you dislike it.  and finally, there.are all those people the eminent have working for them; they have.to choose projects that can keep them all busy.outsiders are free of all this.  they can work on small things, and.there's something very pleasing about small things.  small things.can be perfect; big ones always have something wrong with them..but there's a.magic.in small things that goes beyond such rational.explanations.  all kids know it.  small things have more personality.plus making them is more fun.  you can do what you want; you don't.have to satisfy committees.  and perhaps most important, small.things can be done fast.  the prospect of seeing the finished project.hangs in the air like the smell of dinner cooking.  if you work.fast, maybe you could have it done tonight.working on small things is also a good way to learn.  the most.important kinds of learning happen one project at a time.  ("next.time, i won't...")  the faster you cycle through projects, the.faster you'll evolve.plain materials have a charm like small scale.  and in addition.there's the challenge of making do with less.  every designer's.ears perk up at the mention of that game, because it's a game you.can't lose.  like the jv playing the varsity, if you even tie, you.win.  so paradoxically there are cases where fewer resources yield.better results, because the designers' pleasure at their own ingenuity.more than compensates..[5]so if you're an outsider, take advantage of your ability to make.small and inexpensive things.  cultivate the pleasure and simplicity.of that kind of work; one day you'll miss it.responsibilitywhen you're old and eminent, what will you miss about being young.and obscure?  what people seem to miss most is the lack of.responsibilities.responsibility is an occupational disease of eminence.  in principle.you could avoid it, just as in principle you could avoid getting.fat as you get old, but few do.  i sometimes suspect that responsibility.is a trap and that the most virtuous route would be to shirk it,.but regardless it's certainly constraining.when you're an outsider you're constrained too, of course.  you're.short of money, for example.  but that constrains you in different.ways.  how does responsibility constrain you?  the worst thing is.that it allows you not to focus on real work.  just as the most.dangerous forms of.procrastination.are those that seem like work,.the danger of responsibilities is not just that they can consume a.whole day, but that they can do it without setting off the.kind of alarms you'd set off if you spent a whole day sitting on a.park bench.a lot of the pain of being an outsider is being aware of one's own.procrastination.  but this is actually a good thing.  you're at.least close enough to work that the smell of it makes you hungry.as an outsider, you're just one step away from getting things done..a huge step, admittedly, and one that most people never seem to.make, but only one step.  if you can summon up the energy to get.started, you can work on projects with an intensity (in both senses).that few insiders can match.  for insiders work turns into a duty,.laden with responsibilities and expectations.  it's never so pure.as it was when they were young.work like a dog being taken for a walk, instead of an ox being yoked.to the plow.  that's what they miss.audiencea lot of outsiders make the mistake of doing the opposite; they.admire the eminent so much that they copy even their flaws.  copying.is a good way to learn, but copy the right things.  when i was in.college i imitated the pompous diction of famous professors.  but.this wasn't what made them eminent — it was more a flaw their.eminence had allowed them to sink into.   imitating it was like.pretending to have gout in order to seem rich.half the distinguishing qualities of the eminent are actually.disadvantages.  imitating these is not only a waste of time, but.will make you seem a fool to your models, who are often well aware.of it.what are the genuine advantages of being an insider?  the greatest.is an audience.  it often seems to outsiders that the great advantage.of insiders is money — that they have the resources to do what they.want.  but so do people who inherit money, and that doesn't seem.to help, not as much as an audience.  it's good for morale to know.people want to see what you're making; it draws work out of you.if i'm right that the defining advantage of insiders is an audience,.then we live in exciting times, because just in the last ten years.the internet has made audiences a lot more liquid.  outsiders don't.have to content themselves anymore with a proxy audience of a few.smart friends.  now, thanks to the internet, they can start to grow.themselves actual audiences.  this is great news for the marginal,.who retain the advantages of outsiders while increasingly being.able to siphon off what had till recently been the prerogative of.the elite.though the web has been around for more than ten years, i think.we're just beginning to see its democratizing effects.  outsiders.are still learning how to steal audiences.  but more importantly,.audiences are still learning how to be stolen — they're still just.beginning to realize how much.deeper bloggers can dig than.journalists, how much.more interesting.a democratic news site can be than a.front page controlled by editors, and how much.funnier.a bunch of kids.with webcams can be than mass-produced sitcoms.the big media companies shouldn't worry that people will post their.copyrighted material on youtube.  they should worry that people.will post their own stuff on youtube, and audiences will watch that.instead.hackingif i had to condense the power of the marginal into one sentence.it would be: just try hacking something together.  that phrase draws.in most threads i've mentioned here.   hacking something together.means deciding what to do as you're doing it, not a subordinate.executing the vision of his boss.  it implies the result won't.be pretty, because it will be made quickly out of inadequate.materials.  it may work, but it won't be the sort of thing the.eminent would want to put their name on.  something hacked together.means something that barely solves the problem, or maybe doesn't.solve the problem at all, but another you discovered en route.  but.that's ok, because the main value of that initial version is not the.thing itself, but what it leads to.  insiders who daren't walk.through the mud in their nice clothes will never make it to the.solid ground on the other side.the word "try" is an especially valuable component.  i disagree.here with yoda, who said there is no try.  there is try.  it implies.there's no punishment if you fail.  you're driven by curiosity.instead of duty.  that means the wind of procrastination will be.in your favor: instead of avoiding this work, this will be what you.do as a way of avoiding other work.  and when you do it, you'll be.in a better mood.  the more the work depends on imagination, the.more that matters, because most people have more ideas when they're.happy.if i could go back and redo my twenties, that would be one thing.i'd do more of: just try hacking things together.  like many people.that age, i spent a lot of time worrying about what i should do..i also spent some time trying to build stuff.  i should have spent.less time worrying and more time building.  if you're not sure what.to do, make something.raymond chandler's advice to thriller writers was "when in doubt,.have a man come through a door with a gun in his hand."  he followed.that advice.  judging from his books, he was often in doubt.  but.though the result is occasionally cheesy, it's never boring.  in.life, as in books, action is underrated.fortunately the number of things you can just hack together keeps.increasing.   people fifty years ago would be astonished that one.could just hack together a movie, for example.  now you can even.hack together distribution.  just make stuff and put it online.inappropriateif you really want to score big, the place to focus is the margin.of the margin: the territories only recently captured from the.insiders.  that's where you'll find the juiciest projects still.undone, either because they seemed too risky, or simply because.there were too few insiders to explore everything.this is why i spend most of my time writing.essays lately.  the.writing of essays used to be limited to those who could get them.published.  in principle you could have written them and just shown.them to your friends; in practice that didn't work..[6].an.essayist needs the resistance of an audience, just as an engraver.needs the resistance of the plate.up till a few years ago, writing essays was the ultimate insider's.game.  domain experts were allowed to publish essays about their.field, but the pool allowed to write on general topics was about.eight people who went to the right parties in new york.  now the.reconquista has overrun this territory, and, not surprisingly, found.it sparsely cultivated.  there are so many essays yet unwritten..they tend to be the naughtier ones; the insiders have pretty much.exhausted the motherhood and apple pie topics.this leads to my final suggestion: a technique for determining when.you're on the right track.  you're on the right track when people.complain that you're unqualified, or that you've done something.inappropriate.  if people are complaining, that means you're doing.something rather than sitting around, which is the first step.  and.if they're driven to such empty forms of complaint, that means.you've probably done something good.if you make something and people complain that it doesn't work,.that's a problem.  but if the worst thing they can hit you with is.your own status as an outsider, that implies that in every other.respect you've succeeded.  pointing out that someone is unqualified.is as desperate as resorting to racial slurs. it's just a legitimate.sounding way of saying: we don't like your type around here.but the best thing of all is when people call what you're doing.inappropriate.  i've been hearing this word all my life and i only.recently realized that it is, in fact, the sound of the homing.beacon.  "inappropriate" is the null criticism.  it's merely the.adjective form of "i don't like it."so that, i think, should be the highest goal for the marginal.  be.inappropriate.  when you hear people saying that, you're golden..and they, incidentally, are busted.notes[1].the facts about apple's early history are from an interview.with steve.wozniak in jessica livingston's.founders at work.[2].as usual the popular image is several decades behind reality..now the misunderstood artist is not a chain-smoking drunk who pours.his soul into big, messy canvases that philistines see and say."that's not art" because it isn't a picture of anything.  the.philistines have now been trained that anything hung on a wall.is art.  now the misunderstood artist is a coffee-drinking vegan.cartoonist whose work they see and say "that's not art" because it.looks like stuff they've seen in the sunday paper.[3].in fact this would do fairly well as a definition of politics:.what determines rank in the absence of objective tests.[4].in high school you're led to believe your whole future depends.on where you go to college, but it turns out only to buy you a couple.years. by your mid-twenties the people worth impressing.already judge you more by what.you've done than where you went to school.[5].managers are presumably wondering, how can i make this miracle.happen?  how can i make the people working for me do more with less?.unfortunately the constraint probably has to be self-imposed.  if.you're expected to do more with less, then you're being.starved, not eating virtuously.[6].without the prospect of publication, the closest most people.come to writing essays is to write in a journal.  i find i never.get as deeply into subjects as i do in proper essays.  as the name.implies, you don't go back and rewrite journal entries over.and over for two weeks.thanks to sam altman, trevor blackwell, paul buchheit, sarah.harlin, jessica livingston, jackie mcdonough, robert morris, olin.shivers, and chris small for reading drafts of this, and to chris.small and chad fowler for inviting me to speak..japanese translationchinese translation<eot><sot>why startups condense in america.may 2006
(this essay is derived from a keynote at xtech.)startups happen in clusters.  there are a lot of them in silicon.valley and boston, and few in chicago or miami.  a country that.wants startups will probably also have to reproduce whatever makes.these clusters form.i've claimed that the recipe is a.great university near a town smart.people like.  if you set up those conditions within the us, startups.will form as inevitably as water droplets condense on a cold piece.of metal.  but when i consider what it would take to reproduce.silicon valley in another country, it's clear the us is a particularly.humid environment.  startups condense more easily here.it is by no means a lost cause to try to create a silicon valley.in another country.  there's room not merely to equal silicon valley,.but to surpass it.  but if you want to do that, you have to.understand the advantages startups get from being in america.1. the us allows immigration.for example, i doubt it would be possible to reproduce silicon.valley in japan, because one of silicon valley's most distinctive.features is immigration.  half the people there speak with accents..and the japanese don't like immigration.  when they think about how.to make a japanese silicon valley, i suspect they unconsciously.frame it as how to make one consisting only of japanese people..this way of framing the question probably guarantees failure.a silicon valley has to be a mecca for the smart and the ambitious,.and you can't have a mecca if you don't let people into it.of course, it's not saying much that america is more open to.immigration than japan.  immigration policy is one area where a.competitor could do better.2. the us is a rich country.i could see india one day producing a rival to silicon valley..obviously they have the right people: you can tell that by the.number of indians in the current silicon valley.  the problem with.india itself is that it's still so poor.in poor countries, things we take for granted are missing.  a friend.of mine visiting india sprained her ankle falling down the steps.in a railway station.  when she turned to see what had happened,.she found the steps were all different heights.  in industrialized.countries we walk down steps our whole lives and never think about.this, because there's an infrastructure that prevents such a staircase.from being built.the us has never been so poor as some countries are now.  there.have never been swarms of beggars in the streets of american cities..so we have no data about what it takes to get from the swarms-of-beggars.stage to the silicon-valley stage.  could you have both at once,.or does there have to be some baseline prosperity before you get a.silicon valley?i suspect there is some speed limit to the evolution.of an economy.  economies are made out of people, and attitudes can.only change a certain amount per generation..[1]3. the us is not (yet) a police state.another country i could see wanting to have a silicon valley is.china.  but i doubt they could do it yet either.  china still seems.to be a police state, and although present rulers seem enlightened.compared to the last, even enlightened despotism can probably only.get you part way toward being a great economic power.it can get you factories for building things designed elsewhere..can it get you the designers, though?  can imagination flourish.where people can't criticize the government?  imagination means.having odd ideas, and it's hard to have odd ideas about technology.without also having odd ideas about politics.  and in any case,.many technical ideas do have political implications.  so if you.squash dissent, the back pressure will propagate into technical.fields..[2]singapore would face a similar problem.  singapore seems very aware.of the importance of encouraging startups.  but while energetic.government intervention may be able to make a port run efficiently,.it can't coax startups into existence.  a state that bans chewing.gum has a long way to go before it could create a san francisco.do you need a san francisco?  might there not be an alternate route.to innovation that goes through obedience and cooperation instead.of individualism?  possibly, but i'd bet not.  most imaginative.people seem to share a certain prickly independence,.whenever and wherever they lived.  you see it in diogenes telling.alexander to get out of his light and two thousand years later in.feynman breaking into safes at los alamos..[3].imaginative people.don't want to follow or lead.  they're most productive when everyone.gets to do what they want.ironically, of all rich countries the us has lost the most civil.liberties recently.  but i'm not too worried yet.  i'm hoping once.the present administration is out, the natural openness of american.culture will reassert itself.4. american universities are better.you need a great university to seed a silicon valley, and so far.there are few outside the us.  i asked a handful of american computer.science professors which universities in europe were most admired,.and they all basically said "cambridge" followed by a long pause.while they tried to think of others.  there don't seem to be many.universities elsewhere that compare with the best in america, at.least in technology.in some countries this is the result of a deliberate policy.  the.german and dutch governments, perhaps from fear of elitism, try to.ensure that all universities are roughly equal in quality.  the.downside is that none are especially good.   the best professors.are spread out, instead of being concentrated as they are in the.us.  this probably makes them less productive, because they don't.have good colleagues to inspire them.  it also means no one university.will be good enough to act as a mecca, attracting talent from abroad.and causing startups to form around it.the case of germany is a strange one.  the germans invented the.modern university, and up till the 1930s theirs were the best in.the world.  now they have none that stand out.  as i was mulling.this over, i found myself thinking: "i can understand why german.universities declined in the 1930s, after they excluded jews.  but.surely they should have bounced back by now."  then i realized:.maybe not.  there are few jews left in germany and most jews i know.would not want to move there.  and if you took any great american.university and removed the jews, you'd have some pretty big gaps..so maybe it would be a lost cause trying to create a silicon valley.in germany, because you couldn't establish the level of university.you'd need as a seed..[4]it's natural for us universities to compete with one another because.so many are private.  to reproduce the quality of american universities.you probably also have to reproduce this.  if universities are.controlled by the central government, log-rolling will pull them.all toward the mean: the new institute of x will end up at the.university in the district of a powerful politician, instead of.where it should be.5. you can fire people in america.i think one of the biggest obstacles to creating startups in europe.is the attitude toward employment.  the famously rigid labor laws.hurt every company, but startups especially, because startups have.the least time to spare for bureaucratic hassles.the difficulty of firing people is a particular problem for startups.because they have no redundancy.  every person has to do their.job well.but the problem is more than just that some startup might have a.problem firing someone they needed to.  across industries and.countries, there's a strong inverse correlation between performance.and job security.  actors and directors are fired at the end of.each film, so they have to deliver every time.  junior professors.are fired by default after a few years unless the university chooses.to grant them tenure.  professional athletes know they'll be pulled.if they play badly for just a couple games.  at the other end of.the scale (at least in the us) are auto workers, new york city.schoolteachers, and civil servants, who are all nearly impossible.to fire.  the trend is so clear that you'd have to be willfully.blind not to see it.performance isn't everything, you say?  well, are auto workers,.schoolteachers, and civil servants happier than actors,.professors, and professional athletes?european public opinion will apparently tolerate people being fired.in industries where they really care about performance.  unfortunately.the only industry they care enough about so far is soccer.  but.that is at least a precedent.6. in america work is less identified with employment.the problem in more traditional places like europe and japan goes.deeper than the employment laws.  more dangerous is the attitude.they reflect: that an employee is a kind of servant, whom the.employer has a duty to protect.  it used to be that way in america.too.  in 1970 you were still supposed to get a job with a big.company, for whom ideally you'd work your whole career.  in return.the company would take care of you: they'd try not to fire you,.cover your medical expenses, and support you in old age.gradually employment has been shedding such paternalistic overtones.and becoming simply an economic exchange.  but the importance of.the new model is not just that it makes it easier for startups to.grow.  more important, i think, is that it it makes it easier for.people to start startups.even in the us most kids graduating from college still think they're.supposed to get jobs, as if you couldn't be productive without being.someone's employee.  but the less you identify work with employment,.the easier it becomes to start a startup.  when you see your career.as a series of different types of work, instead of a lifetime's.service to a single employer, there's less risk in starting your.own company, because you're only replacing one segment instead of.discarding the whole thing.the old ideas are so powerful that even the most successful startup.founders have had to struggle against them.  a year after the.founding of apple, steve wozniak still hadn't quit hp.  he still.planned to work there for life.  and when jobs found someone to.give apple serious venture funding, on the condition that woz quit,.he initially refused, arguing that he'd designed both the apple i.and the apple ii while working at hp, and there was no reason he.couldn't continue.7.  america is not too fussy.if there are any laws regulating businesses, you can assume larval.startups will break most of them, because they don't know what the.laws are and don't have time to find out.for example, many startups in america begin in places where it's.not really legal to run a business.  hewlett-packard, apple, and.google were all run out of garages.  many more startups, including.ours, were initially run out of apartments.  if the laws against.such things were actually enforced, most startups wouldn't happen.that could be a problem in fussier countries.  if hewlett and packard.tried running an electronics company out of their garage in.switzerland, the old lady next door would report them to the municipal.authorities.but the worst problem in other countries is probably the effort.required just to start a company.  a friend of mine started a company.in germany in the early 90s, and was shocked to discover, among.many other regulations, that you needed $20,000 in capital to.incorporate.  that's one reason i'm not typing this on an apfel.laptop.  jobs and wozniak couldn't have come up with that kind of.money in a company financed by selling a vw bus and an hp calculator..we couldn't have started viaweb either..[5]here's a tip for governments that want to encourage startups: read.the stories of existing startups, and then try to simulate what.would have happened in your country.  when you hit something that.would have killed apple, prune it off.startups are marginal..they're started by the poor and the.timid; they begin in marginal space and spare time; they're started.by people who are supposed to be doing something else; and though.businesses, their founders often know nothing about business.  young.startups are fragile.  a society that trims its margins sharply.will kill them all.8. america has a large domestic market.what sustains a startup in the beginning is the prospect of getting.their initial product out.  the successful ones therefore make the.first version as simple as possible.  in the us they usually begin.by making something just for the local market.this works in america, because the local market is 300 million.people.  it wouldn't work so well in sweden.  in a small country,.a startup has a harder task: they have to sell internationally from.the start.the eu was designed partly to simulate a single, large domestic.market.  the problem is that the inhabitants still speak many.different languages.  so a software startup in sweden is still at.a disadvantage relative to one in the us, because they have to deal.with internationalization from the beginning.  it's significant.that the most famous recent startup in europe, skype, worked on a.problem that was intrinsically international.however, for better or worse it looks as if europe will in a few.decades speak a single language.  when i was a student in italy in.1990, few italians spoke english.  now all educated people seem to.be expected to-- and europeans do not like to seem uneducated.  this.is presumably a taboo subject, but if present trends continue,.french and german will eventually go the way of irish and luxembourgish:.they'll be spoken in homes and by eccentric nationalists.9. america has venture funding.startups are easier to start in america because funding is easier.to get.  there are now a few vc firms outside the us, but startup.funding doesn't only come from vc firms.  a more important source,.because it's more personal and comes earlier in the process, is.money from individual angel investors.  google might never have got.to the point where they could raise millions from vc funds if they.hadn't first raised a hundred thousand from andy bechtolsheim.  and.he could help them because he was one of the founders of sun.  this.pattern is repeated constantly in startup hubs.  it's this pattern.that makes them startup hubs.the good news is, all you have to do to get the process rolling is.get those first few startups successfully launched.  if they stick.around after they get rich, startup founders will almost automatically.fund and encourage new startups.the bad news is that the cycle is slow.  it probably takes five.years, on average, before a startup founder can make angel investments..and while governments might be able to set up local vc funds.by supplying the money themselves and recruiting people from existing.firms to run them, only organic growth can produce angel investors.incidentally, america's private universities are one reason there's.so much venture capital.  a lot of the money in vc funds comes from.their endowments.  so another advantage of private universities is.that a good chunk of the country's wealth is managed by enlightened.investors.10. america has dynamic typing for careers.compared to other industrialized countries the us is disorganized.about routing people into careers.  for example, in america people.often don't decide to go to medical school till they've finished.college.  in europe they generally decide in high school.the european approach reflects the old idea that each person has a.single, definite occupation-- which is not far from the idea that.each person has a natural "station" in life.  if this were true,.the most efficient plan would be to discover each person's station.as early as possible, so they could receive the training appropriate.to it.in the us things are more haphazard.  but that turns out to be an.advantage as an economy gets more liquid, just as dynamic typing.turns out to work better than static for ill-defined problems.  this.is particularly true with startups.  "startup founder" is not the.sort of career a high school student would choose.  if you ask at.that age, people will choose conservatively.  they'll choose.well-understood occupations like engineer, or doctor, or lawyer.startups are the kind of thing people don't plan, so you're more.likely to get them in a society where it's ok to make career decisions.on the fly.for example, in theory the purpose of a phd program is to train you.to do research.  but fortunately in the us this is another rule.that isn't very strictly enforced.  in the us most people in cs phd.programs are there simply because they wanted to learn more.  they.haven't decided what they'll do afterward.  so american grad schools.spawn a lot of startups, because students don't feel they're failing.if they don't go into research.those worried about america's "competitiveness" often suggest.spending more on public schools.  but perhaps america's lousy public.schools have a hidden advantage.  because they're so bad, the kids.adopt an attitude of waiting for college.  i did; i knew i was.learning so little that i wasn't even learning what the choices.were, let alone which to choose.  this is demoralizing, but it does.at least make you keep an open mind.certainly if i had to choose between bad high schools and good.universities, like the us, and good high schools and bad universities,.like most other industrialized countries, i'd take the us system..better to make everyone feel like a late bloomer than a failed child.prodigy.attitudesthere's one item conspicuously missing from this list: american.attitudes.  americans are said to be more entrepreneurial, and less.afraid of risk.  but america has no monopoly on this.  indians and.chinese seem plenty entrepreneurial, perhaps more than americans.some say europeans are less energetic, but i don't believe it.  i.think the problem with europe is not that they lack balls, but that.they lack examples.even in the us, the most successful startup founders are often.technical people who are quite timid, initially, about the idea of.starting their own company. few are the sort of backslapping.extroverts one thinks of as typically american.  they can usually.only summon up the activation energy to start a startup when they.meet people who've done it and realize they could too.i think what holds back european hackers is simply that they don't.meet so many people who've done it. you see that variation even.within the us.  stanford students are more entrepreneurial than.yale students, but not because of some difference in their characters;.the yale students just have fewer examples.i admit there seem to be different attitudes toward ambition in.europe and the us.  in the us it's ok to be overtly ambitious, and.in most of europe it's not.  but this can't be an intrinsically.european quality; previous generations of europeans were as ambitious.as americans.  what happened?  my hypothesis is that ambition was.discredited by the terrible things ambitious people did in the first.half of the twentieth century.  now swagger is out. (even now the.image of a very ambitious german presses a button or two, doesn't.it?)it would be surprising if european attitudes weren't affected by.the disasters of the twentieth century.  it takes a while to be.optimistic after events like that.  but ambition is human nature..gradually it will re-emerge..[6]how to do betteri don't mean to suggest by this list that america is the perfect.place for startups.  it's the best place so far, but the sample.size is small, and "so far" is not very long.   on historical time.scales, what we have now is just a.prototype.so let's look at silicon valley the way you'd look at a product.made by a competitor.  what weaknesses could you exploit?  how could.you make something users would like better?  the users in this case.are those critical few thousand people you'd like to move to your.silicon valley.to start with, silicon valley is too far from san francisco.  palo.alto, the original ground zero, is about thirty miles away, and the.present center more like forty.  so people who come to work in.silicon valley face an unpleasant choice: either live in the boring.sprawl of the valley proper, or live in san francisco and endure.an hour commute each way.the best thing would be if the silicon valley were not merely closer.to the interesting city, but interesting itself.  and there is a.lot of room for improvement here.  palo alto is not so bad, but.everything built since is the worst sort of strip development.  you.can measure how demoralizing it is by the number of people who will.sacrifice two hours a day commuting rather than live there.another area in which you could easily surpass silicon valley is.public transportation.  there is a train running the length of it,.and by american standards it's not bad.  which is to say that to.japanese or europeans it would seem like something out of the third.world.the kind of people you want to attract to your silicon valley like.to get around by train, bicycle, and on foot.  so if you want to.beat america, design a town that puts cars last.  it will be a while.before any american city can bring itself to do that.capital gainsthere are also a couple things you could do to beat america at the.national level.  one would be to have lower capital gains taxes..it doesn't seem critical to have the lowest income taxes,.because to take advantage of those, people have to move..[7].but.if capital gains rates vary, you move assets, not yourself, so.changes are reflected at market speeds.  the lower the rate, the.cheaper it is to buy stock in growing companies as opposed to real.estate, or bonds, or stocks bought for the dividends they pay.so if you want to encourage startups you should have a low rate on.capital gains.  politicians are caught between a rock and a hard.place here, however: make the capital gains rate low and be accused.of creating "tax breaks for the rich," or make it high and starve.growing companies of investment capital.   as galbraith said,.politics is a matter of choosing between the unpalatable and the.disastrous.  a lot of governments experimented with the disastrous.in the twentieth century; now the trend seems to be toward the.merely unpalatable.oddly enough, the leaders now are european countries like belgium,.which has a capital gains tax rate of zero.immigrationthe other place you could beat the us would be with smarter immigration.policy.  there are huge gains to be made here.  silicon valleys are.made of people, remember.like a company whose software runs on windows, those in the current.silicon valley are all too aware of the shortcomings of the ins,.but there's little they can do about it.  they're hostages of the.platform.america's immigration system has never been well run, and since.2001 there has been an additional admixture of paranoia.  what.fraction of the smart people who want to come to america can even.get in?  i doubt even half.  which means if you made a competing.technology hub that let in all smart people, you'd immediately get.more than half the world's top talent, for free.us immigration policy is particularly ill-suited to startups, because.it reflects a model of work from the 1970s.  it assumes good technical.people have college degrees, and that work means working for a big.company.if you don't have a college degree you can't get an h1b visa, the.type usually issued to programmers.  but a test that excludes steve.jobs, bill gates, and michael dell can't be a good one.  plus you.can't get a visa for working on your own company, only for working.as an employee of someone else's.  and if you want to apply for.citizenship you daren't work for a startup at all, because if your.sponsor goes out of business, you have to start over.american immigration policy keeps out most smart people, and channels.the rest into unproductive jobs.  it would be easy to do better..imagine if, instead, you treated immigration like recruiting-- if.you made a conscious effort to seek out the smartest people and get.them to come to your country.a country that got immigration right would have a huge advantage..at this point you could become a mecca for smart people simply by.having an immigration system that let them in.a good vectorif you look at the kinds of things you have to do to create an.environment where startups condense, none are great sacrifices..great universities?  livable towns?  civil liberties?  flexible.employment laws?  immigration policies that let in smart people?.tax laws that encourage growth?  it's not as if you have to risk.destroying your country to get a silicon valley; these are all good.things in their own right.and then of course there's the question, can you afford not to?  i.can imagine a future in which the default choice of ambitious young.people is to start their own company.rather than work for someone else's.  i'm not sure that will happen,.but it's where the trend points now.  and if that is the future,.places that don't have startups will be a whole step behind,.like those that missed the industrial revolution.notes[1].on the verge of the industrial revolution, england was already.the richest country in the world.  as far as such things can be.compared, per capita income in england in 1750 was higher than.india's in 1960.deane, phyllis, the first industrial revolution, cambridge.university press, 1965.[2].this has already happened once in china, during the ming.dynasty, when the country turned its back on industrialization at.the command of the court.  one of europe's advantages was that it.had no government powerful enough to do that.[3].of course, feynman and diogenes were from adjacent traditions,.but confucius, though more polite, was no more willing to be told.what to think.[4].for similar reasons it might be a lost cause to try to establish.a silicon valley in israel.  instead of no jews moving there, only.jews would move there, and i don't think you could build a silicon.valley out of just jews any more than you could out of just japanese.(this is not a remark about the qualities of these groups, just their.sizes.  japanese are only about 2% of the world population, and.jews about .2%.)[5].according to the world bank, the initial capital requirement.for german companies is 47.6% of the per capita income.  doh.world bank, doing business in 2006, http://doingbusiness.org[6].for most of the twentieth century, europeans looked back on.the summer of 1914 as if they'd been living in a dream world.  it.seems more accurate (or at least, as accurate) to call the years.after 1914 a nightmare than to call those before a dream.  a lot.of the optimism europeans consider distinctly american is simply.what they too were feeling in 1914.[7].the point where things start to go wrong seems to be about.50%.  above that people get serious about tax avoidance.  the reason.is that the payoff for avoiding tax grows hyperexponentially (x/1-x.for 0 < x < 1).  if your income tax rate is 10%, moving to monaco.would only give you 11% more income, which wouldn't even cover the.extra cost.  if it's 90%, you'd get ten times as much income.  and.at 98%, as it was briefly in britain in the 70s, moving to monaco.would give you fifty times as much income.  it seems quite likely.that european governments of the 70s never drew this curve.thanks to trevor blackwell, matthias felleisen, jessica.livingston, robert morris, neil rimer, hugues steinier, brad.templeton, fred wilson, and stephen wolfram for reading.drafts of this, and to ed dumbill for inviting me to speak.french translationrussian translationjapanese translationarabic translation<eot><sot>how to be silicon valley.may 2006
(this essay is derived from a keynote at xtech.)could you reproduce silicon valley elsewhere, or is there something.unique about it?it wouldn't be surprising if it were hard to reproduce in other.countries, because you couldn't reproduce it in most of the us.either.  what does it take to make a silicon valley even here?what it takes is the right people.  if you could get the right ten.thousand people to move from silicon valley to buffalo, buffalo.would become silicon valley..[1]that's a striking departure from the past.  up till a couple decades.ago, geography was destiny for cities.  all great cities were located.on waterways, because cities made money by trade, and water was the.only economical way to ship.now you could make a great city anywhere, if you could get the right.people to move there.  so the question of how to make a silicon.valley becomes: who are the right people, and how do you get them.to move?two typesi think you only need two kinds of people to create a technology.hub: rich people and nerds.  they're the limiting reagents in the.reaction that produces startups, because they're the only ones.present when startups get started.  everyone else will move.observation bears this out: within the us, towns have become startup.hubs if and only if they have both rich people and nerds.  few.startups happen in miami, for example, because although it's full.of rich people, it has few nerds.  it's not the kind of place nerds.like.whereas pittsburgh has the opposite problem: plenty of nerds, but.no rich people.  the top us computer science departments are said.to be mit, stanford, berkeley, and carnegie-mellon.  mit yielded.route 128.  stanford and berkeley yielded silicon valley.  but.carnegie-mellon?  the record skips at that point.  lower down the.list, the university of washington yielded a high-tech community.in seattle, and the university of texas at austin yielded one in.austin.  but what happened in pittsburgh?  and in ithaca, home of.cornell, which is also high on the list?i grew up in pittsburgh and went to college at cornell, so i can.answer for both.  the weather is terrible,  particularly in winter,.and there's no interesting old city to make up for it, as there is.in boston.  rich people don't want to live in pittsburgh or ithaca..so while there are plenty of hackers who could start startups,.there's no one to invest in them.not bureaucratsdo you really need the rich people?  wouldn't it work to have the.government invest in the nerds?  no, it would not.  startup investors.are a distinct type of rich people.  they tend to have a lot of.experience themselves in the technology business.  this (a) helps.them pick the right startups, and (b) means they can supply advice.and connections as well as money.  and the fact that they have a.personal stake in the outcome makes them really pay attention.bureaucrats by their nature are the exact opposite sort of people.from startup investors. the idea of them making startup investments.is comic.  it would be like mathematicians running vogue-- or.perhaps more accurately, vogue editors running a math journal..[2]though indeed, most things bureaucrats do, they do badly.   we just.don't notice usually, because they only have to compete against.other bureaucrats.  but as startup investors they'd have to compete.against pros with a great deal more experience and motivation.even corporations that have in-house vc groups generally forbid.them to make their own investment decisions.  most are only allowed.to invest in deals where some reputable private vc firm is willing.to act as lead investor.not buildingsif you go to see silicon valley, what you'll see are buildings..but it's the people that make it silicon valley, not the buildings..i read occasionally about attempts to set up "technology.parks" in other places, as if the active ingredient of silicon.valley were the office space.  an article about sophia antipolis.bragged that companies there included cisco, compaq, ibm, ncr, and.nortel.  don't the french realize these aren't startups?building office buildings for technology companies won't get you a.silicon valley, because the key stage in the life of a startup.happens before they want that kind of space.  the key stage is when.they're three guys operating out of an apartment.  wherever the.startup is when it gets funded, it will stay.  the defining quality.of silicon valley is not that intel or apple or google have offices.there, but that they were started there.so if you want to reproduce silicon valley, what you need to reproduce.is those two or three founders sitting around a kitchen table.deciding to start a company.  and to reproduce that you need those.people.universitiesthe exciting thing is, all you need are the people.  if you could.attract a critical mass of nerds and investors to live somewhere,.you could reproduce silicon valley.  and both groups are highly.mobile.  they'll go where life is good.  so what makes a place good.to them?what nerds like is other nerds.  smart people will go wherever other.smart people are.  and in particular, to great universities.  in.theory there could be other ways to attract them, but so far.universities seem to be indispensable.  within the us, there are.no technology hubs without first-rate universities-- or at least,.first-rate computer science departments.so if you want to make a silicon valley, you not only need a.university, but one of the top handful in the world.  it has to be.good enough to act as a magnet, drawing the best people from thousands.of miles away.  and that means it has to stand up to existing magnets.like mit and stanford.this sounds hard.  actually it might be easy.  my professor friends,.when they're deciding where they'd like to work, consider one thing.above all: the quality of the other faculty.  what attracts professors.is good colleagues.  so if you managed to recruit, en masse, a.significant number of the best young researchers, you could create.a first-rate university from nothing overnight.  and you could do.that for surprisingly little.  if you paid 200 people hiring bonuses.of $3 million apiece, you could put together a faculty that would.bear comparison with any in the world.  and from that point the.chain reaction would be self-sustaining.  so whatever it costs to.establish a mediocre university, for an additional half billion or.so you could have a great one..[3]personalityhowever, merely creating a new university would not be enough to.start a silicon valley. the university is just the seed.  it has.to be planted in the right soil, or it won't germinate.  plant it.in the wrong place, and you just create carnegie-mellon.to spawn startups, your university has to be in a town that has.attractions other than the university.  it has to be a place where.investors want to live, and students want to stay after they graduate.the two like much the same things, because most startup investors.are nerds themselves.  so what do nerds look for in a town?  their.tastes aren't completely different from other people's, because a.lot of the towns they like most in the us are also big tourist.destinations: san francisco, boston, seattle.   but their tastes.can't be quite mainstream either, because they dislike other big.tourist destinations, like new york, los angeles, and las vegas.there has been a lot written lately about the "creative class." the.thesis seems to be that as wealth derives increasingly from ideas,.cities will prosper only if they attract those who have them.  that.is certainly true; in fact it was the basis of amsterdam's prosperity.400 years ago.a lot of nerd tastes they share with the creative class in general..for example, they like well-preserved old neighborhoods instead of.cookie-cutter suburbs, and locally-owned shops and restaurants.instead of national chains.  like the rest of the creative class,.they want to live somewhere with personality.what exactly is personality?  i think it's the feeling that each.building is the work of a distinct group of people.  a town with.personality is one that doesn't feel mass-produced.  so if you want.to make a startup hub-- or any town to attract the "creative class"--.you probably have to ban large development projects..when a large tract has been developed by a single organization, you.can always tell..[4]most towns with personality are old, but they don't have to be..old towns have two advantages: they're denser, because they were.laid out before cars, and they're more varied, because they were.built one building at a time.  you could have both now.  just have.building codes that ensure density, and ban large scale developments.a corollary is that you have to keep out the biggest developer of.all: the government.  a government that asks "how can we build a.silicon valley?" has probably ensured failure by the way they framed.the question.  you don't build a silicon valley; you let one grow.nerdsif you want to attract nerds, you need more than a town with.personality.  you need a town with the right personality.  nerds.are a distinct subset of the creative class, with different tastes.from the rest.  you can see this most clearly in new york, which.attracts a lot of creative people, but few nerds..[5]what nerds like is the kind of town where people walk around smiling..this excludes la, where no one walks at all, and also new york,.where people walk, but not smiling. when i was in grad school in.boston, a friend came to visit from new york.  on the subway back.from the airport she asked "why is everyone smiling?"  i looked and.they weren't smiling.  they just looked like they were compared to.the facial expressions she was used to.if you've lived in new york, you know where these facial expressions.come from.  it's the kind of place where your mind may be excited,.but your body knows it's having a bad time.  people don't so much.enjoy living there as endure it for the sake of the excitement..and if you like certain kinds of excitement, new york is incomparable..it's a hub of glamour, a magnet for all the shorter half-life.isotopes of style and fame.nerds don't care about glamour, so to them the appeal of new york.is a mystery.  people who like new york will pay a fortune for a.small, dark, noisy apartment in order to live in a town where the.cool people are really cool.  a nerd looks at that deal and sees.only: pay a fortune for a small, dark, noisy apartment.nerds will pay a premium to live in a town where the smart people.are really smart, but you don't have to pay as much for that.  it's.supply and demand: glamour is popular, so you have to pay a lot for.it.most nerds like quieter pleasures.  they like cafes instead of.clubs; used bookshops instead of fashionable clothing shops; hiking.instead of dancing; sunlight instead of tall buildings.  a nerd's.idea of paradise is berkeley or boulder.youthit's the young nerds who start startups, so it's those specifically.the city has to appeal to.  the startup hubs in the us are all.young-feeling towns.  this doesn't mean they have to be new..cambridge has the oldest town plan in america, but it feels young.because it's full of students.what you can't have, if you want to create a silicon valley, is a.large, existing population of stodgy people.  it would be a waste.of time to try to reverse the fortunes of a declining industrial town.like detroit or philadelphia by trying to encourage startups.  those.places have too much momentum in the wrong direction.  you're better.off starting with a blank slate in the form of a small town.  or.better still, if there's a town young people already flock to, that.one.the bay area was a magnet for the young and optimistic for decades.before it was associated with technology.  it was a place people.went in search of something new.  and so it became synonymous with.california nuttiness.  there's still a lot of that there.  if you.wanted to start a new fad-- a new way to focus one's "energy," for.example, or a new category of things not to eat-- the bay area would.be the place to do it.  but a place that tolerates oddness in the.search for the new is exactly what you want in a startup hub, because.economically that's what startups are.  most good startup ideas.seem a little crazy; if they were obviously good ideas, someone.would have done them already.(how many people are going to want computers in their houses?.what, another search engine?)that's the connection between technology and liberalism.  without.exception the high-tech cities in the us are also the most liberal..but it's not because liberals are smarter that this is so.  it's.because liberal cities tolerate odd ideas, and smart people by.definition have odd ideas.conversely, a town that gets praised for being "solid" or representing."traditional values" may be a fine place to live, but it's never.going to succeed as a startup hub.  the 2004 presidential election,.though a disaster in other respects, conveniently supplied us with.a county-by-county.map of such places..[6]to attract the young, a town must have an intact center.  in most.american cities the center has been abandoned, and the growth, if.any, is in the suburbs.  most american cities have been turned.inside out. but none of the startup hubs has: not san francisco,.or boston, or seattle.  they all have intact centers..[7].my guess is that no city with a dead center could be turned into a.startup hub.  young people don't want to live in the suburbs.within the us, the two cities i think could most easily be turned.into new silicon valleys are boulder and portland.  both have the.kind of effervescent feel that attracts the young.  they're each.only a great university short of becoming a silicon valley, if they.wanted to.timea great university near an attractive town.  is that all it takes?.that was all it took to make the original silicon valley.  silicon.valley traces its origins to william shockley, one of the inventors.of the transistor.  he did the research that won him the nobel prize.at bell labs, but when he started his own company in 1956 he moved.to palo alto to do it.   at the time that was an odd thing to do..why did he?  because he had grown up there and remembered how nice.it was.  now palo alto is suburbia, but then it was a charming.college town-- a charming college town with perfect weather and san.francisco only an hour away.the companies that rule silicon valley now are all descended in.various ways from shockley semiconductor.  shockley was a difficult.man, and in 1957 his top people-- "the traitorous eight"-- left to.start a new company, fairchild semiconductor.  among them were.gordon moore and robert noyce, who went on to found intel, and.eugene kleiner, who founded the vc firm kleiner perkins.  forty-two.years later, kleiner perkins funded google, and the partner responsible.for the deal was john doerr, who came to silicon valley in 1974 to.work for intel.so although a lot of the newest companies in silicon valley don't.make anything out of silicon, there always seem to be multiple links.back to shockley.  there's a lesson here: startups beget startups..people who work for startups start their own.  people who get rich.from startups fund new ones.  i suspect this kind of organic growth.is the only way to produce a startup hub, because it's the only way.to grow the expertise you need.that has two important implications.  the first is that you need.time to grow a silicon valley.  the university you could create in.a couple years, but the startup community around it has to grow.organically.   the cycle time is limited by the time it takes a.company to succeed, which probably averages about five years.the other implication of the organic growth hypothesis is that you.can't be somewhat of a startup hub.  you either have a self-sustaining.chain reaction, or not.  observation confirms this too: cities.either have a startup scene, or they don't.  there is no middle.ground.  chicago has the third largest metropolitan area in america..as a source of startups it's negligible compared to seattle, number 15.the good news is that the initial seed can be quite small.  shockley.semiconductor, though itself not very successful, was big enough..it brought a critical mass of experts in an important new technology.together in a place they liked enough to stay.competingof course, a would-be silicon valley faces an obstacle the original.one didn't: it has to compete with silicon valley.  can that be.done?  probably.one of silicon valley's biggest advantages is its venture capital.firms.  this was not a factor in shockley's day, because vc funds.didn't exist.  in fact, shockley semiconductor and fairchild.semiconductor were not startups at all in our sense.  they were.subsidiaries-- of beckman instruments and fairchild camera and.instrument respectively.  those companies were apparently willing.to establish subsidiaries wherever the experts wanted to live.venture investors, however, prefer to fund startups within an hour's.drive.  for one, they're more likely to notice startups nearby..but when they do notice startups in other towns they prefer them.to move.  they don't want to have to travel to attend board meetings,.and in any case the odds of succeeding are higher in a startup hub.the centralizing effect of venture firms is a double one: they cause.startups to form around them, and those draw in more startups through.acquisitions.  and although the first may be weakening because it's.now so cheap to start some startups, the second seems as strong as ever..three of the most admired."web 2.0" companies were started outside the usual startup hubs,.but two of them have already been reeled in through acquisitions.such centralizing forces make it harder for new silicon valleys to.get started.  but by no means impossible.  ultimately power rests.with the founders.  a startup with the best people will beat one.with funding from famous vcs, and a startup that was sufficiently.successful would never have to move.  so a town that.could exert enough pull over the right people could resist and.perhaps even surpass silicon valley.for all its power, silicon valley has a great weakness: the paradise.shockley found in 1956 is now one giant parking lot.  san francisco.and berkeley are great, but they're forty miles away.  silicon.valley proper is soul-crushing suburban sprawl.  it.has fabulous weather, which makes it significantly better than the.soul-crushing sprawl of most other american cities.  but a competitor.that managed to avoid sprawl would have real leverage.  all a city.needs is to be the kind of place the next traitorous eight look at.and say "i want to stay here," and that would be enough to get the.chain reaction started.notes[1].it's interesting to consider how low this number could be.made.  i suspect five hundred would be enough, even if they could.bring no assets with them.  probably just thirty, if i could pick them,.would be enough to turn buffalo into a significant startup hub.[2].bureaucrats manage to allocate research funding moderately.well, but only because (like an in-house vc fund) they outsource.most of the work of selection.  a professor at a famous university.who is highly regarded by his peers will get funding, pretty much.regardless of the proposal.  that wouldn't work for startups, whose.founders aren't sponsored by organizations, and are often unknowns.[3].you'd have to do it all at once, or at least a whole department.at a time, because people would be more likely to come if they.knew their friends were.  and you should probably start from scratch,.rather than trying to upgrade an existing university, or much energy.would be lost in friction.[4].hypothesis: any plan in which multiple independent buildings.are gutted or demolished to be "redeveloped" as a single project.is a net loss of personality for the city, with the exception of.the conversion of buildings not previously public, like warehouses.[5].a few startups get started in new york, but less.than a tenth as many per capita as in boston, and mostly.in less nerdy fields like finance and media.[6].some blue counties are false positives (reflecting the.remaining power of democractic party machines), but there are no.false negatives.  you can safely write off all the red counties.[7].some "urban renewal" experts took a shot at destroying boston's.in the 1960s, leaving the area around city hall a bleak wasteland,.but most neighborhoods successfully resisted them.thanks to chris anderson, trevor blackwell, marc hedlund,.jessica livingston, robert morris, greg mcadoo, fred wilson,.and stephen wolfram for.reading drafts of this, and to ed dumbill for inviting me to speak.(the second part of this talk became why startups.condense in america.)vc deals by regionstartup jobs by regionthey would be godsinterview: richard hodgsonsanta clara valley, 1971scattered abroadrussian translationspanish translationjapanese translationportuguese translationarabic translation.if you liked this, you may also like.hackers & painters.<eot><sot>the hardest lessons for startups to learn.april 2006
(this essay is derived from a talk at the 2006.startup school.)the startups we've funded so far are pretty quick, but they seem.quicker to learn some lessons than others.  i think it's because.some things about startups are kind of counterintuitive.we've now.invested.in enough companies that i've learned a trick.for determining which points are the counterintuitive ones:.they're the ones i have to keep repeating.so i'm going to number these points, and maybe with future startups.i'll be able to pull off a form of huffman coding. i'll make them.all read this, and then instead of nagging them in detail, i'll.just be able to say: number four!.1. release early.the thing i probably repeat most is this recipe for a startup: get.a version 1 out fast, then improve it based on users' reactions.by "release early" i don't mean you should release something full.of bugs, but that you should release something minimal.  users hate.bugs, but they don't seem to mind a minimal version 1, if there's.more coming soon.there are several reasons it pays to get version 1 done fast.  one.is that this is simply the right way to write software, whether for.a startup or not.  i've been repeating that since 1993, and i haven't seen much since to.contradict it.  i've seen a lot of startups die because they were.too slow to release stuff, and none because they were too quick..[1]one of the things that will surprise you if you build something.popular is that you won't know your users.  reddit now has almost half a million.unique visitors a month.  who are all those people?  they have no.idea.  no web startup does.  and since you don't know your users,.it's dangerous to guess what they'll like.  better to release.something and let them tell you.wufoo took this to heart and released.their form-builder before the underlying database.  you can't even.drive the thing yet, but 83,000 people came to sit in the driver's.seat and hold the steering wheel.  and wufoo got valuable feedback.from it: linux users complained they used too much flash, so they.rewrote their software not to.  if they'd waited to release everything.at once, they wouldn't have discovered this problem till it was.more deeply wired in.even if you had no users, it would still be important to release.quickly, because for a startup the initial release acts as a shakedown.cruise.  if anything major is broken-- if the idea's no good,.for example, or the founders hate one another-- the stress of getting.that first version out will expose it.  and if you have such problems.you want to find them early.perhaps the most important reason to release early, though, is that.it makes you work harder.  when you're working on something that.isn't released, problems are intriguing.  in something that's out.there, problems are alarming.  there is a lot more urgency once you.release.  and i think that's precisely why people put it off.  they.know they'll have to work a lot harder once they do..[2].2. keep pumping out features.of course, "release early" has a second component, without which.it would be bad advice.  if you're going to start with something.that doesn't do much, you better improve it fast.what i find myself repeating is "pump out features."  and this rule.isn't just for the initial stages.  this is something all startups.should do for as long as they want to be considered startups.i don't mean, of course, that you should make your application ever.more complex.  by "feature" i mean one unit of hacking-- one quantum.of making users' lives better.as with exercise, improvements beget improvements.  if you run every.day, you'll probably feel like running tomorrow.  but if you skip.running for a couple weeks, it will be an effort to drag yourself.out.  so it is with hacking: the more ideas you implement, the more.ideas you'll have.  you should make your system better at least in.some small way every day or two.this is not just a good way to get development done; it is also a.form of marketing.  users love a site that's constantly improving..in fact, users expect a site to improve.  imagine if you visited a.site that seemed very good, and then returned two months later and.not one thing had changed.  wouldn't it start to seem lame?.[3]they'll like you even better when you improve in response to their.comments, because customers are used to companies ignoring them..if you're the rare exception-- a company that actually listens--.you'll generate fanatical loyalty.  you won't need to advertise,.because your users will do it for you.this seems obvious too, so why do i have to keep repeating it?  i.think the problem here is that people get used to how things are..once a product gets past the stage where it has glaring flaws, you.start to get used to it, and gradually whatever features it happens.to have become its identity.  for example, i doubt many people at.yahoo (or google for that matter) realized how much better web mail.could be till paul buchheit showed them.i think the solution is to assume that anything you've made is far.short of what it could be.  force yourself, as a sort of intellectual.exercise, to keep thinking of improvements.  ok, sure, what you.have is perfect.  but if you had to change something, what would.it be?if your product seems finished, there are two possible explanations:.(a) it is finished, or (b) you lack imagination.  experience suggests.(b) is a thousand times more likely..3. make users happy.improving constantly is an instance of a more general rule: make.users happy.  one thing all startups have in common is that they.can't force anyone to do anything.  they can't force anyone to use.their software, and they can't force anyone to do deals with them..a startup has to sing for its supper.  that's why the successful.ones make great things.  they have to, or die.when you're running a startup you feel like a little bit of debris.blown about by powerful winds.  the most powerful wind is users..they can either catch you and loft you up into the sky, as they did.with google, or leave you flat on the pavement, as they do with.most startups.  users are a fickle wind, but more powerful than any.other.  if they take you up, no competitor can keep you down.as a little piece of debris, the rational thing for you to do is.not to lie flat, but to curl yourself into a shape the wind will.catch.i like the wind metaphor because it reminds you how impersonal the.stream of traffic is.  the vast majority of people who visit your.site will be casual visitors.  it's them you have to design your.site for.  the people who really care will find what they want by.themselves.the median visitor will arrive with their finger poised on the back.button.  think about your own experience: most links you.follow lead to something lame.  anyone who has used the web for.more than a couple weeks has been trained to click on back after.following a link.  so your site has to say "wait!  don't click on.back.  this site isn't lame.  look at this, for example."there are two things you have to do to make people pause.  the most.important is to explain, as concisely as possible, what the hell.your site is about.  how often have you visited a site that seemed.to assume you already knew what they did?  for example, the corporate.site that says the.company makes.enterprise content management solutions for business that enable.organizations to unify people, content and processes to minimize.business risk, accelerate time-to-value and sustain lower total.cost of ownership..an established company may get away with such an opaque description,.but no startup can.  a startup.should be able to explain in one or two sentences exactly what it.does..[4].and not just to users.  you need this for everyone:.investors, acquirers, partners, reporters, potential employees, and.even current employees.  you probably shouldn't even start a company.to do something that can't be described compellingly in one or two.sentences.the other thing i repeat is to give people everything you've got,.right away.  if you have something impressive, try to put it on the.front page, because that's the only one most visitors will see..though indeed there's a paradox here: the more you push the good.stuff toward the front, the more likely visitors are to explore.further..[5]in the best case these two suggestions get combined: you tell.visitors what your site is about by showing them.  one of the.standard pieces of advice in fiction writing is "show, don't tell.".don't say that a character's angry; have him grind his teeth, or.break his pencil in half.  nothing will explain what your site does.so well as using it.the industry term here is "conversion."  the job of your site is.to convert casual visitors into users-- whatever your definition.of a user is.  you can measure this in your growth rate.  either.your site is catching on, or it isn't, and you must know which.  if.you have decent growth, you'll win in the end, no matter how obscure.you are now.  and if you don't, you need to fix something..4. fear the right things.another thing i find myself saying a lot is "don't worry."  actually,.it's more often "don't worry about this; worry about that instead.".startups are right to be paranoid, but they sometimes fear the wrong.things.most visible disasters are not so alarming as they seem.  disasters.are normal in a startup: a founder quits, you discover a patent.that covers what you're doing, your servers keep crashing, you run.into an insoluble technical problem, you have to change your name,.a deal falls through-- these are all par for the course.  they won't.kill you unless you let them.nor will most competitors.  a lot of startups worry "what if google.builds something like us?"  actually big companies are not the ones.you have to worry about-- not even google.  the people at google.are smart, but no smarter than you; they're not as motivated, because.google is not going to go out of business if this one product fails;.and even at google they have a lot of bureaucracy to slow them down.what you should fear, as a startup, is not the established players,.but other startups you don't know exist yet.  they're way more.dangerous than google because, like you, they're cornered animals.looking just at existing competitors can give you a false sense of.security.  you should compete against what someone else could be.doing, not just what you can see people doing.  a corollary is that.you shouldn't relax just because you have no visible competitors.yet.  no matter what your idea, there's someone else out there.working on the same thing.that's the downside of it being easier to start a startup: more people.are doing it.  but i disagree with caterina fake when she says that.makes this a bad time to start a startup.  more people are starting.startups, but not as many more as could.  most college graduates.still think they have to get a job.  the average person can't ignore.something that's been beaten into their head since they were three.just because serving web pages recently got a lot cheaper.and in any case, competitors are not the biggest threat.  way more.startups hose themselves than get crushed by competitors.  there.are a lot of ways to do it, but the three main ones are internal.disputes, inertia, and ignoring users.  each is, by itself, enough.to kill you.  but if i had to pick the worst, it would be ignoring.users.  if you want a recipe for a startup that's going to die,.here it is: a couple of founders who have some great idea they know.everyone is going to love, and that's what they're going to build,.no matter what.almost everyone's initial plan is broken.  if companies stuck to.their initial plans, microsoft would be selling programming languages,.and apple would be selling printed circuit boards.  in both cases.their customers told them what their business should be-- and they.were smart enough to listen.as richard feynman said, the imagination of nature is greater than.the imagination of man.  you'll find more interesting things by.looking at the world than you could ever produce just by thinking..this principle is very powerful.  it's why the best abstract painting.still falls short of leonardo, for example.  and it applies to.startups too.  no idea for a product could ever be so clever as the.ones you can discover by smashing a beam of prototypes into a beam.of users..5. commitment is a self-fulfilling prophecy.i now have enough experience with startups to be able to say what.the most important quality is in a startup founder, and it's not.what you might think.  the most important quality in a startup.founder is determination.  not intelligence-- determination.this is a little depressing.  i'd like to believe viaweb succeeded.because we were smart, not merely determined.  a lot of people in.the startup world want to believe that.  not just founders, but.investors too.  they like the idea of inhabiting a world ruled by.intelligence.  and you can tell they really believe this, because.it affects their investment decisions.time after time vcs invest in startups founded by eminent professors..this may work in biotech, where a lot of startups simply commercialize.existing research, but in software you want to invest in students,.not professors.  microsoft, yahoo, and google were all founded by.people who dropped out of school to do it.  what students lack in.experience they more than make up in dedication.of course, if you want to get rich, it's not enough merely to be.determined.  you have to be smart too, right?  i'd like to think.so, but i've had an experience that convinced me otherwise: i spent.several years living in new york.you can lose quite a lot in the brains department and it won't kill.you.  but lose even a little bit in the commitment department, and.that will kill you very rapidly.running a startup is like walking on your hands: it's possible, but.it requires extraordinary effort.  if an ordinary employee were.asked to do the things a startup founder has to, he'd be very.indignant.  imagine if you were hired at some big company, and in.addition to writing software ten times faster than you'd ever had.to before, they expected you to answer support calls, administer.the servers, design the web site, cold-call customers, find the.company office space, and go out and get everyone lunch.and to do all this not in the calm, womb-like atmosphere of a big.company, but against a backdrop of constant disasters.  that's the.part that really demands determination.  in a startup, there's.always some disaster happening.  so if you're the least bit inclined.to find an excuse to quit, there's always one right there.but if you lack commitment, chances are it will have been hurting.you long before you actually quit.  everyone who deals with startups.knows how important commitment is, so if they sense you're ambivalent,.they won't give you much attention.  if you lack commitment, you'll.just find that for some mysterious reason good things happen to.your competitors but not to you.  if you lack commitment, it will.seem to you that you're unlucky.whereas if you're determined to stick around, people will pay.attention to you, because odds are they'll have to deal with you.later.  you're a local, not just a tourist, so everyone has to come.to terms with you.at y combinator we sometimes mistakenly fund teams who have the.attitude that they're going to give this startup thing a shot for.three months, and if something great happens, they'll stick with.it-- "something great" meaning either that someone wants to buy.them or invest millions of dollars in them.  but if this is your.attitude, "something great" is very unlikely to happen to you,.because both acquirers and investors judge you by your level of.commitment.if an acquirer thinks you're going to stick around no matter what,.they'll be more likely to buy you, because if they don't and you.stick around, you'll probably grow, your price will go up, and.they'll be left wishing they'd bought you earlier.  ditto for.investors.  what really motivates investors, even big vcs, is not.the hope of good returns, but the fear of missing out..[6].so if.you make it clear you're going to succeed no matter what, and the only.reason you need them is to make it happen a little faster, you're.much more likely to get money.you can't fake this.  the only way to convince everyone that you're.ready to fight to the death is actually to be ready to.you have to be the right kind of determined, though.  i carefully.chose the word determined rather than stubborn, because stubbornness.is a disastrous quality in a startup.  you have to be determined,.but flexible, like a running back.  a successful running back doesn't.just put his head down and try to run through people.  he improvises:.if someone appears in front of him, he runs around them; if someone.tries to grab him, he spins out of their grip; he'll even run in.the wrong direction briefly if that will help.  the one thing he'll.never do is stand still..[7].6. there is always room.i was talking recently to a startup founder about whether it might.be good to add a social component to their software.  he said he.didn't think so, because the whole social thing was tapped out..really?  so in a hundred years the only social networking sites.will be the facebook, myspace, flickr, and del.icio.us?  not likely.there is always room for new stuff.  at every point in history,.even the darkest bits of the dark ages, people were discovering.things that made everyone say "why didn't anyone think of that.before?"  we know this continued to be true up till 2004, when the.facebook was founded-- though strictly speaking someone else did.think of that.the reason we don't see the opportunities all around us is that we.adjust to however things are, and assume that's how things have to.be.  for example, it would seem crazy to most people to try to make.a better search engine than google.  surely that field, at least,.is tapped out.  really?  in a hundred years-- or even twenty-- are.people still going to search for information using something like.the current google?  even google probably doesn't think that.in particular, i don't think there's any limit to the number of.startups.  sometimes you hear people saying "all these guys starting.startups now are going to be disappointed. how many little startups.are google and yahoo going to buy, after all?" that sounds cleverly.skeptical, but i can prove it's mistaken.  no one proposes that.there's some limit to the number of people who can be employed in.an economy consisting of big, slow-moving companies with a couple.thousand people each.  why should there be any limit to the number.who could be employed by small, fast-moving companies with ten each?.it seems to me the only limit would be the number of people who.want to work that hard.the limit on the number of startups is not the number that can get.acquired by google and yahoo-- though it seems even that should.be unlimited, if the startups were actually worth buying-- but the.amount of wealth that can be created.  and i don't think there's.any limit on that, except cosmological ones.so for all practical purposes, there is no limit to the number of.startups.  startups make wealth, which means they make things people.want, and if there's a limit on the number of things people want,.we are nowhere near it.  i still don't even have a flying car..7. don't get your hopes up.this is another one i've been repeating since long before y combinator..it was practically the corporate motto at viaweb.startup founders are naturally optimistic.  they wouldn't do it.otherwise.  but you should treat your optimism the way you'd treat.the core of a nuclear reactor: as a source of power that's also.very dangerous.  you have to build a shield around it, or it will.fry you.the shielding of a reactor is not uniform; the reactor would be.useless if it were.  it's pierced in a few places to let pipes in..an optimism shield has to be pierced too.  i think the place to.draw the line is between what you expect of yourself, and what you.expect of other people.  it's ok to be optimistic about what you.can do, but assume the worst about machines and other people.this is particularly necessary in a startup, because you tend to.be pushing the limits of whatever you're doing.  so things don't.happen in the smooth, predictable way they do in the rest of the.world.  things change suddenly, and usually for the worse.shielding your optimism is nowhere more important than with deals..if your startup is doing a deal, just assume it's not going to.happen.  the vcs who say they're going to invest in you aren't..the company that says they're going to buy you isn't.  the big.customer who wants to use your system in their whole company won't..then if things work out you can be pleasantly surprised.the reason i warn startups not to get their hopes up is not to save.them from being disappointed when things fall through.  it's.for a more practical reason: to prevent them from leaning their.company against something that's going to fall over, taking them.with it.for example, if someone says they want to invest in you, there's a.natural tendency to stop looking for other investors.  that's why.people proposing deals seem so positive: they want you to.stop looking.  and you want to stop too, because doing deals is a.pain.  raising money, in particular, is a huge time sink.  so you.have to consciously force yourself to keep looking.even if you ultimately do the first deal, it will be to your advantage.to have kept looking, because you'll get better terms.  deals are.dynamic; unless you're negotiating with someone unusually honest,.there's not a single point where you shake hands and the deal's.done. there are usually a lot of subsidiary questions to be cleared.up after the handshake, and if the other side senses weakness-- if.they sense you need this deal-- they will be very tempted to screw.you in the details.vcs and corp dev guys are professional negotiators.  they're trained.to take advantage of weakness..[8].so while they're often nice.guys, they just can't help it.  and as pros they do this more than.you.  so don't even try to bluff them.  the only way a startup can.have any leverage in a deal is genuinely not to need it.  and if.you don't believe in a deal, you'll be less likely to depend on it.so i want to plant a hypnotic suggestion in your heads: when you.hear someone say the words "we want to invest in you" or "we want.to acquire you," i want the following phrase to appear automatically.in your head: don't get your hopes up.  just continue running.your company as if this deal didn't exist.  nothing is more likely.to make it close.the way to succeed in a startup is to focus on the goal of getting.lots of users, and keep walking swiftly toward it while investors.and acquirers scurry alongside trying to wave money in your face..speed, not moneythe way i've described it, starting a startup sounds pretty stressful..it is.  when i talk to the founders of the companies we've funded,.they all say the same thing: i knew it would be hard, but i didn't.realize it would be this hard.so why do it?  it would be worth enduring a lot of pain and stress.to do something grand or heroic, but just to make money?  is making.money really that important?no, not really.  it seems ridiculous to me when people take business.too seriously.  i regard making money as a boring errand to be got.out of the way as soon as possible.  there is nothing grand or.heroic about starting a startup per se.so why do i spend so much time thinking about startups?  i'll tell.you why.  economically, a startup is best seen not as a way to get.rich, but as a way to work faster.  you have to make a living, and.a startup is a way to get that done quickly, instead of letting it.drag on through your whole life..[9]we take it for granted most of the time, but human life is fairly.miraculous.  it is also palpably short.  you're given this marvellous.thing, and then poof, it's taken away.  you can see why people.invent gods to explain it.  but even to people who don't believe.in gods, life commands respect.  there are times in most of our.lives when the days go by in a blur, and almost everyone has a.sense, when this happens, of wasting something precious.  as ben.franklin said, if you love life, don't waste time, because time is.what life is made of.so no, there's nothing particularly grand about making money.  that's.not what makes startups worth the trouble.  what's important about.startups is the speed.  by compressing the dull but necessary task.of making a living into the smallest possible time, you show respect.for life, and there is something grand about that.notes[1].startups can die from releasing something full of bugs, and not.fixing them fast enough, but i don't know of any that died from.releasing something stable but minimal very early, then promptly.improving it.[2].i know this is why i haven't released arc.  the moment i do,.i'll have people nagging me for features.[3].a web site is different from a book or movie or desktop application.in this respect.  users judge a site not as a single snapshot, but.as an animation with multiple frames.  of the two, i'd say the rate of.improvement is more important to users than where you currently.are.[4].it should not always tell this to users, however.  for example,.myspace is basically a replacement mall for mallrats.  but it was.wiser for them, initially, to pretend that the site was about bands.[5].similarly, don't make users register to try your site.  maybe.what you have is so valuable that visitors should gladly register.to get at it.  but they've been trained to expect the opposite..most of the things they've tried on the web have sucked-- and.probably especially those that made them register.[6].vcs have rational reasons for behaving this way. they don't.make their money (if they make money) off their median investments..in a typical fund, half the companies fail, most of the rest generate.mediocre returns, and one or two "make the fund" by succeeding.spectacularly.  so if they miss just a few of the most promising.opportunities, it could hose the whole fund.[7].the attitude of a running back doesn't translate to soccer..though it looks great when a forward dribbles past multiple defenders,.a player who persists in trying such things will do worse in the.long term than one who passes.[8].the reason y combinator never negotiates valuations.is that we're not professional negotiators, and don't want to turn.into them.[9].there are two ways to do.work you love: (a) to make money, then work.on what you love, or (b) to get a job where you get paid to work on.stuff you love.  in practice the first phases of both.consist mostly of unedifying schleps, and in (b) the second phase is less.secure.thanks to sam altman, trevor blackwell, beau hartshorne, jessica.livingston, and robert morris for reading drafts of this.romanian translationrussian translationfrench translationjapanese translation<eot><sot>see randomness.april 2006
, rev august 2009plato quotes socrates as saying "the unexamined life is not worth.living."  part of what he meant was that the proper role of humans is to.think, just as the proper role of anteaters is to poke their noses.into anthills.a lot of ancient philosophy had the quality — and i.don't mean this in an insulting way — of the kind of conversations.freshmen have late at night in common rooms:.what is our purpose?  well, we humans are.as conspicuously different from other animals as the anteater..in our case the distinguishing feature is the ability to reason..so obviously that is what we should be doing, and a human who.doesn't is doing a bad job of being human — is no better than an.animal..now we'd give a different answer.  at least, someone socrates's age.would.  we'd ask why we even suppose we have a "purpose" in life..we may be better adapted for some things than others; we.may be happier doing things we're adapted for; but why assume.purpose?the history of ideas.is a history of gradually discarding the assumption that it's all.about us.  no, it turns out, the earth is not the center of the.universe — not even the center of the solar system.  no, it turns.out, humans are not created by god in his own image; they're just.one species among many, descended not merely from apes, but from.microorganisms.  even the concept of "me" turns out to be fuzzy.around the edges if you examine it closely.the idea that we're the center of things is difficult to discard..so difficult that there's probably room to discard more.  richard.dawkins made another step in that direction only in the last several.decades, with the idea of the.selfish gene..no, it turns.out, we're not even the protagonists: we're just the latest model.vehicle our genes have constructed to travel around in.  and having.kids is our genes heading for the lifeboats.  reading.that book snapped my brain out of its previous way of thinking the.way darwin's must have when it first appeared.(few people can experience now what darwin's contemporaries did.when the origin of species was first published, because everyone.now is raised either to take evolution for granted, or to regard.it as a heresy. no one encounters the idea of natural selection for.the first time as an adult.)so if you want to discover things that have been overlooked till.now, one really good place to look is in our blind spot: in our.natural, naive belief that it's all about us.  and expect to encounter.ferocious opposition if you do.conversely, if you have to choose between two theories, prefer the.one that doesn't center on you.this principle isn't only for big ideas.  it works in everyday life,.too.  for example, suppose you're saving a piece of cake in the fridge, and you.come home one day to find your housemate has eaten.it.  two possible theories:.a) your housemate did it deliberately to upset you.  he knew.you were saving that piece of cake.b) your housemate was hungry..i say pick b.  no one knows who said "never attribute to malice what.can be explained by incompetence," but it is a powerful idea..its more general version is our answer to the greeks:.don't see purpose where there isn't..or better still, the positive version:.see randomness.korean translation<eot><sot>are software patents evil?.march 2006
(this essay is derived from a talk at google.)a few weeks ago i found to my surprise that i'd been granted four patents..this was all the more surprising.because i'd only applied for three.  the patents aren't mine, of.course.  they were assigned to viaweb, and became yahoo's when they.bought us.  but the news set me thinking about the question of.software patents generally.patents are a hard problem.  i've had to advise most of the startups.we've funded about them, and despite years of experience i'm still.not always sure i'm giving the right advice.one thing i do feel pretty certain of is that if you're against.software patents, you're against patents in general.  gradually our.machines consist more and more of software.  things that used to.be done with levers and cams and gears are now done with loops and.trees and closures.  there's nothing special about physical embodiments.of control systems that should make them patentable, and the software.equivalent not.unfortunately, patent law is inconsistent on this point.  patent.law in most countries says that algorithms aren't patentable.  this.rule is left over from a time when "algorithm" meant something like.the sieve of eratosthenes.  in 1800, people could not see as readily.as we can that a great many patents on mechanical objects were.really patents on the algorithms they embodied.patent lawyers still have to pretend that's what they're doing when.they patent algorithms.  you must not use the word "algorithm" in.the title of a patent application, just as you must not use the.word "essays" in the title of a book.  if you want to patent an.algorithm, you have to frame it as a computer system executing that algorithm..then it's mechanical; phew.  the default euphemism for algorithm.is "system and method."  try a patent search for that phrase and.see how many results you get.since software patents are no different from hardware patents,.people who say "software patents are evil" are saying simply "patents.are evil."  so why do so many people complain about software patents.specifically?i think the problem is more with the patent office than the concept.of software patents.  whenever software meets government, bad things.happen, because software changes fast and government changes slow..the patent office has been overwhelmed by both the volume and the.novelty of applications for software patents, and as a result they've.made a lot of mistakes.the most common is to grant patents that shouldn't be granted.  to.be patentable, an invention has to be more than new.  it also has.to be non-obvious.  and this, especially, is where the uspto has.been dropping the ball. slashdot has an icon that expresses the.problem vividly: a knife and fork with the words "patent pending".superimposed.the scary thing is, this is the only icon they have for.patent stories.  slashdot readers now take it for granted that a.story about a patent will be about a bogus patent..that's how bad the problem has become.the problem with amazon's notorious one-click patent, for example,.is not that it's a software patent, but that it's obvious.  any.online store that kept people's shipping addresses would have.implemented this.  the reason amazon did it first was not that they.were especially smart, but because they were one of the earliest.sites with enough clout to force customers to log in before they.could buy something..[1]we, as hackers, know the uspto is letting people patent the knives.and forks of our world.  the problem is, the uspto are not hackers..they're probably good at judging new inventions for casting steel.or grinding lenses, but they don't understand software yet.at this point an optimist would be tempted to add "but they will.eventually."  unfortunately that might not be true.  the problem.with software patents is an instance of a more general one: the.patent office takes a while to understand new technology.  if so,.this problem will only get worse, because the rate of technological.change seems to be increasing.  in thirty years, the patent office.may understand the sort of things we now patent as software, but.there will be other new types of inventions they understand even.less.applying for a patent is a negotiation.  you generally apply for a.broader patent than you think you'll be granted, and the examiners.reply by throwing out some of your claims and granting others.  so.i don't really blame amazon for applying for the one-click patent..the big mistake was the patent office's, for not insisting on.something narrower, with real technical content.  by granting such.an over-broad patent, the uspto in effect slept with amazon on the.first date.  was amazon supposed to say no?where amazon went over to the dark side was not in applying for the.patent, but in enforcing it.  a lot of companies (microsoft, for.example) have been granted large numbers of preposterously over-broad.patents,  but they keep them mainly for defensive purposes.  like.nuclear weapons, the main role of big companies' patent portfolios.is to threaten anyone who attacks them with a counter-suit.  amazon's.suit against barnes & noble was thus the equivalent of a nuclear.first strike.that suit probably hurt amazon more than it helped them.  barnes &.noble was a lame site; amazon would have crushed them anyway.  to.attack a rival they could have ignored, amazon put a lasting black.mark on their own reputation.  even now i think if you asked hackers.to free-associate about amazon, the one-click patent would turn up.in the first ten topics.google clearly doesn't feel that merely holding patents is evil..they've applied for a lot of them.  are they hypocrites?  are patents.evil?there are really two variants of that question, and people answering.it often aren't clear in their own minds which they're answering..there's a narrow variant: is it bad, given the current legal system,.to apply for patents? and also a broader one: is it bad that the.current legal system allows patents?these are separate questions.  for example, in preindustrial societies.like medieval europe, when someone attacked you, you didn't call.the police.  there were no police.  when attacked, you were supposed.to fight back, and there were conventions about how to do it.  was.this wrong?  that's two questions: was it wrong to take justice.into your own hands, and was it wrong that you had to?  we tend to.say yes to the second, but no to the first.  if no one else will.defend you, you have to defend yourself..[2]the situation with patents is similar.  business is a kind of.ritualized warfare.  indeed, it evolved from actual warfare: most.early traders switched on the fly from merchants to pirates depending.on how strong you seemed.  in business there are certain rules.describing how companies may and may not compete with one another,.and someone deciding that they're going to play by their own rules.is missing the point.  saying "i'm not going to apply for patents.just because everyone else does" is not like saying "i'm not going.to lie just because everyone else does."  it's more like saying."i'm not going to use tcp/ip just because everyone else does." oh.yes you are.a closer comparison might be someone seeing a hockey game for the.first time, realizing with shock that the players were deliberately.bumping into one another, and deciding that one would on no account.be so rude when playing hockey oneself.hockey allows checking.  it's part of the game.  if your team refuses.to do it, you simply lose.  so it is in business.  under the present.rules, patents are part of the game.what does that mean in practice?  we tell the startups we fund not.to worry about infringing patents, because startups rarely get sued.for patent infringement.  there are only two reasons someone might.sue you: for money, or to prevent you from competing with them..startups are too poor to be worth suing for money. and in practice.they don't seem to get sued much by competitors, either.  they don't.get sued by other startups because (a) patent suits are an expensive.distraction, and (b) since the other startups are as young as they.are, their patents probably haven't issued yet..[3].nor do startups,.at least in the software business, seem to get sued much by established.competitors.  despite all the patents microsoft holds, i don't know.of an instance where they sued a startup for patent infringement..companies like microsoft and oracle don't win by winning lawsuits..that's too uncertain.  they win by locking competitors out of their.sales channels.  if you do manage to threaten them, they're more.likely to buy you than sue you.when you read of big companies filing patent suits against smaller.ones, it's usually a big company on the way down, grasping at.straws.  for example, unisys's attempts to enforce their patent on.lzw compression.  when you see a big company threatening patent.suits, sell.  when a company starts fighting over ip, it's a sign.they've lost the real battle, for users.a company that sues competitors for patent infringement is like.a defender who has been beaten so thoroughly that he turns to plead.with the referee.  you don't do that if you can still reach the.ball, even if you genuinely believe you've been fouled.  so a company.threatening patent suits is a company in trouble.when we were working on viaweb, a bigger company in the e-commerce.business was granted a patent on online ordering, or something like.that.  i got a call from a vp there asking if we'd like to license.it.  i replied that i thought the patent was completely bogus, and.would never hold up in court.  "ok," he replied.  "so, are you guys.hiring?"if your startup grows big enough, however, you'll start to get sued,.no matter what you do.  if you go public, for example, you'll be.sued by multiple patent trolls who hope you'll pay them off to go.away.  more on them later.in other words, no one will sue you for patent infringement till.you have money, and once you have money, people will sue you whether.they have grounds to or not.  so i advise fatalism.  don't waste.your time worrying about patent infringement.  you're probably.violating a patent every time you tie your shoelaces.  at the start,.at least, just worry about making something great and getting lots.of users.  if you grow to the point where anyone considers you worth.attacking, you're doing well.we do advise the companies we fund to apply for patents, but not.so they can sue competitors.  successful startups either get bought.or grow into big companies.  if a startup wants to grow into a big.company, they should apply for patents to build up the patent.portfolio they'll need to maintain an armed truce with other big.companies.  if they want to get bought, they should apply for patents.because patents are part of the mating dance with acquirers.most startups that succeed do it by getting bought, and most acquirers.care about patents.  startup acquisitions are usually a build-vs-buy.decision for the acquirer.  should we buy this little startup or.build our own?  and two things, especially, make them decide not.to build their own: if you already have a large and rapidly growing.user base, and if you have a fairly solid patent application on.critical parts of your software.there's a third reason big companies should prefer buying to building:.that if they built their own, they'd screw it up.  but few big.companies are smart enough yet to admit this to themselves.  it's.usually the acquirer's engineers who are asked how hard it would.be for the company to build their own, and they overestimate their.abilities..[4].a patent seems to change the balance.  it gives the.acquirer an excuse to admit they couldn't copy what you're doing..it may also help them to grasp what's special about your technology.frankly, it surprises me how small a role patents play in the.software business.  it's kind of ironic, considering all the dire.things experts say about software patents stifling innovation, but.when one looks closely at the software business, the most striking.thing is how little patents seem to matter.in other fields, companies regularly sue competitors for patent.infringement.  for example, the airport baggage scanning business.was for many years a cozy duopoly shared between two companies,.invision and l-3.  in 2002 a startup called reveal appeared, with.new technology that let them build scanners a third the size.  they.were sued for patent infringement before they'd even released a.product.you rarely hear that kind of story in our world.  the one example.i've found is, embarrassingly enough, yahoo, which filed a patent.suit against a gaming startup called xfire in 2005.  xfire doesn't.seem to be a very big deal, and it's hard to say why yahoo felt.threatened.  xfire's vp of engineering had worked at yahoo on similar.stuff-- in fact, he was listed as an inventor on the patent yahoo.sued over-- so perhaps there was something personal about it.  my.guess is that someone at yahoo goofed.  at any rate they didn't.pursue the suit very vigorously.why do patents play so small a role in software?  i can think of.three possible reasons.one is that software is so complicated that patents by themselves.are not worth very much.  i may be maligning other fields here, but.it seems that in most types of engineering you can hand the details.of some new technique to a group of medium-high quality people and.get the desired result.  for example, if someone develops a new.process for smelting ore that gets a better yield, and you assemble.a team of qualified experts and tell them about it, they'll be able.to get the same yield.  this doesn't seem to work in software..software is so subtle and unpredictable that "qualified experts".don't get you very far.that's why we rarely hear phrases like "qualified expert" in the.software business.  what that level of ability can get you is, say,.to make your software compatible with some other piece of software--.in eight months, at enormous cost.  to do anything harder you need.individual brilliance.  if you assemble a team of qualified experts.and tell them to make a new web-based email program, they'll get.their asses kicked by a team of inspired nineteen year olds.experts can implement, but they can't design..or rather, expertise in implementation is the only kind most people,.including the experts themselves, can measure..[5]but design is a definite skill.  it's not just an airy intangible..things always seem intangible when you don't understand them..electricity seemed an airy intangible to most people in 1800.  who.knew there was so much to know about it?  so it is with design..some people are good at it and some people are bad at it, and there's.something very tangible they're good or bad at.the reason design counts so much in software is probably that there.are fewer constraints than on physical things.  building physical.things is expensive and dangerous.  the space of possible choices.is smaller; you tend to have to work as part of a larger group; and.you're subject to a lot of regulations.  you don't have any of that.if you and a couple friends decide to create a new web-based.application.because there's so much scope for design in software, a successful.application tends to be way more than the sum of its patents.  what.protects little companies from being copied by bigger competitors.is not just their patents, but the thousand little things the big.company will get wrong if they try.the second reason patents don't count for much in our world is that.startups rarely attack big companies head-on, the way reveal did..in the software business, startups beat established companies by.transcending them.  startups don't build desktop word processing.programs to compete with microsoft word..[6].they build writely..if this paradigm is crowded, just wait for the next one; they run.pretty frequently on this route.fortunately for startups, big companies are extremely good at denial..if you take the trouble to attack them from an oblique angle, they'll.meet you half-way and maneuver to keep you in their blind spot.  to.sue a startup would mean admitting it was dangerous, and that often.means seeing something the big company doesn't want to see.  ibm.used to sue its mainframe competitors regularly, but they didn't.bother much about the microcomputer industry because they didn't.want to see the threat it posed.  companies building web based apps.are similarly protected from microsoft, which even now doesn't want.to imagine a world in which windows is irrelevant.the third reason patents don't seem to matter very much in software.is public opinion-- or rather, hacker opinion.  in a recent interview,.steve ballmer coyly left open the possibility of attacking linux.on patent grounds.  but i doubt microsoft would ever be so stupid..they'd face the mother of all boycotts.  and not just from the.technical community in general; a lot of their own people would.rebel.good hackers care a lot about matters of principle, and they are.highly mobile.  if a company starts misbehaving, smart people won't.work there.  for some reason this seems to be more true in software.than other businesses.  i don't think it's because hackers have.intrinsically higher principles so much as that their skills are.easily transferrable.  perhaps we can split the difference and say.that mobility gives hackers the luxury of being principled.google's "don't be evil" policy may for this reason be the most.valuable thing they've discovered.  it's very constraining in some.ways.  if google does do something evil, they get doubly whacked.for it: once for whatever they did, and again for hypocrisy.  but.i think it's worth it.  it helps them to hire the best people, and.it's better, even from a purely selfish point of view, to be.constrained by principles than by stupidity.(i wish someone would get this point across to the present.administration.)i'm not sure what the proportions are of the preceding three.ingredients, but the custom among the big companies seems to be not.to sue the small ones, and the startups are mostly too busy and too.poor to sue one another.  so despite the huge number of software.patents there's not a lot of suing going on.  with one exception:.patent trolls.patent trolls are companies consisting mainly of lawyers whose whole.business is to accumulate patents and threaten to sue companies who.actually make things.  patent trolls, it seems safe to say, are.evil.  i feel a bit stupid saying that, because when you're saying.something that richard stallman and bill gates would both agree.with, you must be perilously close to tautologies.the ceo of forgent, one of the most notorious patent trolls, says.that what his company does is "the american way." actually that's.not true. the american way is to make money by creating wealth, not by suing people..[7].what companies like forgent do is actually the proto-industrial.way.  in the period just before the industrial revolution, some of.the greatest fortunes in countries like england and france were.made by courtiers who extracted some lucrative right from the crown--.like the right to collect taxes on the import of silk-- and then.used this to squeeze money from the merchants in that business.  so.when people compare patent trolls to the mafia, they're more right.than they know, because the mafia too are not merely bad, but bad.specifically in the sense of being an obsolete business model.patent trolls seem to have caught big companies by surprise.  in.the last couple years they've extracted hundreds of millions of.dollars from them.  patent trolls are hard to fight precisely because.they create nothing.  big companies are safe from being sued by.other big companies because they can threaten a counter-suit.  but.because patent trolls don't make anything, there's nothing they can.be sued for.  i predict this loophole will get closed fairly quickly,.at least by legal standards.  it's clearly an abuse of the system,.and the victims are powerful..[8]but evil as patent trolls are, i don't think they hamper innovation.much.  they don't sue till a startup has made money, and by that.point the innovation that generated it has already happened.  i.can't think of a startup that avoided working on some problem because.of patent trolls.so much for hockey as the game is played now.  what about the more.theoretical question of whether hockey would be a better game without.checking?  do patents encourage or discourage innovation?this is a very hard question to answer in the general case.  people.write whole books on the topic.  one of my main hobbies is the.history of technology, and even though i've studied the subject for.years, it would take me several weeks of research to be able to say.whether patents have in general been a net win.one thing i can say is that 99.9% of the people who express opinions.on the subject do it not based on such research, but out of a kind.of religious conviction.  at least, that's the polite way of putting.it; the colloquial version involves speech coming out of organs not.designed for that purpose.whether they encourage innovation or not, patents were at least.intended to.  you don't get a patent for nothing.  in return for.the exclusive right to use an idea, you have to publish it,.and it was largely to encourage such openness that patents were.established.before patents, people protected ideas by keeping them secret.  with.patents, central governments said, in effect, if you tell everyone.your idea, we'll protect it for you.  there is a parallel here to.the rise of civil order, which happened at roughly the same time..before central governments were powerful enough to enforce order,.rich people had private armies.  as governments got more powerful,.they gradually compelled magnates to cede most responsibility for.protecting them.  (magnates still have bodyguards, but no longer.to protect them from other magnates.)patents, like police, are involved in many abuses.  but in both.cases the default is something worse. the choice is not "patents.or freedom?" any more than it is "police or freedom?" the actual.questions are respectively "patents or secrecy?" and "police or.gangs?"as with gangs, we have some idea what secrecy would be like, because.that's how things used to be.  the economy of medieval europe was.divided up into little tribes, each jealously guarding their.privileges and secrets.  in shakespeare's time, "mystery" was.synonymous with "craft."   even today we can see an echo of the.secrecy of medieval guilds, in the now pointless secrecy of the.masons.the most memorable example of medieval industrial secrecy is probably.venice, which forbade glassblowers to leave the city, and sent.assassins after those who tried.  we might like to think we wouldn't.go so far, but the movie industry has already tried to pass laws.prescribing three year prison terms just for putting movies on.public networks.  want to try a frightening thought experiment? if.the movie industry could have any law they wanted, where would they.stop?  short of the death penalty, one assumes, but how close would.they get?even worse than the spectacular abuses might be the overall decrease.in efficiency that would accompany increased secrecy.  as anyone.who has dealt with organizations that operate on a "need to know".basis can attest, dividing information up into little cells is.terribly inefficient.  the flaw in the "need to know" principle is.that you don't know who needs to know something.  an idea.from one area might spark a great discovery in another.  but the.discoverer doesn't know he needs to know it.if secrecy were the only protection for ideas, companies wouldn't.just have to be secretive with other companies; they'd have to be.secretive internally.  this would encourage what is already the.worst trait of big companies.i'm not saying secrecy would be worse than patents, just that we.couldn't discard patents for free.  businesses would become more.secretive to compensate, and in some fields this might get ugly..nor am i defending the current patent system.  there is clearly a.lot that's broken about it.   but the breakage seems to affect.software less than most other fields.in the software business i know from experience whether patents.encourage or discourage innovation, and the answer is the type that.people who like to argue about public policy least like to hear:.they don't affect innovation much, one way or the other.  most.innovation in the software business happens in startups, and startups.should simply ignore other companies' patents.  at least, that's.what we advise, and we bet money on that advice.the only real role of patents, for most startups, is as an element.of the mating dance with acquirers.  there patents do help a little..and so they do encourage innovation indirectly, in that they give.more power to startups, which is where, pound for pound, the most.innovation happens.  but even in the mating dance, patents are of.secondary importance.  it matters more to make something great and.get a lot of users.notes[1].you have to be careful here, because a great discovery often.seems obvious in retrospect.  one-click ordering, however, is not.such a discovery.[2]."turn the other cheek" skirts the issue; the critical question.is not how to deal with slaps, but sword thrusts.[3].applying for a patent is now very slow, but it might actually.be bad if that got fixed.  at the moment the time it takes to get.a patent is conveniently just longer than the time it takes a startup.to succeed or fail.[4].instead of the canonical "could you build this?" maybe the corp.dev guys should be asking "will you build this?" or even "why haven't.you already built this?"[5].design ability is so hard to measure that you can't even trust.the design world's internal standards.  you can't assume that someone.with a degree in design is any good at design, or that an eminent.designer is any better than his peers.  if that worked, any company.could build products as good as apple's just by hiring.sufficiently qualified designers.[6].if anyone wanted to try, we'd be interested to hear from them..i suspect it's one of those things that's not as hard as everyone.assumes.[7].patent trolls can't even claim, like speculators, that they."create" liquidity.[8].if big companies don't want to wait for the government to take.action, there is a way to fight back themselves.  for a long time.i thought there wasn't, because there was nothing to grab onto..but there is one resource patent trolls need: lawyers.  big technology.companies between them generate a lot of legal business.  if they.agreed among themselves never to do business with any firm employing.anyone who had worked for a patent troll, either as an employee or.as outside counsel, they could probably starve the trolls of the.lawyers they need.thanks to dan bloomberg, paul buchheit, sarah harlin,.jessica livingston, and peter norvig.for reading drafts of this, to joel lehrer and peter eng for answering.my questions about patents, and to ankur pansari for inviting me.to speak.japanese translation<eot><sot>6,631,372.march 2006
, rev august 2009a couple days ago i found to my surprise that i'd been granted a.patent..it issued in 2003, but no one told me.  i wouldn't know about it.now except that a few months ago, while visiting yahoo, i happened.to run into a big cheese i knew from working there in the late.nineties.  he brought up something called revenue loop, which viaweb.had been working on when they bought us.the idea is basically that you sort search results not in order of.textual "relevance" (as search engines did then) nor in order of.how much advertisers bid (as overture did) but in order of the bid.times the number of transactions.  ordinarily you'd do this for.shopping searches, though in fact one of the features of our scheme.is that it automatically detects which searches are shopping searches.if you just order the results in order of bids, you can make the.search results useless, because the first results could be dominated.by lame sites that had bid the most.  but if you order results by.bid multiplied by transactions, far from selling out, you're getting.a better measure of relevance.  what could be a better sign that.someone was satisfied with a search result than going to the site.and buying something?and, of course, this algorithm automatically maximizes the revenue.of the search engine.everyone is focused on this type of approach now, but few were in.1998.  in 1998 it was all about selling banner ads.  we didn't know.that, so we were pretty excited when we figured out what seemed to.us the optimal way of doing shopping searches.when yahoo was thinking of buying us, we had a meeting with jerry.yang in new york.  for him, i now realize, this was supposed to be.one of those meetings when you check out a company you've pretty.much decided to buy, just to make sure they're ok guys.  we weren't.expected to do more than chat and seem smart and reasonable.  he.must have been dismayed when i jumped up to the whiteboard and.launched into a presentation of our exciting new technology.i was just as dismayed when he didn't seem to care at all about it..at the time i thought, "boy, is this guy poker-faced.  we present.to him what has to be the optimal way of sorting product search.results, and he's not even curious."  i didn't realize till much later.why he didn't care.  in 1998, advertisers were overpaying enormously.for ads on web sites..in 1998, if advertisers paid the maximum that traffic was worth to.them, yahoo's revenues would have decreased.things are different now, of course.  now this sort of thing is all.the rage.  so when i ran into the yahoo exec i knew from the old.days in the yahoo cafeteria a few months ago, the first thing he.remembered was not (fortunately) all the fights i had with him, but.revenue loop."well," i said, "i think we actually applied for a patent on it..i'm not sure what happened to the application after i left.""really?  that would be an important patent."so someone investigated, and sure enough, that patent application.had continued in the pipeline for several years after, and finally.issued in 2003.the main thing that struck me on reading it, actually, is that.lawyers at some point messed up my nice clear writing.  some clever.person with a spell checker reduced one section to zen-like incomprehensibility:.also, common spelling errors will tend to get fixed. for example,.if users searching for "compact disc player" end up spending.considerable money at sites offering compact disc players, then.those pages will have a higher relevance for that search phrase,.even though the phrase "compact disc player" is not present on.those pages..(that "compat disc player" wasn't a typo, guys.)for the fine prose of the original, see the provisional application.of february 1998, back when we were still viaweb and couldn't afford.to pay lawyers to turn every "a lot of" into "considerable."<eot><sot>why yc.march 2006
, rev august 2009yesterday one of the founders we funded asked me why we started.y.combinator.  or more precisely, he asked if we'd started yc mainly.for fun.kind of, but not quite.  it is enormously fun to be able to work.with rtm and trevor again.  i missed that after we sold viaweb, and.for all the years after i always had a background process running,.looking for something we could do together.  there is definitely.an aspect of a band reunion to y combinator.  every couple days i.slip and call it "viaweb."viaweb we started very explicitly to make money.  i was sick of.living from one freelance project to the next, and decided to just.work as hard as i could till i'd made enough to solve the problem.once and for all.  viaweb was sometimes fun, but it wasn't designed.for fun, and mostly it wasn't.  i'd be surprised if any startup is..all startups are mostly schleps.the real reason we started y combinator is neither selfish nor.virtuous.  we didn't start it mainly to make money; we have no idea.what our average returns might be, and won't know for years.  nor.did we start yc mainly to help out young would-be founders, though.we do like the idea, and comfort ourselves occasionally with the.thought that if all our investments tank, we will thus have been.doing something unselfish.  (it's oddly nondeterministic.)the real reason we started y combinator is one probably only a.hacker would understand.  we did it because it seems such a great.hack.  there are thousands of smart people who could start companies.and don't, and with a relatively small amount of force applied at.just the right place, we can spring on the world a stream of new.startups that might otherwise not have existed.in a way this is virtuous, because i think startups are a good.thing.  but really what motivates us is the completely amoral desire.that would motivate any hacker who looked at some complex device.and realized that with a tiny tweak he could make it run more.efficiently.  in this case, the device is the world's economy, which.fortunately happens to be open source.<eot><sot>how to do what you love.want to start a startup?  get funded by.y combinator..january 2006
to do something well you have to like it.   that idea is not exactly.novel.  we've got it down to four words: "do what you love."  but.it's not enough just to tell people that.  doing what you love is.complicated.the very idea is foreign to what most of us learn as kids.  when i.was a kid, it seemed as if work and fun were opposites by definition..life had two states: some of the time adults were making you do.things, and that was called work; the rest of the time you could.do what you wanted, and that was called playing.  occasionally the.things adults made you do were fun, just as, occasionally, playing.wasn't — for example, if you fell and hurt yourself.  but except.for these few anomalous cases, work was pretty much defined as.not-fun.and it did not seem to be an accident. school, it was implied, was.tedious because it was preparation for grownup work.the world then was divided into two groups, grownups and kids..grownups, like some kind of cursed race, had to work.  kids didn't,.but they did have to go to school, which was a dilute version of.work meant to prepare us for the real thing.  much as we disliked.school, the grownups all agreed that grownup work was worse, and.that we had it easy.teachers in particular all seemed to believe implicitly that work.was not fun.  which is not surprising: work wasn't fun for most of.them.  why did we have to memorize state capitals instead of playing.dodgeball?  for the same reason they had to watch over a bunch of.kids instead of lying on a beach.  you couldn't just do what you.wanted.i'm not saying we should let little kids do whatever they want..they may have to be made to work on certain things.  but if we make.kids work on dull stuff, it might be wise to tell them that tediousness.is not the defining quality of work, and indeed that the reason.they have to work on dull stuff now is so they can work on more.interesting stuff later..[1]once, when i was about 9 or 10, my father told me i could be whatever.i wanted when i grew up, so long as i enjoyed it.  i remember that.precisely because it seemed so anomalous.  it was like being told.to use dry water.  whatever i thought he meant, i didn't think he.meant work could literally be fun — fun like playing.  it.took me years to grasp that.jobsby high school, the prospect of an actual job was on the horizon..adults would sometimes come to speak to us about their work, or we.would go to see them at work.  it was always understood that they.enjoyed what they did.  in retrospect i think one may have: the.private jet pilot.  but i don't think the bank manager really did.the main reason they all acted as if they enjoyed their work was.presumably the upper-middle class convention that you're supposed.to.  it would not merely be bad for your career to say that you.despised your job, but a social faux-pas.why is it conventional to pretend to like what you do?  the first.sentence of this essay explains that.  if you have to like something.to do it well, then the most successful people will all like what.they do.  that's where the upper-middle class tradition comes from..just as houses all over america are full of.chairs.that are, without.the owners even knowing it, nth-degree imitations of chairs designed.250 years ago for french kings, conventional attitudes about work.are, without the owners even knowing it, nth-degree imitations of.the attitudes of people who've done great things.what a recipe for alienation.  by the time they reach an age to.think about what they'd like to do, most kids have been thoroughly.misled about the idea of loving one's work.  school has trained.them to regard work as an unpleasant duty.  having a job is said.to be even more onerous than schoolwork.  and yet all the adults.claim to like what they do.  you can't blame kids for thinking "i.am not like these people; i am not suited to this world."actually they've been told three lies: the stuff they've been taught.to regard as work in school is not real work; grownup work is not.(necessarily) worse than schoolwork; and many of the adults around.them are lying when they say they like what they do.the most dangerous liars can be the kids' own parents.  if you take.a boring job to give your family a high standard of living, as so.many people do, you risk infecting your kids with the idea that.work is boring..[2].maybe it would be better for kids in this one.case if parents were not so unselfish.  a parent who set an example.of loving their work might help their kids more than an expensive.house..[3]it was not till i was in college that the idea of work finally broke.free from the idea of making a living.  then the important question.became not how to make money, but what to work on.  ideally these.coincided, but some spectacular boundary cases (like einstein in.the patent office) proved they weren't identical.the definition of work was now to make some original contribution.to the world, and in the process not to starve.  but after the habit.of so many years my idea of work still included a large component.of pain.  work still seemed to require discipline, because only.hard problems yielded grand results, and hard problems couldn't.literally be fun.   surely one had to force oneself to work on them.if you think something's supposed to hurt, you're less likely to.notice if you're doing it wrong.  that about sums up my experience.of graduate school.boundshow much are you supposed to like what you do?  unless you.know that, you don't know when to stop searching. and if, like most.people, you underestimate it, you'll tend to stop searching too.early.  you'll end up doing something chosen for you by your parents,.or the desire to make money, or prestige — or sheer inertia.here's an upper bound: do what you love doesn't mean, do what you.would like to do most this second.  even einstein probably.had moments when he wanted to have a cup of coffee, but told himself.he ought to finish what he was working on first.it used to perplex me when i read about people who liked what they.did so much that there was nothing they'd rather do.  there didn't.seem to be any sort of work i liked that much.  if i had a.choice of (a) spending the next hour working on something or (b).be teleported to rome and spend the next hour wandering about, was.there any sort of work i'd prefer?  honestly, no.but the fact is, almost anyone would rather, at any given moment,.float about in the carribbean, or have sex, or eat some delicious.food, than work on hard problems.  the rule about doing what you.love assumes a certain length of time.  it doesn't mean, do what.will make you happiest this second, but what will make you happiest.over some longer period, like a week or a month.unproductive pleasures pall eventually.  after a while you get tired.of lying on the beach.  if you want to stay happy, you have to do.something.as a lower bound, you have to like your work more than any unproductive.pleasure.  you have to like what you do enough that the concept of."spare time" seems mistaken.  which is not to say you have to spend.all your time working.  you can only work so much before you get.tired and start to screw up.  then you want to do something else.— even something mindless.  but you don't regard this time as the.prize and the time you spend working as the pain you endure to earn.it.i put the lower bound there for practical reasons.  if your work.is not your favorite thing to do, you'll have terrible problems.with procrastination.  you'll have to force yourself to work,  and.when you resort to that the results are distinctly inferior.to be happy i think you have to be doing something you not only.enjoy, but admire.  you have to be able to say, at the end, wow,.that's pretty cool.  this doesn't mean you have to make something..if you learn how to hang glide, or to speak a foreign language.fluently, that will be enough to make you say, for a while at least,.wow, that's pretty cool.  what there has to be is a test.so one thing that falls just short of the standard, i think, is.reading books.  except for some books in math and the hard sciences,.there's no test of how well you've read a book, and that's why.merely reading books doesn't quite feel like work.  you have to do.something with what you've read to feel productive.i think the best test is one gino lee taught me: to try to do things.that would make your friends say wow.  but it probably wouldn't.start to work properly till about age 22, because most people haven't.had a big enough sample to pick friends from before then.sirenswhat you should not do, i think, is worry about the opinion of.anyone beyond your friends.  you shouldn't worry about prestige..prestige is the opinion of the rest of the world.  when you can ask.the opinions of people whose judgement you respect, what does it.add to consider the opinions of people you don't even know?.[4]this is easy advice to give.  it's hard to follow, especially when.you're young..[5].prestige is like a powerful magnet that warps.even your beliefs about what you enjoy.  it causes you to work not.on what you like, but what you'd like to like.that's what leads people to try to write novels, for example.  they.like reading novels.  they notice that people who write them win.nobel prizes.  what could be more wonderful, they think, than to.be a novelist?  but liking the idea of being a novelist is not.enough; you have to like the actual work of novel-writing if you're.going to be good at it; you have to like making up elaborate lies.prestige is just fossilized inspiration.  if you do anything well.enough, you'll make it prestigious.  plenty of things we now.consider prestigious were anything but at first.  jazz comes to.mind — though almost any established art form would do.   so just.do what you like, and let prestige take care of itself.prestige is especially dangerous to the ambitious.  if you want to.make ambitious people waste their time on errands, the way to do.it is to bait the hook with prestige.  that's the recipe for getting.people to give talks, write forewords, serve on committees, be.department heads, and so on.  it might be a good rule simply to.avoid any prestigious task. if it didn't suck, they wouldn't have.had to make it prestigious.similarly, if you admire two kinds of work equally, but one is more.prestigious, you should probably choose the other.  your opinions.about what's admirable are always going to be slightly influenced.by prestige, so if the two seem equal to you, you probably have.more genuine admiration for the less prestigious one.the other big force leading people astray is money.  money by itself.is not that dangerous.  when something pays well but is regarded.with contempt, like telemarketing, or prostitution, or personal.injury litigation, ambitious people aren't tempted by it.  that.kind of work ends up being done by people who are "just trying to.make a living."  (tip: avoid any field whose practitioners say.this.)  the danger is when money is combined with prestige, as in,.say, corporate law, or medicine.  a comparatively safe and prosperous.career with some automatic baseline prestige is dangerously tempting.to someone young, who hasn't thought much about what they really.like.the test of whether people love what they do is whether they'd do.it even if they weren't paid for it — even if they had to work at.another job to make a living.  how many corporate lawyers would do.their current work if they had to do it for free, in their spare.time, and take day jobs as waiters to support themselves?this test is especially helpful in deciding between different kinds.of academic work, because fields vary greatly in this respect.  most.good mathematicians would work on math even if there were no jobs.as math professors, whereas in the departments at the other end of.the spectrum, the availability of teaching jobs is the driver:.people would rather be english professors than work in ad agencies,.and publishing papers is the way you compete for such jobs.  math.would happen without math departments, but it is the existence of.english majors, and therefore jobs teaching them, that calls into.being all those thousands of dreary papers about gender and identity.in the novels of conrad.  no one does.that.kind of thing for fun.the advice of parents will tend to err on the side of money.  it.seems safe to say there are more undergrads who want to be novelists.and whose parents want them to be doctors than who want to be doctors.and whose parents want them to be novelists.  the kids think their.parents are "materialistic." not necessarily.  all parents tend to.be more conservative for their kids than they would for themselves,.simply because, as parents, they share risks more than rewards.  if.your eight year old son decides to climb a tall tree, or your teenage.daughter decides to date the local bad boy, you won't get a share.in the excitement, but if your son falls, or your daughter gets.pregnant, you'll have to deal with the consequences.disciplinewith such powerful forces leading us astray, it's not surprising.we find it so hard to discover what we like to work on.  most people.are doomed in childhood by accepting the axiom that work = pain..those who escape this are nearly all lured onto the rocks by prestige.or money.  how many even discover something they love to work on?.a few hundred thousand, perhaps, out of billions.it's hard to find work you love; it must be, if so few do.  so don't.underestimate this task.  and don't feel bad if you haven't succeeded.yet.  in fact, if you admit to yourself that you're discontented,.you're a step ahead of most people, who are still in denial.  if.you're surrounded by colleagues who claim to enjoy work that you.find contemptible, odds are they're lying to themselves.  not.necessarily, but probably.although doing great work takes less discipline than people think — because the way to do great work is to find something you like so.much that you don't have to force yourself to do it — finding.work you love does usually require discipline.   some people are.lucky enough to know what they want to do when they're 12, and just.glide along as if they were on railroad tracks.  but this seems the.exception.  more often people who do great things have careers with.the trajectory of a ping-pong ball.  they go to school to study a,.drop out and get a job doing b, and then become famous for c after.taking it up on the side.sometimes jumping from one sort of work to another is a sign of.energy, and sometimes it's a sign of laziness.  are you dropping.out, or boldly carving a new path?  you often can't tell yourself..plenty of people who will later do great things seem to be disappointments.early on, when they're trying to find their niche.is there some test you can use to keep yourself honest?  one is to.try to do a good job at whatever you're doing, even if you don't.like it.  then at least you'll know you're not using dissatisfaction.as an excuse for being lazy.  perhaps more importantly, you'll get.into the habit of doing things well.another test you can use is: always produce.  for example, if you.have a day job you don't take seriously because you plan to be a.novelist, are you producing?  are you writing pages of fiction,.however bad?  as long as you're producing, you'll know you're not.merely using the hazy vision of the grand novel you plan to write.one day as an opiate.  the view of it will be obstructed by the all.too palpably flawed one you're actually writing."always produce" is also a heuristic for finding the work you love..if you subject yourself to that constraint, it will automatically.push you away from things you think you're supposed to work on,.toward things you actually like.  "always produce" will discover.your life's work the way water, with the aid of gravity, finds the.hole in your roof.of course, figuring out what you like to work on doesn't mean you.get to work on it.  that's a separate question.  and if you're.ambitious you have to keep them separate: you have to make a conscious.effort to keep your ideas about what you want from being contaminated.by what seems possible..[6]it's painful to keep them apart, because it's painful to observe.the gap between them. so most people pre-emptively lower their.expectations.  for example, if you asked random people on the street.if they'd like to be able to draw like leonardo, you'd find most.would say something like "oh, i can't draw."  this is more a statement.of intention than fact; it means, i'm not going to try.  because.the fact is, if you took a random person off the street and somehow.got them to work as hard as they possibly could at drawing for the.next twenty years, they'd get surprisingly far.  but it would require.a great moral effort; it would mean staring failure in the eye every.day for years.  and so to protect themselves people say "i can't."another related line you often hear is that not everyone can do.work they love — that someone has to do the unpleasant jobs.  really?.how do you make them?  in the us the only mechanism for forcing.people to do unpleasant jobs is the draft, and that hasn't been.invoked for over 30 years.  all we can do is encourage people to.do unpleasant work, with money and prestige.if there's something people still won't do, it seems as if society.just has to make do without.  that's what happened with domestic.servants.  for millennia that was the canonical example of a job."someone had to do."  and yet in the mid twentieth century servants.practically disappeared in rich countries, and the rich have just.had to do without.so while there may be some things someone has to do, there's a good.chance anyone saying that about any particular job is mistaken..most unpleasant jobs would either get automated or go undone if no.one were willing to do them.two routesthere's another sense of "not everyone can do work they love".that's all too true, however.  one has to make a living, and it's.hard to get paid for doing work you love.  there are two routes to.that destination:.the organic route: as you become more eminent, gradually to.increase the parts of your job that you like at the expense of.those you don't.the two-job route: to work at things you don't like to get money.to work on things you do..the organic route is more common.  it happens naturally to anyone.who does good work.  a young architect has to take whatever work.he can get, but if he does well he'll gradually be in a position.to pick and choose among projects.  the disadvantage of this route.is that it's slow and uncertain.  even tenure is not real freedom.the two-job route has several variants depending on how long you.work for money at a time.  at one extreme is the "day job," where.you work regular hours at one job to make money, and work on what.you love in your spare time.  at the other extreme you work at.something till you make enough not to.have to work for money again.the two-job route is less common than the organic route, because.it requires a deliberate choice.  it's also more dangerous.  life.tends to get more expensive as you get older, so it's easy to get.sucked into working longer than you expected at the money job..worse still, anything you work on changes you.  if you work too.long on tedious stuff, it will rot your brain.  and the best paying.jobs are most dangerous, because they require your full attention.the advantage of the two-job route is that it lets you jump over.obstacles.  the landscape of possible jobs isn't flat; there are.walls of varying heights between different kinds of work..[7].the trick of maximizing the parts of your job that you like can get you.from architecture to product design, but not, probably, to music..if you make money doing one thing and then work on another, you.have more freedom of choice.which route should you take?  that depends on how sure you are of.what you want to do, how good you are at taking orders, how much.risk you can stand, and the odds that anyone will pay (in your.lifetime) for what you want to do.  if you're sure of the general.area you want to work in and it's something people are likely to.pay you for, then you should probably take the organic route.  but.if you don't know what you want to work on, or don't like to take.orders, you may want to take the two-job route, if you can stand.the risk.don't decide too soon.  kids who know early what they want to do.seem impressive, as if they got the answer to some math question.before the other kids.  they have an answer, certainly, but odds.are it's wrong.a friend of mine who is a quite successful doctor complains constantly.about her job.  when people applying to medical school ask her for.advice, she wants to shake them and yell "don't do it!"  (but she.never does.) how did she get into this fix?  in high school she.already wanted to be a doctor.  and she is so ambitious and determined.that she overcame every obstacle along the way — including,.unfortunately, not liking it.now she has a life chosen for her by a high-school kid.when you're young, you're given the impression that you'll get.enough information to make each choice before you need to make it..but this is certainly not so with work.  when you're deciding what.to do, you have to operate on ridiculously incomplete information..even in college you get little idea what various types of work are.like.  at best you may have a couple internships, but not all jobs.offer internships, and those that do don't teach you much more about.the work than being a batboy teaches you about playing baseball.in the design of lives, as in the design of most other things, you.get better results if you use flexible media.  so unless you're.fairly sure what you want to do, your best bet may be to choose a.type of work that could turn into either an organic or two-job.career.  that was probably part of the reason i chose computers..you can be a professor, or make a lot of money, or morph it into.any number of other kinds of work.it's also wise, early on, to seek jobs that let you do many different.things, so you can learn faster what various kinds of work are like..conversely, the extreme version of the two-job route is dangerous.because it teaches you so little about what you like.  if you work.hard at being a bond trader for ten years, thinking that you'll.quit and write novels when you have enough money, what happens when.you quit and then discover that you don't actually like writing.novels?most people would say, i'd take that problem.  give me a million.dollars and i'll figure out what to do.  but it's harder than it.looks.  constraints give your life shape.  remove them and most.people have no idea what to do: look at what happens to those who.win lotteries or inherit money.  much as everyone thinks they want.financial security, the happiest people are not those who have it,.but those who like what they do.  so a plan that promises freedom.at the expense of knowing what to do with it may not be as good as.it seems.whichever route you take, expect a struggle.  finding work you love.is very difficult.  most people fail.  even if you succeed, it's.rare to be free to work on what you want till your thirties or.forties.  but if you have the destination in sight you'll be more.likely to arrive at it.  if you know you can love work, you're in.the home stretch, and if you know what work you love, you're.practically there.notes[1].currently we do the opposite: when we make kids do boring work,.like arithmetic drills, instead of admitting frankly that it's.boring, we try to disguise it with superficial decorations.[2].one father told me about a related phenomenon: he found himself.concealing from his family how much he liked his work.  when he.wanted to go to work on a saturday, he found it easier to say that.it was because he "had to" for some reason, rather than admitting.he preferred to work than stay home with them.[3].something similar happens with suburbs.  parents move to suburbs.to raise their kids in a safe environment, but suburbs are so dull.and artificial that by the time they're fifteen the kids are convinced.the whole world is boring.[4].i'm not saying friends should be the only audience for your.work.  the more people you can help, the better.  but friends should.be your compass.[5].donald hall said young would-be poets were mistaken to be so.obsessed with being published.  but you can imagine what it would.do for a 24 year old to get a poem published in the new yorker..now to people he meets at parties he's a real poet.  actually he's.no better or worse than he was before, but to a clueless audience.like that, the approval of an official authority makes all the.difference.   so it's a harder problem than hall realizes.  the.reason the young care so much about prestige is that the people.they want to impress are not very discerning.[6].this is isomorphic to the principle that you should prevent.your beliefs about how things are from being contaminated by how.you wish they were.  most people let them mix pretty promiscuously..the continuing popularity of religion is the most visible index of.that.[7].a more accurate metaphor would be to say that the graph of jobs.is not very well connected.thanks to trevor blackwell, dan friedman, sarah harlin,.jessica livingston, jackie mcdonough, robert morris, peter norvig,.david sloo, and aaron swartz.for reading drafts of this.hebrew translationjapanese translationchinese translationrussian translationslovak translationitalian translationgerman translationspanish translationfrench translationhungarian translationportuguese translationserbian translationgreek translationvietnamese translation<eot><sot>good and bad procrastination.december 2005
the most impressive people i know are all terrible procrastinators..so could it be that procrastination isn't always bad?most people who write about procrastination write about how to cure.it.  but this is, strictly speaking, impossible.  there are an.infinite number of things you could be doing.  no matter what you.work on, you're not working on everything else.  so the question.is not how to avoid procrastination, but how to procrastinate well.there are three variants of procrastination, depending on what you.do instead of working on something: you could work on (a) nothing,.(b) something less important, or (c) something more important.  that.last type, i'd argue, is good procrastination.that's the "absent-minded professor," who forgets to shave, or eat,.or even perhaps look where he's going while he's thinking about.some interesting question.   his mind is absent from the everyday.world because it's hard at work in another.that's the sense in which the most impressive people i know are all.procrastinators.  they're type-c procrastinators:  they put off.working on small stuff to work on big stuff.what's "small stuff?"  roughly, work that has zero chance of being.mentioned in your obituary.  it's hard to say at the time what will.turn out to be your best work (will it be your magnum opus on.sumerian temple architecture, or the detective thriller you wrote.under a pseudonym?), but there's a whole class of tasks you can.safely rule out: shaving, doing your laundry, cleaning the house,.writing thank-you notes—anything that might be called an errand.good procrastination is avoiding errands to do real work.good in a sense, at least.  the people who want you to do the errands.won't think it's good.  but you probably have to annoy them if you.want to get anything done.  the mildest seeming people, if they.want to do real work, all have a certain degree of ruthlessness.when it comes to avoiding errands.some errands, like replying to letters, go away if you.ignore them (perhaps taking friends with them).  others, like mowing.the lawn, or filing tax returns, only get worse if you put them.off.  in principle it shouldn't work to put off the second kind of.errand.  you're going to have to do whatever it is eventually.  why.not (as past-due notices are always saying) do it now?the reason it pays to put off even those errands is that real work.needs two things errands don't: big chunks of time, and the.right mood.  if you get inspired by some project, it can be a net.win to blow off everything you were supposed to do for the next few.days to work on it.  yes, those errands may cost you more time when.you finally get around to them.  but if you get a lot done during.those few days, you will be net more productive.in fact, it may not be a difference in degree, but a difference in.kind.  there may be types of work that can only be done in long,.uninterrupted stretches, when inspiration hits, rather than dutifully.in scheduled little slices.  empirically it seems to be so.  when.i think of the people i know who've done great things, i don't.imagine them dutifully crossing items off to-do lists.  i imagine.them sneaking off to work on some new idea.conversely, forcing someone to perform errands synchronously is.bound to limit their productivity.  the cost of an interruption is.not just the time it takes, but that it breaks the time on either.side in half.  you probably only have to interrupt someone a couple.times a day before they're unable to work on hard problems at all.i've wondered a lot about why.startups are most productive at the.very beginning, when they're just a couple guys in an apartment..the main reason may be that there's no one to interrupt them yet..in theory it's good when the founders finally get enough money to.hire people to do some of the work for them.  but it may be better.to be overworked than interrupted.  once you dilute a startup with.ordinary office workers—with type-b procrastinators—the whole.company starts to resonate at their frequency.  they're interrupt-driven,.and soon you are too.errands are so effective at killing great projects that a lot of.people use them for that purpose.  someone who has decided to write.a novel, for example, will suddenly find that the house needs.cleaning. people who fail to write novels don't do it by sitting.in front of a blank page for days without writing anything.  they.do it by feeding the cat, going out to buy something they need for.their apartment, meeting a friend for coffee, checking email.  "i.don't have time to work," they say.  and they don't; they've made.sure of that.(there's also a variant where one has no place to work.  the cure.is to visit the places where famous people worked, and see how.unsuitable they were.)i've used both these excuses at one time or another.  i've learned.a lot of tricks for making myself work over the last 20 years, but.even now i don't win consistently.  some days i get real work done..other days are eaten up by errands.  and i know it's usually my.fault: i let errands eat up the day, to avoid.facing some hard problem.the most dangerous form of procrastination is unacknowledged type-b.procrastination, because it doesn't feel like procrastination..you're "getting things done."  just the wrong things.any advice about procrastination that concentrates on crossing.things off your to-do list is not only incomplete, but positively.misleading, if it doesn't consider the possibility that the to-do.list is itself a form of type-b procrastination.  in fact, possibility.is too weak a word.  nearly everyone's is.  unless you're working.on the biggest things you could be working on, you're type-b.procrastinating, no matter how much you're getting done.in his famous essay you and your research.(which i recommend to.anyone ambitious, no matter what they're working on), richard hamming.suggests that you ask yourself three questions:.what are the most important problems in your field? are you working on one of them? why not?.hamming was at bell labs when he started asking such questions.  in.principle anyone there ought to have been able to work on the most.important problems in their field.  perhaps not everyone can make.an equally dramatic mark on the world; i don't know; but whatever.your capacities, there are projects that stretch them.  so hamming's.exercise can be generalized to:.what's the best thing you could be working on, and why aren't.you?.most people will shy away from this question.  i shy away from it.myself; i see it there on the page and quickly move on to the next.sentence.  hamming used to go around actually asking people this,.and it didn't make him popular.  but it's a question anyone ambitious.should face.the trouble is, you may end up hooking a very big fish with this.bait.  to do good work, you need to do more than find good projects..once you've found them, you have to get yourself to work on them,.and that can be hard.  the bigger the problem, the harder it is to.get yourself to work on it.of course, the main reason people find it difficult to work on a.particular problem is that they don't.enjoy it.  when you're young,.especially, you often find yourself working on stuff you don't.really like-- because it seems impressive, for example, or because.you've been assigned to work on it.  most grad students are stuck.working on big problems they don't really like, and grad school is.thus synonymous with procrastination.but even when you like what you're working on, it's easier to get.yourself to work on small problems than big ones.  why?  why is it.so hard to work on big problems?  one reason is that you may not.get any reward in the forseeable future.  if you work on something.you can finish in a day or two, you can expect to have a nice feeling.of accomplishment fairly soon.  if the reward is indefinitely far.in the future, it seems less real.another reason people don't work on big projects is, ironically,.fear of wasting time.  what if they fail?  then all the time they.spent on it will be wasted.  (in fact it probably won't be, because.work on hard projects almost always leads somewhere.)but the trouble with big problems can't be just that they promise.no immediate reward and might cause you to waste a lot of time.  if.that were all, they'd be no worse than going to visit your in-laws..there's more to it than that.  big problems are terrifying..there's an almost physical pain in facing them.  it's like having.a vacuum cleaner hooked up to your imagination.   all your initial.ideas get sucked out immediately, and you don't have any more, and.yet the vacuum cleaner is still sucking.you can't look a big problem too directly in the eye. you have to.approach it somewhat obliquely.  but you have to adjust the angle.just right: you have to be facing the big problem directly enough.that you catch some of the excitement radiating from it, but not.so much that it paralyzes you.  you can tighten the angle once you.get going, just as a sailboat can sail closer to the wind once it.gets underway.if you want to work on big things, you seem to have to trick yourself.into doing it.  you have to work on small things that could grow.into big things, or work on successively larger things, or split.the moral load with collaborators.  it's not a sign of weakness to.depend on such tricks.  the very best work has been done this way.when i talk to people who've managed to make themselves work on big.things, i find that all blow off errands, and all feel guilty about.it.  i don't think they should feel guilty.  there's more to do.than anyone could.  so someone doing the best work they can is.inevitably going to leave a lot of errands undone.  it seems a.mistake to feel bad about that.i think the way to "solve" the problem of procrastination is to let.delight pull you instead of making a to-do list push you.  work on.an ambitious project you really enjoy, and sail as close to the.wind as you can, and you'll leave the right things undone.thanks to trevor blackwell, jessica livingston, and robert.morris for reading drafts of this.romanian translationrussian translationhebrew translationgerman translationportuguese translationitalian translationjapanese translationspanish translation<eot><sot>web 2.0.want to start a startup?  get funded by.y combinator..november 2005
does "web 2.0" mean anything?  till recently i thought it didn't,.but the truth turns out to be more complicated.  originally, yes,.it was meaningless.  now it seems to have acquired a meaning.  and.yet those who dislike the term are probably right, because if it.means what i think it does, we don't need it.i first heard the phrase "web 2.0" in the name of the web 2.0.conference in 2004.  at the time it was supposed to mean using "the.web as a platform," which i took to refer to web-based applications..[1]so i was surprised at a conference this summer when tim o'reilly.led a session intended to figure out a definition of "web 2.0.".didn't it already mean using the web as a platform?  and if it.didn't already mean something, why did we need the phrase at all?originstim says the phrase "web 2.0" first.arose in "a brainstorming session between.o'reilly and medialive international." what is medialive international?."producers of technology tradeshows and conferences," according to.their site.  so presumably that's what this brainstorming session.was about.  o'reilly wanted to organize a conference about the web,.and they were wondering what to call it.i don't think there was any deliberate plan to suggest there was a.new version of the web.  they just wanted to make the point.that the web mattered again.  it was a kind of semantic deficit.spending: they knew new things were coming, and the "2.0" referred.to whatever those might turn out to be.and they were right.  new things were coming.  but the new version.number led to some awkwardness in the short term.  in the process.of developing the pitch for the first conference, someone must have.decided they'd better take a stab at explaining what that "2.0".referred to.  whatever it meant, "the web as a platform" was at.least not too constricting.the story about "web 2.0" meaning the web as a platform didn't live.much past the first conference.  by the second conference, what."web 2.0" seemed to mean was something about democracy.  at least,.it did when people wrote about it online.  the conference itself.didn't seem very grassroots.  it cost $2800, so the only people who.could afford to go were vcs and people from big companies.and yet, oddly enough, ryan singel's article.about the conference in wired news spoke of "throngs of.geeks."  when a friend of mine asked ryan about this, it was news.to him.  he said he'd originally written something like "throngs.of vcs and biz dev guys" but had later shortened it just to "throngs,".and that this must have in turn been expanded by the editors into."throngs of geeks."  after all, a web 2.0 conference would presumably.be full of geeks, right?well, no.  there were about 7.  even tim o'reilly was wearing a.suit, a sight so alien i couldn't parse it at first.  i saw.him walk by and said to one of the o'reilly people "that guy looks.just like tim.""oh, that's tim.  he bought a suit.".i ran after him, and sure enough, it was.  he explained that he'd.just bought it in thailand.the 2005 web 2.0 conference reminded me of internet trade shows.during the bubble, full of prowling vcs looking for the next hot.startup.  there was that same odd atmosphere created by a large.number of people determined not to miss out.  miss out on what?.they didn't know.  whatever was going to happen—whatever web 2.0.turned out to be.i wouldn't quite call it "bubble 2.0" just because vcs are eager.to invest again.  the internet is a genuinely big deal.  the bust.was as much an overreaction as.the boom.  it's to be expected that once we started to pull out of.the bust, there would be a lot of growth in this area, just as there.was in the industries that spiked the sharpest before the depression.the reason this won't turn into a second bubble is that the ipo.market is gone.  venture investors.are driven by exit strategies.  the reason they were funding all.those laughable startups during the late 90s was that they hoped.to sell them to gullible retail investors; they hoped to be laughing.all the way to the bank.  now that route is closed.  now the default.exit strategy is to get bought, and acquirers are less prone to.irrational exuberance than ipo investors.  the closest you'll get.to bubble valuations is rupert murdoch paying $580 million for.myspace.  that's only off by a factor of 10 or so.1. ajaxdoes "web 2.0" mean anything more than the name of a conference.yet?  i don't like to admit it, but it's starting to.  when people.say "web 2.0" now, i have some idea what they mean.  and the fact.that i both despise the phrase and understand it is the surest proof.that it has started to mean something.one ingredient of its meaning is certainly ajax, which i can still.only just bear to use without scare quotes.  basically, what "ajax".means is "javascript now works."  and that in turn means that.web-based applications can now be made to work much more like desktop.ones.as you read this, a whole new generation.of software is being written to take advantage of ajax.  there.hasn't been such a wave of new applications since microcomputers.first appeared.  even microsoft sees it, but it's too late for them.to do anything more than leak "internal".documents designed to give the impression they're on top of this.new trend.in fact the new generation of software is being written way too.fast for microsoft even to channel it, let alone write their own.in house.  their only hope now is to buy all the best ajax startups.before google does.  and even that's going to be hard, because.google has as big a head start in buying microstartups as it did.in search a few years ago.  after all, google maps, the canonical.ajax application, was the result of a startup they bought.so ironically the original description of the web 2.0 conference.turned out to be partially right: web-based applications are a big.component of web 2.0.  but i'm convinced they got this right by.accident.  the ajax boom didn't start till early 2005, when google.maps appeared and the term "ajax" was coined.2. democracythe second big element of web 2.0 is democracy.  we now have several.examples to prove that amateurs can.surpass professionals, when they have the right kind of system to.channel their efforts.  wikipedia.may be the most famous.  experts have given wikipedia middling.reviews, but they miss the critical point: it's good enough.  and.it's free, which means people actually read it.  on the web, articles.you have to pay for might as well not exist.  even if you were.willing to pay to read them yourself, you can't link to them..they're not part of the conversation.another place democracy seems to win is in deciding what counts as.news.  i never look at any news site now except reddit..[2].i know if something major.happens, or someone writes a particularly interesting article, it.will show up there.  why bother checking the front page of any.specific paper or magazine?  reddit's like an rss feed for the whole.web, with a filter for quality.  similar sites include digg, a technology news site that's.rapidly approaching slashdot in popularity, and del.icio.us, the collaborative.bookmarking network that set off the "tagging" movement.  and whereas.wikipedia's main appeal is that it's good enough and free, these.sites suggest that voters do a significantly better job than human.editors.the most dramatic example of web 2.0 democracy is not in the selection.of ideas, but their production..i've noticed for a while that the stuff i read on individual people's.sites is as good as or better than the stuff i read in newspapers.and magazines.  and now i have independent evidence: the top links.on reddit are generally links to individual people's sites rather.than to magazine articles or news stories.my experience of writing.for magazines suggests an explanation.  editors.  they control the.topics you can write about, and they can generally rewrite whatever.you produce.  the result is to damp extremes.  editing yields 95th.percentile writing—95% of articles are improved by it, but 5% are.dragged down.  5% of the time you get "throngs of geeks."on the web, people can publish whatever they want.  nearly all of.it falls short of the editor-damped writing in print publications..but the pool of writers is very, very large.  if it's large enough,.the lack of damping means the best writing online should surpass.the best in print..[3].and now that the web has evolved mechanisms.for selecting good stuff, the web wins net.  selection beats damping,.for the same reason market economies beat centrally planned ones.even the startups are different this time around.  they are to the.startups of the bubble what bloggers are to the print media.  during.the bubble, a startup meant a company headed by an mba that was.blowing through several million dollars of vc money to "get big.fast" in the most literal sense.  now it means a smaller, younger, more technical group that just.decided to make something great.  they'll decide later if they want.to raise vc-scale funding, and if they take it, they'll take it on.their terms.3. don't maltreat usersi think everyone would agree that democracy and ajax are elements.of "web 2.0."  i also see a third: not to maltreat users.  during.the bubble a lot of popular sites were quite high-handed with users..and not just in obvious ways, like making them register, or subjecting.them to annoying ads.  the very design of the average site in the.late 90s was an abuse.  many of the most popular sites were loaded.with obtrusive branding that made them slow to load and sent the.user the message: this is our site, not yours.  (there's a physical.analog in the intel and microsoft stickers that come on some.laptops.)i think the root of the problem was that sites felt they were giving.something away for free, and till recently a company giving anything.away for free could be pretty high-handed about it.  sometimes it.reached the point of economic sadism: site owners assumed that the.more pain they caused the user, the more benefit it must be to them..the most dramatic remnant of this model may be at salon.com, where.you can read the beginning of a story, but to get the rest you have.sit through a movie.at y combinator we advise all the startups we fund never to lord.it over users.  never make users register, unless you need to in.order to store something for them.  if you do make users register,.never make them wait for a confirmation link in an email; in fact,.don't even ask for their email address unless you need it for some.reason.  don't ask them any unnecessary questions.  never send them.email unless they explicitly ask for it.  never frame pages you.link to, or open them in new windows.  if you have a free version.and a pay version, don't make the free version too restricted.  and.if you find yourself asking "should we allow users to do x?" just.answer "yes" whenever you're unsure.  err on the side of generosity.in how to start a startup i advised startups.never to let anyone fly under them, meaning never to let any other.company offer a cheaper, easier solution.  another way to fly low.is to give users more power.  let users do what they want.  if you.don't and a competitor does, you're in trouble.itunes is web 2.0ish in this sense.  finally you can buy individual.songs instead of having to buy whole albums.  the recording industry.hated the idea and resisted it as long as possible.  but it was.obvious what users wanted, so apple flew under the labels..[4].though really it might be better to describe itunes as web 1.5..web 2.0 applied to music would probably mean individual bands giving.away drmless songs for free.the ultimate way to be nice to users is to give them something for.free that competitors charge for.  during the 90s a lot of people.probably thought we'd have some working system for micropayments.by now.  in fact things have gone in the other direction.  the most.successful sites are the ones that figure out new ways to give stuff.away for free.  craigslist has largely destroyed the classified ad.sites of the 90s, and okcupid looks likely to do the same to the.previous generation of dating sites.serving web pages is very, very cheap.  if you can make even a.fraction of a cent per page view, you can make a profit.  and.technology for targeting ads continues to improve.  i wouldn't be.surprised if ten years from now ebay had been supplanted by an.ad-supported freebay (or, more likely, gbay).odd as it might sound, we tell startups that they should try to.make as little money as possible.  if you can figure out a way to.turn a billion dollar industry into a fifty million dollar industry,.so much the better, if all fifty million go to you.  though indeed,.making things cheaper often turns out to generate more money in the.end, just as automating things often turns out to generate more.jobs.the ultimate target is microsoft.  what a bang that balloon is going.to make when someone pops it by offering a free web-based alternative.to ms office..[5].who will?  google?  they seem to be taking their.time.  i suspect the pin will be wielded by a couple of 20 year old.hackers who are too naive to be intimidated by the idea.  (how hard.can it be?)the common threadajax, democracy, and not dissing users.  what do they all have in.common?  i didn't realize they had anything in common till recently,.which is one of the reasons i disliked the term "web 2.0" so much..it seemed that it was being used as a label for whatever happened.to be new—that it didn't predict anything.but there is a common thread.  web 2.0 means using the web the way.it's meant to be used.  the "trends" we're seeing now are simply.the inherent nature of the web emerging from under the broken models.that got imposed on it during the bubble.i realized this when i read an  interview with.joe kraus, the co-founder of excite..[6].excite really never got the business model right at all.  we fell.into the classic problem of how when a new medium comes out it.adopts the practices, the content, the business models of the old.medium—which fails, and then the more appropriate models get.figured out..it may have seemed as if not much was happening during the years.after the bubble burst.  but in retrospect, something was happening:.the web was finding its natural angle of repose.  the democracy.component, for example—that's not an innovation, in the sense of.something someone made happen.  that's what the web naturally tends.to produce.ditto for the idea of delivering desktop-like applications over the.web.  that idea is almost as old as the web.  but the first time.around it was co-opted by sun, and we got java applets.  java has.since been remade into a generic replacement for c++, but in 1996.the story about java was that it represented a new model of software..instead of desktop applications, you'd run java "applets" delivered.from a server.this plan collapsed under its own weight. microsoft helped kill it,.but it would have died anyway.  there was no uptake among hackers..when you find pr firms promoting.something as the next development platform, you can be sure it's.not.  if it were, you wouldn't need pr firms to tell you, because.hackers would already be writing stuff on top of it, the way sites.like busmonster used google maps as a.platform before google even meant it to be one.the proof that ajax is the next hot platform is that thousands of.hackers have spontaneously started building things on top.of it.  mikey likes it.there's another thing all three components of web 2.0 have in common..here's a clue.  suppose you approached investors with the following.idea for a web 2.0 startup:.sites like del.icio.us and flickr allow users to "tag" content.with descriptive tokens.  but there is also huge source of.implicit tags that they ignore: the text within web links..moreover, these links represent a social network connecting the.individuals and organizations who created the pages, and by using.graph theory we can compute from this network an estimate of the.reputation of each member.  we plan to mine the web for these.implicit tags, and use them together with the reputation hierarchy.they embody to enhance web searches..how long do you think it would take them on average to realize that.it was a description of google?google was a pioneer in all three components of web 2.0: their core.business sounds crushingly hip when described in web 2.0 terms,."don't maltreat users" is a subset of "don't be evil," and of course.google set off the whole ajax boom with google maps.web 2.0 means using the web as it was meant to be used, and google.does.  that's their secret.    they're sailing with the wind, instead of sitting.becalmed praying for a business model, like the print media, or.trying to tack upwind by suing their customers, like microsoft and.the record labels..[7]google doesn't try to force things to happen their way.  they try.to figure out what's going to happen, and arrange to be standing.there when it does.  that's the way to approach technology—and.as business includes an ever larger technological component, the.right way to do business.the fact that google is a "web 2.0" company shows that, while.meaningful, the term is also rather bogus.  it's like the word."allopathic."  it just means doing things right, and it's a bad.sign when you have a special word for that..notes[1].from the conference.site, june 2004: "while the first wave of the web was closely.tied to the browser, the second wave extends applications across.the web and enables a new generation of services and business.opportunities."  to the extent this means anything, it seems to be.about.web-based applications.[2].disclosure: reddit was funded by.y combinator.  but although.i started using it out of loyalty to the home team, i've become a.genuine addict.  while we're at it, i'm also an investor in.!msft, having sold all my shares earlier this year.[3].i'm not against editing. i spend more time editing than.writing, and i have a group of picky friends who proofread almost.everything i write.  what i dislike is editing done after the fact.by someone else.[4].obvious is an understatement.  users had been climbing in through.the window for years before apple finally moved the door.[5].hint: the way to create a web-based alternative to office may.not be to write every component yourself, but to establish a protocol.for web-based apps to share a virtual home directory spread across.multiple servers.  or it may be to write it all yourself.[6].in jessica livingston's.founders at.work.[7].microsoft didn't sue their customers directly, but they seem.to have done all they could to help sco sue them.thanks to trevor blackwell, sarah harlin, jessica livingston, peter.norvig, aaron swartz, and jeff weiner for reading drafts of this, and to the.guys at o'reilly and adaptive path for answering my questions.interview about web 2.0spanish translationgerman translationrussian translationjapanese translation.if you liked this, you may also like.hackers & painters.<eot><sot>how to fund a startup.want to start a startup?  get funded by.y combinator..november 2005
.venture funding works like gears.  a typical startup goes through.several rounds of funding, and at each round you want to take just.enough money to reach the speed where you can shift into the next.gear.few startups get it quite right.  many are underfunded.  a few are.overfunded, which is like trying to start driving in third gear.i think it would help founders to understand funding better—not.just the mechanics of it, but what investors are thinking.  i was.surprised recently when i realized that all the worst problems we.faced in our startup were due not to competitors, but investors..dealing with competitors was easy by comparison.i don't mean to suggest that our investors were nothing but a drag.on us.  they were helpful in negotiating deals, for example.  i.mean more that conflicts with investors are particularly nasty..competitors punch you in the jaw, but investors have you by the.balls.apparently our situation was not unusual.  and if trouble with.investors is one of the biggest threats to a startup, managing them.is one of the most important skills founders need to learn.let's start by talking about the five sources of startup funding..then we'll trace the life of a hypothetical (very fortunate) startup.as it shifts gears through successive rounds.friends and familya lot of startups get their first funding from friends and family..excite did, for example: after the founders graduated from college,.they borrowed $15,000 from their parents to start a company.  with.the help of some part-time jobs they made it last 18 months.if your friends or family happen to be rich, the line blurs between.them and angel investors.  at viaweb we got our first $10,000 of.seed money from our friend julian, but he was sufficiently rich.that it's hard to say whether he should be classified as a friend.or angel.  he was also a lawyer, which was great, because it meant.we didn't have to pay legal bills out of that initial small sum.the advantage of raising money from friends and family is that.they're easy to find.  you already know them.  there are three main.disadvantages: you mix together your business and personal life;.they will probably not be as well connected as angels or venture.firms; and they may not be accredited investors, which could.complicate your life later.the sec defines an "accredited investor" as someone with over a.million dollars in liquid assets or an income of over $200,000 a.year.  the regulatory burden is much lower if a company's shareholders.are all accredited investors.  once you take money from the general.public you're more restricted in what you can do..[1]a startup's life will be more complicated, legally, if any of the.investors aren't accredited.  in an ipo, it might not merely add.expense, but change the outcome. a lawyer i asked about it said:.when the company goes public, the sec will carefully study all.prior issuances of stock by the company and demand that it take.immediate action to cure any past violations of securities laws..those remedial actions can delay, stall or even kill the ipo..of course the odds of any given startup doing an ipo are small..but not as small as they might seem. a lot of startups that end up.going public didn't seem likely to at first. (who could have guessed.that the company wozniak and jobs started in their spare time selling.plans for microcomputers would yield one of the biggest ipos of the.decade?) much of the value of a startup consists of that tiny.probability multiplied by the huge outcome.it wasn't because they weren't accredited investors that i didn't.ask my parents for seed money, though.  when we were starting viaweb,.i didn't know about the concept of an accredited investor, and.didn't stop to think about the value of investors' connections..the reason i didn't take money from my parents was that i didn't.want them to lose it.consultinganother way to fund a startup is to get a job.  the best sort of.job is a consulting project in which you can build whatever software.you wanted to sell as a startup.  then you can gradually transform.yourself from a consulting company into a product company, and have.your clients pay your development expenses.this is a good plan for someone with kids, because it takes most.of the risk out of starting a startup.  there never has to be a.time when you have no revenues.  risk and reward are usually.proportionate, however: you should expect a plan that cuts the risk.of starting a startup also to cut the average return.  in this case,.you trade decreased financial risk for increased risk that your.company won't succeed as a startup.but isn't the consulting company itself a startup?  no, not generally..a company has to be more than small and newly founded to be a.startup.  there are millions of small businesses in america, but.only a few thousand are startups.  to be a startup, a company has.to be a product business, not a service business.  by which i mean.not that it has to make something physical, but that it has to have.one thing it sells to many people, rather than doing custom work.for individual clients.  custom work doesn't scale.  to be a startup.you need to be the band that sells a million copies of a song, not.the band that makes money by playing at individual weddings and bar.mitzvahs.the trouble with consulting is that clients have an awkward habit.of calling you on the phone.  most startups operate close to the.margin of failure, and the distraction of having to deal with clients.could be enough to put you over the edge.  especially if you have.competitors who get to work full time on just being a startup.so you have to be very disciplined if you take the consulting route..you have to work actively to prevent your company growing into a."weed tree," dependent on this source of easy but low-margin money..[2]indeed, the biggest danger of consulting may be that it gives you.an excuse for failure.  in a startup, as in grad school, a lot of.what ends up driving you are the expectations of your family and.friends.  once you start a startup and tell everyone that's what.you're doing, you're now on a path labelled "get rich or bust." you.now have to get rich, or you've failed.fear of failure is an extraordinarily powerful force.  usually it.prevents people from starting things, but once you publish some.definite ambition, it switches directions and starts working in.your favor.  i think it's a pretty clever piece of jiujitsu to set.this irresistible force against the slightly less immovable object.of becoming rich.  you won't have it driving you if your stated.ambition is merely to start a consulting company that you will one.day morph into a startup.an advantage of consulting, as a way to develop a product, is that.you know you're making something at least one customer wants.  but.if you have what it takes to start a startup you should have.sufficient vision not to need this crutch.angel investorsangels are individual rich people.  the word was first used.for backers of broadway plays, but now applies to individual investors.generally.  angels who've made money in technology are preferable,.for two reasons: they understand your situation, and they're a.source of contacts and advice.the contacts and advice can be more important than the money.  when.del.icio.us took money from investors, they took money from, among.others, tim o'reilly.  the amount he put in was small compared to.the vcs who led the round, but tim is a smart and influential guy.and it's good to have him on your side.you can do whatever you want with money from consulting or friends.and family.  with angels we're now talking about venture funding.proper, so it's time to introduce the concept of exit strategy..younger would-be founders are often surprised that investors expect.them either to sell the company or go public.  the reason is that.investors need to get their capital back.  they'll only consider.companies that have an exit strategy—meaning companies that could.get bought or go public.this is not as selfish as it sounds.  there are few large, private.technology companies.  those that don't fail all seem to get bought.or go public.  the reason is that employees are investors too—of.their time—and they want just as much to be able to cash out.  if.your competitors offer employees stock options that might make them.rich, while you make it clear you plan to stay private, your.competitors will get the best people. so the principle of an "exit".is not just something forced on startups by investors, but part of.what it means to be a startup.another concept we need to introduce now is valuation.  when someone.buys shares in a company, that implicitly establishes a value for.it.  if someone pays $20,000 for 10% of a company, the company is.in theory worth $200,000.  i say "in theory" because in early stage.investing, valuations are voodoo.  as a company gets more established,.its valuation gets closer to an actual market value.  but in a newly.founded startup, the valuation number is just an artifact of the.respective contributions of everyone involved.startups often "pay" investors who will help the company in some.way by letting them invest at low valuations.  if i had a startup.and steve jobs wanted to invest in it, i'd give him the stock for.$10, just to be able to brag that he was an investor.  unfortunately,.it's impractical (if not illegal) to adjust the valuation of the.company up and down for each investor.  startups' valuations are.supposed to rise over time.  so if you're going to sell cheap stock.to eminent angels, do it early, when it's natural for the company.to have a low valuation.some angel investors join together in syndicates.  any city where.people start startups will have one or more of them.  in boston the.biggest is the common.angels.  in the bay area it's the band.of angels.  you can find groups near you through the angel capital association..[3].however, most angel investors don't belong to these groups.  in.fact, the more prominent the angel, the less likely they are to.belong to a group.some angel groups charge you money to pitch your idea to them..needless to say, you should never do this.one of the dangers of taking investment from individual angels,.rather than through an angel group or investment firm, is that they.have less reputation to protect.  a big-name vc firm will not screw.you too outrageously, because other founders would avoid them if.word got out.  with individual angels you don't have this protection,.as we found to our dismay in our own startup.  in many startups'.lives there comes a point when you're at the investors'.mercy—when you're out of money and the only place to get more is your.existing investors.  when we got into such a scrape, our investors.took advantage of it in a way that a name-brand vc probably wouldn't.have.angels have a corresponding advantage, however: they're also not.bound by all the rules that vc firms are.  and so they can, for.example, allow founders to cash out partially in a funding round,.by selling some of their stock directly to the investors.  i think.this will become more common; the average founder is eager to do.it, and selling, say, half a million dollars worth of stock will.not, as vcs fear, cause most founders to be any less committed to.the business.the same angels who tried to screw us also let us do this, and so.on balance i'm grateful rather than angry.  (as in families, relations.between founders and investors can be complicated.)the best way to find angel investors is through personal introductions..you could try to cold-call angel groups near you, but angels, like.vcs, will pay more attention to deals recommended by someone they.respect.deal terms with angels vary a lot.  there are no generally accepted.standards.  sometimes angels' deal terms are as fearsome as vcs'..other angels, particularly in the earliest stages, will invest based.on a two-page agreement.angels who only invest occasionally may not themselves know what.terms they want.  they just want to invest in this startup.  what.kind of anti-dilution protection do they want?  hell if they know..in these situations, the deal terms tend to be random: the angel.asks his lawyer to create a vanilla agreement, and the terms end.up being whatever the lawyer considers vanilla.  which in practice.usually means, whatever existing agreement he finds lying around.his firm.  (few legal documents are created from scratch.)these heaps o' boilerplate are a problem for small startups, because.they tend to grow into the union of all preceding documents.  i.know of one startup that got from an angel investor what amounted.to a five hundred pound handshake: after deciding to invest, the.angel presented them with a 70-page agreement.  the startup didn't.have enough money to pay a lawyer even to read it, let alone negotiate.the terms, so the deal fell through.one solution to this problem would be to have the startup's lawyer.produce the agreement, instead of the angel's.  some angels might.balk at this, but others would probably welcome it.inexperienced angels often get cold feet when the time comes to.write that big check.  in our startup, one of the two angels in the.initial round took months to pay us, and only did after repeated.nagging from our lawyer, who was also, fortunately, his lawyer.it's obvious why investors delay.  investing in startups is risky!.when a company is only two months old, every day you wait.gives you 1.7% more data about their trajectory.  but the investor.is already being compensated for that risk in the low price of the.stock, so it is unfair to delay.fair or not, investors do it if you let them.  even vcs do it.  and.funding delays are a big distraction for founders, who ought to be.working on their company, not worrying about investors.  what's a.startup to do?  with both investors and acquirers, the only leverage.you have is competition.  if an investor knows you have other.investors lined up, he'll be a lot more eager to close-- and not.just because he'll worry about losing the deal, but because if other.investors are interested, you must be worth investing in.  it's the.same with acquisitions.  no one wants to buy you till someone else.wants to buy you, and then everyone wants to buy you.the key to closing deals is never to stop pursuing alternatives..when an investor says he wants to invest in you, or an acquirer.says they want to buy you, don't believe it till you get the.check.  your natural tendency when an investor says yes will.be to relax and go back to writing code.  alas, you can't; you have.to keep looking for more investors, if only to get this one to act..[4]seed funding firmsseed firms are like angels in that they invest relatively small.amounts at early stages, but like vcs in that they're companies.that do it as a business, rather than individuals making occasional.investments on the side.till now, nearly all seed firms have been so-called "incubators,".so y combinator gets called.one too, though the only thing we have in common is that we invest.in the earliest phase.according to the national association of business incubators, there.are about 800 incubators in the us.  this is an astounding number,.because i know the founders of a lot of startups, and i can't think.of one that began in an incubator.what is an incubator?  i'm not sure myself.  the defining quality.seems to be that you work in their space.  that's where the name."incubator" comes from.  they seem to vary a great deal in other.respects.  at one extreme is the sort of pork-barrel project where.a town gets money from the state government to renovate a vacant.building as a "high-tech incubator," as if it were merely lack of.the right sort of office space that had till now prevented the town.from becoming a.startup hub..at the other extreme are places like.idealab, which generates ideas for new startups internally and hires.people to work for them.the classic bubble incubators, most of which now seem to be dead,.were like vc firms except that they took a much bigger role in the.startups they funded.  in addition to working in their space, you.were supposed to use their office staff, lawyers, accountants, and.so on.whereas incubators tend (or tended) to exert more control than vcs,.y combinator exerts less..and we think it's better if startups operate out of their own.premises, however crappy, than the offices of their investors.  so.it's annoying that we keep getting called an "incubator," but perhaps.inevitable, because there's only one of us so far and no word yet.for what we are.  if we have to be called something, the obvious.name would be "excubator." (the name is more excusable if one.considers it as meaning that we enable people to escape cubicles.)because seed firms are companies rather than individual people,.reaching them is easier than reaching angels.  just go to their web.site and send them an email.  the importance of personal introductions.varies, but is less than with angels or vcs.the fact that seed firms are companies also means the investment.process is more standardized.  (this is generally true with angel.groups too.) seed firms will probably have set deal terms they use.for every startup they fund.  the fact that the deal terms are.standard doesn't mean they're favorable to you, but if other startups.have signed the same agreements and things went well for them, it's.a sign the terms are reasonable.seed firms differ from angels and vcs in that they invest exclusively.in the earliest phases—often when the company is still just an.idea.  angels and even vc firms occasionally do this, but they also.invest at later stages.the problems are different in the early stages.  for example, in.the first couple months a startup may completely redefine their idea.  so seed investors usually care less.about the idea than the people. this is true of all venture funding,.but especially so in the seed stage.like vcs, one of the advantages of seed firms is the advice they.offer.  but because seed firms operate in an earlier phase, they.need to offer different kinds of advice.  for example, a seed firm.should be able to give advice about how to approach vcs, which vcs.obviously don't need to do; whereas vcs should be able to give.advice about how to hire an "executive team," which is not an issue.in the seed stage.in the earliest phases, a lot of the problems are technical, so.seed firms should be able to help with technical as well as business.problems.seed firms and angel investors generally want to invest in the.initial phases of a startup, then hand them off to vc firms for the.next round.  occasionally startups go from seed funding direct to.acquisition, however, and i expect this to become increasingly.common.google has been aggressively pursuing this route, and now yahoo is too.  both.now compete directly with vcs.  and this is a smart move.  why wait.for further funding rounds to jack up a startup's price?  when a.startup reaches the point where vcs have enough information to.invest in it, the acquirer should have enough information to buy.it.  more information, in fact; with their technical depth, the.acquirers should be better at picking winners than vcs.venture capital fundsvc firms are like seed firms in that they're actual companies, but.they invest other people's money, and much larger amounts of it..vc investments average several million dollars.  so they tend to.come later in the life of a startup, are harder to get, and come.with tougher terms.the word "venture capitalist" is sometimes used loosely for any.venture investor, but there is a sharp difference between vcs and.other investors: vc firms are organized as funds, much like.hedge funds or mutual funds.  the fund managers, who are called."general partners," get about 2% of the fund annually as a management.fee, plus about 20% of the fund's gains.there is a very sharp dropoff in performance among vc firms, because.in the vc business both success and failure are self-perpetuating..when an investment scores spectacularly, as google did for kleiner.and sequoia, it generates a lot of good publicity for the vcs.  and.many founders prefer to take money from successful vc firms, because.of the legitimacy it confers.  hence a vicious (for the losers).cycle:  vc firms that have been doing badly will only get the deals.the bigger fish have rejected, causing them to continue to do badly.as a result, of the thousand or so vc funds in the us now, only.about 50 are likely to make money, and it is very hard for a new.fund to break into this group.in a sense, the lower-tier vc firms are a bargain for founders..they may not be quite as smart or as well connected as the big-name.firms, but they are much hungrier for deals.  this means you should.be able to get better terms from them.better how?  the most obvious is valuation: they'll take less of.your company.  but as well as money, there's power.  i think founders.will increasingly be able to stay on as ceo, and on terms that will.make it fairly hard to fire them later.the most dramatic change, i predict,.is that vcs will allow founders to.cash out partially by selling.some of their stock direct to the vc firm.  vcs have traditionally.resisted letting founders get anything before the ultimate "liquidity.event."  but they're also desperate for deals.  and since i know.from my own experience that the rule against buying stock from.founders is a stupid one, this is a natural place for things to.give as venture funding becomes more and more a seller's market.the disadvantage of taking money from less known firms is that.people will assume, correctly or not, that you were turned down by.the more exalted ones.  but, like where you went to college, the.name of your vc stops mattering once you have some performance to.measure.  so the more confident you are, the less you need a.brand-name vc.  we funded viaweb entirely with angel money; it never.occurred to us that the backing of a well known vc firm would make.us seem more impressive..[5]another danger of less known firms is that, like angels, they have.less reputation to protect.   i suspect it's the lower-tier firms.that are responsible for most of the tricks that have given vcs.such a bad reputation among hackers.  they are doubly hosed: the.general partners themselves are less able, and yet they have harder.problems to solve, because the top vcs skim off all the best deals,.leaving the lower-tier firms exactly the startups that are likely.to blow up.for example, lower-tier firms are much more likely to pretend to.want to do a deal with you just to lock you up while they decide.if they really want to.  one experienced cfo said:.the better ones usually will not give a term sheet unless they.really want to do a deal. the second or third tier firms have a.much higher break rate—it could be as high as 50%..it's obvious why: the lower-tier firms' biggest fear, when chance.throws them a bone, is that one of the big dogs will notice and.take it away.  the big dogs don't have to worry about that.falling victim to this trick could really hurt you.  as one.vc told me:.if you were talking to four vcs, told three of them that you.accepted a term sheet, and then have to call them back to tell.them you were just kidding, you are absolutely damaged goods..here's a partial solution: when a vc offers you a term sheet, ask.how many of their last 10 term sheets turned into deals.  this will.at least force them to lie outright if they want to mislead you.not all the people who work at vc firms are partners.  most firms.also have a handful of junior employees called something like.associates or analysts.  if you get a call from a vc.firm, go to their web site and check whether the person you talked.to is a partner.  odds are it will be a junior person; they scour.the web looking for startups their bosses could invest in.  the.junior people will tend to seem very positive about your company..they're not pretending; they want to believe you're a hot.prospect, because it would be a huge coup for them if their firm.invested in a company they discovered.  don't be misled by this.optimism.  it's the partners who decide, and they view things with.a colder eye.because vcs invest large amounts, the money comes with more.restrictions.  most only come into effect if the company gets into.trouble.  for example, vcs generally write it into the deal that.in any sale, they get their investment back first.  so if the company.gets sold at a low price, the founders could get nothing.  some vcs.now require that in any sale they get 4x their investment back.before the common stock holders (that is, you) get anything, but.this is an abuse that should be resisted.another difference with large investments is that the founders are.usually required to accept "vesting"—to surrender their stock and.earn it back over the next 4-5 years.  vcs don't want to invest.millions in a company the founders could just walk away from..financially, vesting has little effect, but in some situations it.could mean founders will have less power.  if vcs got de facto.control of the company and fired one of the founders, he'd lose any.unvested stock unless there was specific protection against this..so vesting would in that situation force founders to toe the line.the most noticeable change when a startup takes serious funding is.that the founders will no longer have complete control.  ten years.ago vcs used to insist that founders step down as ceo and hand the.job over to a business guy they supplied.  this is less the rule.now, partly because the disasters of the bubble showed that generic.business guys don't make such great ceos.but while founders will increasingly be able to stay on as ceo,.they'll have to cede some power, because the board of directors.will become more powerful.  in the seed stage, the board is generally.a formality; if you want to talk to the other board members, you.just yell into the next room.  this stops with vc-scale money.  in.a typical vc funding deal, the board of directors might be composed.of two vcs, two founders, and one outside person acceptable to both..the board will have ultimate power, which means the founders now.have to convince instead of commanding.this is not as bad as it sounds, however.  bill gates is in the.same position; he doesn't have majority control of microsoft; in.principle he also has to convince instead of commanding.  and yet.he seems pretty commanding, doesn't he?  as long as things are going.smoothly, boards don't interfere much.  the danger comes when there's.a bump in the road, as happened to steve jobs at apple.like angels, vcs prefer to invest in deals that come to them through.people they know.  so while nearly all vc funds have some address.you can send your business plan to, vcs privately admit the chance.of getting funding by this route is near zero.  one recently told.me that he did not know a single startup that got funded this way.i suspect vcs accept business plans "over the transom" more as a.way to keep tabs on industry trends than as a source of deals.  in.fact, i would strongly advise against mailing your business plan.randomly to vcs, because they treat this as evidence of laziness..do the extra work of getting personal introductions.  as one vc put.it:.i'm not hard to find.  i know a lot of people.  if you can't find.some way to reach me, how are you going to create a successful.company?.one of the most difficult problems for startup founders is deciding.when to approach vcs. you really only get one chance, because they.rely heavily on first impressions.  and you can't approach some and.save others for later, because (a) they ask who else you've talked.to and when and (b) they talk among themselves.  if you're talking.to one vc and he finds out that you were rejected by another several.months ago, you'll definitely seem shopworn.so when do you approach vcs?  when you can convince them.  if the.founders have impressive resumes and the idea isn't hard to understand,.you could approach vcs quite early.  whereas if the founders are.unknown and the idea is very novel, you might have to launch the.thing and show that users loved it before vcs would be convinced.if several vcs are interested in you, they will sometimes be willing.to split the deal between them.  they're more likely to do this if.they're close in the vc pecking order.  such deals may be a net win.for founders, because you get multiple vcs interested in your.success, and you can ask each for advice about the other.  one.founder i know wrote:.two-firm deals are great. it costs you a little more equity, but.being able to play the two firms off each other (as well as ask.one if the other is being out of line) is invaluable..when you do negotiate with vcs, remember that they've done this a.lot more than you have.  they've invested in dozens of startups,.whereas this is probably the first you've founded.  but don't let.them or the situation intimidate you. the average founder is smarter.than the average vc.  so just do what you'd do in any complex,.unfamiliar situation: proceed deliberately, and question anything.that seems odd.it is, unfortunately, common for vcs to put terms in an agreement.whose consequences surprise founders later, and also common for vcs.to defend things they do by saying that they're standard in the.industry.  standard, schmandard; the whole industry is only a few.decades old, and rapidly evolving.  the concept of "standard" is a.useful one when you're operating on a small scale (y combinator.uses identical terms for every deal because for tiny seed-stage.investments it's not worth the overhead of negotiating individual.deals), but it doesn't apply at the vc level.  on that scale, every.negotiation is unique.most successful startups get money from more than one of the preceding.five sources..[6].and, confusingly, the names of funding sources.also tend to be used as the names of different rounds.  the best.way to explain how it all works is to follow the case of a hypothetical.startup.stage 1: seed roundour startup begins when a group of three friends have an idea--.either an idea for something they might build, or simply the idea."let's start a company."  presumably they already have some source.of food and shelter.  but if you have food and shelter, you probably.also have something you're supposed to be working on: either.classwork, or a job.  so if you want to work full-time on a startup,.your money situation will probably change too.a lot of startup founders say they started the company without any.idea of what they planned to do.  this is actually less common than.it seems: many have to claim they thought of the idea after quitting.because otherwise their former employer would own it.the three friends decide to take the leap.  since most startups are.in competitive businesses, you not only want to work full-time on.them, but more than full-time.  so some or all of the friends quit.their jobs or leave school.  (some of the founders in a startup can.stay in grad school, but at least one has to make the company his.full-time job.)they're going to run the company out of one of their apartments at.first, and since they don't have any users they don't have to pay.much for infrastructure.  their main expenses are setting up the.company, which costs a couple thousand dollars in legal work and.registration fees, and the living expenses of the founders.the phrase "seed investment" covers a broad range.  to some vc firms.it means $500,000, but to most startups it means several months'.living expenses.  we'll suppose our group of friends start with.$15,000 from their friend's rich uncle, who they give 5% of the.company in return.  there's only common stock at this stage.  they.leave 20% as an options pool for later employees (but they set.things up so that they can issue this stock to themselves if they.get bought early and most is still unissued), and the three founders.each get 25%.by living really cheaply they think they can make the remaining.money last five months.  when you have five months' runway left,.how soon do you need to start looking for your next round?  answer:.immediately.  it takes time to find investors, and time (always.more than you expect) for the deal to close even after they say.yes.  so if our group of founders know what they're doing they'll.start sniffing around for angel investors right away.  but of course.their main job is to build version 1 of their software.the friends might have liked to have more money in this first phase,.but being slightly underfunded teaches them an important lesson..for a startup, cheapness is power.  the lower your costs, the more.options you have—not just at this stage, but at every point till.you're profitable.  when you have a high "burn rate," you're always.under time pressure, which means (a) you don't have time for your.ideas to evolve, and (b) you're often forced to take deals you don't.like.every startup's rule should be: spend little, and work fast.after ten weeks' work the three friends have built a prototype that.gives one a taste of what their product will do.  it's not what.they originally set out to do—in the process of writing it, they.had some new ideas.  and it only does a fraction of what the finished.product will do, but that fraction includes stuff that no one else.has done before.they've also written at least a skeleton business plan, addressing.the five fundamental questions: what they're going to do, why users.need it, how large the market is, how they'll make money, and who.the competitors are and why this company is going to beat them..(that last has to be more specific than "they suck" or "we'll work.really hard.")if you have to choose between spending time on the demo or the.business plan, spend most on the demo.   software is not only more.convincing, but a better way to explore ideas.stage 2: angel roundwhile writing the prototype, the group has been traversing their.network of friends in search of angel investors.  they find some.just as the prototype is demoable.  when they demo it, one of the.angels is willing to invest.  now the group is looking for more.money: they want enough to last for a year, and maybe to hire a.couple friends.  so they're going to raise $200,000.the angel agrees to invest at a pre-money valuation of $1 million..the company issues $200,000 worth of new shares to the angel; if.there were 1000 shares before the deal, this means 200 additional.shares.  the angel now owns 200/1200 shares, or a sixth of the.company, and all the previous shareholders' percentage ownership.is diluted by a sixth.  after the deal, the capitalization table.looks like this:.shareholder   shares    percent.-------------------------------.angel           200       16.7.uncle            50        4.2.each founder    250       20.8.option pool     200       16.7.----      -----.total          1200      100.to keep things simple, i had the angel do a straight cash for stock.deal.  in reality the angel might be more likely to make the.investment in the form of a convertible loan.  a convertible loan.is a loan that can be converted into stock later; it works out the.same as a stock purchase in the end, but gives the angel more.protection against being squashed by vcs in future rounds.who pays the legal bills for this deal?  the startup, remember,.only has a couple thousand left.  in practice this turns out to be.a sticky problem that usually gets solved in some improvised way..maybe the startup can find lawyers who will do it cheaply in the.hope of future work if the startup succeeds.  maybe someone has a.lawyer friend.  maybe the angel pays for his lawyer to represent.both sides.  (make sure if you take the latter route that the lawyer.is representing you rather than merely advising you, or his.only duty is to the investor.)an angel investing $200k would probably expect a seat on the board.of directors.  he might also want preferred stock, meaning a special.class of stock that has some additional rights over the common stock.everyone else has.  typically these rights include vetoes over major.strategic decisions, protection against being diluted in future.rounds, and the right to get one's investment back first if the.company is sold.some investors might expect the founders to accept vesting for a.sum this size, and others wouldn't.  vcs are more likely to require.vesting than angels.  at viaweb we managed to raise $2.5 million.from angels without ever accepting vesting, largely because we were.so inexperienced that we were appalled at the idea.  in practice.this turned out to be good, because it made us harder to push around.our experience was unusual; vesting is the norm for amounts that.size.  y combinator doesn't require vesting, because (a) we invest.such small amounts, and (b) we think it's unnecessary, and that the.hope of getting rich is enough motivation to keep founders at work..but maybe if we were investing millions we would think differently.i should add that vesting is also a way for founders to protect.themselves against one another.  it solves the problem of what to.do if one of the founders quits.  so some founders impose it on.themselves when they start the company.the angel deal takes two weeks to close, so we are now three months.into the life of the company.the point after you get the first big chunk of angel money will.usually be the happiest phase in a startup's life.  it's a lot like.being a postdoc: you have no immediate financial worries, and few.responsibilities.  you get to work on juicy kinds of work, like.designing software.  you don't have to spend time on bureaucratic.stuff, because you haven't hired any bureaucrats yet.  enjoy it.while it lasts, and get as much done as you can, because you will.never again be so productive.with an apparently inexhaustible sum of money sitting safely in the.bank, the founders happily set to work turning their prototype into.something they can release.  they hire one of their friends—at.first just as a consultant, so they can try him out—and then a.month later as employee #1. they pay him the smallest salary he can.live on, plus 3% of the company in restricted stock, vesting over.four years.  (so after this the option pool is down to 13.7%)..[7].they also spend a little money on a freelance graphic designer.how much stock do you give early employees?  that varies so much.that there's no conventional number.  if you get someone really.good, really early, it might be wise to give him as much stock as.the founders.  the one universal rule is that the amount of stock.an employee gets decreases polynomially with the age of the company..in other words, you get rich as a power of how early you were.  so.if some friends want you to come work for their startup, don't wait.several months before deciding.a month later, at the end of month four, our group of founders have.something they can launch.  gradually through word of mouth they.start to get users.  seeing the system in use by real users—people.they don't know—gives them lots of new ideas.  also they find.they now worry obsessively about the status of their server.  (how.relaxing founders' lives must have been when startups wrote visicalc.)by the end of month six, the system is starting to have a solid.core of features, and a small but devoted following.  people start.to write about it, and the founders are starting to feel like experts.in their field.we'll assume that their startup is one that could put millions more.to use.  perhaps they need to spend a lot on marketing, or build.some kind of expensive infrastructure, or hire highly paid salesmen..so they decide to start talking to vcs.  they get introductions to.vcs from various sources: their angel investor connects them with.a couple; they meet a few at conferences; a couple vcs call them.after reading about them.step 3: series a roundarmed with their now somewhat fleshed-out business plan and able.to demo a real, working system, the founders visit the vcs they.have introductions to.  they find the vcs intimidating and inscrutable..they all ask the same question: who else have you pitched to?  (vcs.are like high school girls: they're acutely aware of their position.in the vc pecking order, and their interest in a company is a.function of the interest other vcs show in it.)one of the vc firms says they want to invest and offers the founders.a term sheet.  a term sheet is a summary of what the deal terms.will be when and if they do a deal; lawyers will fill in the details.later.  by accepting the term sheet, the startup agrees to turn.away other vcs for some set amount of time while this firm does the."due diligence" required for the deal.  due diligence is the corporate.equivalent of a background check: the purpose is to uncover any.hidden bombs that might sink the company later, like serious design.flaws in the product, pending lawsuits against the company,.intellectual property issues, and so on.  vcs' legal and financial.due diligence is pretty thorough, but the technical due diligence.is generally a joke..[8]the due diligence discloses no ticking bombs, and six weeks later.they go ahead with the deal.  here are the terms: a $2 million.investment at a pre-money valuation of $4 million, meaning that.after the deal closes the vcs will own a third of the company (2 /.(4 + 2)).  the vcs also insist that prior to the deal the option.pool be enlarged by an additional hundred shares.  so the total.number of new shares issued is 750, and the cap table becomes:.shareholder   shares    percent.-------------------------------.vcs             650       33.3.angel           200       10.3.uncle            50        2.6.each founder    250       12.8.employee         36*       1.8     *unvested.option pool     264       13.5.----      -----.total          1950      100.this picture is unrealistic in several respects.  for example, while.the percentages might end up looking like this, it's unlikely that.the vcs would keep the existing numbers of shares.  in fact, every.bit of the startup's paperwork would probably be replaced, as if.the company were being founded anew.  also, the money might come.in several tranches, the later ones subject to various.conditions—though this is apparently more common in deals with lower-tier vcs.(whose lot in life is to fund more dubious startups) than with the.top firms.and of course any vcs reading this are probably rolling on the floor.laughing at how my hypothetical vcs let the angel keep his 10.3 of.the company.  i admit, this is the bambi version; in simplifying.the picture, i've also made everyone nicer.  in the real world, vcs.regard angels the way a jealous husband feels about his wife's.previous boyfriends.  to them the company didn't exist before they.invested in it..[9]i don't want to give the impression you have to do an angel round.before going to vcs.  in this example i stretched things out to.show multiple sources of funding in action. some startups could go.directly from seed funding to a vc round; several of the companies.we've funded have.the founders are required to vest their shares over four years, and.the board is now reconstituted to consist of two vcs, two founders,.and a fifth person acceptable to both. the angel investor cheerfully.surrenders his board seat.at this point there is nothing new our startup can teach us about.funding—or at least, nothing good..[10].the startup will almost.certainly hire more people at this point; those millions must be.put to work, after all.  the company may do additional funding.rounds, presumably at higher valuations.  they may if they are.extraordinarily fortunate do an ipo, which we should remember is.also in principle a round of funding, regardless of its de facto.purpose.  but that, if not beyond the bounds of possibility, is.beyond the scope of this article.deals fall throughanyone who's been through a startup will find the preceding portrait.to be missing something: disasters.  if there's one thing all.startups have in common, it's that something is always going wrong..and nowhere more than in matters of funding.for example, our hypothetical startup never spent more than half.of one round before securing the next.  that's more ideal than.typical.  many startups—even successful ones—come close to.running out of money at some point.  terrible things happen to.startups when they run out of money, because they're designed for.growth, not adversity.but the most unrealistic thing about the series of deals i've.described is that they all closed.  in the startup world, closing.is not what deals do.  what deals do is fall through.  if you're.starting a startup you would do well to remember that.  birds fly;.fish swim; deals fall through.why?  partly the reason deals seem to fall through so often is that.you lie to yourself.  you want the deal to close, so you start to.believe it will.  but even correcting for this, startup deals fall.through alarmingly often—far more often than, say, deals to buy.real estate.  the reason is that it's such a risky environment..people about to fund or acquire a startup are prone to wicked cases.of buyer's remorse.  they don't really grasp the risk they're taking.till the deal's about to close.  and then they panic.  and not just.inexperienced angel investors, but big companies too.so if you're a startup founder wondering why some angel investor.isn't returning your phone calls, you can at least take comfort in.the thought that the same thing is happening to other deals a hundred.times the size.the example of a startup's history that i've presented is like a.skeleton—accurate so far as it goes, but needing to be fleshed.out to be a complete picture.  to get a complete picture, just add.in every possible disaster.a frightening prospect?  in a way.  and yet also in a way encouraging..the very uncertainty of startups frightens away almost everyone..people overvalue stability—especially young.people, who ironically need it least.  and so in starting a startup,.as in any really bold undertaking, merely deciding to do it gets.you halfway there.  on the day of the race, most of the other runners.won't show up..notes[1].the aim of such regulations is to protect widows and orphans.from crooked investment schemes; people with a million dollars in.liquid assets are assumed to be able to protect themselves..the unintended consequence is that the investments that generate.the highest returns, like hedge funds, are available only to the.rich.[2].consulting is where product companies go to die.  ibm is the.most famous example.  so starting as a consulting company is like.starting out in the grave and trying to work your way up into the.world of the living.[3].if "near you" doesn't mean the bay area, boston, or seattle,.consider moving.  it's not a coincidence you haven't heard of many.startups from philadelphia.[4].investors are often compared to sheep.  and they are like sheep,.but that's a rational response to their situation.  sheep act the.way they do for a reason.  if all the other sheep head for a certain.field, it's probably good grazing.  and when a wolf appears, is he.going to eat a sheep in the middle of the flock, or one near the.edge?[5].this was partly confidence, and partly simple ignorance.  we.didn't know ourselves which vc firms were the impressive ones.  we.thought software was all that mattered.  but that turned out to be.the right direction to be naive in: it's much better to overestimate.than underestimate the importance of making a good product.[6].i've omitted one source: government grants.  i don't think.these are even worth thinking about for the average startup..governments may mean well when they set up grant programs to encourage.startups, but what they give with one hand they take away with the.other: the process of applying is inevitably so arduous, and the.restrictions on what you can do with the money so burdensome, that.it would be easier to take a job to get the money..you should be especially suspicious of grants whose purpose is some.kind of social engineering-- e.g. to encourage more startups to be.started in mississippi.  free money to start a startup in a place.where few succeed is hardly free.some government agencies run venture funding groups, which make.investments rather than giving grants.  for example, the cia runs.a venture fund called in-q-tel that is modelled on private sector.funds and apparently generates good returns.  they would probably.be worth approaching—if you don't mind taking money from the cia.[7].options have largely been replaced with restricted stock, which.amounts to the same thing.  instead of earning the right to buy.stock, the employee gets the stock up front, and earns the right.not to have to give it back.  the shares set aside for this purpose.are still called the "option pool."[8].first-rate technical people do not generally hire themselves.out to do due diligence for vcs.  so the most difficult.part for startup founders is often responding politely to the inane.questions of the "expert" they send to look you over.[9].vcs regularly wipe out angels by issuing arbitrary amounts of.new stock.  they seem to have a standard piece of casuistry for.this situation: that the angels are no longer working to help the.company, and so don't deserve to keep their stock.  this of course.reflects a willful misunderstanding of what investment means; like.any investor, the angel is being compensated for risks he took.earlier.  by a similar logic, one could argue that the vcs should.be deprived of their shares when the company goes public.[10].one new thing the company might encounter is a down.round, or a funding round at valuation lower than the previous.round.  down rounds are bad news; it is generally the common stock.holders who take the hit.  some of the most fearsome provisions in.vc deal terms have to do with down rounds—like "full ratchet.anti-dilution," which is as frightening as it sounds.founders are tempted to ignore these clauses, because they think.the company will either be a big success or a complete bust.  vcs.know otherwise: it's not uncommon for startups to have moments of.adversity before they ultimately succeed.  so it's worth negotiating.anti-dilution provisions, even though you don't think you need to,.and vcs will try to make you feel that you're being gratuitously.troublesome.thanks to sam altman, hutch fishman, steve huffman, jessica.livingston, sesha pratap, stan reiss, andy singleton, zak stone,.and aaron swartz for reading drafts of this.arabic translation<eot><sot>the venture capital squeeze.november 2005
in the next few years, venture capital funds will find themselves.squeezed from four directions.  they're already stuck with a seller's.market, because of the huge amounts they raised at the end of the.bubble and still haven't invested.  this by itself is not the end.of the world.  in fact, it's just a more extreme version of the.norm.in the vc business: too much money chasing too few deals.unfortunately, those few deals now want less and less money, because.it's getting so cheap to start a startup.  the four causes: open.source, which makes software free; moore's law, which makes hardware.geometrically closer to free; the web, which makes promotion free.if you're good; and better languages, which make development a lot.cheaper.when we started our startup in 1995, the first three were our biggest.expenses.  we had to pay $5000 for the netscape commerce server,.the only software that then supported secure http connections.  we.paid $3000 for a server with a 90 mhz processor and 32 meg of.memory.  and we paid a pr firm about $30,000 to promote our launch.now you could get all three for nothing.  you can get the software.for free; people throw away computers more powerful than our first.server; and if you make something good you can generate ten times.as much traffic by word of mouth online than our first pr firm got.through the print media.and of course another big change for the average startup is that.programming languages have improved-- or rather, the median language has.  at most startups ten years.ago, software development meant ten programmers writing code in.c++.  now the same work might be done by one or two using python.or ruby.during the bubble, a lot of people predicted that startups would.outsource their development to india.  i think a better model for.the future is david heinemeier hansson, who outsourced his development.to a more powerful language instead.  a lot of well-known applications.are now, like basecamp, written by just one programmer.  and one.guy is more than 10x cheaper than ten, because (a) he won't waste.any time in meetings, and (b) since he's probably a founder, he can.pay himself nothing.because starting a startup is so cheap, venture capitalists now.often want to give startups more money than the startups want to.take.  vcs like to invest several million at a time.  but as one.vc told me after a startup he funded would only take about half a.million, "i don't know what we're going to do.  maybe we'll just.have to give some of it back." meaning give some of the fund back.to the institutional investors who supplied it, because it wasn't.going to be possible to invest it all.into this already bad situation comes the third problem: sarbanes-oxley..sarbanes-oxley is a law, passed after the bubble, that drastically.increases the regulatory burden on public companies. and in addition.to the cost of compliance, which is at least two million dollars a.year, the law introduces frightening legal exposure for corporate.officers.  an experienced cfo i know said flatly: "i would not.want to be cfo of a public company now."you might think that responsible corporate governance is an area.where you can't go too far.  but you can go too far in any law, and.this remark convinced me that sarbanes-oxley must have.  this cfo.is both the smartest and the most upstanding money guy i know.  if.sarbanes-oxley deters people like him from being cfos of public.companies, that's proof enough that it's broken.largely because of sarbanes-oxley, few startups go public now.  for.all practical purposes, succeeding now equals getting bought.  which.means vcs are now in the business of finding promising little 2-3.man startups and pumping them up into companies that cost $100.million to acquire.   they didn't mean to be in this business; it's.just what their business has evolved into.hence the fourth problem: the acquirers have begun to realize they.can buy wholesale.  why should they wait for vcs to make the startups.they want more expensive?  most of what the vcs add, acquirers don't.want anyway.  the acquirers already have brand recognition and hr.departments.  what they really want is the software and the developers,.and that's what the startup is in the early phase: concentrated.software and developers.google, typically, seems to have been the first to figure this out.."bring us your startups early," said google's speaker at the startup school.  they're quite.explicit about it: they like to acquire startups at just the point.where they would do a series a round.  (the series a round is the.first round of real vc funding; it usually happens in the first.year.) it is a brilliant strategy, and one that other big technology.companies will no doubt try to duplicate.  unless they want to have.still more of their lunch eaten by google.of course, google has an advantage in buying startups: a lot of the.people there are rich, or expect to be when their options vest..ordinary employees find it very hard to recommend an acquisition;.it's just too annoying to see a bunch of twenty year olds get rich.when you're still working for salary.  even if it's the right thing.for your company to do.the solution(s)bad as things look now, there is a way for vcs to save themselves..they need to do two things, one of which won't surprise them, and.another that will seem an anathema.let's start with the obvious one: lobby to get sarbanes-oxley.loosened.  this law was created to prevent future enrons, not to.destroy the ipo market.  since the ipo market was practically dead.when it passed, few saw what bad effects it would have.  but now.that technology has recovered from the last bust, we can see clearly.what a bottleneck sarbanes-oxley has become.startups are fragile plants—seedlings, in fact.  these seedlings.are worth protecting, because they grow into the trees of the.economy.  much of the economy's growth is their growth.  i think.most politicians realize that.  but they don't realize just how.fragile startups are, and how easily they can become collateral.damage of laws meant to fix some other problem.still more dangerously, when you destroy startups, they make very.little noise.  if you step on the toes of the coal industry, you'll.hear about it.  but if you inadvertantly squash the startup industry,.all that happens is that the founders of the next google stay in.grad school instead of starting a company.my second suggestion will seem shocking to vcs: let founders cash.out partially in the series a round.  at the moment, when vcs invest.in a startup, all the stock they get is newly issued and all the.money goes to the company.  they could buy some stock directly from.the founders as well.most vcs have an almost religious rule against doing this.  they.don't want founders to get a penny till the company is sold or goes.public.  vcs are obsessed with control, and they worry that they'll.have less leverage over the founders if the founders have any money.this is a dumb plan.  in fact, letting the founders sell a little stock.early would generally be better for the company, because it would.cause the founders' attitudes toward risk to be aligned with the.vcs'.  as things currently work, their attitudes toward risk tend.to be diametrically opposed: the founders, who have nothing, would.prefer a 100% chance of $1 million to a 20% chance of $10 million,.while the vcs can afford to be "rational" and prefer the latter.whatever they say, the reason founders are selling their companies.early instead of doing series a rounds is that they get paid up.front.  that first million is just worth so much more than the.subsequent ones.  if founders could sell a little stock early,.they'd be happy to take vc money and bet the rest on a bigger.outcome.so why not let the founders have that first million, or at least.half million?  the vcs would get same number of shares for the.money.  so what if some of the money would go to the.founders instead of the company?some vcs will say this is.unthinkable—that they want all their money to be put to work.growing the company.  but the fact is, the huge size of current vc.investments is dictated by the structure.of vc funds, not the needs of startups.  often as not these large.investments go to work destroying the company rather than growing.it.the angel investors who funded our startup let the founders sell.some stock directly to them, and it was a good deal for everyone..the angels made a huge return on that investment, so they're happy..and for us founders it blunted the terrifying all-or-nothingness.of a startup, which in its raw form is more a distraction than a.motivator.if vcs are frightened at the idea of letting founders partially.cash out, let me tell them something still more frightening: you.are now competing directly with google..thanks to trevor blackwell, sarah harlin, jessica.livingston, and robert morris for reading drafts of this.romanian translationhebrew translationjapanese translation.if you liked this, you may also like.hackers & painters.<eot><sot>ideas for startups.want to start a startup?  get funded by.y combinator..october 2005
(this essay is derived from a talk at the 2005.startup school.)how do you get good ideas for.startups?  that's probably the number.one question people ask me.i'd like to reply with another question: why do people think it's.hard to come up with ideas for startups?that might seem a stupid thing to ask.  why do they think.it's hard?  if people can't do it, then it is hard, at least.for them.  right?well, maybe not.  what people usually say is not that they can't.think of ideas, but that they don't have any.  that's not quite the.same thing.  it could be the reason they don't have any is that.they haven't tried to generate them.i think this is often the case.  i think people believe that coming.up with ideas for startups is very hard-- that it must be.very hard-- and so they don't try do to it.  they assume ideas are.like miracles: they either pop into your head or they don't.i also have a theory about why people think this.  they overvalue.ideas.  they think creating a startup is just a matter of implementing.some fabulous initial idea.  and since a successful startup is worth.millions of dollars, a good idea is therefore a million dollar idea.if coming up with an idea for a startup equals coming up with a.million dollar idea, then of course it's going to seem hard.  too.hard to bother trying.  our instincts tell us something so valuable.would not be just lying around for anyone to discover.actually, startup ideas are not million dollar ideas, and here's.an experiment you can try to prove it: just try to sell one.  nothing.evolves faster than markets.  the fact that there's no market for.startup ideas suggests there's no demand.  which means, in the.narrow sense of the word, that startup ideas are worthless.questionsthe fact is, most startups end up nothing like the initial idea..it would be closer to the truth to say the main value of your initial.idea is that, in the process of discovering it's broken, you'll.come up with your real idea.the initial idea is just a starting point-- not a blueprint, but a.question.  it might help if they were expressed that way.  instead.of saying that your idea is to make a collaborative, web-based.spreadsheet, say: could one make a collaborative, web-based.spreadsheet?  a few grammatical tweaks, and a woefully incomplete.idea becomes a promising question to explore.there's a real difference, because an assertion provokes objections.in a way a question doesn't.  if you say: i'm going to build a.web-based spreadsheet, then critics-- the most dangerous of which.are in your own head-- will immediately reply that you'd be competing.with microsoft, that you couldn't give people the kind of ui they.expect, that users wouldn't want to have their data on your servers,.and so on.a question doesn't seem so challenging.  it becomes: let's try.making a web-based spreadsheet and see how far we get.  and everyone.knows that if you tried this you'd be able to make something.useful.  maybe what you'd end up with wouldn't even be a spreadsheet..maybe it would be some kind of new spreadsheet-like collaboration.tool that doesn't even have a name yet.  you wouldn't have thought.of something like that except by implementing your way toward it.treating a startup idea as a question changes what you're looking.for.  if an idea is a blueprint, it has to be right.  but if it's.a question, it can be wrong, so long as it's wrong in a way that.leads to more ideas.one valuable way for an idea to be wrong is to be only a partial.solution.  when someone's working on a problem that seems too.big, i always ask: is there some way to bite off some subset of the.problem, then gradually expand from there?  that will generally.work unless you get trapped on a local maximum, like 1980s-style.ai, or c.upwindso far, we've reduced the problem from thinking of a million dollar.idea to thinking of a mistaken question.  that doesn't seem so hard,.does it?to generate such questions you need two things: to be familiar with.promising new technologies, and to have the right kind of friends..new technologies are the ingredients startup ideas are made of, and.conversations with friends are the kitchen they're cooked in.universities have both, and that's why so many startups grow out.of them.  they're filled with new technologies, because they're.trying to produce research, and only things that are new count as.research.  and they're full of exactly the right kind of people to.have ideas with: the other students, who will be not only smart but.elastic-minded to a fault.the opposite extreme would be a well-paying but boring job at a big.company.  big companies are biased against new technologies, and.the people you'd meet there would be wrong too.in an essay i wrote for high school students,.i said a good rule of thumb was to stay upwind-- to.work on things that maximize your future options. the principle.applies for adults too, though perhaps it has to be modified to:.stay upwind for as long as you can, then cash in the potential.energy you've accumulated when you need to pay for kids.i don't think people consciously realize this, but one reason.downwind jobs like churning out java for a bank pay so well is.precisely that they are downwind.  the market price for that kind.of work is higher because it gives you fewer options for the future..a job that lets you work on exciting new stuff will tend to pay.less, because part of the compensation is in the form of the new.skills you'll learn.grad school is the other end of the spectrum from a coding job at.a big company: the pay's low but you spend most of your time working.on new stuff.  and of course, it's called "school," which makes.that clear to everyone, though in fact all jobs are some percentage.school.the right environment for having startup ideas need not be a.university per se.  it just has to be a situation with a large.percentage of school.it's obvious why you want exposure to new technology, but why do.you need other people?  can't you just think of new ideas yourself?.the empirical answer is: no.  even einstein needed people to bounce.ideas off.  ideas get developed in the process of explaining them.to the right kind of person.  you need that resistance, just.as a carver needs the resistance of the wood.this is one reason y combinator has a rule against investing in.startups with only one founder.  practically every successful company.has at least two.  and because startup founders work under great.pressure, it's critical they be friends.i didn't realize it till i was writing this, but that may help.explain why there are so few female startup founders.  i read on.the internet (so it must be true) that only 1.7% of vc-backed.startups are founded by women.  the percentage of female hackers.is small, but not that small.  so why the discrepancy?when you realize that successful startups tend to have multiple.founders who were already friends, a.possible explanation emerges.  people's best friends are likely to.be of the same sex, and if one group is a minority in some population,.pairs of them will be a minority squared..[1]doodlingwhat these groups of co-founders do together is more complicated.than just sitting down and trying to think of ideas.  i suspect the.most productive setup is a kind of together-alone-together sandwich..together you talk about some hard problem, probably getting nowhere..then, the next morning, one of you has an idea in the shower about.how to solve it.  he runs eagerly to to tell the others, and together.they work out the kinks.what happens in that shower?  it seems to me that ideas just pop.into my head.  but can we say more than that?taking a shower is like a form of meditation.  you're alert, but.there's nothing to distract you.  it's in a situation like this,.where your mind is free to roam, that it bumps into new ideas.what happens when your mind wanders?  it may be like doodling.  most.people have characteristic ways of doodling.  this habit is.unconscious, but not random: i found my doodles changed after i.started studying painting.  i started to make the kind of gestures.i'd make if i were drawing from life.  they were atoms of drawing,.but arranged randomly..[2]perhaps letting your mind wander is like doodling with ideas.  you.have certain mental gestures you've learned in your work, and when.you're not paying attention, you keep making these same gestures,.but somewhat randomly.  in effect, you call the same functions on.random arguments.  that's what a metaphor is: a function applied.to an argument of the wrong type.conveniently, as i was writing this, my mind wandered: would it be.useful to have metaphors in a programming language?  i don't know;.i don't have time to think about this.  but it's convenient because.this is an example of what i mean by habits of mind.  i spend a lot.of time thinking about language design, and my habit of always.asking "would x be useful in a programming language" just got.invoked.if new ideas arise like doodles, this would explain why you have.to work at something for a while before you have any.  it's not.just that you can't judge ideas till you're an expert in a field..you won't even generate ideas, because you won't have any habits.of mind to invoke.of course the habits of mind you invoke on some field don't have.to be derived from working in that field.  in fact, it's often.better if they're not.  you're not just looking for good ideas, but.for good new ideas, and you have a better chance of generating.those if you combine stuff from distant fields.  as hackers, one.of our habits of mind is to ask, could one open-source x?  for.example, what if you made an open-source operating system?  a fine.idea, but not very novel.  whereas if you ask, could you make an.open-source play?  you might be onto something.are some kinds of work better sources of habits of mind than others?.i suspect harder fields may be better sources, because to attack.hard problems you need powerful solvents.  i find math is a good.source of metaphors-- good enough that it's worth studying just for.that.  related fields are also good sources, especially when they're.related in unexpected ways.  everyone knows computer science and.electrical engineering are related, but precisely because everyone.knows it, importing ideas from one to the other doesn't yield great.profits.  it's like importing something from wisconsin to michigan..whereas (i claim) hacking and painting are.also related, in the sense that hackers and painters are both.makers,.and this source of new ideas is practically virgin territory.problemsin theory you could stick together ideas at random and see what you.came up with.  what if you built a peer-to-peer dating site?  would.it be useful to have an automatic book?  could you turn theorems.into a commodity?  when you assemble ideas at random like this,.they may not be just stupid, but semantically ill-formed.  what.would it even mean to make theorems a commodity?  you got me.  i.didn't think of that idea, just its name.you might come up with something useful this way, but i never have..it's like knowing a fabulous sculpture is hidden inside a block of.marble, and all you have to do is remove the marble that isn't part.of it.  it's an encouraging thought, because it reminds you there.is an answer, but it's not much use in practice because the search.space is too big.i find that to have good ideas i need to be working on some problem..you can't start with randomness.  you have to start with a problem,.then let your mind wander just far enough for new ideas to form.in a way, it's harder to see problems than their solutions.  most.people prefer to remain in denial about problems.  it's obvious.why: problems are irritating.  they're problems!  imagine if people.in 1700 saw their lives the way we'd see them.  it would have been.unbearable.  this denial is such a powerful force that, even when.presented with possible solutions, people often prefer to believe.they wouldn't work.i saw this phenomenon when i worked on spam filters.  in 2002, most.people preferred to ignore spam, and most of those who didn't.preferred to believe the heuristic filters then available were the.best you could do.i found spam intolerable, and i felt it had to be possible to.recognize it statistically.  and it turns out that was all you.needed to solve the problem.  the algorithm i used was ridiculously.simple.  anyone who'd really tried to solve the problem would have.found it.  it was just that no one had really tried to solve the.problem..[3]let me repeat that recipe: finding the problem intolerable and.feeling it must be possible to solve it.  simple as it seems, that's.the recipe for a lot of startup ideas.wealthso far most of what i've said applies to ideas in general.  what's.special about startup ideas?  startup ideas are ideas for companies,.and companies have to make money.  and the way to make money is to.make something people want.wealth is what people want.  i don't mean that as some kind of.philosophical statement; i mean it as a tautology.so an idea for a startup is an idea for something people want..wouldn't any good idea be something people want?  unfortunately.not.  i think new theorems are a fine thing to create, but there.is no great demand for them.  whereas there appears to be great.demand for celebrity gossip magazines.  wealth is defined democratically..good ideas and valuable ideas are not quite the same thing; the.difference is individual tastes.but valuable ideas are very close to good ideas, especially in.technology.  i think they're so close that you can get away with.working as if the goal were to discover good ideas, so long as, in.the final stage, you stop and ask: will people actually pay for.this?  only a few ideas are likely to make it that far and then get.shot down; rpn calculators might be one example.one way to make something people want is to look at stuff people.use now that's broken.  dating sites are a prime example.  they.have millions of users, so they must be promising something people.want.  and yet they work horribly.  just ask anyone who uses them..it's as if they used the worse-is-better approach but stopped after.the first stage and handed the thing over to marketers.of course, the most obvious breakage in the average computer user's.life is windows itself.  but this is a special case: you can't.defeat a monopoly by a frontal attack.  windows can and will be.overthrown, but not by giving people a better desktop os.  the way.to kill it is to redefine the problem as a superset of the current.one.  the problem is not, what operating system should people use.on desktop computers?  but how should people use applications?.there are answers to that question that don't even involve desktop.computers.everyone thinks google is going to solve this problem, but it is a.very subtle one, so subtle that a company as big as google might.well get it wrong.  i think the odds are better than 50-50 that the.windows killer-- or more accurately, windows transcender-- will.come from some little startup.another classic way to make something people want is to take a.luxury and make it into a commmodity.  people must want something.if they pay a lot for it.  and it is a very rare product that can't.be made dramatically cheaper if you try.this was henry ford's plan.  he made cars, which had been a luxury.item, into a commodity.  but the idea is much older than henry ford..water mills transformed mechanical power from a luxury into a.commodity, and they were used in the roman empire.  arguably.pastoralism transformed a luxury into a commodity.when you make something cheaper you can sell more of them.  but if.you make something dramatically cheaper you often get qualitative.changes, because people start to use it in different ways.  for.example, once computers get so cheap that most people can have one.of their own, you can use them as communication devices.often to make something dramatically cheaper you have to redefine.the problem.  the model t didn't have all the features previous.cars did.  it only came in black, for example.  but it solved the.problem people cared most about, which was getting from place to.place.one of the most useful mental habits i know i learned from michael.rabin: that the best way to solve a problem is often to redefine.it.  a lot of people use this technique without being consciously.aware of it, but rabin was spectacularly explicit.  you need a big.prime number?  those are pretty expensive.  how about if i give you.a big number that only has a 10 to the minus 100 chance of not being.prime?  would that do?  well, probably; i mean, that's probably.smaller than the chance that i'm imagining all this anyway.redefining the problem is a particularly juicy heuristic when you.have competitors, because it's so hard for rigid-minded people to.follow.  you can work in plain sight and they don't realize the.danger.  don't worry about us. we're just working on search.  do.one thing and do it well, that's our motto.making things cheaper is actually a subset of a more general.technique: making things easier.  for a long time it was most of.making things easier, but now that the things we build are so.complicated, there's another rapidly growing subset: making things.easier to use.this is an area where there's great room for improvement.  what you.want to be able to say about technology is: it just works.  how.often do you say that now?simplicity takes effort-- genius, even.  the average programmer.seems to produce ui designs that are almost willfully bad. i was.trying to use the stove at my mother's house a couple weeks ago..it was a new one, and instead of physical knobs it had buttons and.an led display.  i tried pressing some buttons i thought would cause.it to get hot, and you know what it said?  "err."  not even "error."."err."  you can't just say "err" to the user of a stove..you should design the ui so that errors are impossible.  and the.boneheads who designed this stove even had an example of such a ui.to work from: the old one.  you turn one knob to set the temperature.and another to set the timer.  what was wrong with that?  it just.worked.it seems that, for the average engineer, more options just means.more rope to hang yourself.  so if you want to start a startup, you.can take almost any existing technology produced by a big company,.and assume you could build something way easier to use.design for exitsuccess for a startup approximately equals getting bought.  you.need some kind of exit strategy, because you can't get the smartest.people to work for you without giving them options likely to be.worth something.  which means you either have to get bought or go.public, and the number of startups that go public is very small.if success probably means getting bought, should you make that a.conscious goal?  the old answer was no: you were supposed to pretend.that you wanted to create a giant, public company, and act surprised.when someone made you an offer.  really, you want to buy us? well,.i suppose we'd consider it, for the right price.i think things are changing.  if 98% of the time success means.getting bought, why not be open about it?  if 98% of the time you're.doing product development on spec for some big company, why not.think of that as your task?  one advantage of this approach is that.it gives you another source of ideas: look at big companies, think.what they should.be doing, and do it yourself.  even if.they already know it, you'll probably be done faster.just be sure to make something multiple acquirers will want.  don't.fix windows, because the only potential acquirer is microsoft, and.when there's only one acquirer, they don't have to hurry.  they can.take their time and copy you instead of buying you.  if you want.to get market price, work on something where there's competition.if an increasing number of startups are created to do product.development on spec, it will be a natural counterweight to monopolies..once some type of technology is captured by a monopoly, it will.only evolve at big company rates instead of startup rates, whereas.alternatives will evolve with especial speed.  a free market.interprets monopoly as damage and routes around it.the woz routethe most productive way to generate startup ideas is also the.most unlikely-sounding: by accident.  if you look at how famous.startups got started, a lot of them weren't initially supposed to.be startups.  lotus began with a program mitch kapor wrote for a.friend. apple got started because steve wozniak wanted to build.microcomputers, and his employer, hewlett-packard, wouldn't let him.do it at work.  yahoo began as david filo's personal collection of.links.this is not the only way to start startups.  you can sit down and.consciously come up with an idea for a company; we did.  but measured.in total market cap, the build-stuff-for-yourself model might be.more fruitful.  it certainly has to be the most fun way to come up.with startup ideas.  and since a startup ought to have multiple.founders who were already friends before they decided to start a.company, the rather surprising conclusion is that the best way to.generate startup ideas is to do what hackers do for fun: cook up.amusing hacks with your friends.it seems like it violates some kind of conservation law, but there.it is: the best way to get a "million dollar idea" is just to do.what hackers enjoy doing anyway..notes[1].this phenomenon may account for a number of discrepancies.currently blamed on various forbidden isms.  never attribute to.malice what can be explained by math.[2].a lot of classic abstract expressionism is doodling of this type:.artists trained to paint from life using the same gestures but.without using them to represent anything.  this explains why such.paintings are (slightly) more interesting than random marks would be.[3].bill yerazunis had solved the problem, but he got there by.another path.  he made a general-purpose file classifier so good.that it also worked for spam.one specific idearomanian translationjapanese translationtraditional chinese translationrussian translationarabic translation<eot><sot>what i did this summer.october 2005
the first summer founders program has just finished.  we were.surprised how well it went.  overall only about 10% of startups.succeed, but if i had to guess now, i'd predict three or four of.the eight startups we funded will make it.of the startups that needed further funding, i believe all have.either closed a round or are likely to soon.  two have already.turned down (lowball) acquisition offers.we would have been happy if just one of the eight seemed promising.by the end of the summer.  what's going on?  did some kind of anomaly.make this summer's applicants especially good?  we worry about that,.but we can't think of one.  we'll find out this winter.the whole summer was full of surprises.  the best was that the hypothesis we were testing seems to be.correct.  young hackers can start viable companies.  this is good.news for two reasons: (a) it's an encouraging thought, and (b) it.means that y combinator, which is predicated on the idea, is not.hosed.agemore precisely, the hypothesis was that success in a startup depends.mainly on how smart and energetic you are, and much less on how old.you are or how much business experience you have.  the results so.far bear this out.  the 2005 summer founders ranged in age from 18.to 28 (average 23), and there is no correlation between their ages.and how well they're doing.this should not really be surprising. bill gates and michael dell.were both 19 when they started the companies that made them famous..young founders are not a new phenomenon: the trend began as soon.as computers got cheap enough for college kids to afford them.another of our hypotheses was that you can start a startup on less.money than most people think.  other investors were surprised to.hear the most we gave any group was $20,000.  but we knew it was.possible to start on that little because we started viaweb on.$10,000.and so it proved this summer.  three months' funding is enough to.get into second gear.  we had a demo day for potential investors.ten weeks in, and seven of the eight groups had a prototype ready.by that time.  one, reddit, had.already launched, and were able to give a demo of their live site.a researcher who studied the sfp startups said the one thing they.had in common was that they all worked ridiculously hard.  people.this age are commonly seen as lazy.  i think in some cases it's not.so much that they lack the appetite for work, but that the work.they're offered is unappetizing.the experience of the sfp suggests that if you let motivated people.do real work, they work hard, whatever their age.  as one of the.founders said "i'd read that starting a startup consumed your life,.but i had no idea what that meant until i did it."i'd feel guilty if i were a boss making people work this hard.  but.we're not these people's bosses.  they're working on their own.projects.  and what makes them work is not us but their competitors..like good athletes, they don't work hard because the coach yells.at them, but because they want to win.we have less power than bosses, and yet the founders work harder.than employees.  it seems like a win for everyone.  the only catch.is that we get on average only about 5-7% of the upside, while an.employer gets nearly all of it.  (we're counting on it being 5-7%.of a much larger number.)as well as working hard, the groups all turned out to be extraordinarily.responsible.  i can't think of a time when one failed to do something.they'd promised to, even by being late for an appointment.  this.is another lesson the world has yet to learn.  one of the founders.discovered that the hardest part of arranging a meeting with.executives at a big cell phone carrier was getting a rental company.to rent him a car, because he was too young.i think the problem here is much the same as with the apparent.laziness of people this age.  they seem lazy because the work they're.given is pointless, and they act irresponsible because they're not.given any power.  some of them, anyway.  we only have a sample size.of about twenty, but it seems so far that if you let people in their.early twenties be their own bosses, they rise to the occasion.moralethe summer founders were as a rule very idealistic.  they also.wanted very much to get rich.  these qualities might seem incompatible,.but they're not.  these guys want to get rich, but they want to do.it by changing the world.  they wouldn't (well, seven of the eight.groups wouldn't) be interested in making money by speculating in.stocks.  they want to make something people use.i think this makes them more effective as founders.  as hard as.people will work for money, they'll work harder for a cause.  and.since success in a startup depends so much on motivation, the.paradoxical result is that the people likely to make the most money.are those who aren't in it just for the money.the founders of kiko, for example,.are working on an ajax calendar.  they want to get rich, but they.pay more attention to design than they would if that were their.only motivation.  you can tell just by looking at it.i never considered it till this summer, but this might be another.reason startups run by hackers tend to do better than those run by.mbas.  perhaps it's not just that hackers understand technology.better, but that they're driven by more powerful motivations..microsoft, as i've said before, is a dangerously misleading example..their mean corporate culture only works for monopolies..google is a better model.considering that the summer founders are the sharks in this ocean,.we were surprised how frightened most of them were of competitors..but now that i think of it, we were just as frightened when we.started viaweb.  for the first year, our initial reaction to news.of a competitor was always: we're doomed.  just as a hypochondriac.magnifies his symptoms till he's convinced he has some terrible.disease, when you're not used to competitors you magnify them into.monsters.here's a handy rule for startups: competitors are rarely as dangerous.as they seem.  most will self-destruct before you can destroy them..and it certainly doesn't matter how many of them there are, any.more than it matters to the winner of a marathon how many runners.are behind him."it's a crowded market," i remember one founder saying worriedly."are you the current leader?" i asked."yes.""is anyone able to develop software faster than you?""probably not.""well, if you're ahead now, and you're the fastest, then you'll.stay ahead.  what difference does it make how many others there.are?"another group was worried when they realized they had to rewrite.their software from scratch.  i told them it would be a bad sign.if they didn't.  the main function of your initial version is to.be rewritten.that's why we advise groups to ignore issues like scalability,.internationalization, and heavy-duty security at first. [1] i can.imagine an advocate of "best practices" saying these ought to be.considered from the start.  and he'd be right, except that they.interfere with the primary function of software in a startup: to.be a vehicle for experimenting with its own design.  having to.retrofit internationalization or scalability is a pain, certainly..the only bigger pain is not needing to, because your initial version.was too big and rigid to evolve into something users wanted.i suspect this is another reason startups beat big companies..startups can be irresponsible and release version 1s that are light.enough to evolve.  in big companies, all the pressure is in the.direction of over-engineering.what got learnedone thing we were curious about this summer was where these groups.would need help.  that turned out to vary a lot.  some we helped.with technical advice-- for example, about how to set up an application.to run on multiple servers.  most we helped with strategy questions,.like what to patent, and what to charge for and what to give away..nearly all wanted advice about dealing with future investors: how.much money should they take and what kind of terms should they.expect?however, all the groups quickly learned how to deal with stuff like.patents and investors.  these problems aren't intrinsically difficult,.just unfamiliar.it was surprising-- slightly frightening even-- how fast they.learned.  the weekend before the demo day for investors, we had a.practice session where all the groups gave their presentations..they were all terrible.  we tried to explain how to make them better,.but we didn't have much hope.  so on demo day i told the assembled.angels and vcs that these guys were hackers, not mbas, and so while.their software was good, we should not expect slick presentations.from them.the groups then proceeded to give fabulously slick presentations..gone were the mumbling recitations of lists of features.   it was.as if they'd spent the past week at acting school.  i still don't.know how they did it.perhaps watching each others' presentations helped them see what.they'd been doing wrong.  just as happens in college, the summer.founders learned a lot from one another-- maybe more than they.learned from us.  a lot of the problems they face are the same,.from dealing with investors to hacking javascript.i don't want to give the impression there were no problems this.summer.  a lot went wrong, as usually happens with startups.  one.group got an "exploding.term-sheet" from some vcs.  pretty much all the groups who had.dealings with big companies found that big companies do everything.infinitely slowly.  (this is to be expected.  if big companies.weren't incapable, there would be no room for startups to exist.).and of course there were the usual nightmares associated with.servers.  in short, the disasters this summer were just the usual childhood.diseases.  some of this summer's eight startups will.probably die eventually; it would be extraordinary if all eight.succeeded.  but what kills them will not be dramatic, external.threats, but a mundane, internal one: not getting enough done.so far, though, the news is all good.  in fact, we were surprised.how much fun the summer was for us.  the main reason was how much.we liked the founders.  they're so earnest and hard-working.  they.seem to like us too.  and this illustrates another advantage of.investing over hiring: our relationship with them is way better.than it would be between a boss and an employee.  y combinator ends.up being more like an older brother than a parent.i was surprised how much time i spent making introductions..fortunately i discovered that when a startup needed to talk to.someone, i could usually get to the right person by at most one.hop.  i remember wondering, how did my friends get to be so eminent?.and a second later realizing: shit, i'm forty.another surprise was that the three-month batch format,.which we were forced into by the constraints of the summer, turned.out to be an advantage.  when we started y combinator, we planned.to invest the way other venture firms do: as proposals came in,.we'd evaluate them and decide yes or no.  the sfp.was just an experiment to get things started.  but it worked so.well that we plan to do.all.our investing this way, one cycle in.the summer and one in winter.  it's more efficient for us, and.better for the startups too.several groups said our weekly dinners saved them from a common.problem afflicting startups: working so hard that one has no social.life.  (i remember that part all too well.)  this way, they were.guaranteed a social event at least once a week.independencei've heard y combinator described as an "incubator."  actually we're.the opposite: incubators exert more control than ordinary vcs, and.we make a point of exerting less.  among other things, incubators.usually make you work in their office-- that's where the.word "incubator" comes from.  that seems the wrong model.  if.investors get too involved, they smother one of the most powerful.forces in a startup: the feeling that it's your own company.incubators were conspicuous failures during the bubble.  there's.still debate about whether this was because of the bubble, or because.they're a bad idea.  my vote is they're a bad idea.  i think they.fail because they select for the wrong people.  when we were starting.a startup, we would never have taken funding from an "incubator.".we can find office space, thanks; just give us the money.  and.people with that attitude are the ones likely to succeed in startups.indeed, one quality all the founders shared this summer was a spirit.of independence.  i've been wondering about that.  are some people.just a lot more independent than others, or would everyone be this.way if they were allowed to?as with most nature/nurture questions, the answer is probably: some.of each.  but my main conclusion from the summer is that there's.more environment in the mix than most people realize.  i could see.that from how the founders' attitudes changed during the.summer.  most were emerging from twenty or so years of being told.what to do.  they seemed a little surprised at having total freedom..but they grew into it really quickly; some of these guys now seem.about four inches taller (metaphorically) than they did at the.beginning of the summer.when we asked the summer founders what surprised them most about.starting a company, one said "the most shocking thing is that it.worked."it will take more experience to know for sure, but my guess is that.a lot of hackers could do this-- that if you put people in a position.of independence, they develop the qualities they need.  throw them.off a cliff, and most will find on the way down that they have.wings.the reason this is news to anyone is that the same forces work in.the other direction too. most hackers are.employees, and this molds.you into someone to whom starting a startup seems impossible as.surely as starting a startup molds you into someone who can handle.it.if i'm right, "hacker" will mean something different in twenty years.than it does now. increasingly it will mean the people who run the.company.  y combinator is just accelerating a process that would.have happened anyway.  power is shifting from the people who deal.with money to the people who create technology, and if our experience.this summer is any guide, this will be a good thing.notes[1] by heavy-duty security i mean efforts to protect against truly.determined attackers.the image.shows us, the 2005 summer founders, and smartleaf.co-founders mark nitzberg and olin shivers at the 30-foot table.kate courteau designed for us. photo by alex lewin.thanks to sarah harlin, steve huffman, jessica livingston,.zak stone, and aaron swartz for reading drafts of this..romanian translationjapanese translation<eot><sot>inequality and risk.august 2005
(this essay is derived from a talk at defcon 2005.)suppose you wanted to get rid of economic inequality.  there are.two ways to do it: give money to the poor, or take it away from the.rich.  but they amount to the same thing, because if you want to.give money to the poor, you have to get it from somewhere.  you.can't get it from the poor, or they just end up where they started..you have to get it from the rich.there is of course a way to make the poor richer without simply.shifting money from the rich.  you could help the poor become more.productive — for example, by improving access to education.  instead.of taking money from engineers and giving it to checkout clerks,.you could enable people who would have become checkout clerks to.become engineers.this is an excellent strategy for making the poor richer.  but the.evidence of the last 200 years shows that it doesn't reduce economic.inequality, because it makes the rich richer too.  if there.are more engineers, then there are more opportunities to hire them.and to sell them things.  henry ford couldn't have made a fortune.building cars in a society in which most people were still subsistence.farmers; he would have had neither workers nor customers.if you want to reduce economic inequality instead of just improving.the overall standard of living, it's not enough just to raise up.the poor.  what if one of your newly minted engineers gets ambitious.and goes on to become another bill gates?  economic inequality will.be as bad as ever.  if you actually want to compress the gap between.rich and poor, you have to push down on the top as well as pushing.up on the bottom.how do you push down on the top?  you could try to decrease the.productivity of the people who make the most money: make the best.surgeons operate with their left hands, force popular actors to.overeat, and so on.  but this approach is hard to implement.  the.only practical solution is to let people do the best work they can,.and then (either by taxation or by limiting what they can charge).to confiscate whatever you deem to be surplus.so let's be clear what reducing economic inequality means.  it is.identical with taking money from the rich.when you transform a mathematical expression into another form, you.often notice new things.  so it is in this case.  taking money from.the rich turns out to have consequences one might not foresee when.one phrases the same idea in terms of "reducing inequality."the problem is, risk and reward have to be proportionate.  a bet.with only a 10% chance of winning has to pay more than one with a.50% chance of winning, or no one will take it.  so if you lop off.the top of the possible rewards, you thereby decrease people's.willingness to take risks.transposing into our original expression, we get: decreasing economic.inequality means decreasing the risk people are willing to take.there are whole classes of risks that are no longer worth taking.if the maximum return is decreased.  one reason high tax rates are.disastrous is that this class of risks includes starting new.companies.investorsstartups are intrinsically risky.  a startup.is like a small boat.in the open sea.  one big wave and you're sunk.  a competing product,.a downturn in the economy, a delay in getting funding or regulatory.approval, a patent suit, changing technical standards, the departure.of a key employee, the loss of a big account — any one of these can.destroy you overnight.  it seems only about 1 in 10 startups succeeds..[1]our startup paid its first round of outside investors 36x.  which.meant, with current us tax rates, that it made sense to invest in.us if we had better than a 1 in 24 chance of succeeding.  that.sounds about right.  that's probably roughly how we looked when we.were a couple of nerds with no business experience operating out.of an apartment.if that kind of risk doesn't pay, venture investing, as we know it,.doesn't happen.that might be ok if there were other sources of capital for new.companies.  why not just have the government, or some large.almost-government organization like fannie mae, do the venture.investing instead of private funds?i'll tell you why that wouldn't work. because then you're asking.government or almost-government employees to do the one thing they.are least able to do: take risks.as anyone who has worked for the government knows, the important.thing is not to make the right choices, but to make choices that.can be justified later if they fail.  if there is a safe option,.that's the one a bureaucrat will choose.   but that is exactly the.wrong way to do venture investing.  the nature of the business means.that you want to make terribly risky choices, if the upside looks.good enough.vcs are currently.paid in a way that makes them.focus on the upside:.they get a percentage of the fund's gains.  and that helps overcome.their understandable fear of investing in a company run by nerds.who look like (and perhaps are) college students.if vcs weren't allowed to get rich, they'd behave like bureaucrats..without hope of gain, they'd have only fear of loss.  and so they'd.make the wrong choices.  they'd turn down the nerds in favor of the.smooth-talking mba in a suit, because that investment would be.easier to justify later if it failed.foundersbut even if you could somehow redesign venture funding to work.without allowing vcs to become rich, there's another kind of investor.you simply cannot replace: the startups' founders and early employees.what they invest is their time and ideas.  but these are equivalent.to money; the proof is that investors are willing (if forced) to.treat them as interchangeable, granting the same status to "sweat.equity" and the equity they've purchased with cash.the fact that you're investing time doesn't change the relationship.between risk and reward.  if you're going to invest your time in.something with a small chance of succeeding, you'll only do it if.there is a proportionately large payoff..[2].if large payoffs aren't allowed, you may as well play it safe.like many startup founders, i did it to get rich.  but not because.i wanted to buy expensive things.  what i wanted was security.  i.wanted to make enough money that i didn't have to worry about money..if i'd been forbidden to make enough from a startup to do this, i.would have sought security by some other means: for example, by.going to work for a big, stable organization from which it would.be hard to get fired.  instead of busting my ass in a startup, i.would have tried to get a nice, low-stress job at a big research.lab, or tenure at a university.that's what everyone does in societies where risk isn't rewarded..if you can't ensure your own security, the next best thing is to.make a nest for yourself in some large organization where your.status depends mostly on seniority..[3]even if we could somehow replace investors, i don't see how we could.replace founders.  investors mainly contribute money, which in.principle is the same no matter what the source.  but the founders.contribute ideas.  you can't replace those.let's rehearse the chain of argument so far.  i'm heading for a.conclusion to which many readers will have to be dragged kicking.and screaming, so i've tried to make each link unbreakable.  decreasing.economic inequality means taking money from the rich.  since risk.and reward are equivalent, decreasing potential rewards automatically.decreases people's appetite for risk.  startups are intrinsically.risky.  without the prospect of rewards proportionate to the risk,.founders will not invest their time in a startup.  founders are.irreplaceable.  so eliminating economic inequality means eliminating.startups.economic inequality is not just a consequence of startups..it's the engine that drives them, in the same way a fall of water.drives a water mill.  people start startups in the hope of becoming.much richer than they were before.  and if your society tries to.prevent anyone from being much richer than anyone else, it will.also prevent one person from being much richer at t2 than t1.growththis argument applies proportionately.  it's not just that if you.eliminate economic inequality, you get no startups.  to the extent.you reduce economic inequality, you decrease the number of startups..[4].increase taxes, and willingness to take risks decreases in.proportion.and that seems bad for everyone.  new technology and new jobs both.come disproportionately from new companies.  indeed, if you don't.have startups, pretty soon you won't have established companies.either, just as, if you stop having kids, pretty soon you won't.have any adults.it sounds benevolent to say we ought to reduce economic inequality..when you phrase it that way, who can argue with you?  inequality.has to be bad, right?  it sounds a good deal less benevolent to say.we ought to reduce the rate at which new companies are founded..and yet the one implies the other.indeed, it may be that reducing investors' appetite for risk doesn't.merely kill off larval startups, but kills off the most promising.ones especially.  startups yield faster growth at greater risk than.established companies.  does this trend also hold among startups?.that is, are the riskiest startups the ones that generate most.growth if they succeed?  i suspect the answer is yes.  and that's.a chilling thought, because it means that if you cut investors'.appetite for risk, the most beneficial startups are the first to.go.not all rich people got that way from startups, of course.  what.if we let people get rich by starting startups, but taxed away all.other surplus wealth?  wouldn't that at least decrease inequality?less than you might think.  if you made it so that people could.only get rich by starting startups, people who wanted to get rich.would all start startups.  and that might be a great thing.  but i.don't think it would have much effect on the distribution of wealth..people who want to get rich will do whatever they have to.  if.startups are the only way to do it, you'll just get far more people.starting startups.  (if you write the laws very carefully, that is..more likely, you'll just get a lot of people doing things that can.be made to look on paper like startups.)if we're determined to eliminate economic inequality, there is still.one way out: we could say that we're willing to go ahead and do.without startups.  what would happen if we did?at a minimum, we'd have to accept lower rates of technological.growth.  if you believe that large, established companies could.somehow be made to develop new technology as fast as startups, the.ball is in your court to explain how.  (if you can come up with a.remotely plausible story, you can make a fortune writing business.books and consulting for large companies.).[5]ok, so we get slower growth.  is that so bad?  well, one reason.it's bad in practice is that other countries might not agree to.slow down with us.  if you're content to develop new technologies.at a slower rate than the rest of the world, what happens is that.you don't invent anything at all.  anything you might discover has.already been invented elsewhere.  and the only thing you can offer.in return is raw materials and cheap labor.  once you sink that.low, other countries can do whatever they like with you: install.puppet governments, siphon off your best workers, use your women.as prostitutes, dump their toxic waste on your territory — all the.things we do to poor countries now.  the only defense is to isolate.yourself, as communist countries did in the twentieth century.  but.the problem then is, you have to become a police state to enforce.it..wealth and poweri realize startups are not the main target of those who want to.eliminate economic inequality.   what they really dislike is the.sort of wealth that becomes self-perpetuating through an alliance.with power. for example, construction firms that fund politicians'.campaigns in return for government contracts, or rich parents who.get their children into good colleges by sending them to expensive.schools designed for that purpose.  but if you try to attack this type of wealth.through economic policy, it's hard to hit without destroying.startups as collateral damage.the problem here is not wealth, but corruption.  so why not go after.corruption?we don't need to prevent people from being rich if we can prevent.wealth from translating into power.  and there has been progress.on that front.  before he died of drink in 1925, commodore vanderbilt's.wastrel grandson reggie ran down pedestrians on five separate.occasions, killing two of them.  by 1969, when ted kennedy drove.off the bridge at chappaquiddick, the limit seemed to be down to.one.  today it may well be zero.  but what's changed is not variation.in wealth.  what's changed is the ability to translate wealth into.power.how do you break the connection between wealth and power?  demand.transparency.  watch closely how power is exercised, and demand an.account of how decisions are made.  why aren't all police interrogations.videotaped?  why did 36% of princeton's class of 2007 come from.prep schools, when only 1.7% of american kids attend them?  why did.the us really invade iraq?  why don't government officials disclose.more about their finances, and why only during their term of office?a friend of mine who knows a lot about computer security says the.single most important step is to log everything.  back when he was.a kid trying to break into computers, what worried him most was the.idea of leaving a trail.  he was more inconvenienced by the need.to avoid that than by any obstacle deliberately put in his path.like all illicit connections, the connection between wealth and.power flourishes in secret.  expose all transactions, and you will.greatly reduce it.  log everything.  that's a strategy that already.seems to be working, and it doesn't have the side effect of making.your whole country poor.i don't think many people realize there is a connection between.economic inequality and risk.  i didn't fully grasp it till recently..i'd known for years of course that if one didn't score in a startup,.the other alternative was to get a cozy, tenured research job.  but.i didn't understand the equation governing my behavior.  likewise,.it's obvious empirically that a country that doesn't let people get.rich is headed for disaster, whether it's diocletian's rome or.harold wilson's britain.  but i did not till recently understand.the role risk played.if you try to attack wealth, you end up nailing risk as well, and.with it growth.  if we want a fairer world, i think we're better.off attacking one step downstream, where wealth turns into power.notes.[1].success here is defined from the initial investors' point of.view: either an ipo, or an acquisition for more than the valuation.at the last round of funding.  the conventional 1 in 10 success rate.is suspiciously neat, but conversations with vcs suggest it's roughly.correct for startups overall.  top vc firms expect to do better.[2].i'm not claiming founders sit down and calculate the expected.after-tax return from a startup.  they're motivated by examples of.other people who did it.  and those examples do reflect after-tax returns.[3].conjecture: the variation in wealth in a (non-corrupt).country or organization.will be inversely proportional to the prevalence of systems of.seniority.  so if you suppress variation in wealth, seniority will.become correspondingly more important.  so far, i know of no.counterexamples, though in very corrupt countries you may get.both simultaneously.  (thanks to daniel sobral for pointing.this out.)[4].in a country with a truly feudal economy, you might be able to.redistribute wealth successfully, because there are no startups to.kill.[5].the speed at which startups develop new techology is the other.reason they pay so well.  as i explained in "how to make wealth", what you do in a startup is compress a.lifetime's worth of work into a few years.  it seems as.dumb to discourage that as to discourage risk-taking..thanks to chris anderson, trevor blackwell, dan giffin,.jessica livingston, and evan williams for reading drafts of this.essay, and to langley steinert, sangam pant, and mike moritz for.information about venture investing.romanian translationdutch translationtraditional chinese translationjapanese translationhebrew translation.if you liked this, you may also like.hackers & painters.<eot><sot>after the ladder.august 2005
thirty years ago, one was supposed to work one's way up the corporate.ladder.  that's less the rule now.  our generation wants to get.paid up front.  instead of developing a product for some big company.in the expectation of getting job security in return, we develop.the product ourselves, in a startup, and sell it to the big company..at the very least we want options.among other things, this shift has created the appearance of a rapid.increase in economic inequality.  but really the two cases are not.as different as they look in economic statistics.economic statistics are misleading because they ignore the value.of safe jobs.  an easy job from which one can't be fired is worth.money; exchanging the two is one of the commonest forms of.corruption.  a sinecure is, in effect, an annuity.  except sinecures.don't appear in economic statistics.  if they did, it would be clear.that in practice socialist countries have nontrivial disparities.of wealth, because they usually have a class of powerful bureaucrats.who are paid mostly by seniority and can never be fired.while not a sinecure, a position on the corporate ladder was genuinely.valuable, because big companies tried not to fire people, and.promoted from within based largely on seniority.  a position on the.corporate ladder had a value analogous to the "goodwill" that is a.very real element in the valuation of companies.  it meant one could.expect future high paying jobs.one of main causes of the decay of the corporate ladder is the trend.for takeovers that began in the 1980s.  why waste your time climbing.a ladder that might disappear before you reach the top?and, by no coincidence, the corporate ladder was one of the reasons.the early corporate raiders were so successful.  it's not only.economic statistics that ignore the value of safe jobs.  corporate.balance sheets do too.  one reason it was profitable to carve up 1980s.companies and sell them for parts was that they hadn't formally.acknowledged their implicit debt to employees who had done good.work and expected to be rewarded with high-paying executive jobs.when their time came.in the movie wall street, gordon gekko.ridicules a company overloaded with vice presidents.  but the company.may not be as corrupt as it seems; those vps' cushy jobs were.probably payment for work done earlier.i like the new model better.  for one thing, it seems a bad plan.to treat jobs as rewards.  plenty of good engineers got made into.bad managers that way.  and the old system meant people had to deal.with a lot more corporate politics, in order to protect the work.they'd invested in a position on the ladder.the big disadvantage of the new system is that it involves more risk.  if you develop ideas in a startup instead.of within a big company, any number of random factors could sink.you before you can finish.  but maybe the older generation would.laugh at me for saying that the way we do things is riskier.  after.all, projects within big companies were always getting cancelled.as a result of arbitrary decisions from higher up.  my father's.entire industry (breeder reactors) disappeared that way.for better or worse, the idea of the corporate ladder is probably.gone for good.  the new model seems more liquid, and more efficient..but it is less of a change, financially, than one might think.  our.fathers weren't that stupid.romanian translationjapanese translation<eot><sot>what business can learn from open source.august 2005
(this essay is derived from a talk at oscon 2005.)lately companies have been paying more attention to open source..ten years ago there seemed a real danger microsoft would extend its.monopoly to servers.  it seems safe to say now that open source has.prevented that.  a recent survey found 52% of companies are replacing.windows servers with linux servers..[1]more significant, i think, is which 52% they are.  at this point,.anyone proposing to run windows on servers should be prepared to.explain what they know about servers that google, yahoo, and amazon.don't.but the biggest thing business has to learn from open source is not.about linux or firefox, but about the forces that produced them..ultimately these will affect a lot more than what software you use.we may be able to get a fix on these underlying forces by triangulating.from open source and blogging.  as you've probably noticed, they.have a lot in common.like open source, blogging is something people do themselves, for.free, because they enjoy it.  like open source hackers, bloggers.compete with people working for money, and often win.  the method.of ensuring quality is also the same: darwinian.  companies ensure.quality through rules to prevent employees from screwing up.  but.you don't need that when the audience can communicate with one.another.  people just produce whatever they want; the good stuff.spreads, and the bad gets ignored.  and in both cases, feedback.from the audience improves the best work.another thing blogging and open source have in common is the web..people have always been willing to do great work.for free,  but before the web it was harder to reach an audience.or collaborate on projects.amateursi think the most important of the new principles business has to learn is.that people work a lot harder on stuff they like.  well, that's.news to no one.  so how can i claim business has to learn it?  when.i say business doesn't know this, i mean the structure of business.doesn't reflect it.business still reflects an older model, exemplified by the french.word for working: travailler.  it has an english cousin, travail,.and what it means is torture..[2]this turns out not to be the last word on work, however..as societies get richer, they learn something about.work that's a lot like what they learn about diet.  we know now that the.healthiest diet is the one our peasant ancestors were forced to.eat because they were poor.  like rich food, idleness.only seems desirable when you don't get enough of it.  i think we were.designed to work, just as we were designed to eat a certain amount.of fiber, and we feel bad if we don't.there's a name for people who work for the love of it: amateurs..the word now has such bad connotations that we forget its etymology,.though it's staring us in the face.  "amateur" was originally rather.a complimentary word.  but the thing to be in the twentieth century.was professional, which amateurs, by definition, are not.that's why the business world was so surprised by one lesson from.open source: that people working for love often surpass those working.for money.   users don't switch from explorer to firefox because.they want to hack the source.  they switch because it's a better.browser.it's not that microsoft isn't trying.  they know controlling the.browser is one of the keys to retaining their monopoly.  the problem.is the same they face in operating systems: they can't pay people.enough to build something better than a group of inspired hackers.will build for free.i suspect professionalism was always overrated-- not just in the.literal sense of working for money, but also connotations like.formality and detachment.  inconceivable as it would have seemed.in, say, 1970, i think professionalism was largely a fashion,.driven by conditions that happened to exist in the twentieth century.one of the most powerful of those was the existence of "channels." revealingly,.the same term was used for both products and information:  there.were distribution channels, and tv and radio channels.it was the narrowness of such channels that made professionals.seem so superior to amateurs.  there were only a few jobs as.professional journalists, for example, so competition ensured the.average journalist was fairly good.  whereas anyone can express.opinions about current events in a bar.  and so the average person.expressing his opinions in a bar sounds like an idiot compared to.a journalist writing about the subject.on the web, the barrier for publishing your ideas is even lower..you don't have to buy a drink, and they even let kids in..millions of people are publishing online, and the average.level of what they're writing, as you might expect, is not very.good.  this has led some in the media to conclude that blogs don't.present much of a threat-- that blogs are just a fad.actually, the fad is the word "blog,"  at least the way the print.media now use it.  what they mean by "blogger" is not someone who.publishes in a weblog format, but anyone who publishes online..that's going to become a problem as the web becomes the default.medium for publication.  so i'd.like to suggest an alternative word for someone who publishes online..how about "writer?"those in the print media who dismiss the writing online because of.its low average quality are missing an important point: no one reads.the average blog.  in the old world of channels, it meant something.to talk about average quality, because that's what you were getting.whether you liked it or not..but now you can read any writer you want.  so the average.quality of writing online isn't what the print media are competing.against.  they're competing against the best writing online.  and,.like microsoft, they're losing.i know that from my own experience as a reader.  though most print.publications are online, i probably.read two or three articles on individual people's sites for every.one i read on the site of a newspaper or magazine.and when i read, say, new york times stories, i never reach.them through the times front page.   most i find through aggregators.like google news or slashdot or delicious. aggregators show how.much better.you can do than the channel.  the new york times front page is.a list of articles written by people who work for the new york times.  delicious.is a list of articles that are interesting.  and it's only now that.you can see the two side by side that you notice how little overlap there is.most articles in the print media are boring.  for example, the.president notices that a majority of voters now think invading iraq.was a mistake, so he makes an address to the nation to drum up.support.  where is the man bites dog in that?  i didn't hear the.speech, but i could probably tell you exactly what he said.  a.speech like that is, in the most literal sense, not news: there is.nothing new in it..[3]nor is there anything new, except the names and places, in most."news" about things going wrong.  a child is abducted; there's a.tornado; a ferry sinks; someone gets bitten by a shark; a small.plane crashes.  and what do you learn about the world from these.stories?  absolutely nothing.  they're outlying data points; what.makes them gripping also makes them irrelevant.as in software, when professionals produce such crap, it's not.surprising if amateurs can do better.  live by the channel, die by.the channel: if you depend on an oligopoly, you sink into bad habits.that are hard to overcome when you suddenly get competition..[4]workplacesanother thing blogs and open source software have in common is that.they're often made by people working at home.  that may not seem.surprising.  but it should be.  it's the architectural equivalent.of a home-made aircraft shooting down an f-18.  companies spend.millions to build office buildings for a single purpose: to be a.place to work.  and yet people working in their own homes,.which aren't even designed to be workplaces, end up.being more productive.this proves something a lot of us have suspected.  the average.office is a miserable place to get work done.  and a lot of what.makes offices bad are the very qualities we associate with.professionalism.  the sterility.of offices is supposed to suggest efficiency.  but suggesting.efficiency is a different thing from actually being efficient.the atmosphere of the average workplace is to productivity what.flames painted on the side of a car are to speed.  and it's not.just the way offices look that's bleak.  the way people act is just.as bad.things are different in a startup.  often as not a startup begins.in an apartment.  instead of matching beige cubicles.they have an assortment of furniture they bought used.  they work.odd hours, wearing the most casual of clothing.  they look at.whatever they want online without worrying whether it's "work safe.".the cheery, bland language of the office is replaced by wicked humor.  and.you know what?  the company at this stage is probably the most.productive it's ever going to be.maybe it's not a coincidence.  maybe some aspects of professionalism.are actually a net lose.to me the most demoralizing aspect of the traditional office is.that you're supposed to be there at certain times.  there are usually.a few people in a company who really have to, but the reason most.employees work fixed hours is that the company can't measure their.productivity.the basic idea behind office hours is that if you can't make people.work, you can at least prevent them from having fun.  if employees.have to be in the building a certain number of hours a day, and are.forbidden to do non-work things while there, then they must be.working.  in theory.  in practice they spend a lot of their time.in a no-man's land, where they're neither working nor having fun.if you could measure how much work people did, many companies.wouldn't need any fixed workday. you could just say: this is what.you have to do.  do it whenever you like, wherever you like.  if.your work requires you to talk to other people in the company, then.you may need to be here a certain amount.  otherwise we don't care.that may seem utopian, but it's what we told people who came to.work for our company.  there were no fixed office hours.  i never.showed up before 11 in the morning.  but we weren't saying this to.be benevolent.  we were saying: if you work here we expect you to.get a lot done.  don't try to fool us just by being here a lot.the problem with the facetime model is not just that it's demoralizing, but.that the people pretending to work interrupt.the ones actually working.  i'm convinced the facetime model.is the main reason large organizations have so many meetings..per capita, large organizations accomplish very little..and yet all those people have to be on site at least eight hours a.day.  when so much time goes in one end and so little achievement.comes out the other, something has to give.  and meetings are the.main mechanism for taking up the slack.for one year i worked at a regular nine to five job, and i remember.well the strange, cozy feeling that comes over one during meetings..i was very aware, because of the novelty, that i was being paid for.programming.  it seemed just amazing, as if there was a machine on.my desk that spat out a dollar bill every two minutes no matter.what i did.  even while i was in the bathroom!  but because the.imaginary machine was always running, i felt i always ought to be.working. and so meetings felt wonderfully relaxing.  they.counted as work, just like programming, but they were so much easier..all you had to do was sit and look attentive.meetings are like an opiate with a network effect.  so is email,.on a smaller scale.  and in addition to the direct cost in time,.there's the cost in fragmentation-- breaking people's day up into.bits too small to be useful.you can see how dependent you've become on something by removing.it suddenly.  so for big companies i propose the following experiment..set aside one day where meetings are forbidden-- where everyone has to.sit at their desk all day and work without interruption on.things they can do without talking to anyone else..some amount of communication is necessary in most jobs, but i'm.sure many employees could find eight hours worth of stuff they could.do by themselves.  you could call it "work day."the other problem with pretend work.is that it often looks better than real work.  when i'm.writing or hacking i spend as much time just thinking as i do.actually typing.  half the time i'm sitting drinking a cup of tea,.or walking around the neighborhood.  this is a critical phase--.this is where ideas come from-- and yet i'd feel guilty doing this.in most offices, with everyone else looking busy.it's hard to see how bad some practice is till you have something.to compare it to.  and that's one reason open source, and even blogging.in some cases, are so important.  they show us what real work looks like.we're funding eight new startups at the moment.  a friend asked.what they were doing for office space, and seemed surprised when i.said we expected them to work out of whatever apartments they found.to live in.  but we didn't propose that to save money.  we did it.because we want their software to be good.  working in crappy.informal spaces is one of the things startups do right without.realizing it.  as soon as you get into an office, work and life.start to drift apart.that is one of the key tenets of professionalism. work and life.are supposed to be separate.  but that part, i'm convinced, is a.mistake.bottom-upthe third big lesson we can learn from open source and.blogging is that ideas can bubble up from the bottom, instead of.flowing down from the top.  open source and blogging both work.bottom-up: people make what they want, and the best stuff.prevails.does this sound familiar?  it's the principle of a market economy..ironically, though open source and blogs are done for free, those.worlds resemble market economies, while most companies, for all.their talk about the value of free markets, are run internally like.communist states.there are two forces that together steer design: ideas about.what to do next, and the enforcement of quality.  in the channel.era, both flowed down from the top.  for example, newspaper editors.assigned stories to reporters, then edited what they wrote.open source and blogging show us things don't have to work that.way.  ideas and even the enforcement of quality can flow bottom-up..and in both cases the results are not merely acceptable, but better..for example, open source software is more reliable precisely because.it's open source; anyone can find mistakes.the same happens with writing.  as we got close to publication, i.found i was very worried about the essays in.hackers.& painters.that hadn't been online.  once an essay has had a couple thousand.page views i feel reasonably confident about it.  but these had had.literally orders of magnitude less scrutiny.  it felt like.releasing software without testing it.that's what all publishing used to be like.  if.you got ten people to read a manuscript, you were lucky.  but i'd.become so used to publishing online that the old method now seemed.alarmingly unreliable, like navigating by dead reckoning once you'd.gotten used to a gps.the other thing i like about publishing online is that you can write.what you want and publish when you want.  earlier this year i wrote.something that seemed suitable for a magazine, so.i sent it to an editor i know..as i was waiting to hear back, i found to my surprise that i was.hoping they'd reject it.  then i could put it online right away..if they accepted it, it wouldn't be read by anyone for months, and.in the meantime i'd have to fight word-by-word to save it from being.mangled by some twenty five year old copy editor..[5]many employees would like to build great things for the companies.they work for, but more often than not management won't let them..how many of us have heard stories of employees going to management.and saying, please let us build this thing to make money for you--.and the company saying no?  the most famous example is probably steve wozniak,.who originally wanted to build microcomputers for his then-employer, hp..and they turned him down.  on the blunderometer, this episode ranks.with ibm accepting a non-exclusive license for dos.  but i think this.happens all the time.  we just don't hear about it usually,.because to prove yourself right you have to quit.and start your own company, like wozniak did.startupsso these, i think, are the three big lessons open source and blogging.have to teach business: (1) that people work harder on stuff they.like, (2) that the standard office environment is very unproductive,.and (3) that bottom-up often works better than top-down.i can imagine managers at this point saying: what is this guy talking.about?  what good does it do me to know that my programmers.would be more productive.working at home on their own projects?  i need their asses in here.working on version 3.2 of our software, or we're never going to.make the release date.and it's true, the benefit that specific manager could derive from.the forces i've described is near zero.  when i say business can.learn from open source, i don't mean any specific business can.  i.mean business can learn about new conditions the same way a gene.pool does.  i'm not claiming companies can get smarter, just that.dumb ones will die.so what will business look like when it has assimilated the lessons.of open source and blogging?  i think the big obstacle preventing.us from seeing the future of business is the assumption that people.working for you have to be employees.  but think about what's going.on underneath:  the company has some money, and they pay it to the.employee in the hope that he'll make something worth more than they.paid him.  well, there are other ways to arrange that relationship..instead of paying the guy money as a salary, why not give it to him.as investment?  then instead of coming to your office to work on.your projects, he can work wherever he wants on projects of his own.because few of us know any alternative, we have no idea how much.better we could do than the traditional employer-employee relationship..such customs evolve with glacial slowness.  our.employer-employee relationship still retains a big chunk of.master-servant dna..[6]i dislike being on either end of it..i'll work my ass off for a customer, but i resent being told what.to do by a boss.  and being a boss is also horribly frustrating;.half the time it's easier just to do stuff yourself than to get.someone else to do it for you..i'd rather do almost anything than give or receive a.performance review.on top of its unpromising origins, employment.has accumulated a lot of cruft over the years.  the list of what.you can't ask in job interviews is now so long that for convenience.i assume it's infinite.  within the.office you now have to walk on eggshells lest anyone.say or do.something that makes the company prey to a lawsuit.  and god help.you if you fire anyone.nothing shows more clearly that employment is not an ordinary economic.relationship than companies being sued for firing people.  in any.purely economic relationship you're free to do what you want.  if.you want to stop buying steel pipe from one supplier and start.buying it from another, you don't have to explain why.  no one can.accuse you of unjustly switching pipe suppliers.  justice implies.some kind of paternal obligation that isn't there in.transactions between equals.most of the legal restrictions on employers are intended to protect.employees.  but you can't have action without an equal and opposite.reaction.  you can't expect employers to have some kind of paternal.responsibility toward employees without putting employees in the.position of children.  and that seems a bad road to go down.next time you're in a moderately large city, drop by the main post.office and watch the body language of the people working there..they have the same sullen resentment as children made to do.something they don't want to.  their union has exacted pay.increases and work restrictions that would have been the envy of.previous generations of postal workers, and yet they don't seem any.happier for it.  it's demoralizing.to be on the receiving end of a paternalistic relationship, no.matter how cozy the terms.  just ask any teenager.i see the disadvantages of the employer-employee relationship because.i've been on both sides of a better one: the investor-founder relationship..i wouldn't claim it's painless.  when i was running a.startup, the thought of our investors used to keep me up at night..and now that i'm an investor,.the thought of our startups keeps me.up at night.  all the pain of whatever problem you're trying to.solve is still there..but the pain hurts less when it isn't.mixed with resentment.i had the misfortune to participate in what amounted to a controlled.experiment to prove that.  after yahoo bought our startup i went.to work for them.  i was doing exactly the same work, except with.bosses.  and to my horror i started acting like a child.  the.situation pushed buttons i'd forgotten.i had.the big advantage of investment over employment, as the examples of open.source and blogging suggest, is that people working on projects of.their own are enormously more productive.  and a.startup is a project.of one's own in two senses, both of them important: it's creatively.one's own, and also economically ones's own.google is a rare example of a big company in tune with the forces.i've described. they've tried hard to make their offices less sterile.than the usual cube farm.  they give employees who do great work.large grants of stock to simulate the rewards of a startup.  they.even let hackers spend 20% of their time on their own projects.why not let people spend 100% of their time on their own projects,.and instead of trying to approximate the value of what they create,.give them the actual market value?  impossible?  that is in fact.what venture capitalists do.so am i claiming that no one is going to be an employee anymore--.that everyone should go and start a startup?  of course not..but more people could do it than do it now..at the moment, even the smartest students leave school thinking.they have to get a job..actually what they need to do is make.something valuable.  a job is one way to do that, but the more.ambitious ones will ordinarily be better off taking money from an.investor than an employer.hackers tend to think business is for mbas.  but business.administration is not what you're doing in a startup.  what you're.doing is business creation.  and the first phase of that.is mostly product creation-- that is, hacking.  that's the.hard part.  it's a lot harder to create something people love than.to take something people love and figure out how to make money from.it.another thing that keeps people away from starting startups is the.risk.  someone with kids and a mortgage should think twice before.doing it.  but most young hackers have neither.and as the example of open source and blogging suggests, you'll.enjoy it more, even if you fail.  you'll be working on your own.thing, instead of going to some office and doing what you're told..there may be more pain in your own company, but it won't hurt as.much.that may be the greatest effect, in the long run, of the forces.underlying open source and blogging: finally ditching the old.paternalistic employer-employee relationship, and replacing it with.a purely economic one, between equals..notes[1].survey by forrester research reported in the cover story of.business week, 31 jan 2005.  apparently someone believed you have to.replace the actual server in order to switch the operating system.[2].it derives from the late latin tripalium,.a torture device so called because it consisted of three stakes..i don't know how the stakes were used.  "travel" has the same root.[3].it would be much bigger news, in that sense, if the president.faced unscripted questions by giving a press conference.[4].one measure of the incompetence of newspapers is that so many.still make you register to read stories.  i have yet to find a blog.that tried that.[5].they accepted the article, but i took so long to.send them the final version that by the time i did the section of.the magazine they'd accepted it for had disappeared in a reorganization.[6].the word "boss" is derived from the dutch baas, meaning."master."thanks to sarah harlin, jessica livingston, and robert morris for reading drafts of this.french translationrussian translationjapanese translationspanish translationarabic translation<eot><sot>hiring is obsolete.want to start a startup?  get funded by.y combinator..may 2005
(this essay is derived from a talk at the berkeley csua.)the three big powers on the internet now are yahoo, google, and.microsoft.  average age of their founders: 24.  so it is pretty.well established now that grad students can start successful.companies.  and if grad students can do it, why not undergrads?like everything else in technology, the cost of starting a startup.has decreased dramatically.  now it's so low that it has disappeared.into the noise. the main cost of starting a web-based.startup is food and rent.  which means it doesn't cost much more.to start a company than to be a total slacker.  you can probably.start a startup on ten thousand dollars of seed funding, if you're.prepared to live on ramen.the less it costs to start a company, the less you need the permission.of investors to do it.  so a lot of people will be able to start.companies now who never could have before.the most interesting subset may be those in their early twenties..i'm not so excited about founders who have everything investors.want except intelligence, or everything except energy.  the most.promising group to be liberated by the new, lower threshold are.those who have everything investors want except experience.market ratei once claimed that nerds were unpopular.in secondary school mainly because they had better things to do.than work full-time at being popular.  some said i was just telling.people what they wanted to hear.  well, i'm now about to do that.in a spectacular way: i think undergraduates are undervalued.or more precisely, i think few realize the huge.spread in the value of 20 year olds.  some, it's true, are not very.capable.  but others are more capable than all but a handful of 30.year olds. [1]till now the problem has always been that it's difficult to pick.them out.  every vc in the world, if they could go back in time,.would try to invest in microsoft.  but which would have then?  how.many would have understood that this particular 19 year old was.bill gates?it's hard to judge the young because (a) they change rapidly, (b).there is great variation between them, and (c) they're individually.inconsistent.  that last one is a big problem.  when you're young,.you occasionally say and do stupid things even when you're smart..so if the algorithm is to filter out people who say stupid things,.as many investors and employers unconsciously do, you're going to.get a lot of false positives.most organizations who hire people right out of college are only.aware of the average value of 22 year olds, which is not that high..and so the idea for most of the twentieth century was that everyone.had to begin as a trainee in some.entry-level job.  organizations.realized there was a lot of variation in the incoming stream, but.instead of pursuing this thought they tended to suppress it, in the.belief that it was good for even the most promising kids to start.at the bottom, so they didn't get swelled heads.the most productive young people will always be undervalued.by large organizations, because the young have no performance to.measure yet, and any error in guessing their ability will tend.toward the mean.what's an especially productive 22 year old to do?  one thing you.can do is go over the heads of organizations, directly to the users..any company that hires you is, economically, acting as a proxy for.the customer.  the rate at which they value you (though they may.not consciously realize it) is an attempt to guess your value to.the user.  but there's a way to appeal their judgement.  if you.want, you can opt to be valued directly by users, by starting your.own company.the market is a lot more discerning than any employer.  and it is.completely non-discriminatory.  on the internet, nobody knows you're.a dog.  and more to the point, nobody knows you're 22.  all users.care about is whether your site or software gives them what they.want.  they don't care if the person behind it is a high school.kid.if you're really productive, why not make employers pay market rate.for you?  why go work as an ordinary employee for a big.company, when you could start a startup and make them buy it to get.you?when most people hear the word "startup," they think of the famous.ones that have gone public.  but most startups that succeed do it.by getting bought.  and usually the acquirer doesn't just want the.technology, but the people who created it as well.often big companies buy startups before they're profitable.  obviously.in such cases they're not after revenues.  what they want is the.development team and the software they've built so far.  when a.startup gets bought for 2 or 3 million six months in, it's really.more of a hiring bonus than an acquisition.i think this sort of thing will happen more and more, and that it.will be better for everyone.  it's obviously better for the people.who start the startup, because they get a big chunk of money up.front.  but i think it will be better for the acquirers too.  the.central problem in big companies, and the main reason they're so.much less productive than small companies, is the difficulty of.valuing each person's work.  buying larval startups solves that.problem for them: the acquirer doesn't pay till the developers have.proven themselves.  acquirers are protected on the downside, but.still get most of the upside.product developmentbuying startups also solves another problem afflicting big companies:.they can't do product development.  big companies are good at.extracting the value from existing products, but bad at creating.new ones.why? it's worth studying this phenomenon in detail, because this.is the raison d'etre of startups.to start with, most big companies have some kind of turf to protect,.and this tends to warp their development decisions.  for example,.web-based applications are hot now, but.within microsoft there must.be a lot of ambivalence about them, because the very idea of web-based.software threatens the desktop.  so any web-based application that.microsoft ends up with, will probably, like hotmail, be something.developed outside the company.another reason big companies are bad at developing new products is.that the kind of people who do that tend not to have much power in.big companies (unless they happen to be the ceo).  disruptive.technologies are developed by disruptive people.  and they either.don't work for the big company, or have been outmaneuvered by yes-men.and have comparatively little influence.big companies also lose because they usually only build one of each.thing.  when you only have one web browser, you can't do anything.really risky with it.  if ten different startups design ten different.web browsers and you take the best, you'll probably get something.better.the more general version of this problem is that there are too many.new ideas for companies to explore them all.  there might be 500.startups right now who think they're making something microsoft.might buy.  even microsoft probably couldn't manage 500 development.projects in-house.big companies also don't pay people the right way.  people developing.a new product at a big company get paid roughly the same whether.it succeeds or fails.  people at a startup expect to get rich if.the product succeeds, and get nothing if it fails. [2]  so naturally.the people at the startup work a lot harder.the mere bigness of big companies is an obstacle.  in startups,.developers are often forced to talk directly to users, whether they.want to or not, because there is no one else to do sales and support..it's painful doing sales, but you learn much more from.trying to sell people something than reading what.they said in focus groups.and then of course, big companies are bad at product development.because they're bad at everything.  everything happens slower in.big companies than small ones, and product development is something.that has to happen fast, because you have to go through a lot of.iterations to get something good.trendi think the trend of big companies buying startups will only.accelerate.  one of the biggest remaining obstacles is pride.  most.companies, at least unconsciously, feel they ought to be able to.develop stuff in house, and that buying startups is to some degree.an admission of failure.  and so, as people generally do with.admissions of failure, they put it off for as long as possible..that makes the acquisition very expensive when it finally happens.what companies should do is go out and discover startups when they're.young, before vcs have puffed them up into something that costs.hundreds of millions to acquire.  much of what vcs add, the acquirer.doesn't need anyway.why don't acquirers try to predict the companies they're going to.have to buy for hundreds of millions, and grab them early for a.tenth or a twentieth of that?  because they can't predict the winners.in advance?  if they're only paying a twentieth as much, they only.have to predict a twentieth as well.  surely they can manage that.i think companies that acquire technology will gradually learn to.go after earlier stage startups.  they won't necessarily buy them.outright.  the solution may be some hybrid of investment and.acquisition: for example, to buy a chunk of the company and get an.option to buy the rest later.when companies buy startups, they're effectively fusing recruiting.and product development.  and i think that's more efficient than.doing the two separately, because you always get people who are.really committed to what they're working on.plus this method yields teams of developers who already work well.together.  any conflicts between them have been ironed out under.the very hot iron of running a startup.  by the time the acquirer.gets them, they're finishing one another's sentences.  that's.valuable in software, because so many bugs occur at the boundaries.between different people's code.investorsthe increasing cheapness of starting a company doesn't just give.hackers more power relative to employers.  it also gives them more.power relative to investors.the conventional wisdom among vcs is that hackers shouldn't be.allowed to run their own companies.  the founders are supposed to.accept mbas as their bosses, and themselves take on some title like.chief technical officer.  there may be cases where this is a good.idea.  but i think founders will increasingly be able to push back.in the matter of control, because they just don't need the investors'.money as much as they used to.startups are a comparatively new phenomenon.  fairchild semiconductor.is considered the first vc-backed startup, and they were founded.in 1959, less than fifty years ago.  measured on the time scale of.social change, what we have now is pre-beta.  so we shouldn't assume.the way startups work now is the way they have to work.fairchild needed a lot of money to get started.  they had to build.actual factories.  what does the first round of venture funding for.a web-based startup get spent on today?  more money can't get.software written faster; it isn't needed for facilities, because.those can now be quite cheap; all money can really buy you is sales.and marketing.  a sales force is worth something, i'll admit.  but.marketing is increasingly irrelevant.  on the internet, anything.genuinely good will spread by word of mouth.investors' power comes from money.  when startups need less money,.investors have less power over them.  so future founders may not.have to accept new ceos if they don't want them.  the vcs will have.to be dragged kicking and screaming down this road, but like many.things people have to be dragged kicking and screaming toward, it.may actually be good for them.google is a sign of the way things are going.  as a condition of.funding, their investors insisted they hire someone old and experienced.as ceo.  but from what i've heard the founders didn't just give in.and take whoever the vcs wanted.  they delayed for an entire year,.and when they did finally take a ceo, they chose a guy with a phd.in computer science.it sounds to me as if the founders are still the most powerful.people in the company, and judging by google's performance, their.youth and inexperience doesn't seem to have hurt them.  indeed, i.suspect google has done better than they would have if the founders.had given the vcs what they wanted, when they wanted it, and let.some mba take over as soon as they got their first round of funding.i'm not claiming the business guys installed by vcs have no value..certainly they have.  but they don't need to become the founders'.bosses, which is what that title ceo means.  i predict that in the.future the executives installed by vcs will increasingly be coos.rather than ceos.  the founders will run engineering directly, and.the rest of the company through the coo.the open cagewith both employers and investors, the balance of power is slowly.shifting towards the young.  and yet they seem the last to realize.it.  only the most ambitious undergrads even consider starting their.own company when they graduate.  most just want to get a job.maybe this is as it should be.  maybe if the idea of starting a.startup is intimidating, you filter out the uncommitted.  but i.suspect the filter is set a little too high.  i think there are.people who could, if they tried, start successful startups, and who.instead let themselves be swept into the intake ducts of big.companies.have you ever noticed that when animals are let out of cages, they.don't always realize at first that the door's open?  often they.have to be poked with a stick to get them out.  something similar.happened with blogs.  people could have been publishing online in.1995, and yet blogging has only really taken off in the last couple.years.  in 1995 we thought only professional writers were entitled.to publish their ideas, and that anyone else who did was a crank..now publishing online is becoming so popular that everyone wants.to do it, even print journalists.  but blogging has not taken off.recently because of any technical innovation; it just took eight.years for everyone to realize the cage was open.i think most undergrads don't realize yet that the economic cage.is open.  a lot have been told by their parents that the route to.success is to get a good job.  this was true when their parents.were in college, but it's less true now. the route to success is.to build something valuable, and you don't have to be working for.an existing company to do that.  indeed, you can often do it better.if you're not.when i talk to undergrads, what surprises me most about them is how.conservative they are.   not politically, of course.  i mean they.don't seem to want to take risks.  this is a mistake, because the.younger you are, the more risk you can take.riskrisk and reward are always proportionate.  for example, stocks are.riskier than bonds, and over time always have greater returns.  so.why does anyone invest in bonds?  the catch is that phrase "over.time."  stocks will generate greater returns over thirty years, but.they might lose value from year to year.  so what you should invest.in depends on how soon you need the money.  if you're young, you.should take the riskiest investments you can find.all this talk about investing may seem very theoretical.  most.undergrads probably have more debts than assets.  they may feel.they have nothing to invest.  but that's not true: they have their.time to invest, and the same rule about risk applies there.  your.early twenties are exactly the time to take insane career risks.the reason risk is always proportionate to reward is that market.forces make it so.  people will pay extra for stability.  so if you.choose stability-- by buying bonds, or by going to work for a big.company-- it's going to cost you.riskier career moves pay better on average, because there is less.demand for them.  extreme choices like starting a startup are so.frightening that most people won't even try.  so you don't end up.having as much competition as you might expect, considering the.prizes at stake.the math is brutal.  while perhaps 9 out of 10 startups fail, the.one that succeeds will pay the founders more than 10 times what.they would have made in an ordinary job. [3].that's the sense in.which startups pay better "on average."remember that.  if you start a startup, you'll probably fail.  most.startups fail. it's the nature of the business.  but it's not.necessarily a mistake to try something that has a 90% chance of.failing, if you can afford the risk.  failing at 40, when you have.a family to support, could be serious.  but if you fail at 22, so.what?  if you try to start a startup right out of college and it.tanks, you'll end up at 23 broke and a lot smarter.  which, if you.think about it, is roughly what you hope to get from a graduate.program.even if your startup does tank, you won't harm your prospects with.employers.  to make sure i asked some friends who work for big.companies.  i asked managers at yahoo, google, amazon, cisco and.microsoft how they'd feel about two candidates, both 24, with equal.ability, one who'd tried to start a startup that tanked, and another.who'd spent the two years since college working as a developer at.a big company.  every one responded that they'd prefer the guy who'd.tried to start his own company.  zod nazem, who's in charge of.engineering at yahoo, said:.i actually put more value on the guy with the failed.startup.  and you can quote me!.so there you have it.  want to get hired by yahoo?  start your own.company.the man is the customerif even big employers think highly of young hackers who start.companies, why don't more do it?  why are undergrads so conservative?.i think it's because they've spent so much time in institutions.the first twenty years of everyone's life consists of being piped.from one institution to another.  you probably didn't have much.choice about the secondary schools you went to.  and after high.school it was probably understood that you were supposed to go to.college.  you may have had a few different colleges to choose.between, but they were probably pretty similar.  so by this point.you've been riding on a subway line for twenty years, and the next.stop seems to be a job.actually college is where the line ends.  superficially, going to.work for a company may feel like just the next in a series of.institutions, but underneath, everything is different.  the end of.school is the fulcrum of your life, the point where you go from.net consumer to net producer.the other big change is that now, you're steering.  you can go.anywhere you want. so it may be worth standing back and understanding.what's going on, instead of just doing the default thing.all through college, and probably long before that, most undergrads.have been thinking about what employers want.  but what really.matters is what customers want, because they're the ones who give.employers the money to pay you.so instead of thinking about what employers want, you're probably.better off thinking directly about what users want.  to the extent.there's any difference between the two, you can even use that to.your advantage if you start a company of your own.  for example,.big companies like docile conformists.  but this is merely an.artifact of their bigness, not something customers need.grad schooli didn't consciously realize all this when i was graduating from.college-- partly because i went straight to grad school.  grad.school can be a pretty good deal, even if you think of one day.starting a startup.  you can start one when you're done, or even.pull the ripcord part way through, like the founders of yahoo and.google.grad school makes a good launch pad for startups, because you're.collected together with a lot of smart people, and you have bigger.chunks of time to work on your own projects than an undergrad or.corporate employee would.  as long as you have a fairly tolerant.advisor, you can take your time developing an idea before turning.it into a company.  david filo and jerry yang started the yahoo.directory in february 1994 and were getting a million hits a day.by the fall, but they didn't actually drop out of grad school and.start a company till march 1995.you could also try the startup first, and if it doesn't work, then.go to grad school.  when startups tank they usually do it fairly.quickly. within a year you'll know if you're wasting your time.if it fails, that is.  if it succeeds, you may have to delay grad.school a little longer.  but you'll have a much more enjoyable life.once there than you would on a regular grad student stipend.experienceanother reason people in their early twenties don't start startups.is that they feel they don't have enough experience.  most investors.feel the same.i remember hearing a lot of that word "experience" when i was in.college.  what do people really mean by it?  obviously it's not the.experience itself that's valuable, but something it changes in your.brain.  what's different about your brain after you have "experience,".and can you make that change happen faster?i now have some data on this, and i can tell you what tends to be.missing when people lack experience.  i've said that every.startup needs three things: to start with good people,.to make something users want, and not to spend too much money.  it's.the middle one you get wrong when you're inexperienced.  there are.plenty of undergrads with enough technical skill to write good.software, and undergrads are not especially prone to waste money..if they get something wrong, it's usually not realizing they have.to make something people want.this is not exclusively a failing of the young.  it's common for.startup founders of all ages to build things no one wants.fortunately, this flaw should be easy to fix.  if undergrads were.all bad programmers, the problem would be a lot harder.  it can.take years to learn how to program.  but i don't think it takes.years to learn how to make things people want.  my hypothesis is.that all you have to do is smack hackers on the side of the head.and tell them: wake up.  don't sit here making up a priori theories.about what users need.  go find some users and see what they need.most successful startups not only do something very specific, but.solve a problem people already know they have.the big change that "experience" causes in your brain is learning.that you need to solve people's problems.  once you grasp that, you.advance quickly to the next step, which is figuring out what those.problems are.  and that takes some effort, because the way software.actually gets used, especially by the people who pay the most for.it, is not at all what you might expect.  for example, the stated.purpose of powerpoint is to present ideas.  its real role is to.overcome people's fear of public speaking.  it allows you to give.an impressive-looking talk about nothing, and it causes the audience.to sit in a dark room looking at slides, instead of a bright one.looking at you.this kind of thing is out there for anyone to see.  the key is to.know to look for it-- to realize that having an idea for a startup.is not like having an idea for a class project.  the goal in a.startup is not to write a cool piece of software.  it's to make.something people want.  and to do that you have to look at users--.forget about hacking, and just look at users.  this can be quite a.mental adjustment, because little if any of the software you write.in school even has users.  a few steps before a rubik's cube is solved, it still looks like a.mess.  i think there are a lot of undergrads whose brains are in a.similar position: they're only a few steps away from being able to.start successful startups, if they wanted to, but they don't realize.it.  they have more than enough technical skill.  they just haven't.realized yet that the way to create wealth is to make what users.want, and that employers are just proxies for users in which risk.is pooled.if you're young and smart, you don't need either of those.  you.don't need someone else to tell you what users want, because you.can figure it out yourself.  and you don't want to pool risk, because.the younger you are, the more risk you should take.a public service messagei'd like to conclude with a joint message from me and your parents..don't drop out of college to start a startup.  there's no rush..there will be plenty of time to start companies after you graduate..in fact, it may be just as well to go work for an existing company.for a couple years after you graduate, to learn how companies work.and yet, when i think about it, i can't imagine telling bill gates.at 19 that he should wait till he graduated to start a company..he'd have told me to get lost.  and could i have honestly claimed.that he was harming his future-- that he was learning less by working.at ground zero of the microcomputer revolution than he would have.if he'd been taking classes back at harvard?  no, probably not.and yes, while it is probably true that you'll learn some valuable.things by going to work for an existing company for a couple years.before starting your own, you'd learn a thing or two running your.own company during that time too.the advice about going to work for someone else would get an even.colder reception from the 19 year old bill gates.  so i'm supposed.to finish college, then go work for another company for two years,.and then i can start my own?  i have to wait till i'm 23?  that's.four years.  that's more than twenty percent of my life so.far.  plus in four years it will be way too late to make money.writing a basic interpreter for the altair.and he'd be right.  the apple ii was launched just two years later..in fact, if bill had finished college and gone to work for another.company as we're suggesting, he might well have gone to work for.apple.  and while that would probably have been better for all of.us, it wouldn't have been better for him.so while i stand by our responsible advice to finish college and.then go work for a while before starting a startup, i have to admit.it's one of those things the old tell the young, but don't expect.them to listen to.  we say this sort of thing mainly so we can claim.we warned you.  so don't say i didn't warn you..notes[1].the average b-17 pilot in world war ii was in his early twenties..(thanks to tad marko for pointing this out.)[2] if a company tried to pay employees this way, they'd be called.unfair.  and yet when they buy some startups and not others, no one.thinks of calling that unfair..[3] the 1/10 success rate for startups is a bit of an urban legend..it's suspiciously neat.  my guess is the odds are slightly worse.thanks to jessica livingston for reading drafts of this, to.the friends i promised anonymity to for their opinions about hiring,.and to karen nguyen and the berkeley csua for organizing this talk.russian translationromanian translationjapanese translation.if you liked this, you may also like.hackers & painters.<eot><sot>the submarine.april 2005
"suits make a corporate comeback," says the new.york times.  why does this sound familiar?  maybe because.the suit was also back in february,.september.2004, june.2004, march.2004, september.2003,.november.2002,.april 2002,.and february.2002..why do the media keep running stories saying suits are back?  because.pr firms tell.them to.  one of the most surprising things i discovered.during my brief business career was the existence of the pr industry,.lurking like a huge, quiet submarine beneath the news.  of the.stories you read in traditional media that aren't about politics,.crimes, or disasters, more than half probably come from pr firms.i know because i spent years hunting such "press hits."  our startup spent.its entire marketing budget on pr: at a time when we were assembling.our own computers to save money, we were paying a pr firm $16,000.a month.  and they were worth it.  pr is the news equivalent of.search engine optimization; instead of buying ads, which readers.ignore, you get yourself inserted directly into the stories.  [1]our pr firm.was one of the best in the business.  in 18 months, they got press.hits in over 60 different publications..and we weren't the only ones they did great things for..in 1997 i got a call from another.startup founder considering hiring them to promote his company.  i.told him they were pr gods, worth every penny of their outrageous.fees.  but i remember thinking his company's name was odd..why call an auction site "ebay"?.symbiosispr is not dishonest.  not quite.  in fact, the reason the best pr.firms are so effective is precisely that they aren't dishonest..they give reporters genuinely valuable information.  a good pr firm.won't bug reporters just because the client tells them to; they've.worked hard to build their credibility with reporters, and they.don't want to destroy it by feeding them mere propaganda.if anyone is dishonest, it's the reporters.  the main reason pr.firms exist is that reporters are lazy.  or, to put it more nicely,.overworked.  really they ought to be out there digging up stories.for themselves.  but it's so tempting to sit in their offices and.let pr firms bring the stories to them.  after all, they know good.pr firms won't lie to them.a good flatterer doesn't lie, but tells his victim selective truths.(what a nice color your eyes are). good pr firms use the same.strategy: they give reporters stories that are true, but whose truth.favors their clients.for example, our pr firm often pitched stories about how the web.let small merchants compete with big ones.  this was perfectly true..but the reason reporters ended up writing stories about this.particular truth, rather than some other one, was that small merchants.were our target market, and we were paying the piper.different publications vary greatly in their reliance on pr firms..at the bottom of the heap are the trade press, who make most of.their money from advertising and would give the magazines away for.free if advertisers would let them.  [2] the average.trade publication is a  bunch of ads, glued together by just enough.articles to make it look like a magazine.  they're so desperate for."content" that some will print your press releases almost verbatim,.if you take the trouble to write them to read like articles.at the other extreme are publications like the new york times.and the wall street journal.  their reporters do go out and.find their own stories, at least some of the time.  they'll listen.to pr firms, but briefly and skeptically.  we managed to get press.hits in almost every publication we wanted, but we never managed.to crack the print edition of the times.  [3]the weak point of the top reporters is not laziness, but vanity..you don't pitch stories to them.  you have to approach them as if.you were a specimen under their all-seeing microscope, and make it.seem as if the story you want them to run is something they thought.of themselves.our greatest pr coup was a two-part one.  we estimated, based on.some fairly informal math, that there were about 5000 stores on the.web.  we got one paper to print this number, which seemed neutral.enough.  but once this "fact" was out there in print, we could quote.it to other publications, and claim that with 1000 users we had 20%.of the online store market.this was roughly true.  we really did have the biggest share of the.online store market, and 5000 was our best guess at its size.  but.the way the story appeared in the press sounded a lot more definite.reporters like definitive statements.  for example, many of the.stories about jeremy jaynes's conviction say that he was one of the.10 worst spammers.  this "fact" originated in spamhaus's rokso list,.which i think even spamhaus would admit is a rough guess at the top.spammers.  the first stories about jaynes cited this source, but.now it's simply repeated as if it were part of the indictment..[4]all you can say with certainty about jaynes is that he was a fairly.big spammer.  but reporters don't want to print vague stuff like."fairly big."  they want statements with punch, like "top ten." and.pr firms give them what they want..wearing suits, we're told, will make us.3.6.percent more productive.buzzwhere the work of pr firms really does get deliberately misleading is in.the generation of "buzz."  they usually feed the same story to.several different publications at once.  and when readers see similar.stories in multiple places, they think there is some important trend.afoot.  which is exactly what they're supposed to think.when windows 95 was launched, people waited outside stores.at midnight to buy the first copies.  none of them would have been.there without pr firms, who generated such a buzz in.the news media that it became self-reinforcing, like a nuclear chain.reaction.i doubt pr firms realize it yet, but the web makes it possible to.track them at work.  if you search for the obvious phrases, you.turn up several efforts over the years to place stories about the.return of the suit.  for example, the reuters article.that got picked up by usa.today in september 2004.  "the suit is back," it begins.trend articles like this are almost always the work of.pr firms.  once you know how to read them, it's straightforward to.figure out who the client is.  with trend stories, pr firms usually.line up one or more "experts" to talk about the industry generally..in this case we get three: the npd group, the creative director of.gq, and a research director at smith barney.  [5] when.you get to the end of the experts, look for the client. and bingo,.there it is: the men's wearhouse.not surprising, considering the men's wearhouse was at that moment.running ads saying "the suit is back."  talk about a successful.press hit-- a wire service article whose first sentence is your own.ad copy.the secret to finding other press hits from a given pitch.is to realize that they all started from the same document back at.the pr firm.  search for a few key phrases and the names of the.clients and the experts, and you'll turn up other variants of this.story.casual.fridays are out and dress codes are in writes diane e. lewis.in the boston globe.  in a remarkable coincidence, ms. lewis's.industry contacts also include the creative director of gq.ripped jeans and t-shirts are out, writes mary kathleen flynn in.us news & world report.  and she too knows the.creative director of gq.men's suits.are back writes nicole ford in sexbuzz.com ("the ultimate men's.entertainment magazine").dressing.down loses appeal as men suit up at the office writes tenisha.mercer of the detroit news..now that so many news articles are online, i suspect you could find.a similar pattern for most trend stories placed by pr firms.  i.propose we call this new sport "pr diving," and i'm sure there are.far more striking examples out there than this clump of five stories.onlineafter spending years chasing them, it's now second nature.to me to recognize press hits for what they are.  but before we.hired a pr firm i had no idea where articles in the mainstream media.came from.  i could tell a lot of them were crap, but i didn't.realize why.remember the exercises in critical reading you did in school, where.you had to look at a piece of writing and step back and ask whether.the author was telling the whole truth?  if you really want to be.a critical reader, it turns out you have to step back one step.further, and ask not just whether the author is telling the truth,.but why he's writing about this subject at all.online, the answer tends to be a lot simpler.  most people who.publish online write what they write for the simple reason that.they want to.  you.can't see the fingerprints of pr firms all over the articles, as.you can in so many print publications-- which is one of the reasons,.though they may not consciously realize it, that readers trust.bloggers more than business week.i was talking recently to a friend who works for a.big newspaper.  he thought the print media were in serious trouble,.and that they were still mostly in denial about it.  "they think.the decline is cyclic," he said.  "actually it's structural."in other words, the readers are leaving, and they're not coming.back..why? i think the main reason is that the writing online is more honest..imagine how incongruous the new york times article about.suits would sound if you read it in a blog:.the urge to look corporate-- sleek, commanding,.prudent, yet with just a touch of hubris on your well-cut sleeve--.is an unexpected development in a time of business disgrace...the problem.with this article is not just that it originated in a pr firm..the whole tone is bogus.  this is the tone of someone writing down.to their audience.whatever its flaws, the writing you find online.is authentic.  it's not mystery meat cooked up.out of scraps of pitch letters and press releases, and pressed into.molds of zippy.journalese.  it's people writing what they think.i didn't realize, till there was an alternative, just how artificial.most of the writing in the mainstream media was.  i'm not saying.i used to believe what i read in time and newsweek.  since high.school, at least, i've thought of magazines like that more as.guides to what ordinary people were being.told to think than as.sources of information.  but i didn't realize till the last.few years that writing for publication didn't have to mean writing.that way.  i didn't realize you could write as candidly and.informally as you would if you were writing to a friend.readers aren't the only ones who've noticed the.change.  the pr industry has too..a hilarious article.on the site of the pr society of america gets to the heart of the.matter:.bloggers are sensitive about becoming mouthpieces.for other organizations and companies, which is the reason they.began blogging in the first place..pr people fear bloggers for the same reason readers.like them.  and that means there may be a struggle ahead.  as.this new kind of writing draws readers away from traditional media, we.should be prepared for whatever pr mutates into to compensate..when i think.how hard pr firms work to score press hits in the traditional.media, i can't imagine they'll work any less hard to feed stories.to bloggers, if they can figure out how..notes[1] pr has at least.one beneficial feature: it favors small companies.  if pr didn't.work, the only alternative would be to advertise, and only big.companies can afford that.[2] advertisers pay.less for ads in free publications, because they assume readers.ignore something they get for free.  this is why so many trade.publications nominally have a cover price and yet give away free.subscriptions with such abandon.[3] different sections.of the times vary so much in their standards that they're.practically different papers.  whoever fed the style section reporter.this story about suits coming back would have been sent packing by.the regular news reporters.[4] the most striking.example i know of this type is the "fact" that the internet worm.of 1988 infected 6000 computers. i was there when it was cooked up,.and this was the recipe: someone guessed that there were about.60,000 computers attached to the internet, and that the worm might.have infected ten percent of them.actually no one knows how many computers the worm infected, because.the remedy was to reboot them, and this destroyed all traces.  but.people like numbers.  and so this one is now replicated.all over the internet, like a little worm of its own.[5] not all were.necessarily supplied by the pr firm. reporters sometimes call a few.additional sources on their own, like someone adding a few fresh.vegetables to a can of soup..thanks to ingrid basset, trevor blackwell, sarah harlin, jessica.livingston, jackie mcdonough, robert morris, and aaron swartz (who.also found the prsa article) for reading drafts of this.correction: earlier versions used a recent.business week article mentioning del.icio.us as an example.of a press hit, but joshua schachter tells me.it was spontaneous.the web is a writing environmenta sell-out's talehow to pitch bloggersblogging for milk7 habits of highly effective blog prpr people need to learn to deal with new gatekeepersmarqui blogosphere programpr watchreal men exfoliatehow the news is madejanuary 2006: the suit is back yet againthe decline of the tiejapanese translation.if you liked this, you may also like.hackers & painters.<eot><sot>why smart people have bad ideas.want to start a startup?  get funded by.y combinator..april 2005
this summer, as an.experiment, some.friends and i are giving seed.funding to a bunch of new startups.  it's an experiment because.we're prepared to fund younger founders than most investors would..that's why we're doing it during the summer—so even college.students can participate.we know from google and yahoo that grad students can start successful.startups.  and we know from experience that some undergrads are as.capable as most grad students.  the accepted age for startup founders.has been creeping downward. we're trying to find the lower bound..the deadline has now passed, and we're sifting through 227 applications..we expected to divide them into two categories, promising.and unpromising.  but we soon saw we needed a third: promising.people with unpromising ideas..[1]the artix phasewe should have expected this.  it's very common for a group of.founders to go through one lame idea before realizing that a startup.has to make something people will pay for.   in fact, we ourselves.did.viaweb wasn't the first startup robert morris and i started.  in.january 1995, we and a couple friends started a company called.artix.  the plan was to put art galleries on the web.  in retrospect,.i wonder how we could have wasted our time on anything so stupid..galleries are not especially excited about being on.the web even now, ten years later.  they don't want to have their.stock visible to any random visitor, like an antique store..[2]besides which, art dealers are the most technophobic people on.earth.  they didn't become art dealers after a difficult choice.between that and a career in the hard sciences.  most of them had.never seen the web before we came to tell them why they should be.on it.  some didn't even have computers.  it doesn't do justice to.the situation to describe it as a hard sell; we soon sank.to building sites for free, and it was hard to convince galleries.even to do that.gradually it dawned on us that.instead of trying to make web sites for.people who didn't want them, we could make sites for.people who did.  in fact, software that would let people who wanted.sites make their own.  so we ditched artix and.started a new company, viaweb, to make software for building online stores..that one succeeded.we're in good company here.  microsoft was not the first company.paul allen and bill gates started either.  the first was called.traf-o-data.  it does not seem to have done as well as micro-soft..in robert's defense, he was skeptical about artix.  i dragged him.into it..[3].but there were moments when he was optimistic.  and.if we, who were 29 and 30 at the time, could get excited about such.a thoroughly boneheaded idea, we should not be surprised that hackers.aged 21 or 22 are pitching us ideas with little hope of making money.the still life effectwhy does this happen?  why do good hackers have bad business ideas?let's look at our case.  one reason we had such a lame idea was.that it was the first thing we thought of.  i was in new york trying.to be a starving artist at the time (the starving part is actually.quite easy), so i was haunting galleries anyway.  when i learned.about the web, it seemed natural to mix the two.  make web sites.for galleries—that's the ticket!if you're going to spend years working on something, you'd think.it might be wise to spend at least a couple days considering different.ideas, instead of going with the first that comes into your head..you'd think.  but people don't.  in fact, this is a constant problem.when you're painting still lifes.  you plonk down a bunch of stuff.on a table, and maybe spend five or ten minutes rearranging it to.look interesting.  but you're so impatient to get started painting.that ten minutes of rearranging feels very long.  so you start.painting.  three days later, having spent twenty hours staring at.it, you're kicking yourself for having set up such an awkward and.boring composition, but by then it's too late.part of the problem is that big projects tend to grow out of small.ones.  you set up a still life to make a quick sketch when you have.a spare hour, and days later you're still working on it.  i once.spent a month painting three versions of a still life i set up in.about four minutes.  at each point (a day, a week, a month) i thought.i'd already put in so much time that it was too late to change.so the biggest cause of bad ideas is the still life effect:  you.come up with a random idea, plunge into it, and then at each point.(a day, a week, a month) feel you've put so much time into it that.this must be the idea.how do we fix that?  i don't think we should discard plunging..plunging into an idea is a good thing.  the solution is at the other.end: to realize that having invested time in something doesn't make.it good.this is clearest in the case of names.  viaweb was originally.called webgen, but we discovered someone else had a product called.that.  we were so attached to our name that we offered him 5%.of the company if he'd let us have it.   but he wouldn't, so.we had to think of another..[4].the best we could do was viaweb,.which we disliked at first.  it was like having a new mother.  but.within three days we loved it, and webgen sounded lame and.old-fashioned.if it's hard to change something so simple as a name, imagine.how hard it is to garbage-collect an idea.  a name only has one.point of attachment into your head.  an idea for a company gets.woven into your thoughts.  so you must consciously discount for.that.  plunge in, by all means, but remember later to look at your.idea in the harsh light of morning and ask: is this something people.will pay for?  is this, of all the things we could make, the thing.people will pay most for?muckthe second mistake we made with artix is also very common.  putting.galleries on the web seemed cool.one of the most valuable things my father taught me is an old.yorkshire saying: where there's muck, there's brass.  meaning that.unpleasant work pays.  and more to the point here, vice versa.  work.people like doesn't pay well, for reasons of supply and demand..the most extreme case is developing programming languages, which.doesn't pay at all, because people like it so much they do it for.free.when we started artix, i was still ambivalent about business.  i.wanted to keep one foot in the art world.  big, big, mistake.  going.into business is like a hang-glider launch: you'd better do it.wholeheartedly, or not at all.  the purpose of a company, and a.startup especially, is to make money.  you can't have divided.loyalties.which is not to say that you have to do the most disgusting sort.of work, like spamming, or starting a company whose only purpose.is patent litigation.  what i mean is, if you're starting a company.that will do something cool, the aim had better be to make money.and maybe be cool, not to be cool and maybe make money.it's hard enough to make money that you can't do it by accident..unless it's your first priority, it's unlikely to happen at all.hyenaswhen i probe our motives with artix, i see a third mistake: timidity..if you'd proposed at the time that we go into the e-commerce business,.we'd have found the idea terrifying.  surely a field like that would.be dominated by fearsome startups with five million dollars of vc.money each.  whereas we felt pretty sure that we could hold our own.in the slightly less competitive business of generating web sites.for art galleries.we erred ridiculously far on the side of safety.  as it turns out,.vc-backed startups are not that fearsome.  they're too busy trying.to spend all that.money to get software written.  in 1995, the.e-commerce business was very competitive as measured in press.releases, but not as measured in software.  and really it never.was.  the big fish like open market (rest their souls) were just.consulting companies pretending to be product companies.[5], and.the offerings at our end of the market were a couple hundred lines.of perl scripts.  or could have been implemented as a couple hundred.lines of perl; in fact they were probably tens of thousands of lines.of c++ or java.  once we actually took the plunge into e-commerce,.it turned out to be surprisingly easy to compete.so why were we afraid?  we felt we were good at programming, but.we lacked confidence in our ability to do a mysterious, undifferentiated.thing we called "business."  in fact there is no such thing as."business." there's selling, promotion, figuring out what people.want, deciding how much to charge, customer support, paying your.bills, getting customers to pay you, getting incorporated, raising.money, and so on.  and the combination is not as hard as it seems,.because some tasks (like raising money and getting incorporated).are an o(1) pain in the ass, whether you're big or small, and others.(like selling and promotion) depend more on energy and imagination.than any kind of special training.artix was like a hyena, content to survive on carrion because we.were afraid of the lions.  except the lions turned out not to have.any teeth, and the business of putting galleries online barely.qualified as carrion.a familiar problemsum up all these sources of error, and it's no wonder we had such.a bad idea for a company.  we did the first thing we thought of;.we were ambivalent about being in business at all; and we deliberately.chose an impoverished market to avoid competition.looking at the applications for the summer founders program, i see.signs of all three.  but the first is by far the biggest problem..most of the groups applying have not stopped to ask: of all the.things we could do, is this the one with the best chance of.making money?if they'd already been through their artix phase, they'd have learned.to ask that.  after the reception we got from art dealers, we were.ready to.  this time, we thought, let's make something people want.reading the wall street journal for a week should give anyone.ideas for two or three new startups.  the articles are full of.descriptions of problems that need to be solved.  but most of the.applicants don't seem to have looked far for ideas.we expected the most common proposal to be for multiplayer games..we were not far off: this was the second most common..the most common was some combination of a blog, a calendar,.a dating site, and friendster.  maybe there is some new killer app.to be discovered here, but it seems perverse to go poking around.in this fog when there are valuable, unsolved problems lying about.in the open for anyone to see.  why did no one propose a new scheme.for micropayments?  an ambitious project, perhaps, but i can't.believe we've considered every alternative.  and newspapers and.magazines are (literally) dying for a solution.why did so few applicants really think about what customers want?.i think the problem with many, as with people in their early twenties.generally, is that they've been trained their whole lives to jump.through predefined hoops.  they've spent 15-20 years solving problems.other people have set for them.  and how much time deciding what.problems would be good to solve?  two or three course projects?.they're good at solving problems, but bad at choosing them.but that, i'm convinced, is just the effect of training.  or more.precisely, the effect of grading.  to make grading efficient,.everyone has to solve the same problem, and that means it has to.be decided in advance.  it would be great if schools taught students.how to choose problems as well as how to solve them, but i don't.know how you'd run such a class in practice.copper and tinthe good news is, choosing problems is something that can be learned..i know that from experience.  hackers can learn to make things.customers want..[6]this is a controversial view.  one expert on "entrepreneurship".told me that any startup had to include business people, because.only they could focus on what customers wanted.  i'll probably.alienate this guy forever by quoting him, but i have to risk it,.because his email was such a perfect example of this view:..80% of mit spinoffs succeed provided they.have at least one management person in the team at the start. the.business person represents the "voice of the customer" and that's.what keeps the engineers and product development on track..this is, in my opinion, a crock.  hackers are perfectly capable of.hearing the voice of the customer without a business person to.amplify the signal for them.  larry page and sergey brin were grad.students in computer science, which presumably makes them "engineers.".do you suppose google is only good because they had some business.guy whispering in their ears what customers wanted?   it seems to.me the business guys who did the most for google were the ones who.obligingly flew altavista into a hillside just as google was getting.started.the hard part about figuring out what customers want is figuring.out that you need to figure it out.  but that's something you can.learn quickly.  it's like seeing the other interpretation of an.ambiguous picture.  as soon as someone tells you there's a rabbit.as well as a duck, it's hard not to see it.and compared to the sort of problems hackers are used to solving,.giving customers what they want is easy.  anyone who can write an.optimizing compiler can design a ui that doesn't confuse users,.once they choose to focus on that problem.  and once you.apply that kind of brain power to petty but profitable questions,.you can create wealth very rapidly.that's the essence of a startup: having brilliant people do work.that's beneath them.   big companies try to hire the right person.for the job.  startups win because they don't—because they take.people so smart that they would in a big company be doing "research,".and set them to work instead on problems of the most immediate and.mundane sort.  think einstein designing refrigerators..[7]if you want to learn what people want, read.dale carnegie's how to win friends and influence people..[8].when a friend recommended this book, i couldn't believe he was.serious.  but he insisted it was good, so i read it, and he was.right.  it deals with the most difficult problem in human experience:.how to see things from other people's point of view, instead of.thinking only of yourself.most smart people don't do that very well.  but adding this ability.to raw brainpower is like adding tin to copper.  the result is.bronze, which is so much harder that it seems a different metal.a hacker who has learned what to make, and not just how to make,.is extraordinarily powerful.  and not just at making money: look.what a small group of volunteers has achieved with firefox.doing an artix teaches you to make something people want in the.same way that not drinking anything would teach you how much you.depend on water.  but it would be more convenient for all involved.if the summer founders didn't learn this on our dime—if they could.skip the artix phase and go right on to make something customers.wanted.  that, i think, is going to be the real experiment this.summer.  how long will it take them to grasp this?  we decided.we ought to have t-shirts for the sfp, and we'd been thinking about.what to print on the back.  till now we'd been planning to use.if you can read this, i should be working..but now we've decided it's going to be.make something people want..notes[1].sfp applicants: please don't assume that not being accepted.means we think your idea is bad.  because we want to keep the.number of startups small this first summer, we're going to have.to turn down some good proposals too.[2].dealers try to give each customer the impression that the stuff.they're showing him is something special that only a few people.have seen, when in fact it may have been sitting in their racks for.years while they tried to unload it on buyer after buyer.[3].on the other hand, he was skeptical about viaweb too.  i have.a precise measure of that, because at one point in the first couple.months we made a bet: if he ever made a million dollars out of.viaweb, he'd get his ear pierced.  we didn't let him.off, either.[4].i wrote a program to generate all the combinations of "web".plus a three letter word.  i learned from this that most three.letter words are bad: webpig, webdog, webfat, webzit, webfug.  but.one of them was webvia; i swapped them to make viaweb.[5].it's much easier to sell services than a product, just as it's.easier to make a living playing at weddings than by selling recordings..but the margins are greater on products.  so during the.bubble a lot of companies used consulting to generate revenues.they could attribute to the sale of products, because it made a.better story for an ipo.[6].trevor blackwell presents the following recipe for a startup:."watch people who have money to spend, see what they're wasting.their time on, cook up a solution, and try selling it to them. it's.surprising how small a problem can be and still provide a profitable.market for a solution."[7].you need to offer especially large rewards to get great people.to do tedious work.  that's why startups always pay equity rather.than just salary.[8].buy an old.copy from the 1940s or 50s instead of the current edition, which has been.rewritten to suit present fashions.  the original edition contained.a few unpc ideas, but it's always better to read an original book,.bearing in mind that it's a book from a past era, than to read a.new version sanitized for your protection.thanks to bill birch, trevor blackwell, jessica livingston,.and robert morris for reading drafts of this.russian translationitalian translationjapanese translation.if you liked this, you may also like.hackers & painters.<eot><sot>return of the mac.march 2005
all the best hackers.i know are gradually switching to macs.  my.friend robert said his whole research group at mit recently bought.themselves powerbooks.  these guys are not the graphic designers.and grandmas who were buying macs at apple's low point in the.mid 1990s.  they're about as hardcore os hackers as you can get.the reason, of course, is os x.  powerbooks are beautifully designed.and run freebsd.  what more do you need to know?i got a powerbook at the end of last year.   when my ibm thinkpad's.hard disk died soon after, it became my only laptop.  and when my.friend trevor showed up at my house recently, he was carrying a.powerbook identical to mine.for most of us, it's not a switch to apple, but a return.  hard as.this was to believe in the mid 90s, the mac was in its time the.canonical hacker's computer.in the fall of 1983,.the professor in one of my college cs classes got up and announced,.like a prophet, that there would soon be a computer with half a mips.of processing power that would fit under an airline seat and cost.so little that we could save enough to buy one from a summer job..the whole room gasped..and when the mac appeared, it was even better than we'd hoped.  it.was small and powerful and cheap, as promised.  but it was also.something we'd never considered a computer could be: fabulously.well designed.i had to have one.  and i wasn't alone.  in the mid to late 1980s,.all the hackers i knew were either writing software for the mac,.or wanted to.  every futon sofa in cambridge seemed to have the.same fat white book lying open on it.  if you turned it over, it.said "inside macintosh." then came linux and freebsd, and hackers, who follow the most.powerful os wherever it leads, found themselves switching to intel.boxes.  if you cared about design, you could buy a thinkpad, which.was at least not actively repellent, if you could get the intel and.microsoft stickers.off the front. [1]with os x, the hackers are back.  when i walked into the apple store.in cambridge, it was like coming home.  much.was changed, but there was still that apple coolness in the air,.that feeling that the show was being run by someone who really.cared, instead of random corporate deal-makers.so what, the business world may say. who cares if hackers like apple.again?  how big is the hacker market, after all?quite small, but important out of proportion to its size.  when it.comes to computers, what hackers are doing now, everyone will be.doing in ten years.  almost all technology, from unix to bitmapped.displays to the web, became popular first within cs departments and.research labs, and gradually spread to the rest of the world.i remember telling my father back in 1986 that there was a new kind.of computer called a sun that was a serious unix machine, but.so small and cheap that you could.have one of your own to sit in front of, instead of sitting in front.of a vt100 connected to a single central vax.  maybe, i suggested,.he should buy some stock in this company.  i think he really wishes.he'd listened.in 1994 my friend koling wanted to talk to his girlfriend in taiwan,.and to save long-distance bills he wrote some software that would.convert sound to data packets that could be sent over the internet..we weren't sure at the time whether this was a proper use of the.internet, which was still then a quasi-government entity.  what he.was doing is now called voip, and it is a huge and rapidly growing.business.if you want to know what ordinary people will be doing with computers.in ten years, just walk around the cs department at a good university..whatever they're doing, you'll be doing.in the matter of "platforms" this tendency is even more pronounced,.because novel software originates with.great hackers, and they tend.to write it first for whatever computer they personally use.  and.software sells hardware.  many if not most of the initial sales of.the apple ii came from people who bought one to run visicalc.  and.why did bricklin and frankston write visicalc for the apple ii?.because they personally liked it.  they could have chosen any machine.to make into a star.if you want to attract hackers to write software that will sell.your hardware, you have to make it something that they themselves.use.  it's not enough to make it "open."  it has to be open and.good.and open and good is what macs are again, finally.  the intervening.years have created a situation that is, as far as i know, without.precedent: apple is popular at the low end and the high end, but.not in the middle.  my seventy year old mother has a mac laptop..my friends with phds in computer science have mac laptops. [2] and yet.apple's overall market share is still small.though unprecedented, i predict this situation is also temporary.so dad, there's this company called apple. they make a new kind of.computer that's as well designed as a bang & olufsen stereo system,.and underneath is the best unix machine you can buy.  yes, the price.to earnings ratio is kind of high, but i think a lot of people are.going to want these..notes[1] these horrible stickers are much like the intrusive ads popular.on pre-google search engines.  they say to the customer: you are.unimportant.  we care about intel and microsoft, not you.[2] y combinator.is (we hope) visited mostly by.hackers.  the proportions of oses are:.windows 66.4%, macintosh 18.8%, linux 11.4%, and freebsd 1.5%..the mac number is.a big change from what it would have been five years ago.italian translationrussian translationchinese translation<eot><sot>writing,  briefly.march 2005
.(in the process.of answering an email, i accidentally wrote a tiny essay about writing..i usually spend weeks on an essay.  this one took  67 minutes—23.of writing, and  44 of rewriting.)i think it's far more important to write well than most people.realize.  writing doesn't just communicate ideas; it generates them..if you're bad at writing and don't like to do it, you'll miss out.on most of the ideas writing would have generated.as for how to write well, here's the short version:.write a bad version.1 as fast as you can; rewrite it over and over; cut out everything.unnecessary; write in a conversational tone; develop a nose for.bad writing, so you can see and fix it in yours; imitate writers.you like; if you can't get started, tell someone what you plan to.write about, then write down what you said; expect.80% of the ideas in an essay to happen after you start writing it,.and 50% of those you start with to be wrong; be confident enough.to cut; have friends you trust read your stuff and tell you which.bits are confusing or drag; don't (always) make detailed outlines;.mull ideas over for a few days before.writing; carry a small notebook or scrap paper with you; start writing.when you think of the first.sentence; if a deadline.forces you to start before that, just say the most important sentence.first; write about stuff you like; don't try to sound impressive; don't hesitate to change the topic on the fly;.use footnotes to contain digressions; use anaphora to knit.sentences together; read your essays out loud to see (a) where you stumble.over awkward phrases and (b) which bits are boring (the.paragraphs you dread reading); try to tell the.reader something new and useful; work in fairly big quanta of time;.when you restart, begin by rereading what you have so far; when you.finish, leave yourself something easy to start with; accumulate.notes for topics you plan to cover at the bottom of the file; don't.feel obliged to cover any of them; write for a reader who won't.read the essay as carefully as you do, just as pop songs are.designed to sound ok on crappy car radios;.if you say anything mistaken, fix it immediately;.ask friends which sentence you'll regret most; go back and tone.down harsh remarks; publish stuff online, because.an audience makes you write more, and thus generate more.ideas; print out drafts instead of just looking at them.on the screen; use simple, germanic words; learn to distinguish.surprises from digressions; learn to recognize the approach of an.ending, and when one appears, grab it.russian translationjapanese translationromanian translationspanish translationgerman translationchinese translationhungarian translationcatalan translationdanish translationarabic translation<eot><sot>undergraduation.want to start a startup?  get funded by.y combinator..march 2005
(parts of this essay began as replies to students who wrote to.me with questions.)recently i've had several emails from computer science.undergrads asking what to do in college. i might not.be the best source of advice, because i was a philosophy major in.college.  but i took so many cs classes that most cs majors thought.i was one.  i was certainly a hacker, at least.hackingwhat should you do in college to become a.good hacker?  there are two.main things you can do: become very good at programming, and learn.a lot about specific, cool problems.  these turn out to be equivalent,.because each drives you to do the other.the way to be good at programming is to work (a) a lot (b) on hard.problems.  and the way to make yourself work on hard problems is.to work on some very engaging project..odds are this project won't be a class assignment.  my friend robert.learned a lot by writing network software when he was an.undergrad. one of his projects was to connect harvard to the.arpanet; it had been one of the original nodes, but by 1984 the.connection had died. [1]  not only was this.work not for a class, but because he spent all his time on it.and neglected his studies, he was kicked out of.school for a year. [2]  it all evened out in the end, and now he's.a professor at mit.  but you'll probably be happier if you don't.go to that extreme; it caused him a lot of worry at the time.another way to be good at programming is to find other people who.are good at it, and learn what they know.  programmers tend to sort.themselves into tribes according to the type of work they do and.the tools they use, and some tribes are.smarter than others.  look.around you and see what the smart people seem to be working on;.there's usually a reason.some of the smartest people around you are professors.  so one way.to find interesting work is to volunteer as a research assistant..professors are especially interested in people who can solve tedious.system-administration type problems for them, so that is a way to.get a foot in the door.  what they fear are.flakes and resume padders.  it's all too.common for an assistant to result in a net increase in work.  so.you have to make it clear you'll mean a net decrease.don't be put off if they say no.  rejection is almost always less.personal than the rejectee imagines.  just move on to the next..(this applies to dating too.)beware, because although most professors are smart, not all of them.work on interesting stuff.  professors have to publish novel results.to advance their careers, but there is more competition in more.interesting areas of research.  so what less ambitious professors.do is turn out a series of papers whose conclusions are novel because.no one else cares about them.  you're better off avoiding these.i never worked as a research assistant, so i feel a bit dishonest.recommending that route.  i learned to program by writing stuff of.my own, particularly by trying to reverse-engineer winograd's.shrdlu.  i was as obsessed with that program as a mother with a new baby.whatever the disadvantages of working by yourself, the advantage.is that the project is all your own.  you never have to compromise.or ask anyone's permission, and if you have a new idea you can just.sit down and start implementing it.in your own projects you don't have to worry about novelty (as.professors do) or profitability (as businesses do).  all that matters.is how hard the project is technically, and that has no correlation.to the nature of the application.  "serious" applications like.databases are often trivial and dull technically (if you ever suffer.from insomnia, try reading the technical literature about databases).while "frivolous" applications like games are often very sophisticated..i'm sure there are game companies out there working on products.with more intellectual content than the research at the.bottom nine tenths of university cs departments.if i were in college now i'd probably work on.graphics: a network game, for example, or a tool for 3d animation..when i was an undergrad there weren't enough cycles around to make.graphics interesting, but it's hard to imagine anything more fun.to work on now.mathwhen i was in college, a lot of the professors believed (or at least.wished) that.computer science was a branch of math.  this idea was.strongest at harvard, where there wasn't even a cs major till the.1980s; till then one had to major in applied math.  but it was.nearly as bad at cornell.  when i told the fearsome professor conway.that i was interested in ai (a hot topic then), he told me i should.major in math.  i'm still not sure whether he thought ai required.math, or whether he thought ai was nonsense and that majoring in.something rigorous would cure me of such stupid ambitions.in fact, the amount of math you need as a hacker is a lot less.than most university departments like to admit.  i don't think you.need much more than high school math plus a few concepts from the.theory of computation.  (you have to know what an n^2 algorithm is.if you want to avoid writing them.) unless you're planning to write.math applications, of course.  robotics, for example, is all math.but while you don't literally need math for most kinds of hacking,.in the sense of knowing 1001 tricks for differentiating formulas,.math is very much worth studying for its own sake.  it's a.valuable source of metaphors for almost any kind of work.[3] i wish.i'd studied more math in college for that reason.like a lot of people, i was mathematically abused as a child.  i.learned to think of math as a collection of formulas that were.neither beautiful nor had any relation to my life (despite attempts.to translate them into "word problems"), but had to be memorized.in order to do well on tests.one of the most valuable things you could do in college would be.to learn what math is really about.  this may not be easy, because.a lot of good mathematicians are bad teachers.  and while there are.many popular books on math, few seem good.  the best i can think.of are w. w. sawyer's.  and of course euclid. [4]everythingthomas huxley said "try to learn something about everything and.everything about something."  most universities aim at this.ideal.but what's everything?  to me it means, all that people.learn in the course of working honestly on hard problems.  all such.work tends to be related, in that ideas and techniques from one.field can often be transplanted successfully to others.  even others.that seem quite distant.  for example, i write.essays the same way.i write software: i sit down and blow out a lame version 1 as fast.as i can type, then spend several weeks rewriting it.working on hard problems is not, by itself, enough.  medieval.alchemists were working on a hard problem, but their approach was.so bogus that there was little.to learn from studying it, except possibly about people's ability.to delude themselves.  unfortunately the sort of ai i was trying.to learn in college had the same flaw: a very hard problem, blithely.approached with hopelessly inadequate techniques.  bold?  closer.to fraudulent..the social sciences are also fairly bogus, because they're so much.influenced by intellectual fashions.  if a.physicist met a colleague.from 100 years ago, he could teach him some new things; if a psychologist.met a colleague from 100 years ago, they'd just get into an.ideological argument..yes, of course, you'll learn something by taking a.psychology class.  the point is, you'll learn more by taking.a class in another department.the worthwhile departments, in my opinion, are math, the hard.sciences, engineering, history (especially economic and social.history, and the history of science), architecture, and the classics..a survey course in art history may be worthwhile.  modern literature.is important, but the way to learn about it is just to read.  i.don't know enough about music to say.you can skip the social sciences, philosophy, and the various.departments created recently in response to political pressures..many of these fields talk about important problems, certainly.  but.the way they talk about them is useless.  for example, philosophy.talks, among other things, about our obligations to one another;.but you can learn more about this from a wise grandmother or e. b..white than from an academic philosopher.i speak here from experience.  i should probably have been offended.when people laughed at clinton for saying "it depends on what the.meaning of the word 'is' is."  i took about five classes in college.on what the meaning of "is" is.another way to figure out which fields are worth studying is to.create the  dropout graph. for example, i know many people.who switched from math to computer science because they found math.too hard, and no one who did the opposite.  people don't do hard.things gratuitously; no one will work on a harder problem unless.it is proportionately (or at least log(n)) more rewarding.  so.probably math is more worth studying than computer science.  by.similar comparisons you can make a graph of all the departments in.a university.  at the bottom you'll find the subjects with least.intellectual content.if you use this method, you'll get roughly the same answer i just.gave.language courses are an anomaly.  i think they're better considered.as extracurricular activities, like pottery classes.  they'd be far.more useful when combined with some time living in a country where.the language is spoken.  on a whim i studied arabic as a freshman..it was a lot of work, and the only lasting benefits were a weird.ability to identify semitic roots and some insights into how people.recognize words.studio art and creative writing courses are wildcards.  usually.you don't get taught much:  you just work (or don't work) on whatever.you want, and then sit around offering "crits" of one another's.creations under the vague supervision of the teacher.  but writing and.art are both very hard problems that (some) people work honestly.at, so they're worth doing, especially if you can find a good.teacher.jobsof course college students have to think about more than just.learning.  there are also two practical problems to consider: jobs,.and graduate school.in theory a liberal education is not supposed to supply job training..but everyone knows this is a bit of a fib.  hackers at every college.learn practical skills, and not by accident.what you should learn to get a job depends on the kind you want..if you want to work in a big company, learn how to hack.blub on.windows.  if you want to work at a cool little company or research.lab, you'll do better to learn ruby on linux.  and if you want to.start your own company, which i think will be more and more common,.master the most powerful tools you can find, because you're going.to be in a race against your competitors, and they'll be your horse.there is not a direct correlation between the skills you should.learn in college and those you'll use in a job.  you should aim.slightly high in college.in workouts a football player may bench press 300 pounds, even.though he may never have to exert anything like that much force in.the course of a game.  likewise, if your professors try to make you.learn stuff that's more advanced than you'll need in a job, it may.not just be because they're academics, detached from the real world..they may be trying to make you lift weights with your brain.the programs you write in classes differ in three critical ways.from the ones you'll write in the real world: they're small; you.get to start from scratch; and the problem is usually artificial.and predetermined.  in the real world, programs are bigger, tend.to involve existing code, and often require you to figure out what.the problem is before you can solve it.you don't have to wait to leave (or even enter) college to learn.these skills.  if you want to learn how to deal with existing code,.for example, you can contribute to open-source projects.  the sort.of employer you want to work for will be as impressed by that as.good grades on class assignments.in existing open-source projects you don't get much practice at.the third skill, deciding what problems to solve.  but there's.nothing to stop you starting new projects of your own.  and  good.employers will be even more impressed.with that.what sort of problem should you try to solve?  one way to answer.that is to ask what you need as a user.  for example, i stumbled.on a good algorithm for spam filtering because i wanted to stop.getting spam.  now what i wish i had was a mail reader that somehow.prevented my inbox from filling up.  i tend to use my inbox as a.todo list.  but that's like using a screwdriver to open.bottles; what one really wants is a bottle opener.grad schoolwhat about grad school?  should you go?  and how do you get into a.good one?in principle, grad school is professional training in research, and.you shouldn't go unless you want to do research as a career.  and.yet half the people who get phds in cs don't go into research..i didn't go to grad school to become a professor.  i went because.i wanted to learn more.so if you're mainly interested in hacking and you go to grad school,.you'll find a lot of other people who are similarly out of their.element.  and if half the people around you are out of their element in the.same way you are, are you really out of your element?there's a fundamental problem in "computer science," and it surfaces.in situations like this.  no one is sure what "research" is supposed to be..a lot.of research is hacking that had to be crammed into the form of an.academic paper to yield one more quantum of publication.so it's kind of misleading to ask whether you'll be at home in grad.school, because very few people are quite at home in computer.science.  the whole field is uncomfortable in its own skin.  so.the fact that you're mainly interested in hacking shouldn't deter.you from going to grad school.  just be warned you'll have to do a lot of stuff.you don't like.number one will be your dissertation.  almost everyone hates their.dissertation by the time they're done with it.  the.process inherently tends to produce an unpleasant result, like a cake made out.of whole wheat flour and baked for twelve hours.  few dissertations.are read with pleasure, especially by their authors.but thousands before you have suffered through writing a dissertation..and aside from that, grad school is close to paradise.  many people.remember it as the happiest time of their lives.  and nearly all.the rest, including me, remember it as a period that would have.been, if they hadn't had to write a dissertation. [5]the danger with grad school is that you don't see the scary part.upfront.  phd programs start out as college part 2, with several.years of classes.  so by the time you face the horror of writing a.dissertation, you're already several years in.  if you quit now,.you'll be a grad-school dropout, and you probably won't like that.idea.  when robert got kicked out of grad school for writing the.internet worm of 1988, i envied him enormously for finding a way out.without the stigma of failure. on the whole, grad school is probably better than most alternatives.  you meet a.lot of smart people, and your glum procrastination will at least.be a powerful common bond.  and of course you have a phd at the.end.  i forgot about that. i suppose that's worth something.the greatest advantage of a phd (besides being the union card of.academia, of course) may be that it gives you some baseline confidence..for example, the honeywell thermostats in my house have the most.atrocious ui.  my mother, who has the same model, diligently spent.a day reading the user's manual to learn how to operate hers.  she.assumed the problem was with her.  but i can think to myself "if.someone with a phd in computer science can't understand this.thermostat, it must be badly.designed."if you still want to go to grad school after this equivocal.recommendation, i can give you solid advice about how to get in..a lot of my friends are cs professors now, so i have the inside.story about admissions.  it's quite different from college.  at.most colleges, admissions officers decide who gets in.  for phd.programs, the professors do.  and they try to do.it well, because the people they admit are going to be working for.them.apparently only recommendations really matter at the best schools..standardized tests count for nothing, and grades for little.  the.essay is mostly an opportunity to disqualify yourself by saying.something stupid.  the only thing professors.trust is recommendations, preferably from people they know. [6]so if you want to get into a phd program, the key is to impress.your professors.  and from my friends who are professors i know.what impresses them: not merely trying to impress them.  they're.not impressed by students who get good grades or want to be their.research assistants so they can get into grad school.  they're.impressed by students who get good grades and want to be their.research assistants because they're genuinely interested in the.topic.so the best thing you can do in college, whether you want to get.into grad school or just be good at hacking, is figure out what you.truly like.  it's hard to trick professors into letting you into.grad school, and impossible to trick problems into letting you solve.them.  college is where faking stops working.  from this point,.unless you want to go work for a big company, which is like reverting.to high school, the only way forward is through doing what you.love.notes.[1] no one seems to have minded, which shows how unimportant.the arpanet (which became the internet) was as late as.1984.[2] this is why, when i became an employer, i didn't care.about gpas.  in fact, we actively sought out people.who'd failed out of school.  we once put up posters around harvard.saying "did you just get kicked out for doing badly in your classes.because you spent all your time working on some project of your.own?  come work for us!"  we managed to find a kid who had been,.and he was a great hacker.when harvard kicks undergrads out for a year, they have to get jobs..the idea is to show them how awful the real world is, so they'll.understand how lucky they are to be in college.  this plan backfired.with the guy who came to work for us, because he had more fun than.he'd had in school, and made more that year from stock options than.any of his professors did in salary.  so instead of crawling back.repentant at the end of the year, he took another year off and went.to europe.  he did eventually graduate at about 26.[3] eric raymond says the best metaphors for hackers are.in set theory, combinatorics, and graph theory.trevor blackwell reminds you to take math classes intended for math majors.."'math for engineers' classes sucked mightily. in fact any 'x for.engineers' sucks, where x includes math, law, writing and visual.design."[4] other highly recommended books: what is mathematics?, by.courant and robbins;  geometry and the imagination by hilbert and.cohn-vossen..and for those interested in graphic design,.byrne's euclid..[5] if you wanted to have the perfect life, the thing to do would.be to go to grad school, secretly write your dissertation in the.first year or two, and then just enjoy yourself for the next three.years, dribbling out a chapter at a time.  this prospect will make.grad students' mouths water, but i know of no one who's had the.discipline to pull it off.[6] one professor friend says that 15-20% of the grad students they.admit each year are "long shots."  but what he means by long shots.are people whose applications are perfect in every way, except.that no one on the admissions committee knows the professors who.wrote the recommendations.so if you want to get into.grad school in the sciences, you need to go to college somewhere with.real research professors.  otherwise you'll seem a risky bet.to admissions committees, no matter how good you are.which implies.a surprising but apparently inevitable consequence:.little liberal arts colleges are doomed..most smart.high school kids at least consider going into the sciences, even.if they ultimately choose not to..why go to a college that limits their options?thanks to trevor blackwell, alex lewin, jessica livingston,.robert morris, eric.raymond, and several.anonymous cs professors.for reading drafts of this, and to the students whose questions.began it.more advice for undergradsjoel spolsky: advice for computer science college studentseric raymond: how to become a hacker<eot><sot>a unified theory of vc suckage.march 2005
a couple months ago i got an email from a recruiter asking if i was.interested in being a "technologist in residence" at a new venture.capital fund.  i think the idea was to play karl rove to the vcs'.george bush.i considered it for about four seconds.  work for a vc fund?  ick.one of my most vivid memories from our startup is going to visit.greylock, the famous boston vcs. they were the most arrogant.people i've met in my life.  and i've met a lot of arrogant people..[1]i'm not alone in feeling this way, of course.  even a vc friend of.mine dislikes vcs.  "assholes," he says.but lately i've been learning more about how the vc world works,.and a few days ago it hit me that there's a reason vcs are the way.they are.  it's not so much that the business attracts jerks, or.even that the power they wield corrupts them.  the real problem is.the way they're paid.the problem with vc funds is that they're funds.  like the.managers of mutual funds or hedge funds, vcs get paid a percentage.of the money they manage: about 2% a year in management fees,.plus a percentage of the gains.  so they want.the fund to be huge-- hundreds of millions of dollars, if possible..but that means each partner ends up being responsible for investing.a lot of money.  and since one person can only manage so many deals,.each deal has to be for multiple millions of dollars.this turns out to explain nearly all the characteristics of vcs.that founders hate.it explains why vcs take so agonizingly long to make up their minds,.and why their due diligence feels like a body cavity search. [2].with so much at stake, they have to be paranoid.it explains why they steal your ideas.  every founder knows that.vcs will tell your secrets to your competitors if they end up.investing in them.  it's not unheard of for vcs to meet you when.they have no intention of funding you, just to pick your brain for.a competitor.  this prospect makes naive founders clumsily secretive..experienced founders treat it as a cost of doing business.  either.way it sucks.  but again, the only reason vcs are so sneaky is the.giant deals they do.  with so much at stake, they have to be devious.it explains why vcs tend to interfere in the companies they invest.in.  they want to be on your board not just so that they can advise.you, but so that they can watch you.  often they even install a new.ceo.  yes, he may have extensive business experience.  but he's.also their man: these newly installed ceos always play something.of the role of a political commissar in a red army unit.  with.so much at stake, vcs can't resist micromanaging you.the huge investments themselves are something founders would dislike,.if they realized how damaging they can be.  vcs don't invest $x.million because that's the amount you need, but because that's the.amount the structure of their business requires them to invest..like steroids, these sudden huge investments can do more harm than.good.  google survived enormous vc funding because it could.legitimately absorb large amounts of money.  they had to buy a lot.of servers and a lot of bandwidth to crawl the whole web.  less.fortunate startups just end up hiring armies of people to sit around.having meetings.in principle you could take a huge vc investment, put it in treasury.bills, and continue to operate frugally.  you just try it.and of course giant investments mean giant valuations.  they have.to, or there's not enough stock left to keep the founders interested..you might think a high valuation is a great thing.  many founders.do.  but you can't eat paper.  you can't benefit from a high valuation.unless you can somehow achieve what those in the business.call a "liquidity event," and the higher.your valuation, the narrower your options for doing that.  many a.founder would be happy to sell his company for $15 million, but vcs.who've just invested at a pre-money valuation of $8 million won't.hear of that.  you're rolling the dice again, whether you like it.or not.back in 1997, one of our competitors raised $20 million in a single.round of vc funding.  this was at the time more than the valuation.of our entire company.  was i worried?  not at all: i was delighted..it was like watching a car you're chasing turn down a street that.you know has no outlet.their smartest move at that point would have been to take every.penny of the $20 million and use it to buy us.  we would have sold..their investors would have been furious of course.  but i think the.main reason they never considered this was that they never imagined.we could be had so cheap.  they probably assumed we were on the.same vc gravy train they were.in fact we only spent about $2 million in our entire existence..and that gave us flexibility.  we could sell ourselves to yahoo for.$50 million, and everyone was delighted.  if our competitor had.done that, the last round of investors would presumably have lost.money.  i assume they could have vetoed such a deal.  but no one.those days was paying a lot more than yahoo.  so unless their.founders could pull off an ipo (which would be difficult with yahoo.as a competitor), they had no choice but to ride the thing down.the puffed-up companies that went public during the bubble didn't.do it just because they were pulled into it by unscrupulous investment.bankers.  most were pushed just as hard from the other side by vcs.who'd invested at high valuations, leaving an ipo as the only way.out.  the only people dumber were retail investors.  so it was.literally ipo or bust.  or rather, ipo then bust, or just bust.add up all the evidence of vcs' behavior, and the resulting personality.is not attractive.  in fact, it's the classic villain: alternately.cowardly, greedy, sneaky, and overbearing.i used to take it for granted that vcs were like this. complaining.that vcs were jerks used to seem as naive to me as complaining that.users didn't read the reference manual.  of course vcs were jerks..how could it be otherwise?but i realize now that they're not intrinsically jerks.  vcs are.like car salesmen or bureaucrats: the nature of their work.turns them into jerks.i've met a few vcs i like.  mike moritz seems a good guy.  he even.has a sense of humor, which is almost unheard of among vcs.  from.what i've read about john doerr, he sounds like a good guy too,.almost a hacker.  but they work for the very best vc funds.  and.my theory explains why they'd tend to be different: just as the.very most popular kids don't have to persecute.nerds, the very best.vcs don't have to act like vcs.  they get the pick of all the best.deals.  so they don't have to be so paranoid and sneaky, and they.can choose those rare companies, like google, that will actually.benefit from the giant sums they're compelled to invest.vcs often complain that in their business there's too much money.chasing too few deals.  few realize that this also describes a flaw.in the way funding works at the level of individual firms.perhaps this was the sort of strategic insight i was supposed to.come up with as a "technologist in residence."  if so, the good.news is that they're getting it for free.  the bad news is it.means that if you're not one of the very top funds, you're.condemned to be the bad guys.notes[1] after greylock booted founder philip greenspun out of arsdigita,.he wrote a hilarious but also very informative.essay about it..[2] since most vcs aren't tech guys, the technology side of their.due diligence tends to be like a body cavity search by someone with.a faulty knowledge of human anatomy.  after a while we were quite.sore from vcs attempting to probe our nonexistent database orifice.no, we don't use oracle.  we just store the data in files.  our.secret is to use an os that doesn't lose our data.  which os?.freebsd.  why do you use that instead of windows nt?  because it's.better and it doesn't cost anything.  what, you're using a.freeware os?how many times that conversation was repeated..then when we got to yahoo, we found they used freebsd and stored.their data in files too.chinese translationjapanese translation<eot><sot>how to start a startup.want to start a startup?  get funded by.y combinator..march 2005
(this essay is derived from a talk at the harvard computer.society.)you need three things to create a successful startup: to start with.good people, to make something customers actually want, and to spend.as little money as possible.  most startups that fail do it because.they fail at one of these.  a startup that does all three will.probably succeed.and that's kind of exciting, when you think about it, because all.three are doable.  hard, but doable.  and since a startup that.succeeds ordinarily makes its founders rich, that implies getting.rich is doable too.  hard, but doable.if there is one message i'd like to get across about startups,.that's it.  there is no magically difficult step that requires.brilliance to solve.the ideain particular, you don't need a brilliant.idea to start a startup.around.   the way a startup makes money is to offer people better.technology than they have now.  but what people have now is often.so bad that it doesn't take brilliance to do better.google's plan, for example, was simply to create a search site that.didn't suck.  they had three new ideas: index more of the web, use.links to rank search results, and have clean, simple web pages with.unintrusive keyword-based ads.  above all, they were determined to.make a site that was good to use.  no doubt there are great technical.tricks within google, but the overall plan was straightforward..and while they probably have bigger ambitions now, this alone brings.them a billion dollars a year. [1]there are plenty of other areas that are just as backward as search.was before google.  i can think of several heuristics for generating.ideas for startups, but most reduce to this: look at something.people are trying to do, and figure out how to do it in a way that.doesn't suck.for example, dating sites currently suck far worse than search did.before google.  they all use the same simple-minded model..they seem to have approached the problem by thinking about how to.do database matches instead of how dating works in the real world..an undergrad could build something better as a class project.  and.yet there's a lot of money at stake.  online dating is a valuable.business now, and it might be worth a hundred times as much if it.worked.an idea for a startup, however, is only a beginning.  a lot of.would-be startup founders think the key to the whole process is the.initial idea, and from that point all you have to do is execute..venture capitalists know better.  if you go to vc firms with a.brilliant idea that you'll tell them about if they sign a nondisclosure.agreement, most will tell you to get lost.   that shows how much a.mere idea is worth. the market price is less than the inconvenience.of signing an nda.another sign of how little the initial idea is worth is the number.of startups that change their plan en route. microsoft's original.plan was to make money selling programming languages, of all things..their current business model didn't occur to them until ibm dropped.it in their lap five years later.ideas for startups are worth something, certainly, but the trouble.is, they're not transferrable.  they're not something you could.hand to someone else to execute.  their value is mainly as starting.points: as questions for the people who had them to continue thinking.about.what matters is not ideas, but the people who have them.  good.people can fix bad ideas, but good ideas can't save bad people..peoplewhat do i mean by good people?  one of the best tricks i learned.during our startup was a rule for deciding.who to hire.  could you.describe the person as an animal?  it might be hard to translate.that into another language, but i think everyone in the us knows.what it means.  it means someone who takes their work a little too.seriously; someone who does what they do so well that they pass.right through professional and cross over into obsessive.what it means specifically depends on the job: a salesperson who.just won't take no for an answer; a hacker who will stay up till.4:00 am rather than go to bed leaving code with a bug in it; a pr.person who will cold-call new york times reporters on their cell.phones; a graphic designer who feels physical pain when something.is two millimeters out of place.almost everyone who worked for us was an animal at what they did..the woman in charge of sales was so tenacious that i used to feel.sorry for potential customers on the phone with her.  you could.sense them squirming on the hook, but you knew there would be no.rest for them till they'd signed up.if you think about people you know, you'll find the animal test is.easy to apply.  call the person's image to mind and imagine the.sentence "so-and-so is an animal."  if you laugh, they're not.  you.don't need or perhaps even want this quality in big companies, but.you need it in a startup.for programmers we had three additional tests.  was the person.genuinely smart?  if so, could they actually get things done?  and.finally, since a few good hackers have unbearable personalities,.could we stand to have them around?that last test filters out surprisingly few people.  we could bear.any amount of nerdiness if someone was truly smart.  what we couldn't.stand were people with a lot of attitude.  but most of those weren't.truly smart, so our third test was largely a restatement of the.first.when nerds are unbearable it's usually because they're trying too.hard to seem smart.  but the smarter they are, the less pressure.they feel to act smart.  so as a rule you can recognize genuinely.smart people by their ability to say things like "i don't know,"."maybe you're right," and "i don't understand x well enough."this technique doesn't always work, because people can be influenced.by their environment.  in the mit cs department, there seems to be.a tradition of acting like a brusque know-it-all. i'm told it derives.ultimately from marvin minsky, in the same way the classic airline.pilot manner is said to derive from chuck yeager.  even genuinely.smart people start to act this way there, so you have to make.allowances.it helped us to have robert morris, who is one of the readiest to.say "i don't know" of anyone i've met.  (at least, he was before he.became a professor at mit.)  no one dared put on attitude around.robert, because he was obviously smarter than they were and yet had.zero attitude himself.like most startups, ours began with a group of friends, and it was.through personal contacts that we got most of the people we hired..this is a crucial difference between startups and big companies..being friends with someone for even a couple days will tell you.more than companies could ever learn in interviews.  [2]it's no coincidence that startups start around universities, because.that's where smart people meet.  it's not what people learn in.classes at mit and stanford that has made technology companies.spring up around them.  they could sing campfire songs in the classes.so long as admissions worked the same.if you start a startup, there's a good chance it will be with people.you know from college or grad school.  so in theory you ought to.try to make friends with as many smart people as you can in school,.right?  well, no.  don't make a conscious effort to schmooze; that.doesn't work well with hackers.what you should do in college is work on your own projects.  hackers.should do this even if they don't plan to start startups, because.it's the only real way to learn how to program.   in some cases you.may collaborate with other students, and this is the best way to.get to know good hackers.  the project may even grow into a startup..but once again, i wouldn't aim too directly at either target.  don't.force things; just work on stuff you like with people you like.ideally you want between two and four founders.  it would be hard.to start with just one.  one person would find the moral weight of.starting a company hard to bear.  even bill gates, who seems to be.able to bear a good deal of moral weight, had to have a co-founder..but you don't want so many founders that the company starts to look.like a group photo.  partly because you don't need a lot of people.at first, but mainly because the more founders you have, the worse.disagreements you'll have. when there are just two or three founders,.you know you have to resolve disputes immediately or perish.  if.there are seven or eight, disagreements can linger and harden into.factions.  you don't want mere voting; you need unanimity.in a technology startup, which most startups are, the founders.should include technical people.   during the internet bubble there.were a number of startups founded by business people who then went.looking for hackers to create their product for them.  this doesn't.work well.  business people are bad at deciding what to do with.technology, because they don't know what the options are, or which.kinds of problems are hard and which are easy.  and when business.people try to hire hackers, they can't tell which ones are.good..even other hackers have a hard time doing that..for business people it's roulette.do the founders of a startup have to include business people?  that.depends.  we thought so when we started ours, and we asked several.people who were said to know about this mysterious thing called."business" if they would be the president.  but they all said no,.so i had to do it myself.  and what i discovered was that business.was no great mystery.   it's not something like physics or medicine.that requires extensive study.  you just try to get people to pay.you for stuff.i think the reason i made such a mystery of business was that i was.disgusted by the idea of doing it.  i wanted to work in the pure,.intellectual world of software, not deal with customers' mundane.problems.  people who don't want to get dragged into some kind of.work often develop a protective incompetence at it.  paul erdos was.particularly good at this.  by seeming unable even to cut a grapefruit.in half (let alone go to the store and buy one), he forced other.people to do such things for him, leaving all his time free for.math.  erdos was an extreme case, but most husbands use the same.trick to some degree.once i was forced to discard my protective incompetence, i found.that business was neither so hard nor so boring as i feared.  there.are esoteric areas of business that are quite hard, like tax law.or the pricing of derivatives, but you don't need to know about.those in a startup.  all you need to know about business to run a.startup are commonsense things people knew before there were business.schools, or even universities.if you work your way down the forbes 400 making an x next to the.name of each person with an mba, you'll learn something important.about business school.  after warren buffett, you don't hit another.mba till number 22,.phil knight, the ceo of nike.  there are only 5 mbas in the top.50.  what you notice in the forbes 400 are a lot of people with.technical backgrounds.  bill gates, steve jobs, larry ellison,.michael dell, jeff bezos, gordon moore.  the rulers of the technology.business tend to come from technology, not business.  so if you.want to invest two years in something that will help you succeed.in business, the evidence suggests you'd do better to learn how to.hack than get an mba. [3]there is one reason you might want to include business people in a.startup, though: because you have to have at least one person willing.and able to focus on what customers want. some believe only business.people can do this-- that hackers can implement software, but not.design it.  that's nonsense.  there's nothing about knowing how to.program that prevents hackers from understanding users, or about.not knowing how to program that magically enables business people.to understand them.if you can't understand users, however, you should either learn how.or find a co-founder who can.  that is the single most important.issue for technology startups, and the rock that sinks more of them.than anything else.what customers wantit's not just startups that have to worry about this.  i think most.businesses that fail do it because they don't give customers what.they want.  look at restaurants.  a large percentage fail, about a.quarter in the first year.  but can you think of one restaurant.that had really good food and went out of business?restaurants with great food seem to prosper no matter what.  a.restaurant with great food can be expensive, crowded, noisy, dingy,.out of the way, and even have bad service, and people will keep.coming.  it's true that a restaurant with mediocre food can sometimes.attract customers through gimmicks.  but that approach is very.risky.  it's more straightforward just to make the food good.it's the same with technology.  you hear all kinds of reasons why.startups fail.  but can you think of one that had a massively popular.product and still failed?in nearly every failed startup, the real problem was that customers.didn't want the product.  for most, the cause of death is listed.as "ran out of funding," but that's only the immediate cause.  why.couldn't they get more funding?  probably because the product was.a dog, or never seemed likely to be done, or both.when i was trying to think of the things every startup needed to.do, i almost included a fourth: get a version 1 out as soon as you.can.  but i decided not to, because that's implicit in making.something customers want.  the only way to make something customers.want is to get a prototype in front of them and refine it based on.their reactions.the other approach is what i call the "hail mary" strategy.  you.make elaborate plans for a product, hire a team of engineers to.develop it (people who do this tend to use the term "engineer" for.hackers), and then find after a year that you've spent two million.dollars to develop something no one wants.  this was not uncommon.during the bubble, especially in companies run by business types,.who thought of software development as something terrifying that.therefore had to be carefully planned.we never even considered that approach.  as a lisp hacker, i come.from the tradition of rapid prototyping.  i would not claim (at.least, not here) that this is the right way to write every program,.but it's certainly the right way to write software for a startup..in a startup, your initial plans are almost certain to be wrong in.some way, and your first priority should be to figure out where..the only way to do that is to try implementing them.like most startups, we changed our plan on the fly.  at first we.expected our customers to be web consultants.  but it turned out.they didn't like us, because our software was easy to use and we hosted.the site.  it would be too easy for clients to fire them.  we also.thought we'd be able to sign up a lot of catalog companies, because.selling online was a natural extension of their existing business..but in 1996 that was a hard sell.  the middle managers we talked.to at catalog companies saw the web not as an opportunity, but as.something that meant more work for them.we did get a few of the more adventurous catalog companies.  among.them was frederick's of hollywood, which gave us valuable experience.dealing with heavy loads on our servers.  but most of our users.were small, individual merchants who saw the web as an opportunity.to build a business.  some had retail stores, but many only existed.online.  and so we changed direction to focus on these users..instead of concentrating on the features web consultants and catalog.companies would want, we worked to make the software easy to use.i learned something valuable from that.  it's worth trying very,.very hard to make technology easy to use.  hackers are so used to.computers that they have no idea how horrifying software seems to.normal people.  stephen hawking's editor told him that every equation.he included in his book would cut sales in half.  when you work on.making technology easier to use, you're riding that curve up instead.of down. a 10% improvement in ease of use doesn't just increase.your sales 10%.  it's more likely to double your sales.how do you figure out what customers want?  watch them.  one of the.best places to do this was at trade shows.  trade shows didn't pay.as a way of getting new customers, but they were worth it as market.research.  we didn't just give canned presentations at trade shows..we used to show people how to build real, working stores.  which.meant we got to watch as they used our software, and talk to them.about what they needed.no matter what kind of startup you start, it will probably be a.stretch for you, the founders, to understand what users want.  the.only kind of software you can build without studying users is the.sort for which you are the typical user.  but this is just the kind.that tends to be open source: operating systems, programming.languages, editors, and so on.  so if you're developing technology.for money, you're probably not going to be developing it for people.like you.  indeed, you can use this as a way to generate ideas for.startups: what do people who are not like you want from technology?when most people think of startups, they think of companies like.apple or google.  everyone knows these, because they're big consumer.brands.  but for every startup like that, there are twenty more.that operate in niche markets or live quietly down in the infrastructure..so if you start a successful startup, odds are you'll start one of.those.another way to say that is, if you try to start the kind of startup.that has to be a big consumer brand, the odds against succeeding.are steeper.  the best odds are in niche markets.  since startups.make money by offering people something better than they had before,.the best opportunities are where things suck most.  and it would.be hard to find a place where things suck more than in corporate.it departments.  you would not believe the amount of money companies.spend on software, and the crap they get in return.  this imbalance.equals opportunity.if you want ideas for startups, one of the most valuable things you.could do is find a middle-sized non-technology company and spend a.couple weeks just watching what they do with computers.  most good.hackers have no more idea of the horrors perpetrated in these places.than rich americans do of what goes on in brazilian slums.start by writing software for smaller companies, because it's easier.to sell to them.  it's worth so much to sell stuff to big companies.that the people selling them the crap they currently use spend a.lot of time and money to do it.  and while you can outhack oracle.with one frontal lobe tied behind your back, you can't outsell an.oracle salesman.  so if you want to win through better technology,.aim at smaller customers.  [4]they're the more strategically valuable part of the market anyway..in technology, the low end always eats the high end.  it's easier.to make an inexpensive product more powerful than to make a powerful.product cheaper.  so the products that start as cheap, simple options.tend to gradually grow more powerful till, like water rising in a.room, they squash the "high-end" products against the ceiling.  sun.did this to mainframes, and intel is doing it to sun.  microsoft.word did it to desktop publishing software like interleaf and.framemaker.  mass-market digital cameras are doing it to the expensive.models made for professionals.  avid did it to the manufacturers.of specialized video editing systems, and now apple is doing it to.avid.  henry ford did it to the car makers that preceded.him.  if you build the simple, inexpensive option, you'll not only.find it easier to sell at first, but you'll also be in the best.position to conquer the rest of the market.it's very dangerous to let anyone fly under you.  if you have the.cheapest, easiest product, you'll own the low end.  and if you.don't, you're in the crosshairs of whoever does.raising moneyto make all this happen, you're going to need money.  some startups.have been self-funding-- microsoft for example-- but most aren't..i think it's wise to take money from investors.  to be self-funding,.you have to start as a consulting company, and it's hard to switch.from that to a product company.financially, a startup is like a pass/fail course.  the way to get.rich from a startup is to maximize the company's chances of succeeding,.not to maximize the amount of stock you retain.  so if you can trade.stock for something that improves your odds, it's probably a smart.move.to most hackers, getting investors seems like a terrifying and.mysterious process.  actually it's merely tedious.  i'll try to.give an outline of how it works.the first thing you'll need is a few tens of thousands of dollars.to pay your expenses while you develop a prototype.  this is called.seed capital.  because so little money is involved, raising seed.capital is comparatively easy-- at least in the sense of getting a.quick yes or no.usually you get seed money from individual rich people called."angels." often they're people who themselves got rich from technology..at the seed stage, investors don't expect you to have an elaborate.business plan.  most know that they're supposed to decide quickly..it's not unusual to get a check within a week based on a half-page.agreement.we started viaweb with $10,000 of seed money from our friend julian..but he gave us a lot more than money.  he's a former ceo and also.a corporate lawyer, so he gave us a lot of valuable advice about.business, and also did all the legal work of getting us set up as.a company.  plus he introduced us to one of the two.angel investors who supplied our next round of funding.some angels, especially those with technology backgrounds, may be.satisfied with a demo and a verbal description of what you plan to.do.  but many will want a copy of your business plan, if only to.remind themselves what they invested in.our angels asked for one, and looking back, i'm amazed how much.worry it caused me.  "business plan" has that word "business" in.it, so i figured it had to be something i'd have to read a book.about business plans to write.  well, it doesn't.  at this stage,.all most investors expect is a brief description of what you plan.to do and how you're going to make money from it, and the resumes.of the founders.  if you just sit down and write out what you've.been saying to one another, that should be fine.  it shouldn't take.more than a couple hours, and you'll probably find that writing it.all down gives you more ideas about what to do.for the angel to have someone to make the check out to, you're going.to have to have some kind of company.  merely incorporating yourselves.isn't hard.  the problem is, for the company to exist, you have to.decide who the founders are, and how much stock they each have.  if.there are two founders with the same qualifications who are both.equally committed to the business, that's easy.  but if you have a.number of people who are expected to contribute in varying degrees,.arranging the proportions of stock can be hard.  and once you've.done it, it tends to be set in stone.i have no tricks for dealing with this problem.  all i can say is,.try hard to do it right.  i do have a rule of thumb for recognizing.when you have, though.  when everyone feels they're getting a.slightly bad deal, that they're doing more than they should for the.amount of stock they have, the stock is optimally apportioned.there is more to setting up a company than incorporating it, of.course: insurance, business license, unemployment compensation,.various things with the irs.  i'm not even sure what the list is,.because we, ah, skipped all that.  when we got real funding near.the end of 1996, we hired a great cfo, who fixed everything.retroactively.  it turns out that no one comes and arrests you if.you don't do everything you're supposed to when starting a company..and a good thing too, or a lot of startups would never get started..[5]it can be dangerous to delay turning yourself into a company, because.one or more of the founders might decide to split off and start.another company doing the same thing.  this does happen.  so when.you set up the company, as well as as apportioning the stock, you.should get all the founders to sign something agreeing that everyone's.ideas belong to this company, and that this company is going to be.everyone's only job.[if this were a movie, ominous music would begin here.]while you're at it, you should ask what else they've signed.  one.of the worst things that can happen to a startup is to run into.intellectual property problems.  we did, and it came closer to.killing us than any competitor ever did.as we were in the middle of getting bought, we discovered that one.of our people had, early on, been bound by an agreement that said.all his ideas belonged to the giant company that was paying for him.to go to grad school.  in theory, that could have meant someone.else owned big chunks of our software.  so the acquisition came to.a screeching halt while we tried to sort this out.  the problem.was, since we'd been about to be acquired, we'd allowed ourselves.to run low on cash.  now we needed to raise more to keep going..but it's hard to raise money with an ip cloud over your head, because.investors can't judge how serious it is.our existing investors, knowing that we needed money and had nowhere.else to get it, at this point attempted certain gambits which i.will not describe in detail, except to remind readers that the word."angel" is a metaphor.  the founders thereupon proposed to walk.away from the company, after giving the investors a brief tutorial.on how to administer the servers themselves.  and while this was.happening, the acquirers used the delay as an excuse to welch on.the deal.miraculously it all turned out ok.  the investors backed down; we.did another round of funding at a reasonable valuation; the giant.company finally gave us a piece of paper saying they didn't own our.software; and six months later we were bought by yahoo for much.more than the earlier acquirer had agreed to pay.  so we were happy.in the end, though the experience probably took several years off.my life.don't do what we did.  before you consummate a startup, ask.everyone about their previous ip history.once you've got a company set up, it may seem presumptuous to go.knocking on the doors of rich people and asking them to invest tens.of thousands of dollars in something that is really just a bunch.of guys with some ideas.  but when you look at it from the rich.people's point of view, the picture is more encouraging. most rich.people are looking for good investments.  if you really think you.have a chance of succeeding, you're doing them a favor by letting.them invest.  mixed with any annoyance they might feel about being.approached will be the thought: are these guys the next google?usually angels are financially equivalent to founders.  they get.the same kind of stock and get diluted the same amount in future.rounds.  how much stock should they get?  that depends on how.ambitious you feel.  when you offer x percent of your company for.y dollars, you're implicitly claiming a certain value for the whole.company.  venture investments are usually described in terms of.that number.  if you give an investor new shares equal to 5% of.those already outstanding in return for $100,000, then you've done.the deal at a pre-money valuation of $2 million.how do you decide what the value of the company should be?  there.is no rational way.  at this stage the company is just a bet.  i.didn't realize that when we were raising money.  julian.thought we ought to value the company at several million.dollars.  i thought it was preposterous to claim that a couple.thousand lines of code, which was all we had at the time, were worth.several million dollars.  eventually we settled on one million,.because julian said no one would invest in a company with a valuation.any lower. [6]what i didn't grasp at the time was that the valuation wasn't just.the value of the code we'd written so far.  it was also the value.of our ideas, which turned out to be right, and of all the future.work we'd do, which turned out to be a lot.the next round of funding is the one in which you might deal with.actual.venture capital firms..but don't wait till you've burned.through your last round of funding to start approaching them.  vcs are slow to.make up their minds.  they can take months.  you don't want to be.running out of money while you're trying to negotiate with them.getting money from an actual vc firm is a bigger deal than getting.money from angels.  the amounts of money involved are larger, millions.usually.  so the deals take longer, dilute you more, and impose.more onerous conditions.sometimes the vcs want to install a new ceo of their own choosing..usually the claim is that you need someone mature and experienced,.with a business background.  maybe in some cases this is true.   and.yet bill gates was young and inexperienced and had no business.background, and he seems to have done ok.  steve jobs got booted.out of his own company by someone mature and experienced, with a.business background, who then proceeded to ruin the company.  so i.think people who are mature and experienced, with a business.background, may be overrated.  we used to call these guys "newscasters,".because they had neat hair and spoke in deep, confident voices, and.generally didn't know much more than they read on the teleprompter.we talked to a number of vcs, but eventually we ended up financing.our startup entirely with angel money.  the main reason was that.we feared a brand-name vc firm would stick us with a newscaster as.part of the deal.  that might have been ok if he was content to.limit himself to talking to the press, but what if he wanted to.have a say in running the company?   that would have led to disaster,.because our software was so complex.  we were a company whose whole.m.o. was to win through better technology.  the strategic decisions.were mostly decisions about technology, and we didn't need any help.with those.this was also one reason we didn't go public.  back in 1998 our cfo.tried to talk me into it.  in those days you could go public as a.dogfood portal, so as a company with a real product and real revenues,.we might have done well.  but i feared it would have meant taking.on a newscaster-- someone who, as they say, "can talk wall street's.language."i'm happy to see google is bucking that trend.  they didn't talk.wall street's language when they did their ipo, and wall street.didn't buy.  and now wall street is collectively kicking itself..they'll pay attention next time.  wall street learns new languages.fast when money is involved.you have more leverage negotiating with vcs than you realize.  the.reason is other vcs.  i know a number of vcs now, and when you talk.to them you realize that it's a seller's market.  even now there.is too much money chasing too few good deals.vcs form a pyramid.  at the top are famous ones like sequoia and.kleiner perkins, but beneath those are a huge number you've never.heard of.  what they all have in common is that a dollar from them.is worth one dollar.  most vcs will tell you that they don't just.provide money, but connections and advice.  if you're talking to.vinod khosla or john doerr or mike moritz, this is true.  but such.advice and connections can come very expensive.  and as you go down.the food chain the vcs get rapidly.dumber.  a few steps down from.the top you're basically talking to bankers who've picked up a few.new vocabulary words from reading wired.  (does your product.use xml?)  so i'd advise you to be skeptical about claims.of experience and connections.  basically, a vc is a source of.money.  i'd be inclined to go with whoever offered the most money.the soonest with the least strings attached.you may wonder how much to tell vcs.  and you should, because some.of them may one day be funding your competitors.  i think the best.plan is not to be overtly secretive, but not to tell them everything.either.  after all, as most vcs say, they're more interested in the.people than the ideas.  the main reason they want to talk about.your idea is to judge you, not the idea.  so as long as you seem.like you know what you're doing, you can probably keep a few things.back from them. [7]talk to as many vcs as you can, even if you don't want their money,.because a) they may be on the board of someone who will buy you,.and b) if you seem impressive, they'll be discouraged from investing.in your competitors.  the most efficient way to reach vcs, especially.if you only want them to know about you and don't want their money,.is at the conferences that are occasionally organized for startups.to present to them.not spending itwhen and if you get an infusion of real money from investors, what.should you do with it?  not spend it, that's what.  in nearly every.startup that fails, the proximate cause is running out of money..usually there is something deeper wrong.  but even a proximate cause.of death is worth trying hard to avoid.during the bubble many startups tried to "get big fast." ideally.this meant getting a lot of customers fast.  but it was easy for.the meaning to slide over into hiring a lot of people fast.of the two versions, the one where you get a lot of customers fast.is of course preferable.  but even that may be overrated.  the idea.is to get there first and get all the users, leaving none for.competitors.  but i think in most businesses the advantages of being.first to market are not so overwhelmingly great.  google is again.a case in point.  when they appeared it seemed as if search was a.mature market, dominated by big players who'd spent millions to.build their brands: yahoo, lycos, excite, infoseek, altavista,.inktomi.  surely 1998 was a little late to arrive at the party.but as the founders of google knew, brand is worth next to nothing.in the search business.  you can come along at any point and make.something better, and users will gradually seep over to you.  as.if to emphasize the point, google never did any advertising.  they're.like dealers; they sell the stuff, but they know better than to use.it themselves.the competitors google buried would have done better to spend those.millions improving their software.  future startups should learn.from that mistake.  unless you're in a market where products are.as undifferentiated as cigarettes or vodka or laundry detergent,.spending a lot on brand advertising is a sign of breakage.  and few.if any web businesses are so undifferentiated.  the dating sites.are running big ad campaigns right now, which is all the.more evidence they're ripe for the picking.  (fee, fie, fo, fum, i.smell a company run by marketing guys.)we were compelled by circumstances to grow slowly, and in retrospect.it was a good thing.  the founders all learned to do every job in.the company.  as well as writing software, i had to do sales and.customer support.  at sales i was not very good.  i was persistent,.but i didn't have the smoothness of a good salesman.  my message.to potential customers was: you'd be stupid not to sell online, and.if you sell online you'd be stupid to use anyone else's software..both statements were true, but that's not the way to convince people.i was great at customer support though.  imagine talking to a.customer support person who not only knew everything about the.product, but would apologize abjectly if there was a bug, and then.fix it immediately, while you were on the phone with them.  customers.loved us.  and we loved them, because when you're growing slow by.word of mouth, your first batch of users are the ones who were smart.enough to find you by themselves.  there is nothing more valuable,.in the early stages of a startup, than smart users.  if you listen.to them, they'll tell you exactly how to make a winning product..and not only will they give you this advice for free, they'll pay.you.we officially launched in early 1996.  by the end of that year we.had about 70 users.  since this was the era of "get big fast," i.worried about how small and obscure we were.  but in fact we were.doing exactly the right thing.  once you get big (in users or.employees) it gets hard to change your product.  that year was.effectively a laboratory for improving our software.  by the end.of it, we were so far ahead of our competitors that they never had.a hope of catching up.  and since all the hackers had spent many.hours talking to users, we understood online commerce way better.than anyone else.that's the key to success as a startup.  there is nothing more.important than understanding your business.  you might think that.anyone in a business must, ex officio, understand it.  far from it..google's secret.weapon was simply that they understood search.  i was working for.yahoo when google appeared, and yahoo didn't understand search.  i.know because i once tried to convince the powers that be that we.had to make search better, and i got in reply what was then the.party line about it: that yahoo was no longer a mere "search engine.".search was now only a small percentage of our page views, less than.one month's growth, and now that we were established as a "media.company," or "portal," or whatever we were, search could safely be.allowed to wither and drop off, like an umbilical cord.well, a small fraction of page views they may be, but they are an.important fraction, because they are the page views that web sessions.start with.  i think yahoo gets that now.google understands a few other things most web companies still.don't.  the most important is that you should put users before.advertisers, even though the advertisers are paying and users aren't..one of my favorite bumper stickers reads "if the people lead, the.leaders will follow." paraphrased for the web, this becomes "get.all the users, and the advertisers will follow."  more generally,.design your product to please users first, and then think about how.to make money from it.  if you don't put users first, you leave a.gap for competitors who do.to make something users love, you have to understand them.  and the.bigger you are, the harder that is.  so i say "get big slow." the.slower you burn through your funding, the more time you have to.learn.the other reason to spend money slowly is to encourage a culture.of cheapness.  that's something yahoo did understand.  david filo's.title was "chief yahoo," but he was proud that his unofficial title.was "cheap yahoo."  soon after we arrived at yahoo, we got an email.from filo, who had been crawling around our directory hierarchy,.asking if it was really necessary to store so much of our data on.expensive raid drives.  i was impressed by that.  yahoo's market.cap then was already in the billions, and they were still worrying.about wasting a few gigs of disk space.when you get a couple million dollars from a vc firm, you tend to.feel rich.  it's important to realize you're not.  a rich company.is one with large revenues.  this money isn't revenue.  it's money.investors have given you in the hope you'll be able to generate.revenues.  so despite those millions in the bank, you're still poor.for most startups the model should be grad student, not law firm..aim for cool and cheap, not expensive and impressive.  for us the.test of whether a startup understood this was whether they had aeron.chairs.  the aeron came out during the bubble and was very popular.with startups.  especially the type, all too common then, that was.like a bunch of kids playing house with money supplied by vcs.   we.had office chairs so cheap that the arms all fell off.  this was.slightly embarrassing at the time, but in retrospect the grad-studenty.atmosphere of our office was another of those things we did right.without knowing it.our offices were in a wooden triple-decker in harvard square.  it.had been an apartment until about the 1970s, and there was still a.claw-footed bathtub in the bathroom.  it must once have been inhabited.by someone fairly eccentric, because a lot of the chinks in the.walls were stuffed with aluminum foil, as if to protect against.cosmic rays.  when eminent visitors came to see us, we were a bit.sheepish about the low production values.  but in fact that place.was the perfect space for a startup.  we felt like our role was to.be impudent underdogs instead of corporate stuffed shirts, and that.is exactly the spirit you want.an apartment is also the right kind of place for developing software..cube farms suck for that, as you've probably discovered if you've.tried it.  ever notice how much easier it is to hack at home than.at work?  so why not make work more like home?when you're looking for space for a startup, don't feel that it has.to look professional.  professional means doing good work, not.elevators and glass walls.  i'd advise most startups to avoid.corporate space at first and just rent an apartment.  you want to.live at the office in a startup, so why not have a place designed.to be lived in as your office?besides being cheaper and better to work in, apartments tend to be.in better locations than office buildings.  and for a startup.location is very important.  the key to productivity is for people.to come back to work after dinner.  those hours after the phone.stops ringing are by far the best for getting work done.  great.things happen when a group of employees go out to dinner together,.talk over ideas, and then come back to their offices to implement.them.  so you want to be in a place where there are a lot of.restaurants around, not some dreary office park that's a wasteland.after 6:00 pm.  once a company shifts over into the model where.everyone drives home to the suburbs for dinner, however late, you've.lost something extraordinarily valuable.  god help you if you.actually start in that mode.if i were going to start a startup today, there are only three.places i'd consider doing it: on the red line near central, harvard,.or davis squares (kendall is too sterile); in palo alto on university.or california aves; and in berkeley immediately north or south of.campus.  these are the only places i know that have the right kind.of vibe.the most important way to not spend money is by not hiring people..i may be an extremist, but i think hiring people is the worst thing.a company can do.  to start with, people are a recurring expense,.which is the worst kind.  they also tend to cause you to grow out.of your space, and perhaps even move to the sort of uncool office.building that will make your software worse.  but worst of all,.they slow you down: instead of sticking your head in someone's.office and checking out an idea with them, eight people have to.have a meeting about it.  so the fewer people you can hire, the.better.during the bubble a lot of startups had the opposite policy.  they.wanted to get "staffed up" as soon as possible, as if you couldn't.get anything done unless there was someone with the corresponding.job title.  that's big company thinking.  don't hire people to fill.the gaps in some a priori org chart.  the only reason to hire someone.is to do something you'd like to do but can't.if hiring unnecessary people is expensive and slows you down, why.do nearly all companies do it?  i think the main reason is that.people like the idea of having a lot of people working for them..this weakness often extends right up to the ceo.  if you ever end.up running a company, you'll find the most common question people.ask is how many employees you have.  this is their way of weighing.you.  it's not just random people who ask this; even reporters do..and they're going to be a lot more impressed if the answer is a.thousand than if it's ten.this is ridiculous, really.  if two companies have the same revenues,.it's the one with fewer employees that's more impressive.  when.people used to ask me how many people our startup had, and i answered."twenty," i could see them thinking that we didn't count for much..i used to want to add "but our main competitor, whose ass we regularly.kick, has a hundred and forty, so can we have credit for the larger.of the two numbers?"as with office space, the number of your employees is a choice.between seeming impressive, and being impressive.  any of you who.were nerds in high school know about this.choice.  keep doing it when you start a company.should you?but should you start a company?  are you the right sort of person.to do it?  if you are, is it worth it?more people are the right sort of person to start a startup than.realize it.  that's the main reason i wrote this.  there could be.ten times more startups than there are, and that would probably be.a good thing.i was, i now realize, exactly the right sort of person to start a.startup.  but the idea terrified me at first.  i was forced into.it because i was a lisp hacker.  the company.i'd been consulting for seemed to be running into trouble, and there.were not a lot of other companies using lisp.  since i couldn't.bear the thought of programming in another language (this was 1995,.remember, when "another language" meant c++) the only option seemed.to be to start a new company using lisp.i realize this sounds far-fetched, but if you're a lisp hacker.you'll know what i mean.  and if the idea of starting a startup.frightened me so much that i only did it out of necessity, there.must be a lot of people who would be good at it but who are too.intimidated to try.so who should start a startup?  someone who is a good hacker, between.about 23 and 38, and who wants to solve the money problem in one.shot instead of getting paid gradually over a conventional working.life.i can't say precisely what a good hacker is.  at a first rate.university this might include the top half of computer science.majors.  though of course you don't have to be a cs major to be a.hacker; i was a philosophy major in college.it's hard to tell whether you're a good hacker, especially when.you're young.  fortunately the process of starting startups tends.to select them automatically.  what drives people to start startups.is (or should be) looking at existing technology and thinking, don't.these guys realize they should be doing x, y, and z?  and that's.also a sign that one is a good hacker.i put the lower bound at 23 not because there's something that.doesn't happen to your brain till then, but because you need to see.what it's like in an existing business before you try running your.own.  the business doesn't have to be a startup.  i spent a year.working for a software company to pay off my college loans.  it was.the worst year of my adult life, but i learned, without realizing.it at the time, a lot of valuable lessons about the software business..in this case they were mostly negative lessons: don't have a lot.of meetings; don't have chunks of code that multiple people own;.don't have a sales guy running the company; don't make a high-end.product; don't let your code get too big; don't leave finding bugs.to qa people; don't go too long between releases; don't isolate.developers from users; don't move from cambridge to route 128; and.so on. [8] but negative lessons are just as valuable as positive.ones.  perhaps even more valuable: it's hard to repeat a brilliant.performance, but it's straightforward to avoid errors. [9]the other reason it's hard to start a company before 23 is that.people won't take you seriously.  vcs won't trust you, and will try.to reduce you to a mascot as a condition of funding.  customers.will worry you're going to flake out and leave them stranded.  even.you yourself, unless you're very unusual, will feel your age to.some degree; you'll find it awkward to be the boss of someone much.older than you, and if you're 21, hiring only people younger rather.limits your options.some people could probably start a company at 18 if they wanted to..bill gates was 19 when he and paul allen started microsoft.  (paul.allen was 22, though, and that probably made a difference.) so if.you're thinking, i don't care what he says, i'm going to start a.company now, you may be the sort of person who could get away with.it.the other cutoff, 38, has a lot more play in it.  one reason i put.it there is that i don't think many people have the physical stamina.much past that age.   i used to work till 2:00 or 3:00 am every.night, seven days a week.  i don't know if i could do that now.also,.startups are a big risk financially.  if you try something that.blows up and leaves you broke at 26, big deal; a lot of 26 year.olds are broke.  by 38 you can't take so many risks-- especially.if you have kids.my final test may be the most restrictive.  do you actually want.to start a startup?  what it amounts to, economically, is compressing.your working life into the smallest possible space.  instead of.working at an ordinary rate for 40 years, you work like hell for.four.  and maybe end up with nothing-- though in that case it.probably won't take four years.during this time you'll do little but work, because when you're not.working, your competitors will be.  my only leisure activities were.running, which i needed to do to keep working anyway, and about.fifteen minutes of reading a night.  i had a girlfriend for a total.of two months during that three year period.  every couple weeks i.would take a few hours off to visit a used bookshop or go to a.friend's house for dinner.  i went to visit my family twice..otherwise i just worked.working was often fun, because the people i worked with were some.of my best friends.  sometimes it was even technically interesting..but only about 10% of the time.  the best i can say for the other.90% is that some of it is funnier in hindsight than it seemed then..like the time the power went off in cambridge for about six hours,.and we made the mistake of trying to start a gasoline powered.generator inside our offices. i won't try that again.i don't think the amount of bullshit you have to deal with in a.startup is more than you'd endure in an ordinary working life.  it's.probably less, in fact; it just seems like a lot because it's.compressed into a short period.  so mainly what a startup buys you.is time.  that's the way to think about it if you're trying to.decide whether to start one.  if you're the sort of person who would.like to solve the money problem once and for all instead of working.for a salary for 40 years, then a startup makes sense.for a lot of people the conflict is between startups and graduate.school.  grad students are just the age, and just the sort of people,.to start software startups.  you may worry that if you do you'll.blow your chances of an academic career.  but it's possible to be.part of a startup and stay in grad school, especially at first..two of our three original hackers were in grad school the whole.time, and both got their degrees..there are few sources of energy.so powerful as a procrastinating grad student.if you do have to.leave grad school, in the worst case it won't be for too long.  if.a startup fails, it will probably fail quickly enough that you can.return to academic life.  and if it succeeds, you may find you no.longer have such a burning desire to be an assistant professor.if you want to do it, do it.  starting a startup is not the great.mystery it seems from outside.  it's not something you have to know.about "business" to do.  build something users love, and spend less.than you make.  how hard is that?notes[1] google's revenues are about two billion a year, but half comes.from ads on other sites.[2] one advantage startups have over established companies is that.there are no discrimination laws about starting businesses.  for.example, i would be reluctant to start a startup with a woman.who had small children, or was likely to have them soon.  but you're.not allowed to ask prospective employees if they plan to have kids.soon.  believe it or not, under current us law, you're not even.allowed to discriminate on the basis of intelligence.  whereas when.you're starting a company, you can discriminate on any basis you.want about who you start it with.[3] learning to hack is a lot cheaper than business school, because.you can do it mostly on your own.  for the price of a linux box, a.copy of k&r, and a few hours of advice from your neighbor's fifteen.year old son, you'll be well on your way.[4] corollary: avoid starting a startup to sell things to the biggest.company of all, the government.  yes, there are lots of opportunities.to sell them technology.  but let someone else start those startups.[5] a friend who started a company in germany told me they do care.about the paperwork there, and that there's more of it.  which helps.explain why there are not more startups in germany.[6] at the seed stage our valuation was in principle $100,000, because.julian got 10% of the company.  but this is a very misleading number,.because the money was the least important of the things julian gave us.[7] the same goes for companies that seem to want to acquire you..there will be a few that are only pretending to in order to pick.your brains.  but you can never tell for sure which these are, so.the best approach is to seem entirely open, but to fail to mention.a few critical technical secrets.[8]  i was as bad an employee as this place was a company.  i.apologize to anyone who had to work with me there.[9]  you could probably write a book about how to succeed in business.by doing everything in exactly the opposite way from the dmv.thanks to trevor blackwell, sarah harlin, jessica livingston,.and robert morris for reading drafts of this essay, and to steve.melendez and gregory price for inviting me to speak.domain name searchturkish translationhebrew translationrussian translationchinese translationfrench translationjapanese translationarabic translation<eot><sot>what you'll wish you'd known.january 2005
(i wrote this talk for a.high school.  i never actually.gave it, because the school authorities vetoed the plan to invite me.)when i said i was speaking at a high school, my friends were curious..what will you say to high school students?  so i asked them, what.do you wish someone had told you in high school?  their answers.were remarkably similar.  so i'm going to tell you what we all wish.someone had told us.i'll start by telling you something you don't have to know in high.school: what you want to do with your life.  people are always.asking you this, so you think you're supposed to have an answer..but adults ask this mainly as a conversation starter.   they want.to know what sort of person you are, and this question is just to.get you talking.  they ask it the way you might poke a hermit crab.in a tide pool, to see what it does.if i were back in high school and someone asked about my plans, i'd.say that my first priority was to learn what the options were.  you.don't need to be in a rush to choose your life's work.  what you.need to do is discover what you like.  you have to work on stuff.you like if you want to be good at what you do.it might seem that nothing would be easier than deciding what you.like, but it turns out to be hard, partly because it's hard to get.an accurate picture of most jobs.  being a doctor is not the way.it's portrayed on tv.  fortunately you can also watch real doctors,.by volunteering in hospitals. [1]but there are other jobs you can't learn about, because no one is.doing them yet.  most of the work i've done in the last ten years.didn't exist when i was in high school.  the world changes fast,.and the rate at which it changes is itself speeding up.  in such a.world it's not a good idea to have fixed plans.and yet every may, speakers all over the country fire up the standard.graduation speech, the theme of which is: don't give up on your.dreams.  i know what they mean, but this is a bad way to put it,.because it implies you're supposed to be bound by some plan you.made early on.  the computer world has a name for this: premature.optimization.  and it is synonymous with disaster.  these speakers.would do better to say simply, don't give up.what they really mean is, don't get demoralized.  don't think that.you can't do what other people can.   and i agree you shouldn't.underestimate your potential.  people who've done great things tend.to seem as if they were a race apart.  and most biographies only.exaggerate this illusion, partly due to the worshipful attitude.biographers inevitably sink into, and partly because, knowing how.the story ends, they can't help streamlining the plot till it seems.like the subject's life was a matter of destiny, the mere unfolding.of some innate genius.   in fact i suspect if you had the sixteen.year old shakespeare or einstein in school with you, they'd seem.impressive, but not totally unlike your other friends.which is an uncomfortable thought.  if they were just like us, then.they had to work very hard to do what they did.  and that's one.reason we like to believe in genius.  it gives us an excuse for.being lazy.  if these guys were able to do what they did only because.of some magic shakespeareness or einsteinness, then it's not our.fault if we can't do something as good.i'm not saying there's no such thing as genius.  but if you're.trying to choose between two theories and one gives you an excuse.for being lazy, the other one is probably right.so far we've cut the standard graduation speech down from "don't.give up on your dreams" to "what someone else can do, you can do.".but it needs to be cut still further.  there is some variation.in natural ability.  most people overestimate its role, but it does.exist.  if i were talking to a guy four feet tall whose ambition.was to play in the nba, i'd feel pretty stupid saying, you can.do anything if you really try. [2]we need to cut the standard graduation speech down to, "what someone.else with your abilities can do, you can do; and don't underestimate.your abilities."  but as so often happens, the closer you get to.the truth, the messier your sentence gets.  we've taken a nice,.neat (but wrong) slogan, and churned it up like a mud puddle.  it.doesn't make a very good speech anymore.  but worse still, it doesn't.tell you what to do anymore.  someone with your abilities?  what.are your abilities?upwindi think the solution is to work in the other direction.  instead.of working back from a goal, work forward from promising situations..this is what most successful people actually do anyway.in the graduation-speech approach, you decide where you want to be.in twenty years, and then ask: what should i do now to get there?.i propose instead that you don't commit to anything in the future,.but just look at the options available now, and choose those that.will give you the most promising range of options afterward.it's not so important what you work on, so long as you're not wasting.your time.  work on things that interest you and increase your.options, and worry later about which you'll take.suppose you're a college freshman deciding whether to major in math.or economics.  well, math will give you more options: you can go into.almost any field from math.  if you major in math it will be easy.to get into grad school in economics, but if you major in economics.it will be hard to get into grad school in math.flying a glider is a good metaphor here.  because a glider doesn't.have an engine, you can't fly into the wind without losing a lot.of altitude.  if you let yourself get far downwind of good places.to land, your options narrow uncomfortably.  as a rule you want to.stay upwind.  so i propose that as a replacement for "don't give.up on your dreams."  stay upwind.how do you do that, though?  even if math is upwind of economics,.how are you supposed to know that as a high school student?well, you don't, and that's what you need to find out.   look for smart people.and hard problems.  smart people tend to clump together, and if you.can find such a clump, it's probably worthwhile to join it.  but.it's not straightforward to find these, because there is a lot of.faking going on.to a newly arrived undergraduate, all university departments look.much the same.  the professors all seem forbiddingly intellectual.and publish papers unintelligible to outsiders.  but while in some.fields the papers are unintelligible because they're full of hard.ideas, in others they're deliberately written in an obscure way to.seem as if they're saying something important.  this may seem a.scandalous proposition, but it has been experimentally verified,.in the famous social text affair.  suspecting that the papers.published by literary theorists were often just intellectual-sounding.nonsense, a physicist deliberately wrote a paper full of.intellectual-sounding nonsense, and submitted it to a literary.theory journal, which published it.the best protection is always to be working on hard problems..writing novels is hard.  reading novels isn't..hard means worry: if you're not worrying that.something you're making will come out badly, or that you won't be.able to understand something you're studying, then it isn't hard.enough.  there has to be suspense.well, this seems a grim view of the world, you may think.  what i'm.telling you is that you should worry?  yes, but it's not as bad as.it sounds.  it's exhilarating to overcome worries.  you don't see.faces much happier than people winning gold medals.  and you know.why they're so happy?  relief.i'm not saying this is the only way to be happy.  just that some.kinds of worry are not as bad as they sound.ambitionin practice, "stay upwind" reduces to "work on hard problems."  and.you can start today.  i wish i'd grasped that in.high school.most people like to be good at what they do.  in the so-called real.world this need is a powerful force.  but high school students.rarely benefit from it, because they're given a fake thing to do..when i was in high school, i let myself believe that my job was to.be a high school student.  and so i let my need to be good at what.i did be satisfied by merely doing well in school.if you'd asked me in high school what the difference was between.high school kids and adults, i'd have said it was that adults had.to earn a living.  wrong.  it's that adults take responsibility for.themselves.  making a living is only a small part of it..far more important is to take intellectual responsibility for oneself.if i had to go through high school again, i'd treat it like a day.job.  i don't mean that i'd slack in school.  working at something.as a day job doesn't mean doing it badly.  it means not being defined.by it.  i mean i wouldn't think of myself as a high school student,.just as a musician with a day job as a waiter doesn't think of.himself as a waiter. [3]   and when i wasn't working at my day job.i'd start trying to do real work.when i ask people what they regret most about high school, they.nearly all say the same thing: that they wasted so much time.  if.you're wondering what you're doing now that you'll regret most.later, that's probably it. [4]some people say this is inevitable — that high school students.aren't capable of getting anything done yet.  but i don't think.this is true.  and the proof is that you're bored.  you probably.weren't bored when you were eight.  when you're eight it's called."playing" instead of "hanging out," but it's the same thing.  and.when i was eight, i was rarely bored.  give me a back yard and a.few other kids and i could play all day.the reason this got stale in middle school and high school, i now.realize, is that i was ready for something else.  childhood was.getting old.i'm not saying you shouldn't hang out with your friends — that you.should all become humorless little robots who do nothing but work..hanging out with friends is like chocolate cake.  you enjoy it more.if you eat it occasionally than if you eat nothing but chocolate.cake for every meal.  no matter how much you like chocolate cake,.you'll be pretty queasy after the third meal of it.  and that's.what the malaise one feels in high school is: mental queasiness..[5]you may be thinking, we have to do more than get good grades.  we.have to have extracurricular activities.  but you know.perfectly well how bogus most of these are.  collecting donations.for a charity is an admirable thing to do, but it's not hard..it's not getting something done.  what i mean by getting something.done is learning how to write well, or how to program computers,.or what life was really like in preindustrial societies, or how to.draw the human face from life.  this sort of thing rarely translates.into a line item on a college application.corruptionit's dangerous to design your life around getting into college,.because the people you have to impress to get into college are not.a very discerning audience.  at most colleges, it's not the professors.who decide whether you get in, but admissions officers, and they.are nowhere near as smart.  they're the ncos of the intellectual.world. they can't tell how smart you are..the mere existence of prep schools is proof of that.few parents.would pay so much for their kids to go to a school that didn't.improve their admissions prospects.  prep schools openly say this.is one of their aims.  but what that means, if you stop to.think about it, is that they can.hack the admissions process: that they can take the very same kid.and make him seem a more appealing candidate than he would if he.went to the local public school. [6]right now most of you feel your job in life is to be a promising.college applicant.  but that means you're designing your life to.satisfy a process so mindless that there's a whole industry devoted.to subverting it.  no wonder you become cynical.  the malaise you.feel is the same that a producer of reality tv shows or a tobacco.industry executive feels.  and you don't even get paid a lot.so what do you do?  what you should not do is rebel.  that's what.i did, and it was a mistake.  i didn't realize exactly what was.happening to us, but i smelled a major rat.  and so i just gave up..obviously the world sucked, so why bother?when i discovered that one of our teachers was herself using cliff's.notes, it seemed par for the course.  surely it meant nothing to.get a good grade in such a class.in retrospect this was stupid.  it was like someone getting fouled.in a soccer game and saying, hey, you fouled me, that's against the.rules, and walking off the field in indignation.  fouls happen..the thing to do when you get fouled is not to lose your cool.  just.keep playing.  by putting you in this situation, society has fouled you.   yes,.as you suspect, a lot of the stuff you learn in your classes is.crap.  and yes, as you suspect, the college admissions process is.largely a charade.  but like many fouls, this one was unintentional..[7] so just keep playing.rebellion is almost as stupid as obedience.  in either case you let.yourself be defined by what they tell you to do.  the best plan, i.think, is to step onto an orthogonal vector.  don't just do what.they tell you, and don't just refuse to.  instead treat school as.a day job.  as day jobs go, it's pretty sweet.  you're done at 3.o'clock, and you can even work on your own stuff while you're there.curiosityand what's your real job supposed to be?  unless you're mozart,.your first task is to figure that out.  what are the great things.to work on?  where are the imaginative people?  and most importantly,.what are you interested in?  the word "aptitude" is misleading,.because it implies something innate.  the most powerful sort of.aptitude is a consuming interest in some question, and such interests.are often acquired tastes.a distorted version of this idea has filtered into popular culture.under the name "passion."  i recently saw an ad for waiters saying.they wanted people with a "passion for service."  the real thing.is not something one could have for waiting on tables.  and passion.is a bad word for it. a better name would be curiosity.kids are curious, but the curiosity i mean has a different shape from kid.curiosity.  kid curiosity is broad and shallow; they ask why at.random about everything.  in most adults this curiosity dries up.entirely.  it has to: you can't get anything done if you're always.asking why about everything.  but in ambitious adults, instead of.drying up, curiosity becomes narrow and deep.  the mud flat morphs.into a well.curiosity turns work into play.  for einstein, relativity wasn't a.book full of hard stuff he had to learn for an exam.  it was a.mystery he was trying to solve.  so it probably felt like less work.to him to invent it than it would seem to someone now to learn it.in a class.one of the most dangerous illusions you get from school is the idea.that doing great things requires a lot of discipline.  most subjects.are taught in such a boring way that it's only by discipline that.you can flog yourself through them.  so i was surprised when, early.in college, i read a quote by wittgenstein saying that he had no.self-discipline and had never been able to deny himself anything,.not even a cup of coffee.now i know a number of people who do great work, and it's the same.with all of them.  they have little discipline.  they're all terrible.procrastinators and find it almost impossible to make themselves.do anything they're not interested in.  one still hasn't sent out.his half of the thank-you notes from his wedding, four years ago..another has 26,000 emails in her inbox.i'm not saying you can get away with zero self-discipline.  you.probably need about the amount you need to go running.  i'm often.reluctant to go running, but once i do, i enjoy it.  and if i don't.run for several days, i feel ill.  it's the same with people who.do great things.  they know they'll feel bad if they don't work,.and they have enough discipline to get themselves to their desks.to start working.  but once they get started, interest takes over,.and discipline is no longer necessary.do you think shakespeare was gritting his teeth and diligently.trying to write great literature?  of course not.  he was having.fun.  that's why he's so good.if you want to do good work, what you need is a great curiosity.about a promising question.   the critical moment for einstein.was when he looked at maxwell's equations and said, what the hell.is going on here?it can take years to zero in on a productive question, because it.can take years to figure out what a subject is really about.  to.take an extreme example, consider math.  most people think they.hate math, but the boring stuff you do in school under the name."mathematics" is not at all like what mathematicians do.the great mathematician g. h.  hardy said he didn't like math in.high school either.  he only took it up because he was better at.it than the other students.  only later did he realize math was.interesting — only later did he start to ask questions instead of.merely answering them correctly.when a friend of mine used to grumble because he had to write a.paper for school, his mother would tell him: find a way to make it.interesting.  that's what you need to do: find a question that makes.the world interesting.  people who do great things look at the same.world everyone else does, but notice some odd detail that's.compellingly mysterious.and not only in intellectual matters.  henry ford's great question.was, why do cars have to be a luxury item?  what would happen if.you treated them as a commodity?  franz beckenbauer's was, in effect,.why does everyone have to stay in his position?  why can't defenders.score goals too?nowif it takes years to articulate great questions, what do you do now,.at sixteen?  work toward finding one.  great questions don't appear.suddenly.  they gradually congeal in your head.  and what makes.them congeal is experience.  so the way to find great questions is.not to search for them — not to wander about thinking, what great.discovery shall i make?  you can't answer that; if you could, you'd.have made it.the way to get a big idea to appear in your head is not to hunt for.big ideas, but to put in a lot of time on work that interests you,.and in the process keep your mind open enough that a big idea can.take roost.  einstein, ford, and beckenbauer all used this recipe..they all knew their work like a piano player knows the keys.  so.when something seemed amiss to them, they had the confidence to.notice it.put in time how and on what?  just pick a project that seems.interesting: to master some chunk of material, or to make something,.or to answer some question.  choose a project that will take less.than a month, and make it something you have the means to finish..do something hard enough to stretch you, but only just, especially.at first.  if you're deciding between two projects, choose whichever.seems most fun. if one blows up in your face, start another.  repeat.till, like an internal combustion engine, the process becomes.self-sustaining, and each project generates the next one.  (this.could take years.)it may be just as well not to do a project "for school," if that.will restrict you or make it seem like work.  involve your friends.if you want, but not too many, and only if they're not flakes..friends offer moral support (few startups are started by one person),.but secrecy also has its advantages.  there's something pleasing.about a secret project.  and you can take more risks, because no.one will know if you fail.don't worry if a project doesn't seem to be on the path to some.goal you're supposed to have. paths can bend a lot more than you.think.  so let the path grow out the project.  the most important.thing is to be excited about it, because it's by doing that you.learn.don't disregard unseemly motivations.  one of the most powerful is.the desire to be better than other people at something.  hardy said.that's what got him started, and i think the only unusual thing.about him is that he admitted it.  another powerful motivator is.the desire to do, or know, things you're not supposed to.  closely.related is the desire to do something audacious.  sixteen year olds.aren't supposed to write novels.  so if you try, anything you achieve.is on the plus side of the ledger; if you fail utterly, you're doing.no worse than expectations.  [8]beware of bad models.  especially when they excuse laziness.  when.i was in high school i used to write "existentialist" short stories.like ones i'd seen by famous writers.  my stories didn't have a lot.of plot, but they were very deep.  and they were less work to write.than entertaining ones would have been.  i should have known that.was a danger sign.  and in fact i found my stories pretty boring;.what excited me was the idea of writing serious, intellectual stuff.like the famous writers.now i have enough experience to realize that those famous writers.actually sucked.  plenty of famous people do; in the short term,.the quality of one's work is only a small component of fame..i should have been less worried about doing something.that seemed cool, and just done something i liked.  that's the.actual road to coolness anyway.a key ingredient in many projects, almost a project on its own, is.to find good books.  most books are bad.  nearly all textbooks are.bad. [9]  so don't assume a subject is to be learned from whatever.book on it happens to be closest.  you have to search actively for.the tiny number of good books.the important thing is to get out there and do stuff.  instead of.waiting to be taught, go out and learn.your life doesn't have to be shaped by admissions officers.  it.could be shaped by your own curiosity.  it is for all ambitious.adults.  and you don't have to wait to start.  in fact, you don't.have to wait to be an adult.  there's no switch inside you that.magically flips when you turn a certain age or graduate from some.institution.  you start being an adult when you decide to take.responsibility for your life.  you can do that at any age.  [10]this may sound like bullshit.  i'm just a minor, you may think, i.have no money, i have to live at home, i have to do what adults.tell me all day long.  well, most adults labor under restrictions.just as cumbersome, and they manage to get things done.  if you.think it's restrictive being a kid, imagine having kids.the only real difference between adults and high school kids is.that adults realize they need to get things done, and high school.kids don't.  that realization hits most people around 23.  but i'm.letting you in on the secret early.  so get to work.  maybe you can.be the first generation whose greatest regret from high school isn't.how much time you wasted..notes[1] a doctor friend warns that even this can give an inaccurate.picture. "who knew how much time it would take up, how little.autonomy one would have for endless years of training, and how.unbelievably annoying it is to carry a beeper?"[2] his best bet would probably be to become dictator and intimidate.the nba into letting him play.  so far the closest anyone has come.is secretary of labor.[3] a day job is one you take to pay the bills so you can do what.you really want, like play in a band, or invent relativity.treating high school as a day job might actually make it easier for.some students to get good grades.  if you treat your classes.as a game, you won't be demoralized if they seem pointless.however bad your classes, you need to get good grades in them to.get into a decent college.  and that is worth doing, because.universities are where a lot of the clumps of smart people are these.days.[4] the second biggest regret was caring so much about unimportant.things.  and especially about what other people thought of them.i think what they really mean, in the latter case, is caring what.random people thought of them.  adults care just as much what other.people think, but they get to be more selective about the other.people.i have about thirty friends whose opinions i care about,.and the opinion of the rest of the world barely affects me.  the.problem in high school is that your peers are chosen for you by.accidents of age and geography, rather than by you based on respect.for their judgement.[5] the key to wasting time is distraction.  without distractions.it's too obvious to your brain that you're not doing anything with.it, and you start to feel uncomfortable.  if you want to measure.how dependent you've become on distractions, try this experiment:.set aside a chunk of time on a weekend and sit alone and think..you can have a notebook to write your thoughts down in, but nothing.else: no friends, tv, music, phone, im, email, web, games, books,.newspapers, or magazines.  within an hour most people will feel a.strong craving for distraction.[6] i don't mean to imply that the only function of prep schools.is to trick admissions officers.  they also generally provide a.better education.  but try this thought experiment: suppose prep.schools supplied the same superior education but had a tiny (.001).negative effect on college admissions.  how many parents would still.send their kids to them?it might also be argued that kids who went to prep schools, because.they've learned more, are better college candidates.  but.this seems empirically false.  what you learn in even the best high.school is rounding error compared to what you learn in college..public school kids arrive at college with a slight disadvantage,.but they start to pull ahead in the sophomore year.(i'm not saying public school kids are smarter than preppies, just.that they are within any given college.  that follows necessarily.if you agree prep schools improve kids' admissions prospects.)[7] why does society foul you?  indifference, mainly.  there are.simply no outside forces pushing high school to be good.  the air.traffic control system works because planes would crash otherwise..businesses have to deliver because otherwise competitors would take.their customers.  but no planes crash if your school sucks, and it.has no competitors.  high school isn't evil; it's random; but random.is pretty bad.[8] and then of course there is money.  it's not a big factor in.high school, because you can't do much that anyone wants.  but a.lot of great things were created mainly to make money.  samuel.johnson said "no man but a blockhead ever wrote except for money.".(many hope he was exaggerating.)[9] even college textbooks are bad.  when you get to college,.you'll find that (with a few stellar exceptions) the textbooks are.not written by the leading scholars in the field they describe..writing college textbooks is unpleasant work, done mostly by people.who need the money.  it's unpleasant because the publishers exert.so much control, and there are few things worse than close supervision.by someone who doesn't understand what you're doing.  this phenomenon.is apparently.even worse in the production of high school textbooks.[10] your teachers are always telling you to behave like adults..i wonder if they'd like it if you did.  you may be loud and.disorganized, but you're very docile compared to adults.  if you.actually started acting like adults, it would be just as if a bunch.of adults had been transposed into your bodies.  imagine the reaction.of an fbi agent or taxi driver or reporter to being told they had.to ask permission to go the bathroom, and only one person could go.at a time.  to say nothing of the things you're taught.  if a bunch.of actual adults suddenly found themselves trapped in high school,.the first thing they'd do is form a union and renegotiate all the.rules with the administration.thanks to ingrid bassett, trevor blackwell,.rich draves, dan giffin, sarah.harlin, jessica livingston, jackie mcdonough, robert morris, mark nitzberg, lisa.randall, and aaron swartz for reading drafts of this, and to many.others for talking to me about high school.why nerds are unpopularjapanese translationrussian translationgeorgian translation<eot><sot>made in usa.november 2004
(this is a new essay for the japanese edition of.hackers.& painters..it tries to explain why americans make some things well.and others badly.)a few years ago an italian friend of mine travelled by train from.boston to providence.  she had only been in america for a.couple weeks and hadn't seen much of the country yet.  she arrived.looking astonished.  "it's so ugly!"people from other rich countries can scarcely imagine.the squalor of the man-made bits of america.  in travel books.they show you mostly natural environments: the grand canyon,.whitewater rafting, horses in a field.  if you see.pictures with man-made things in them, it will be either a.view of the new york skyline shot from a discreet distance,.or a carefully cropped image of a seacoast town in maine.how can it be, visitors must wonder.  how can the richest country.in the world look like this?oddly enough, it may not be a coincidence.  americans are good.at some things and bad at others.  we're good at making.movies and software, and bad at making cars and cities..and i think we may be good at what we're good at for the same.reason we're bad at what we're bad at.  we're impatient..in america, if you want to do something, you don't worry that.it might come out badly, or upset delicate social balances, or.that people might think you're getting above yourself.  if you.want to do something, as nike says, just do it.this works well in some fields and badly in others.  i suspect.it works in movies and software because they're both messy.processes.  "systematic".is the last word i'd use to describe the way.good programmers write software..code is not something they assemble painstakingly after.careful planning, like the pyramids.  it's something they.plunge into, working fast and constantly changing their minds,.like a charcoal sketch.in software, paradoxical.as it sounds, good craftsmanship means working fast..if you work slowly and meticulously,.you merely end up with a very fine implementation of your initial,.mistaken idea..working slowly and meticulously is.premature optimization.  better to get a.prototype done fast, and see what new ideas.it gives you.it sounds like making movies works a lot like making software..every movie is a frankenstein, full of imperfections.and usually quite different from what was originally envisioned..but interesting, and finished fairly quickly.  i think we get away with this in movies and software.because they're both malleable mediums.  boldness pays..and if at the last minute two parts don't quite.fit, you can figure out some hack that will at least conceal.the problem.not so with cars, or cities.  they are all too physical..if the car business worked like software or movies, you'd.surpass your competitors by making a car that weighed only.fifty pounds, or folded up to the size of a motorcycle when.you wanted to park it.  but with physical products there are.more constraints.  you don't win by dramatic innovations.so much as by good taste and attention to detail.the trouble is, the very word "taste".sounds slightly ridiculous to american ears..it seems pretentious, or frivolous, or even effeminate..blue staters think it's "subjective," and red staters.think it's for sissies.  so anyone in america.who really cares about design will be sailing upwind.twenty years ago we used to hear that the problem with.the us car industry was the workers..we don't hear that any more now that japanese companies.are building cars in the us.   the problem with.american cars is bad design.  you can see that just by.looking at them.all that extra sheet metal on the amc matador wasn't.added by the workers.  the problem.with this car, as with american cars today, is that it was.designed by marketing people instead of designers.why do the japanese make better cars than us?  some say it's.because their culture encourages cooperation.  that may come.into it.   but in this case it seems more to the point that.their culture prizes design and craftsmanship.for centuries the japanese have made finer things than we.have in the west.  when you look at swords they.made in 1200, you just can't believe the date on the label.is right..presumably their cars fit together more.precisely than ours for the same reason their joinery always has..they're obsessed with making things well.not us..when we make something in america, our aim is just to get the.job done.  once we reach that point, we take one of two routes..we can stop there, and have something crude but.serviceable, like a vise-grip.  or we can improve it,.which usually means encrusting it with gratuitous ornament..when we want to make a car "better,".we stick tail fins on it, or make it.longer, or make the.windows smaller, depending on the current fashion.ditto for houses.  in america you can have either a flimsy box banged.together out of two by fours and drywall, or a mcmansion-- a.flimsy box banged together out of two by fours and drywall,.but larger, more dramatic-looking, and full of expensive fittings..rich people don't get better design or craftsmanship;.they just get a larger, more conspicuous version of the.standard house.we don't especially prize design or craftsmanship here.  what.we like is speed, and we're willing to do something in an ugly.way to get it done fast.  in some.fields, like software or movies, this is a net win..but it's not just that software and movies are malleable mediums..in those businesses, the designers (though they're.not generally called that) have more power..software companies, at least successful ones, tend to be run.by programmers.  and in the film industry, though producers.may second-guess directors, the director controls most of.what appears on the screen..and so american software and movies, and japanese cars, all.have this in common: the people in charge care about.design-- the former because the designers are in charge, and the latter.because the whole culture cares about design.i think most japanese executives would be horrified at.the idea of making a bad car.  whereas american executives,.in their hearts, still believe the most important thing about.a car is the image it projects..make a good car?  what's "good?"  it's so subjective..if you want to know how to design a car, ask a focus group.instead of relying on their own internal design compass.(like henry ford did),.american car companies try to make what marketing people.think consumers want.  but it isn't working.  american cars continue.to lose market share.  and the reason is that the customer.doesn't want what he thinks he wants.letting focus groups design your cars for you.only wins in the short term.  in the long term, it pays.to bet on good design.  the focus group may say they want the.meretricious feature du jour, but what they want even more is.to imitate sophisticated buyers, and they, though a.small minority, really do care about good design..eventually the.pimps and drug dealers notice that the doctors and lawyers.have switched from cadillac to lexus, and do the same.apple is an interesting counterexample to the general.american trend.  if you want to buy a nice cd player, you'll.probably buy a japanese one.  but if you want to buy an.mp3 player, you'll probably buy an ipod.  what happened?.why doesn't sony dominate mp3 players?  because apple is.in the consumer electronics business now, and unlike.other american companies, they're obsessed with good design..or more precisely, their ceo is.i just got an ipod, and it's not just nice.  it's.surprisingly nice.  for it to surprise me, it must be.satisfying expectations i didn't know i had.  no focus.group is going to discover those.  only a great.designer can.cars aren't the worst thing we make in america..where the just-do-it model fails most dramatically is in our cities-- or.rather, exurbs..if real estate developers operated on a large enough scale, if.they built whole towns, market forces would compel.them to build towns that didn't suck.  but they only build a.couple office buildings or suburban streets at a time, and the.result is so depressing that the inhabitants consider it a great.treat to fly to europe and spend a couple weeks living what.is, for people there, just everyday life. [1]but the just-do-it model does have advantages.  it seems the clear.winner for generating wealth and technical innovations.(which are practically the same thing).  i think speed is the reason..it's hard to create wealth by making a commodity.  the.real value is in things that are new, and if you want to.be the first to make something, it helps to work fast..for better or worse, the just-do-it model is fast,.whether you're dan bricklin writing the prototype of visicalc in.a weekend, or a real estate developer.building a block of shoddy condos in a month.if i had to choose between the just-do-it model and the.careful model, i'd probably choose just-do-it..but do we have to choose?  could we have it both ways?.could americans have nice.places to live without undermining the impatient, individualistic spirit.that makes us good at software?  could other countries.introduce more individualism into their technology companies.and research labs without having it metastasize as strip malls?.i'm optimistic.  it's harder to.say about other countries, but in the us, at least, i think.we can have both.apple is an encouraging example.  they've managed to preserve.enough of the impatient, hackerly spirit you need to write.software.  and yet when.you pick up a new apple laptop, well, it doesn't.seem american.  it's too perfect.  it seems as if it.must have been made by a swedish or a japanese company.in many technologies, version 2 has higher resolution.  why.not in design generally?  i think we'll gradually see.national characters superseded.by occupational characters: hackers in japan will be allowed.to behave with a willfulness.that would now seem unjapanese,.and products in america will be designed with an.insistence on taste that would now seem unamerican..perhaps the most successful countries, in the future, will be.those most willing to ignore what are now considered.national characters, and do each kind of work in the way.that works best.  race you.notes[1] japanese cities are ugly too, but for different reasons..japan is prone to earthquakes, so buildings are traditionally.seen as temporary; there is no grand tradition of  city planning.like the one europeans inherited from rome.  the other cause is.the notoriously corrupt relationship between the government.and construction companies.thanks to trevor blackwell, barry eisler, sarah harlin,.shiro kawai, jessica livingston, jackie mcdonough, robert morris,.and eric raymond.for reading drafts of this.american gothicthe john rain books<eot><sot>it's charisma, stupid.november 2004
, corrected june 2006occam's razor says we should prefer the simpler of two explanations..i begin by reminding readers of this principle because i'm about.to propose a theory that will offend both liberals and conservatives..but occam's razor means, in effect, that if you want to disagree.with it, you have a hell of a coincidence to explain.theory: in us presidential elections, the more.charismatic candidate wins.people who write about politics, whether on the left or the right,.have a consistent bias: they take politics seriously.  when one.candidate beats another they look for political explanations.  the.country is shifting to the left, or the right.  and that sort of.shift can certainly be the result of a presidential election, which.makes it easy to believe it was the cause.but when i think about why i voted for clinton over the first george.bush, it wasn't because i was shifting to the left.  clinton just.seemed more dynamic.  he seemed to want the job more.  bush seemed.old and tired.  i suspect it was the same for a lot of voters.clinton didn't represent any national shift leftward..[1].he was.just more charismatic than george bush or (god help us) bob dole..in 2000 we practically got a controlled experiment to prove it:.gore had clinton's policies, but not his charisma, and he suffered.proportionally..[2].same story in 2004. kerry was smarter and more.articulate than bush, but rather a stiff.  and kerry lost.as i looked further back, i kept finding the same pattern..pundits said carter beat ford.because the country distrusted the republicans after watergate..and yet it also happened that carter was famous for his big grin.and folksy ways, and ford for being a boring klutz.  four years.later, pundits said the country had lurched to the right.  but.reagan, a former actor, also happened to be even more charismatic.than carter (whose grin was somewhat less cheery after four stressful.years in office).  in 1984 the charisma gap between reagan and.mondale was like that between clinton and dole, with similar results..the first george bush managed to win in 1988, though he would later.be vanquished by one of the most charismatic presidents ever, because.in 1988 he was up against the notoriously uncharismatic.michael dukakis.these are the elections i remember personally, but apparently the.same pattern played out in 1964 and 1972.  the most recent.counterexample appears to be 1968, when nixon beat the more charismatic hubert.humphrey.  but when you examine that election, it tends to support.the charisma theory more than contradict it.  as joe mcginnis.recounts in his famous book the selling of the president 1968,.nixon knew he had less charisma than humphrey, and thus simply.refused to debate him on tv.  he knew he couldn't afford to let the.two of them be seen side by side.now a candidate probably couldn't get away with refusing to debate..but in 1968 the custom of televised debates was still evolving.  in.effect, nixon won in 1968 because voters were never allowed to see.the real nixon.  all they saw were carefully scripted campaign.spots.oddly enough, the most recent true counterexample is probably 1960..though this election is usually given as an example of the power.of tv, kennedy apparently would not have won without fraud by party.machines in illinois and texas.  but tv was still young in 1960;.only 87% of households had it..[3].undoubtedly tv helped kennedy,.so historians are correct in regarding this election as a.watershed.  tv required a new kind of candidate. there would be no.more calvin coolidges.the charisma theory may also explain why democrats tend to lose.presidential elections.  the core of the democrats' ideology seems.to be a belief in government.  perhaps this tends to attract people.who are earnest, but dull.  dukakis, gore, and kerry were so similar.in that respect that they might have been brothers.  good thing for.the democrats that their screen lets through an occasional clinton,.even if some scandal results..[4]one would like to believe elections are won and lost on issues, if.only fake ones like willie horton.  and yet, if they are, we have.a remarkable coincidence to explain.  in every presidential election.since tv became widespread, the apparently more charismatic candidate.has won.  surprising, isn't it, that voters' opinions on the issues.have lined up with charisma for 11 elections in a row?the political commentators who come up with shifts to the left or.right in their morning-after analyses are like the financial reporters.stuck writing stories day after day about the random fluctuations.of the stock market.  day ends, market closes up or down, reporter.looks for good or bad news respectively, and writes that the market.was up on news of intel's earnings, or down on fears of instability.in the middle east.  suppose we could somehow feed these reporters.false information about market closes, but give them all the other.news intact.  does anyone believe they would notice the anomaly,.and not simply write that stocks were up (or down) on whatever good.(or bad) news there was that day?  that they would say, hey, wait.a minute, how can stocks be up with all this unrest in the middle.east?i'm not saying that issues don't matter to voters.  of course they.do.  but the major parties know so well which issues matter how.much to how many voters, and adjust their message so precisely in.response, that they tend to split the difference on the issues,.leaving the election to be decided by the one factor they can't.control: charisma.if the democrats had been running a candidate as charismatic as.clinton in the 2004 election, he'd have won.  and we'd be reading.that the election was a referendum on the war in iraq, instead of.that the democrats are out of touch with evangelical christians in.middle america.during the 1992 election, the clinton campaign staff had a big sign.in their office saying "it's the economy, stupid." perhaps it was.even simpler than they thought.postscriptopinions seem to be divided about the charisma theory.  some say.it's impossible, others say it's obvious.  this seems a good sign..perhaps it's in the sweet spot midway between.as for it being impossible, i reply: here's the data; here's the.theory; theory explains data 100%.   to a scientist, at least, that.means it deserves attention, however implausible it seems.you can't believe voters are so superficial that they just choose.the most charismatic guy?  my theory doesn't require that.  i'm not.proposing that charisma is the only factor, just that it's the only.one left after the efforts of the two parties cancel one.another out.as for the theory being obvious, as far as i know, no one has.proposed it before.  election forecasters are proud when they can.achieve the same results with much more complicated models.finally, to the people who say that the theory is probably true,.but rather depressing: it's not so bad as it seems.  the phenomenon.is like a pricing anomaly; once people realize it's there, it will.disappear.  once both parties realize it's a waste of time to.nominate uncharismatic candidates, they'll tend to nominate only.the most charismatic ones.  and if the candidates are equally.charismatic, charisma will cancel out, and elections will be decided.on issues, as political commentators like to think they are now.notes[1].as clinton himself discovered to his surprise when, in one of.his first acts as president, he tried to shift the military leftward..after a bruising fight he escaped with a face-saving compromise.[2].true, gore won the popular vote. but politicians know the electoral.vote decides the election, so that's what they campaign for. if bush.had been campaigning for the popular vote he would presumably have.got more of it. (thanks to judgmentalist for this point.)[3].source: nielsen media research.  of the remaining 13%, 11 didn't.have tv because they couldn't afford it.  i'd argue that the missing.11% were probably also the 11% most susceptible to charisma.[4].one implication of this theory is that parties shouldn't be too.quick to reject candidates with skeletons in their closets..charismatic candidates will tend to have more skeletons than squeaky.clean dullards, but in practice that doesn't seem to lose elections..the current bush, for example, probably did more drugs in his.twenties than any preceding president, and yet managed to get elected.with a base of evangelical christians.  all you have to do is say.you've reformed, and stonewall about the details.thanks to trevor blackwell, maria daniels, jessica livingston,.jackie mcdonough, and robert morris for reading drafts of this, and.to eric raymond for pointing out that i was wrong about 1968..comment on this essay.what charisma ispolitics and the art of actingjapanese translation<eot><sot>bradley's ghost.november 2004
.a lot of people are writing now about.why kerry lost.  here i want to.examine a more specific question: why were the exit polls so.wrong?in ohio, which kerry ultimately.lost 49-51, exit polls gave him a 52-48 victory.  and this wasn't just.random error.  in every swing state they overestimated the kerry vote..in florida, which bush ultimately won 52-47, exit polls predicted.a dead heat.(these are not early numbers. they're from about midnight eastern time,.long after polls closed in ohio and florida.  and yet by the.next afternoon the exit poll numbers online corresponded to the returns..the only way i can imagine this happening is if those in.charge of the exit polls cooked the books after seeing the actual.returns.  but that's another issue.)what happened?  the source of the problem may be a variant of.the bradley effect..this term.was invented after tom bradley, the black mayor of los angeles,.lost an election for governor of california despite a comfortable.lead in the polls.  apparently voters were afraid to say.they planned to vote against him, lest their motives be.(perhaps correctly) suspected.it seems likely that something similar happened in exit polls this year..in theory, exit polls ought to be very accurate..you're not asking people what they would do.  you're.asking what they just did.how can you get errors asking that?  because some people don't.respond.  to get a truly random sample, pollsters ask, say, every.20th person leaving the polling place who they voted for.  but not.everyone wants to answer.  and the pollsters can't simply ignore.those who won't, or their sample isn't random anymore.  so what.they do, apparently, is note down the age and race and sex of the.person, and guess from that who they voted for.this works so long as there is no correlation between who people.vote for and whether they're willing to talk about it.  but this.year there may have been.  it may be that a significant number of.those who voted for.bush didn't want to say so.why not?  because people in the us are more conservative than they're.willing to admit.  the values of the elite in this country, at least.at the moment, are npr values.  the average person, as i think both.republicans and democrats would agree, is more socially conservative..but while some openly flaunt the fact that they don't share the.opinions of the elite, others feel a little nervous about it, as.if they had bad table manners.for example, according to current npr values, you.can't say anything that might be.perceived as disparaging towards homosexuals.  to do.so is "homophobic."  and yet a large number of americans are deeply.religious, and the bible is quite explicit on the subject of.homosexuality.  what are they to do?  i think what many do is keep.their opinions, but keep them to themselves.they know what they believe, but they also know what they're supposed.to believe..and so when a stranger (for example, a pollster) asks.them their opinion about something like gay marriage, they will not.always say what they really think.when the values of the elite are liberal, polls will tend to.underestimate the conservativeness of ordinary voters.  this seems.to me the leading theory to explain why the exit polls were so.far off this year.  npr values.said one ought to vote for kerry.  so all the people who voted for.kerry felt virtuous for doing so, and were eager to tell pollsters.they had. no one who voted for kerry did it as an act of quiet.defiance.support for a woman presidentjapanese translation.if you liked this, you may also like.hackers & painters.<eot><sot>a version 1.0.october 2004
.as e. b. white said, "good writing is rewriting."  i didn't.realize this when i was in school.  in writing, as in math and.science, they only show you the finished product..you don't see all the false starts.  this gives students a.misleading view of how things get made.part of the reason it happens is that writers don't want.people to see their mistakes.  but i'm willing to let people.see an early draft if it will show how much you have.to rewrite to beat an essay into shape.below is the oldest version i can find of.the age of the essay.(probably the second or third day), with.text that ultimately survived in.red and text that later.got deleted in gray..there seem to be several categories of cuts: things i got wrong,.things that seem like bragging, flames,.digressions, stretches of awkward prose, and unnecessary words.i discarded more from the beginning.  that's.not surprising; it takes a while to hit your stride.  there.are more digressions at the start, because i'm not sure where.i'm heading.the amount of cutting is about average.  i probably write.three to four words for every one that appears in the final.version of an essay.(before anyone gets mad at me for opinions expressed here, remember.that anything you see here that's not in the final version is obviously.something i chose not to publish, often because i disagree.with it.).recently a friend said that what he liked about.my essays was that they weren't written the way.we'd been taught to write essays in school.  you.remember: topic sentence, introductory paragraph,.supporting paragraphs, conclusion.  it hadn't.occurred to me till then that those horrible things.we had to write in school were even connected to.what i was doing now.  but sure enough, i thought,.they did call them "essays," didn't they?well, they're not.  those things you have to write.in school are not only not essays, they're one of the.most pointless of all the pointless hoops you have.to jump through in school.  and i worry that they.not only teach students the wrong things about writing,.but put them off writing entirely.so i'm going to give the other side of the story: what.an essay really is, and how you write one.  or at least,.how i write one.  students be forewarned: if you actually write.the kind of essay i describe, you'll probably get bad.grades.  but knowing how it's really done should.at least help you to understand the feeling of futility.you have when you're writing the things they tell you to..the most obvious difference between real essays and.the things one has to write in school is that real.essays are not exclusively about english literature..it's a fine thing for schools to.teach students how to.write.  but for some bizarre reason (actually, a very specific bizarre.reason that i'll explain in a moment),.the teaching of.writing has gotten mixed together with the study.of literature.  and so all over the country, students are.writing not about how a baseball team with a small budget.might compete with the yankees, or the role of color in.fashion, or what constitutes a good dessert, but about.symbolism in dickens.with obvious.results.  only a few people really.care about.symbolism in dickens.  the teacher doesn't..the students don't.  most of the people who've had to write phd.disserations about dickens don't.  and certainly.dickens himself would be more interested in an essay.about color or baseball.how did things get this way?  to answer that we have to go back.almost a thousand years.  between about 500 and 1000, life was.not very good in europe.  the term "dark ages" is presently.out of fashion as too judgemental (the period wasn't dark;.it was just different), but if this label didn't already.exist, it would seem an inspired metaphor.  what little.original thought there was took place in lulls between.constant wars and had something of the character of.the thoughts of parents with a new baby..the most amusing thing written during this.period, liudprand of cremona's embassy to constantinople, is,.i suspect, mostly inadvertantly so.around 1000 europe began to catch its breath..and once they.had the luxury of curiosity, one of the first things they discovered.was what we call "the classics.".imagine if we were visited.by aliens.  if they could even get here they'd presumably know a.few things we don't.  immediately alien studies would become.the most dynamic field of scholarship: instead of painstakingly.discovering things for ourselves, we could simply suck up.everything they'd discovered.  so it was in europe in 1200..when classical texts began to circulate in europe, they contained.not just new answers, but new questions.  (if anyone proved.a theorem in christian europe before 1200, for example, there.is no record of it.)for a couple centuries, some of the most important work.being done was intellectual archaelogy.  those were also.the centuries during which schools were first established..and since reading ancient texts was the essence of what.scholars did then, it became the basis of the curriculum.by 1700, someone who wanted to learn about.physics didn't need to start by mastering greek in order to read aristotle.  but schools.change slower than scholarship: the study of.ancient texts.had such prestige that it remained the backbone of.education.until the late 19th century.  by then it was merely a tradition..it did serve some purposes: reading a foreign language was difficult,.and thus taught discipline, or at least, kept students busy;.it introduced students to.cultures quite different from their own; and its very uselessness.made it function (like white gloves) as a social bulwark..but it certainly wasn't.true, and hadn't been true for centuries, that students were.serving apprenticeships in the hottest area of scholarship.classical scholarship had also changed.  in the early era, philology.actually mattered.  the texts that filtered into europe were.all corrupted to some degree by the errors of translators and.copyists.  scholars had to figure out what aristotle said.before they could figure out what he meant.  but by the modern.era such questions were answered as well as they were ever.going to be.  and so the study of ancient texts became less.about ancientness and more about texts.the time was then ripe for the question: if the study of.ancient texts is a valid field for scholarship, why not modern.texts?  the answer, of course, is that the raison d'etre.of classical scholarship was a kind of intellectual archaelogy that.does not need to be done in the case of contemporary authors..but for obvious reasons no one wanted to give that answer..the archaeological work being mostly done, it implied that.the people studying the classics were, if not wasting their.time, at least working on problems of minor importance.and so began the study of modern literature. there was some.initial resistance, but it didn't last long..the limiting.reagent in the growth of university departments is what.parents will let undergraduates study.  if parents will let.their children major in x, the rest follows straightforwardly..there will be jobs teaching x, and professors to fill them..the professors will establish scholarly journals and publish.one another's papers.  universities with x departments will.subscribe to the journals.  graduate students who want jobs.as professors of x will write dissertations about it.  it may.take a good long while for the more prestigious universities.to cave in and establish departments in cheesier xes,  but.at the other end of the scale there are so many universities.competing to attract students that the mere establishment of.a discipline requires little more than the desire to do it.high schools imitate universities..and so once university.english departments were established in the late nineteenth century,.the 'riting component of the 3 rs.was morphed into english..with the bizarre consequence that high school students now.had to write about english literature-- to write, without.even realizing it, imitations of whatever.english professors had been publishing in their journals a.few decades before.   it's no wonder if this seems to the.student a pointless exercise, because we're now three steps.removed from real work: the students are imitating english.professors, who are imitating classical scholars, who are.merely the inheritors of a tradition growing out of what.was, 700 years ago, fascinating and urgently needed work.perhaps high schools should drop english and just teach writing..the valuable part of english classes is learning to write, and.that could be taught better by itself.  students learn better.when they're interested in what they're doing, and it's hard.to imagine a topic less interesting than symbolism in dickens..most of the people who write about that sort of thing professionally.are not really interested in it.  (though indeed, it's been a.while since they were writing about symbolism; now they're.writing about gender.)i have no illusions about how eagerly this suggestion will.be adopted.  public schools probably couldn't stop teaching.english even if they wanted to; they're probably required to by.law.  but here's a related suggestion that goes with the grain.instead of against it: that universities establish a.writing major.  many of the students who now major in english.would major in writing if they could, and most would.be better off.it will be argued that it is a good thing for students to be.exposed to their literary heritage.  certainly.  but is that.more important than that they learn to write well?  and are.english classes even the place to do it?  after all,.the average public high school student gets zero exposure to.his artistic heritage.  no disaster results..the people who are interested in art learn about it for.themselves, and those who aren't don't.  i find that american.adults are no better or worse informed about literature than.art, despite the fact that they spent years studying literature.in high school and no time at all studying art.  which presumably.means that what they're taught in school is rounding error.compared to what they pick up on their own.indeed, english classes may even be harmful.  in my case they.were effectively aversion therapy.  want to make someone dislike.a book?  force him to read it and write an essay about it..and make the topic so intellectually bogus that you.could not, if asked, explain why one ought to write about it..i love to read more than anything, but by the end of high school.i never read the books we were assigned.  i was so disgusted with.what we were doing that it became a point of honor.with me to write nonsense at least as good at the other students'.without having more than glanced over the book to learn the names.of the characters and a few random events in it.i hoped this might be fixed in college, but i found the same.problem there.  it was not the teachers.  it was english..we were supposed to read novels and write essays about them..about what, and why?  that no one seemed to be able to explain..eventually by trial and error i found that what the teacher.wanted us to do was pretend that the story had really taken.place, and to analyze based on what the characters said and did (the.subtler clues, the better) what their motives must have been..one got extra credit for motives having to do with class,.as i suspect one must now for those involving gender and.sexuality.  i learned how to churn out such stuff well enough.to get an a, but i never took another english class.and the books we did these disgusting things to, like those.we mishandled in high school, i find still have black marks.against them in my mind.  the one saving grace was that.english courses tend to favor pompous, dull writers like.henry james, who deserve black marks against their names anyway..one of the principles the irs uses in deciding whether to.allow deductions is that, if something is fun, it isn't work..fields that are intellectually unsure of themselves rely on.a similar principle.  reading p.g. wodehouse or evelyn waugh or.raymond chandler is too obviously pleasing to seem like.serious work, as reading shakespeare would have been before.english evolved enough to make it an effort to understand him. [sh].and so good writers (just you wait and see who's still in.print in 300 years) are less likely to have readers turned.against them by clumsy, self-appointed tour guides..the other big difference between a real essay and the.things.they make you write in school is that a real essay doesn't.take a position and then defend it.  that principle,.like the idea that we ought to be writing about literature,.turns out to be another intellectual hangover of long.forgotten origins.  it's often mistakenly believed that.medieval universities were mostly seminaries.  in fact they.were more law schools.  and at least in our tradition.lawyers are advocates: they are.trained to be able to.take.either side of an argument and make as good a case for it.as they can. whether or not this is a good idea (in the case of prosecutors,.it probably isn't), it tended to pervade.the atmosphere of.early universities.  after the lecture the most common form.of discussion was the disputation.  this idea.is at least.nominally preserved in our present-day thesis defense-- indeed,.in the very word thesis.  most people treat the words.thesis.and dissertation as interchangeable, but originally, at least,.a thesis was a position one took and the dissertation was.the argument by which one defended it.i'm not complaining that we blur these two words together..as far as i'm concerned, the sooner we lose the original.sense of the word thesis, the better.  for many, perhaps most,.graduate students, it is stuffing a square peg into a round.hole to try to recast one's work as a single thesis.  and.as for the disputation, that seems clearly a net lose..arguing two sides of a case may be a necessary evil in a.legal dispute, but it's not the best way to get at the truth,.as i think lawyers would be the first to admit..and yet this principle is built into the very structure of.the essays.they teach you to write in high school.  the topic.sentence is your thesis, chosen in advance, the supporting.paragraphs the blows you strike in the conflict, and the.conclusion--- uh, what it the conclusion?  i was never sure.about that in high school.  if your thesis was well expressed,.what need was there to restate it?  in theory it seemed that.the conclusion of a really good essay ought not to need to.say any more than qed..but when you understand the origins.of this sort of "essay", you can see where the.conclusion comes from.  it's the concluding remarks to the.jury..what other alternative is there?  to answer that.we have to.reach back into history again, though this time not so far..to michel de montaigne, inventor of the essay..he was.doing something quite different from what a.lawyer does,.and.the difference is embodied in the name.  essayer is the french.verb meaning "to try" (the cousin of our word assay),.and an "essai" is an effort..an essay is something you.write in order.to figure something out.figure out what?  you don't know yet.  and so you can't begin with a.thesis, because you don't have one, and may never have.one.  an essay doesn't begin with a statement, but with a.question.  in a real essay, you don't take a position and.defend it.  you see a door that's ajar, and you open it and.walk in to see what's inside.if all you want to do is figure things out, why do you need.to write anything, though?  why not just sit and think?  well,.there precisely is montaigne's great discovery.  expressing.ideas helps to form them.  indeed, helps is far too weak a.word.  90%.of what ends up in my essays was stuff.i only.thought of when i sat down to write them.  that's why i.write them.so there's another difference between essays and.the things.you have to write in school.   in school.you are, in theory,.explaining yourself to someone else.  in the best case---if.you're really organized---you're just writing it down..in a real essay you're writing for yourself.  you're.thinking out loud.but not quite.  just as inviting people over forces you to.clean up your apartment, writing something that you know.other people will read forces you to think well.  so it.does matter to have an audience.  the things i've written.just for myself are no good.  indeed, they're bad in.a particular way:.they tend to peter out.  when i run into.difficulties, i notice that i.tend to conclude with a few vague.questions and then drift off to get a cup of tea.this seems a common problem..it's practically the standard.ending in blog entries--- with the addition of a "heh" or an.emoticon, prompted by the all too accurate sense that.something is missing.and indeed, a lot of.published essays peter out in this.same way..particularly the sort written by the staff writers of newsmagazines.  outside writers tend to supply.editorials of the defend-a-position variety, which.make a beeline toward a rousing (and.foreordained) conclusion.   but the staff writers feel.obliged to write something more.balanced, which in.practice ends up meaning blurry..since they're.writing for a popular magazine, they start with the.most radioactively controversial questions, from which.(because they're writing for a popular magazine).they then proceed to recoil from.in terror..gay marriage, for or.against?  this group says one thing.  that group says.another.  one thing is certain: the question is a.complex one.  (but don't get mad at us.  we didn't.draw any conclusions.)questions aren't enough.  an essay has to come up with answers..they don't always, of course.  sometimes you start with a.promising question and get nowhere.  but those you don't.publish.  those are like experiments that get inconclusive.results.   something you publish ought to tell the reader.something he didn't already know..but what you tell him doesn't matter, so long as.it's interesting.  i'm sometimes accused of meandering..in defend-a-position writing that would be a flaw..there you're not concerned with truth.  you already.know where you're going, and you want to go straight there,.blustering through obstacles, and hand-waving.your way across swampy ground.  but that's not what.you're trying to do in an essay.  an essay is supposed to.be a search for truth.  it would be suspicious if it didn't.meander.the meander is a river in asia minor (aka.turkey)..as you might expect, it winds all over the place..but does it.do this out of frivolity?   quite the opposite..like all rivers, it's rigorously following the laws of physics..the path it has discovered,.winding as it is, represents.the most economical route to the sea.the river's algorithm is simple.  at each step, flow down..for the essayist this translates to: flow interesting..of all the places to go next, choose.whichever seems.most interesting.i'm pushing this metaphor a bit.  an essayist.can't have.quite as little foresight as a river.  in fact what you do.(or what i do) is somewhere between a river and a roman.road-builder.  i have a general idea of the direction.i want to go in, and.i choose the next topic with that in mind.  this essay is.about writing, so i do occasionally yank it back in that.direction, but it is not all the sort of essay i.thought i was going to write about writing.note too that hill-climbing (which is what this algorithm is.called) can get you in trouble..sometimes, just.like a river,.you.run up against a blank wall.  what.i do then is just.what the river does: backtrack..at one point in this essay.i found that after following a certain thread i ran out.of ideas.  i had to go back n.paragraphs and start over.in another direction.  for illustrative purposes i've left.the abandoned branch as a footnote..err on the side of the river.  an essay is not a reference.work.  it's not something you read looking for a specific.answer, and feel cheated if you don't find it.  i'd much.rather read an essay that went off in an unexpected but.interesting direction than one that plodded dutifully along.a prescribed course.so what's interesting?  for me, interesting means surprise..design, as matz.has said, should follow the principle of.least surprise..a button that looks like it will make a.machine stop should make it stop, not speed up.  essays.should do the opposite.  essays should aim for maximum.surprise.i was afraid of flying for a long time and could only travel.vicariously.  when friends came back from faraway places,.it wasn't just out of politeness that i asked them about.their trip..i really wanted to know.  and i found that.the best way to get information out of them was to ask.what surprised them.  how was the place different from what.they expected?  this is an extremely useful question..you can ask it of even.the most unobservant people, and it will.extract information they didn't even know they were.recording. indeed, you can ask it in real time.  now when i go somewhere.new, i make a note of what surprises me about it.  sometimes i.even make a conscious effort to visualize the place beforehand,.so i'll have a detailed image to diff with reality..surprises are facts.you didn't already.know..but they're.more than that.  they're facts.that contradict things you.thought you knew.  and so they're the most valuable sort of.fact you can get.  they're like a food that's not merely.healthy, but counteracts the unhealthy effects of things.you've already eaten..how do you find surprises?  well, therein lies half.the work of essay writing.  (the other half is expressing.yourself well.)   you can at least.use yourself as a.proxy for the reader.  you should only write about things.you've thought about a lot.  and anything you come across.that surprises you, who've thought about the topic a lot,.will probably surprise most readers.for example, in a recent essay i pointed out that because.you can only judge computer programmers by working with.them, no one knows in programming who the heroes should.be..i.certainly.didn't realize this when i started writing.the.essay, and even now i find it kind of weird.  that's.what you're looking for.so if you want to write essays, you need two ingredients:.you need.a few topics that you think about a lot, and you.need some ability to ferret out the unexpected.what should you think about?  my guess is that it.doesn't matter.  almost everything is.interesting if you get deeply.enough into it.  the one possible exception.are.things.like working in fast food, which.have deliberately had all.the variation sucked out of them..in retrospect, was there.anything interesting about working in baskin-robbins?.well, it was interesting to notice.how important color was.to the customers.  kids a certain age would point into.the case and say that they wanted yellow.  did they want.french vanilla or lemon?  they would just look at you.blankly.  they wanted yellow.  and then there was the.mystery of why the perennial favorite pralines n' cream.was so appealing. i'm inclined now to.think it was the salt..and the mystery of why passion fruit tasted so disgusting..people would order it because of the name, and were always.disappointed.  it should have been called in-sink-erator.fruit..and there was.the difference in the way fathers and.mothers bought ice cream for their kids..fathers tended to.adopt the attitude of.benevolent kings bestowing largesse,.and mothers that of.harried bureaucrats,.giving in to.pressure against their better judgement..so, yes, there does seem to be material, even in.fast food.what about the other half, ferreting out the unexpected?.that may require some natural ability.  i've noticed for.a long time that i'm pathologically observant.  ....[that was as far as i'd gotten at the time.]notes[sh] in shakespeare's own time, serious writing meant theological.discourses, not the bawdy plays acted over on the other.side of the river among the bear gardens and whorehouses.the other extreme, the work that seems formidable from the moment.it's created (indeed, is deliberately intended to be).is represented by milton.  like the aeneid, paradise lost is a.rock imitating a butterfly that happened to get fossilized..even samuel johnson seems to have balked at this, on the one.hand paying milton the compliment of an extensive biography,.and on the other writing of paradise lost that "none who read it.ever wished it longer."<eot><sot>what the bubble got right.september 2004
(this essay is derived from an invited talk at icfp 2004.)i had a front row seat for the internet bubble,.because i worked at yahoo during 1998 and 1999.  one day,.when the stock was trading around $200, i sat down and calculated.what i thought the price should be. the.answer i got was $12.  i went to.the next cubicle and told my friend trevor.  "twelve!" he said..he tried to sound indignant, but he didn't quite manage it.  he.knew as well as i did that our valuation was crazy.yahoo was a special case.  it was not just our price to earnings.ratio that was bogus.  half our earnings were too.  not in.the enron way, of course.  the finance guys seemed.scrupulous about reporting earnings.  what made our.earnings bogus was that yahoo was, in effect, the center of.a ponzi scheme.  investors looked at yahoo's earnings.and said to themselves, here is proof that internet companies can make.money.  so they invested in new.startups that promised to be the next yahoo.  and as soon as these startups.got the money, what did they do with it?.buy millions of dollars worth of advertising on yahoo to promote.their brand.  result: a capital investment in a startup this.quarter shows up as yahoo earnings next quarter—stimulating.another round of investments in startups.as in a ponzi scheme, what seemed to be the returns of this system.were simply the latest round of investments in it..what made it not a ponzi scheme was that it was unintentional..at least, i think it was.  the venture capital business is pretty incestuous,.and there were presumably people in a position, if not to create.this situation, to realize what was happening and to milk it.a year later the game was up.  starting in january 2000, yahoo's.stock price began to crash, ultimately losing 95% of its.value.notice, though, that even with all the fat trimmed off its market.cap, yahoo was still worth a lot.  even at the morning-after.valuations of march and april 2001, the people at yahoo had managed.to create a company worth about $8 billion in just six years.the fact is, despite all the nonsense we heard.during the bubble about the "new economy," there was a.core of truth.  you need.that to get a really big bubble: you need to have something.solid at the center, so that even smart people are sucked in..(isaac newton and jonathan swift both lost money.in the south sea bubble of 1720.)now the pendulum has swung the other way.  now anything that.became fashionable during the bubble is ipso facto unfashionable..but that's a mistake—an even bigger mistake than believing.what everyone was saying in 1999.  over the long term,.what the bubble got right will be more important than what.it got wrong.1. retail vcafter the excesses of the bubble, it's now.considered dubious to take companies public before they have earnings..but there is nothing intrinsically wrong with.that idea.  taking a company public at an early stage is simply.retail vc: instead of going to venture capital firms for the last round of.funding, you go to the public markets.by the end of the bubble, companies going public with no.earnings were being derided as "concept stocks," as if it.were inherently stupid to invest in them..but investing in concepts isn't stupid; it's what vcs do,.and the best of them are far from stupid.the stock of a company that doesn't yet have earnings is.worth something..it may take a while for the market to learn.how to value such companies, just as it had to learn to.value common stocks in the early 20th century.   but markets.are good at solving that kind of problem.  i wouldn't be.surprised if the market ultimately did a better.job than vcs do now.going public early will not be the right plan.for every company..and it can of course be.disruptive—by distracting the management, or by making the early.employees suddenly rich.  but just as the market will learn.how to value startups, startups will learn how to minimize.the damage of going public.2. the internetthe internet genuinely is a big deal.  that was one reason.even smart people were fooled by the bubble.  obviously.it was going to have a huge effect.  enough of an effect to.triple the value of nasdaq companies in two years?  no, as it.turned out.  but it was hard to say for certain at the time. [1]the same thing happened during the mississippi and south sea bubbles..what drove them was the invention of organized public finance.(the south sea company, despite its name, was really a competitor.of the bank of england).  and that did turn out to be.a big deal, in the long run.recognizing an important trend turns out to be easier than.figuring out how to profit from it.  the mistake.investors always seem to make is to take the trend too literally..since the internet was the big new thing, investors supposed.that the more internettish the company, the better.  hence.such parodies as pets.com.in fact most of the money to be made from big trends is made.indirectly.  it was not the railroads themselves that.made the most money during the railroad boom, but the companies.on either side, like carnegie's steelworks, which made the rails,.and standard oil, which used railroads to get oil to the east coast,.where it could be shipped to europe.i think the internet will have great effects,.and that what we've seen so far is nothing compared to what's.coming.  but most of the winners will only indirectly be.internet companies; for every google there will be ten.jetblues.3. choiceswhy will the internet have great effects?  the general.argument is that new forms of communication always do.  they happen.rarely (till industrial times there were just speech, writing, and printing),.but when they do, they always cause a big splash.the specific argument, or one of them, is the internet gives us.more choices.  in the "old" economy,.the high cost of presenting information to people meant they.had only a narrow range of options to choose from.  the tiny,.expensive pipeline to consumers was tellingly named "the channel.".control the channel and you.could feed them what you wanted, on your terms.  and it.was not just big corporations that depended.on this principle.  so, in their way, did.labor unions, the traditional news media,.and the art and literary establishments..winning depended not on doing good work, but on gaining control.of some bottleneck.there are signs that this is changing..google has over 82 million unique users a month and.annual revenues of about three billion dollars. [2].and yet have you ever seen.a google ad?.something is going on here.admittedly, google is an extreme case.  it's very easy for.people to switch to a new search engine.  it costs little.effort and no money to try a new one, and it's easy to.see if the results are better.  and so google doesn't have.to advertise.  in a business like theirs, being the best is.enough.the exciting thing about the internet is that it's.shifting everything in that direction..the hard part, if you want to win by making the best stuff,.is the beginning.  eventually everyone.will learn by word of mouth that you're the best,.but how do you survive to that point?  and it is in this crucial.stage that the internet has the most effect.  first, the.internet lets anyone find you at almost zero cost..second, it dramatically speeds up the rate at which.reputation spreads by word of mouth.  together these mean that in many.fields the rule will be: build it, and they will come..make something great and put it online..that is a big change from the recipe for winning in the.past century.4. youththe aspect of the internet bubble that the press seemed most.taken with was the youth of some of the startup founders..this too is a trend that will last..there is a huge standard deviation among 26 year olds.  some.are fit only for entry level jobs, but others are.ready to rule the world if they can find someone to handle.the paperwork for them.a 26 year old may not be very good at managing people or.dealing with the sec.  those require experience..but those are also commodities, which can be handed off to.some lieutenant.  the most important quality in a ceo is his.vision for the company's future.  what will they build next?.and in that department, there are 26 year olds who can.compete with anyone.in 1970 a company president meant someone in his fifties, at.least.   if he had technologists working for him, they were.treated like a racing stable: prized, but not powerful.  but.as technology has grown more important, the power of nerds.has grown to reflect it.  now it's not enough for a ceo to.have someone smart he can ask about technical matters.   increasingly,.he has to be that person himself.as always, business has clung to old forms.  vcs still seem.to want to install a legitimate-looking.talking head as the ceo.  but increasingly the founders of.the company are the real powers, and the grey-headed man.installed by the vcs more like a.music group's manager than a general.5. informalityin new york, the bubble had dramatic consequences:.suits went out of fashion.  they made one seem old.  so in.1998 powerful new york types were suddenly wearing.open-necked shirts and khakis and oval wire-rimmed glasses,.just like guys in santa clara.the pendulum has swung back a bit, driven in part by a panicked.reaction by the clothing industry.  but i'm betting on the.open-necked shirts.  and this is not as frivolous a question.as it might seem.  clothes are important, as all nerds can sense,.though they may not realize it consciously.if you're a nerd, you can understand how important clothes are.by asking yourself how you'd feel about a company.that made you wear a suit and tie to work.  the idea sounds.horrible, doesn't it?  in fact, horrible far out of proportion.to the mere discomfort of wearing such clothes.  a company that.made programmers wear suits would have something deeply wrong.with it.and what would be wrong would be that how one presented oneself.counted more than the quality of one's ideas.  that's.the problem with formality.  dressing up is not so much bad in.itself.  the problem is the receptor it binds to: dressing.up is inevitably a substitute.for good ideas.   it is no coincidence that technically.inept business types are known as "suits."nerds don't just happen to dress informally.  they do it too.consistently.  consciously or not, they dress informally as.a prophylactic measure against stupidity.6. nerdsclothing is only the most visible battleground in the war.against formality.  nerds tend to eschew formality of any sort..they're not impressed by one's job title, for example,.or any of the other appurtenances of authority.indeed, that's practically the definition of a nerd.  i found.myself talking recently to someone from hollywood who was planning.a show about nerds.  i thought it would be useful if i.explained what a nerd was.  what i came up with was: someone who.doesn't expend any effort on marketing himself.a nerd, in other words, is someone who concentrates on substance..so what's the connection between nerds and technology? roughly.that you can't fool mother nature. in technical matters, you.have to get the right answers.  if your software miscalculates.the path of a space probe, you can't finesse your way out of.trouble by saying that your code is patriotic, or avant-garde,.or any of the other dodges people use in nontechnical.fields.and as technology becomes increasingly important in the.economy, nerd culture is.rising with it.  nerds are already.a lot cooler than they were when i was a kid.  when i was in.college in the mid-1980s, "nerd" was still an insult.  people.who majored in computer science generally tried to conceal it..now women ask me where they can meet nerds.  (the answer that.springs to mind is "usenix," but that would be like drinking.from a firehose.)i have no illusions about why nerd culture is becoming.more accepted.  it's not because people are.realizing that substance is more important than marketing..it's because the nerds are getting.rich.  but that is not going.to change.7. optionswhat makes the nerds rich, usually, is stock options.  now there.are moves afoot to make it harder for companies to grant.options.  to the extent there's some genuine accounting abuse.going on, by all means correct it.  but don't kill the golden.goose.  equity is the fuel that drives technical innovation.options are a good idea because (a) they're fair, and (b) they.work.  someone who goes to work for a company is (one hopes).adding to its value, and it's only fair to give them a share.of it.  and as a purely practical measure, people work a lot.harder when they have options.  i've seen that first hand.the fact that a few crooks during the bubble robbed their.companies by granting themselves options doesn't mean options.are a bad idea.  during the railroad boom, some executives.enriched themselves by selling watered stock—by issuing more.shares than they said were outstanding.  but that doesn't.make common stock a bad idea.  crooks just use whatever.means are available.if there is a problem with options, it's that they reward.slightly the wrong thing.  not surprisingly, people do what you.pay them to. if you pay them by the hour, they'll work a lot of.hours.  if you pay them by the volume of work done, they'll.get a lot of work done (but only as you defined work)..and if you pay them to raise the.stock price, which is what options amount to, they'll raise.the stock price.but that's not quite what you want.  what you want is to.increase the actual value of the company, not its market cap..over time the two inevitably meet, but not always as quickly.as options vest.  which means options tempt employees, if.only unconsciously, to "pump and dump"—to do things.that will make the company seem valuable..i found that when i was at yahoo, i couldn't help thinking,."how will this sound to investors?"  when i should have been.thinking "is this a good idea?"so maybe the standard option deal needs to be tweaked slightly..maybe options should be replaced with something tied more.directly to earnings.  it's still early days.8. startupswhat made the options valuable, for the most part, is.that they were options on the stock of.startups.  startups.were not of course a creation of the bubble, but they.were more visible during the bubble than ever before.one thing most people did learn about for the first time.during the bubble was the startup.created with the intention of selling it..originally a.startup meant a small company that hoped to grow into a.big one.  but increasingly startups are evolving into a.vehicle for developing technology on spec.as i wrote in.hackers & painters, employees seem to be most.productive when they're paid in proportion to the wealth.they generate.  and the advantage of a startup—indeed,.almost its raison d'etre—is that it offers something.otherwise impossible to obtain: a way of measuring that.in many businesses, it just makes more sense for companies.to get technology by buying startups rather than developing.it in house.  you pay more, but there is less risk,.and risk is what big companies don't want.  it makes the.guys developing the technology more accountable, because they.only get paid if they build the winner.  and you end up.with better technology, created faster, because things are.made in the innovative atmosphere of startups instead of.the bureaucratic atmosphere of big companies.our startup, viaweb, was built to be sold.  we were open.with investors about that from the start.  and we were.careful to create something that could slot easily into a.larger company.  that is the pattern for the future.9. californiathe bubble was a california phenomenon.  when i showed up.in silicon valley in 1998, i felt like an immigrant from.eastern europe arriving in america in 1900.  everyone.was so cheerful and healthy and rich.  it seemed a new.and improved world.the press, ever eager to exaggerate small trends, now gives.one the impression that silicon valley is a ghost town..not at all.  when i drive down 101 from the airport,.i still feel a buzz of energy, as if there were a giant.transformer nearby.  real estate is still more expensive.than just about anywhere else in the country.  the people.still look healthy, and the weather is still fabulous..the future is there..(i say "there" because i moved back to the east coast after.yahoo.  i still wonder if this was a smart idea.)what makes the bay area superior is the attitude of the.people.  i notice that when i come home to boston..the first thing i see when i walk out of the airline terminal.is the fat, grumpy guy in.charge of the taxi line.  i brace myself for rudeness:.remember, you're back on the east coast now.the atmosphere varies from city to city, and fragile.organisms like startups are exceedingly sensitive to such variation..if it hadn't already been hijacked as a new euphemism.for liberal, the word to describe the atmosphere in.the bay area would be "progressive."  people there are trying.to build the future..boston has mit and harvard, but it also has a lot of.truculent, unionized employees like the police who.recently held the democratic national convention for.ransom, and a lot of people trying to be.thurston howell..two sides of an obsolete coin.silicon valley may not be the next paris or london, but it.is at least the next chicago.  for the next fifty years,.that's where new wealth will come from.10. productivityduring the bubble, optimistic analysts used to justify high.price to earnings ratios by saying that technology was going.to increase productivity dramatically.  they were wrong about.the specific companies, but not so wrong about the underlying.principle.  i think one of the big trends we'll see in the.coming century is a huge increase in productivity.or more precisely, a huge increase in variation in.productivity.  technology is a lever.  it doesn't add;.it multiplies.  if the present range of productivity is.0 to 100, introducing a multiple of 10 increases the range.from 0 to 1000.one upshot of which is that the companies of the future may.be surprisingly small.  i sometimes daydream about how big.you could grow a company (in revenues) without ever having.more than ten people.  what would happen if you outsourced.everything except product development?  if you tried this experiment,.i think you'd be surprised at how far you could get..as fred brooks pointed out, small groups are.intrinsically more productive, because the.internal friction in a group grows as the.square of its size.till quite recently, running a major company.meant managing an army of workers.  our standards about how.many employees a company should have are still influenced by.old patterns.  startups are perforce small, because they can't.afford to hire a lot of people.  but i think it's a big mistake for.companies to loosen their belts as revenues increase.  the.question is not whether you can afford the extra salaries..can you afford the loss in productivity that comes from making.the company bigger?the prospect of technological leverage will of course raise the.specter of unemployment.  i'm surprised people still worry about.this..after centuries of supposedly job-killing innovations,.the number of jobs is within ten percent of the number of people.who want them.  this can't be a coincidence.  there must be some.kind of balancing mechanism.what's newwhen one looks over these trends, is there any overall theme?.there does seem to be: that in the coming century, good ideas.will count for more.  that 26.year olds with good ideas will increasingly have an edge over 50.year olds with powerful connections.  that doing good work will.matter more than dressing up—or advertising, which is the.same thing for companies.  that people.will be rewarded a bit more in proportion to the value of what.they create.if so, this is good news indeed..good ideas always tend to win eventually.  the problem is,.it can take a very long time..it took decades for relativity to be accepted, and the.greater part of a century to establish that central planning didn't work..so even a small increase in the.rate at which good ideas win would be a momentous.change—big enough, probably, to justify a name like.the "new economy."notes[1] actually it's hard to say now.  as jeremy siegel points.out, if the value of a stock is its future earnings, you.can't tell if it was overvalued till you see what the earnings.turn out to be.   while certain famous internet stocks were.almost certainly overvalued in 1999, it is still hard to say for sure.whether, e.g., the nasdaq index was.siegel, jeremy j.  "what is an asset price bubble?  an.operational definition."  european financial management,.9:1, 2003.[2] the number of users comes from a 6/03 nielsen.study quoted on google's site.  (you'd think they'd have.something more recent.)   the revenue estimate is based on.revenues of $1.35 billion for the first half of 2004, as.reported in their ipo filing.thanks to chris anderson, trevor blackwell, sarah harlin, jessica.livingston, and robert morris for reading drafts of this.the long tailrussian translationjapanese translation<eot><sot>the age of the essay.september 2004
remember the essays you had to write in high school?.topic sentence, introductory paragraph,.supporting paragraphs, conclusion.  the conclusion being,.say, that ahab in moby dick was a christ-like figure.oy.  so i'm going to try to give the other side of the.story: what an essay really is, and how you write one..or at least, how i write one.modsthe most obvious difference between real essays and.the things one has to write in school is that real.essays are not exclusively about english literature..certainly schools should teach students how to.write.  but due to a series of historical accidents.the teaching of.writing has gotten mixed together with the study.of literature.  and so all over the country students are.writing not about how a baseball team with a small budget.might compete with the yankees, or the role of color in.fashion, or what constitutes a good dessert, but about.symbolism in dickens.with the result that writing is made to seem boring and.pointless.  who cares about symbolism in dickens?.dickens himself would be more interested in an essay.about color or baseball.how did things get this way?  to answer that we have to go back.almost a thousand years.  around 1100, europe at last began to.catch its breath after centuries of chaos, and once they.had the luxury of curiosity they rediscovered.what we call "the classics."  the effect was rather as if.we were visited by beings from another solar system..these earlier civilizations were so much more sophisticated.that for the next several centuries the main work of.european scholars, in almost every field, was to assimilate.what they knew.during this period the study of ancient texts acquired great.prestige.  it seemed the essence of what scholars did.  as.european scholarship gained momentum it became less and less important;.by 1350.someone who wanted to learn about science could find better.teachers than aristotle in his own era. [1].but schools change slower than scholarship.  in the.19th century the study of ancient texts was still the backbone.of the curriculum.the time was then ripe for the question: if the study of.ancient texts is a valid field for scholarship, why not modern.texts?  the answer, of course, is that the original raison d'etre.of classical scholarship was a kind of intellectual archaeology that.does not need to be done in the case of contemporary authors..but for obvious reasons no one wanted to give that answer..the archaeological work being mostly done, it implied that.those studying the classics were, if not wasting their.time, at least working on problems of minor importance.and so began the study of modern literature.  there was a good.deal of resistance at first..the first courses in english literature.seem to have been offered by the newer colleges, particularly.american ones.  dartmouth, the university of vermont, amherst,.and university college, london.taught english literature in the 1820s..but harvard didn't have a professor of english literature until.1876, and oxford not till 1885. (oxford had a chair of chinese before.it had one of english.) [2]what tipped the scales, at least in the us, seems to have.been the idea that professors should do research as well.as teach.  this idea (along with the phd, the department, and.indeed the whole concept of the modern university) was imported.from germany in the late 19th century. beginning at.johns hopkins in 1876, the new model spread rapidly.writing was one of the casualties.  colleges had long taught.english composition.  but how do you do research on composition?.the professors who taught math could be required to do original.math, the professors who taught history could be required to.write scholarly articles about history, but what about the.professors who taught rhetoric or composition?  what should they.do research on?  the closest thing seemed to be english literature. [3]and so in the late 19th century the teaching of writing was inherited.by english professors.  this had two drawbacks:.(a) an expert on literature need not himself be a good writer,.any more than an art historian has to be a good painter, and (b).the subject of writing now tends to be literature, since that's.what the professor is interested in.high schools imitate universities.  the seeds of our miserable.high school experiences were sown in 1892, when.the national education association."formally recommended that literature.and composition be unified in the high school course." [4].the 'riting component of the 3 rs then morphed into english,.with the bizarre consequence that high school students now.had to write about english literature-- to write, without.even realizing it, imitations of whatever.english professors had been publishing in their journals a.few decades before.it's no wonder if this seems to the.student a pointless exercise, because we're now three steps.removed from real work: the students are imitating english.professors, who are imitating classical scholars, who are.merely the inheritors of a tradition growing out of what.was, 700 years ago, fascinating and urgently needed work.no defensethe other big difference between a real essay and the things.they make you write in school is that a real essay doesn't.take a position and then defend it.  that principle,.like the idea that we ought to be writing about literature,.turns out to be another intellectual hangover of long.forgotten origins.it's often mistakenly believed that.medieval universities were mostly seminaries.  in fact they.were more law schools.  and at least in our tradition.lawyers are advocates, trained to take.either side of an argument and make as good a case for it.as they can..whether cause or effect, this spirit pervaded.early universities.  the study of rhetoric, the art of arguing.persuasively, was a third of the undergraduate curriculum. [5].and after the lecture the most common form.of discussion was the disputation.  this is at least.nominally preserved in our present-day thesis defense:.most people treat the words thesis.and dissertation as interchangeable, but originally, at least,.a thesis was a position one took and the dissertation was.the argument by which one defended it.defending a position may be a necessary evil in a.legal dispute, but it's not the best way to get at the truth,.as i think lawyers would be the first to admit.  it's not.just that you miss subtleties this way..the real problem is that you can't change the question.and yet this principle is built into the very structure of.the things they teach you to write in high school.  the topic.sentence is your thesis, chosen in advance, the supporting.paragraphs the blows you strike in the conflict, and the.conclusion-- uh, what is the conclusion?  i was never sure.about that in high school.  it seemed as if we were just.supposed to restate what we said in the first paragraph,.but in different enough words that no one could tell..why bother?.but when you understand the origins.of this sort of "essay," you can see where the.conclusion comes from.  it's the concluding remarks to the.jury.good writing should be convincing, certainly, but it.should be convincing because you got the right answers,.not because you did a good job of arguing.  when i give a.draft of an essay to friends, there are two things.i want to know: which parts bore them, and which seem.unconvincing.  the boring bits can usually be fixed by.cutting.  but i don't try to fix the unconvincing bits by.arguing more cleverly.  i need to talk the matter over.at the very least i must have explained something badly.  in.that case, in the course of the conversation i'll be forced.to come up a with a clearer explanation, which i can just.incorporate in the essay.  more often than not i have.to change what i was saying as well..but the aim is never to be convincing per se..as the reader gets smarter, convincing and true become identical,.so if i can convince smart readers i must be near the truth.the sort of writing that attempts to persuade may be.a valid (or at least inevitable) form, but it's historically.inaccurate to call it an essay.  an essay is.something else.tryingto understand what a real essay is, we have to.reach back into history again, though this time not so far..to michel de montaigne, who in 1580 published a book of.what he called "essais." he was.doing something quite different from what lawyers do, and.the difference is embodied in the name.  essayer is the french.verb meaning "to try".and an essai is an attempt.  an essay is something you.write to try to figure something out.figure out what?  you don't know yet.  and so you can't begin with a.thesis, because you don't have one, and may never have.one.  an essay doesn't begin with a statement, but with a.question.  in a real essay, you don't take a position and.defend it.  you notice a door that's ajar, and you open it and.walk in to see what's inside.if all you want to do is figure things out, why do you need.to write anything, though?  why not just sit and think?  well,.there precisely is montaigne's great discovery.  expressing.ideas helps to form them.  indeed, helps is far too weak a.word.  most of what ends up in my essays i only.thought of when i sat down to write them.  that's why i.write them.in the things you write in school you are, in theory,.merely explaining yourself to the reader..in a real essay you're writing for yourself..you're thinking out loud.but not quite..just as inviting people over forces you to.clean up your apartment, writing something that.other people will read forces you to think well.  so it.does matter to have an audience.  the things i've written.just for myself are no good..they tend to peter out.  when i run into.difficulties, i find i conclude with a few vague.questions and then drift off to get a cup of tea.many published essays peter out in the same way..particularly the sort written by the staff writers.of newsmagazines.  outside writers tend to supply.editorials of the defend-a-position variety, which.make a beeline toward a rousing (and.foreordained) conclusion.   but the staff writers feel.obliged to write something "balanced.".since they're writing for a popular magazine, they start with the.most radioactively controversial questions, from which-- because.they're writing for a popular magazine-- they.then proceed to recoil in terror..abortion, for or against?.this group says one thing.  that group says.another.  one thing is certain: the question is a.complex one.  (but don't get mad at us.  we didn't.draw any conclusions.)the riverquestions aren't enough.  an essay has to come up with answers..they don't always, of course.  sometimes you start with a.promising question and get nowhere.  but those you don't.publish.  those are like experiments that get inconclusive.results.   an essay you publish ought to tell the reader.something he didn't already know.but what you tell him doesn't matter, so long as.it's interesting.  i'm sometimes accused of meandering..in defend-a-position writing that would be a flaw..there you're not concerned with truth.  you already.know where you're going, and you want to go straight there,.blustering through obstacles, and hand-waving.your way across swampy ground.  but that's not what.you're trying to do in an essay.  an essay is supposed to.be a search for truth.  it would be suspicious if it didn't.meander.the meander (aka menderes) is a river in turkey..as you might expect, it winds all over the place..but it doesn't do this out of frivolity..the path it has discovered is the most.economical route to the sea. [6]the river's algorithm is simple.  at each step, flow down..for the essayist this translates to: flow interesting..of all the places to go next, choose the most interesting..one can't have quite as little foresight as a river.  i always.know generally what i want to write about..but not the.specific conclusions i want to reach; from paragraph to.paragraph i let the ideas take their course.this doesn't always work.  sometimes, like a river,.one runs up against a wall.  then i do the same thing the river does:.backtrack.  at one point in this essay.i found that after following a certain thread i ran out.of ideas.  i had to go back seven paragraphs and start over.in another direction.fundamentally an essay is a train of thought-- but a cleaned-up.train of thought, as dialogue is cleaned-up conversation..real thought, like real conversation, is full of false starts..it would be exhausting to read.  you need to.cut and fill to.emphasize the central thread, like an.illustrator inking over a pencil drawing.  but don't.change so much that you lose the spontaneity of the original.err on the side of the river.  an essay is not a reference.work.  it's not something you read looking for a specific.answer, and feel cheated if you don't find it.  i'd much.rather read an essay that went off in an unexpected but.interesting direction than one that plodded dutifully along.a prescribed course.surpriseso what's interesting?  for me, interesting means surprise..interfaces, as geoffrey james has said, should follow the principle of.least astonishment.   a button that looks like it will make a.machine stop should make it stop, not speed up.  essays.should do the opposite.  essays should aim for maximum.surprise.i was afraid of flying for a long time and could only travel.vicariously.  when friends came back from faraway places,.it wasn't just out of politeness that i asked.what they saw.  i really wanted to know.  and i found.the best way to get information out of them was to ask.what surprised them.  how was the place different from what.they expected?  this is an extremely useful question..you can ask it of the most unobservant people, and it will.extract information they didn't even know they were.recording.surprises are things that you not only didn't know, but that.contradict things you.thought you knew.  and so they're the most valuable sort of.fact you can get.  they're like a food that's not merely.healthy, but counteracts the unhealthy effects of things.you've already eaten.how do you find surprises?  well, therein lies half.the work of essay writing.  (the other half is expressing.yourself well.)   the trick is to use yourself as a.proxy for the reader.  you should only write about things.you've thought about a lot.  and anything you come across.that surprises you, who've thought about the topic a lot,.will probably surprise most readers.for example, in a recent.essay i pointed out that because.you can only judge computer programmers by working with.them, no one knows who the best programmers are overall..i didn't realize this when i began.that essay, and even now i find it kind of weird.  that's.what you're looking for.so if you want to write essays, you need two ingredients:.a few topics you've thought about a lot, and.some ability to ferret out the unexpected.what should you think about?  my guess is that it.doesn't matter-- that anything can be interesting if you get deeply.enough into it.  one possible exception might be things.that have deliberately had all the variation sucked out of them,.like working in fast food.  in retrospect, was there.anything interesting about working at baskin-robbins?.well, it was interesting how important color was.to the customers.  kids a certain age would point into.the case and say that they wanted yellow.  did they want.french vanilla or lemon?  they would just look at you.blankly.  they wanted yellow.  and then there was the.mystery of why the perennial favorite pralines 'n' cream.was so appealing.  (i think now it was the salt.).and the difference in the way fathers and.mothers bought ice cream for their kids: the fathers.like benevolent kings bestowing largesse, the mothers.harried, giving in to pressure..so, yes, there does seem to be some material even in.fast food.i didn't notice those things at the time, though.  at sixteen.i was about as observant as a lump of rock.  i can see more now in.the fragments of memory i preserve of that age than i could see.at the time from having it all happening live, right in front of me.observationso the ability to ferret out the unexpected must not merely be an.inborn one.  it must be something you can learn..how do you learn it?to some extent it's like learning history..when you first read.history, it's just a whirl of names.and dates..nothing seems to stick.  but the more you learn, the more hooks you have.for new facts to stick onto-- which means.you accumulate knowledge at an exponential rate.  once you.remember that normans conquered.england in 1066, it will catch your attention when you hear.that other normans conquered southern italy at about the same time..which will make you wonder about normandy, and take note.when a third book mentions that normans.were not, like most of what is now.called france, tribes that flowed in as the roman empire collapsed,.but vikings (norman = north man) who arrived.four centuries later in 911.  which makes.it easier to remember that dublin was also established by.vikings in the 840s.  etc, etc squared.collecting surprises is a similar process..the more anomalies you've seen, the more easily you'll notice.new ones.   which means, oddly enough, that as you grow older,.life should become more and more surprising.  when i was a.kid, i used to think adults had it all figured out..i had it backwards.  kids are the ones who have it all figured.out.  they're just mistaken.when it comes to surprises, the rich get richer.  but.(as with wealth) there.may be habits of mind that will help the process along.  it's.good to have a habit of asking questions, especially questions.beginning with why..but not in the random way that three year.olds ask why.  there are an infinite number of questions..how do you find the fruitful ones?i find it especially.useful to ask why about things that seem wrong..for example, why should there be a connection between.humor and misfortune?  why do we find it funny when a.character, even one we like, slips on a banana peel?.there's a whole essay's worth of surprises there for sure.if you want to notice things that seem wrong, you'll find a.degree of skepticism helpful.  i take it as an axiom.that we're only achieving 1% of what we could..this helps counteract the rule that gets beaten into our.heads as children: that things are the way they are because.that is how things have to be..for example, everyone i've talked to while writing this essay.felt the same about.english classes-- that the whole process seemed pointless..but none of us had the balls at the time to hypothesize that.it was, in fact, all a mistake..we all thought there was just something we weren't getting.i have a hunch you want to pay attention not just to things.that seem wrong, but things that seem wrong in a humorous way..i'm always pleased when i see someone laugh as they.read a draft of an essay.  but why should i be?  i'm aiming.for good ideas.  why should good ideas be funny?.the connection may be surprise..surprises make us laugh, and surprises are what.one wants to deliver.i write down things that surprise me in notebooks.  i never.actually get around to reading them and using.what i've written, but i do tend to.reproduce the same thoughts later.  so the main value.of notebooks may be what writing things down leaves in your.head.people trying to be cool will find themselves at a disadvantage.when collecting surprises.  to be surprised is to be mistaken..and the essence of cool, as any fourteen year old could tell.you, is nil admirari.  when you're mistaken, don't.dwell on it; just act like nothing's wrong and maybe no one.will notice.one of the keys to coolness is to avoid situations where.inexperience may make you look foolish..if you want to find surprises you should do the opposite..study lots of different things,.because some of the most interesting surprises are unexpected.connections between different fields.  for example,.jam, bacon, pickles, and cheese, which are among the most pleasing.of foods, were all originally intended as methods of preservation..and so were books and paintings.whatever you study, include history-- but social and economic.history, not political history.  history seems to me so important.that it's misleading to treat it as a mere field of study..another way to describe it is all the data we have so far.among other things, studying history gives one confidence that.there are good ideas waiting to be discovered right under our noses..swords evolved during the bronze age out of daggers, which.(like their flint predecessors) had a hilt separate from the.blade.  because swords are longer.the hilts kept breaking off.  but it took five hundred years.before someone thought of casting hilt and blade as one.piece.disobedienceabove all, make a habit of paying.attention to things you're not supposed to, either because.they're "inappropriate,".or not important, or not what you're.supposed to be working on.  if you're curious about something,.trust your instincts..follow the threads that attract your.attention.  if there's something you're really interested.in, you'll find they have an uncanny way of leading back to.it anyway, just as the conversation of people who are especially.proud of something always tends to lead back to it.for example, i've always been fascinated by comb-overs, especially.the extreme sort that.make a man look as if he's wearing a beret made of his own hair..surely this is a lowly sort of thing to be interested in-- the.sort of superficial quizzing.best left to teenage girls.  and yet there is something underneath..the key question, i realized, is how does the comber-over not.see how odd he looks?.and the answer is that he got to look that way incrementally..what began as combing his hair a little carefully over a.thin patch has gradually, over 20 years, grown into a monstrosity..gradualness is very powerful.  and that power can be.used for constructive purposes too: just as you can trick.yourself into looking like a freak, you can trick yourself into.creating something so grand that you would never have dared to.plan such a thing.  indeed, this is just how most good.software gets created.  you start by writing a stripped-down.kernel (how hard can it be?) and gradually it grows.into a complete operating system.  hence the next leap: could.you do the same thing in painting, or in a novel?see what you can extract from a frivolous question?.if there's one piece of advice i would give about writing essays,.it would be: don't do as you're told..don't believe what you're supposed to..don't write the.essay readers expect; one learns nothing from.what one expects..and.don't write the way they taught you to in school.the most important sort of disobedience is to write.essays at all.  fortunately, this sort of disobedience shows.signs of becoming.rampant..it used to be that only a tiny.number of officially approved writers were allowed to.write essays.  magazines published few of them, and judged.them less by what they said than who wrote them;.a magazine might publish a story by an.unknown writer if it was good enough, but if they published.an essay on x it had to be by someone who was at least.forty and whose job title had x in it.  which is a problem,.because there are a lot of things insiders can't say precisely.because they're insiders.the internet is changing that..anyone can publish an essay on the web, and it gets judged, as any.writing should, by what it says, not who wrote it..who are you to write about x?  you are whatever you wrote.popular magazines made the period between the spread.of literacy and the arrival of tv the golden age of the.short story..the web may well make this the golden age of the essay..and that's certainly not something i realized when.i started writing this.notes[1] i'm thinking of oresme (c. 1323-82).  but it's hard to pick.a date, because there was a sudden drop-off in scholarship.just as europeans finished assimilating classical science..the cause may have been the plague of 1347; the trend in.scientific progress matches the population curve.[2] parker, william r. "where do college english departments.come from?" college english 28 (1966-67), pp. 339-351..reprinted in gray, donald j. (ed). the department of.english at indiana university bloomington 1868-1970. indiana.university publications.daniels, robert v. the university of vermont: the first.two hundred years. university of vermont, 1991.mueller, friedrich m. letter to the pall mall.gazette. 1886/87. reprinted in bacon, alan (ed)..the nineteenth-century.history of english studies. ashgate, 1998.[3] i'm compressing the story a bit..at first.literature took a back seat to philology, which (a) seemed more.serious and (b) was popular in germany, where many of the.leading scholars of that generation had been trained.in some cases the writing teachers were transformed.in situ into english professors..francis james child, who had been boylston professor.of rhetoric at harvard since 1851,.became in 1876 the university's first professor of english.[4] parker, op. cit., p. 25.[5] the undergraduate curriculum or trivium (whence."trivial") consisted of latin grammar, rhetoric, and logic..candidates for masters' degrees went on to study the.quadrivium of arithmetic, geometry, music, and astronomy..together these were the seven liberal arts.the study of rhetoric was inherited directly from rome, where.it was considered the most important.subject.  it would not be far from the truth to say that.education in the classical world.meant training landowners' sons.to speak well enough to defend their interests.in political and legal disputes.[6] trevor blackwell points out that this.isn't strictly true, because the outside.edges of curves erode faster..thanks to ken anderson, trevor blackwell, sarah harlin, jessica.livingston, jackie mcdonough, and robert morris for reading drafts of.this.russian translationspanish translationjapanese translationhungarian translationtraditional chinese translation.if you liked this, you may also like.hackers & painters.<eot><sot>the python paradox.august 2004
in a recent talk i said something that upset a lot of.people: that you could get smarter programmers to work on.a python project than you could to work on a java project.i didn't mean by this that java programmers are dumb.  i.meant that python programmers are smart. it's a lot of.work to learn a new programming language.  and people don't.learn python because it will get them a job; they learn it.because they genuinely like to program and aren't satisfied with the languages they.already know.which makes them exactly the kind of programmers.companies should want to hire.  hence what, for lack of a better.name, i'll call the python paradox: if a company chooses to write.its software in a comparatively esoteric language, they'll be able.to hire better programmers, because they'll attract only those.who cared enough to learn it.  and for.programmers the paradox is even more pronounced: the language.to learn, if you want to get a good job, is a language that.people don't learn merely to get a job.only a few companies have been smart enough to realize this.so far.  but there is a kind of selection going on here too: they're.exactly the companies programmers would.most like to work for.  google, for example.  when they.advertise java programming jobs, they also want python experience.a friend of mine who knows nearly all the widely used languages.uses python for most of his projects.  he says the main reason.is that he likes the way source code looks.  that may seem.a frivolous reason to choose one language over another..but it is not so frivolous as it sounds: when you program,.you spend more time reading code than writing it..you push blobs of source code around the way a sculptor does.blobs of clay.  so a language that makes source code ugly is.maddening to an exacting programmer, as clay full of lumps.would be to a sculptor.at the mention of ugly source code, people will of course think.of perl.  but the superficial ugliness of perl is not the sort.i mean.  real ugliness is not harsh-looking.syntax, but having to build programs out of the wrong.concepts.  perl may look like a cartoon character swearing,.but there are.cases where it surpasses python conceptually.so far, anyway. both languages are of course.moving targets.  but they.share, along with ruby (and icon, and joy, and j, and lisp,.and smalltalk) the fact that.they're created by, and used by, people who really care about.programming.   and those tend to be the ones who do it well.turkish translationjapanese translationportuguese translationitalian translationpolish translationromanian translationrussian translationspanish translationfrench translationtelugu translation.if you liked this, you may also like.hackers & painters.<eot><sot>great hackers.want to start a startup?  get funded by.y combinator..july 2004
(this essay is derived from a talk at oscon 2004.).a few months ago i finished a new.book,.and in reviews i keep.noticing words like "provocative'' and "controversial.'' to say.nothing of "idiotic.''i didn't mean to make the book controversial.  i was trying to make.it efficient.  i didn't want to waste people's time telling them.things they already knew.  it's more efficient just to give them.the diffs.  but i suppose that's bound to yield an alarming book.edisonsthere's no controversy about which idea is most controversial:.the suggestion that variation in wealth might not be as big a.problem as we think.i didn't say in the book that variation in wealth was in itself a.good thing.  i said in some situations it might be a sign of good.things.  a throbbing headache is not a good thing, but it can be.a sign of a good thing-- for example, that you're recovering.consciousness after being hit on the head.variation in wealth can be a sign of variation in productivity..(in a society of one, they're identical.) and that.is almost certainly a good thing: if your society has no variation.in productivity, it's probably not because everyone is thomas.edison.  it's probably because you have no thomas edisons.in a low-tech society you don't see much variation in productivity..if you have a tribe of nomads collecting sticks for a fire, how.much more productive is the best stick gatherer going to be than.the worst?  a factor of two?  whereas when you hand people a complex tool.like a computer, the variation in what they can do with.it is enormous.that's not a new idea.  fred brooks wrote about it in 1974, and.the study he quoted was published in 1968.  but i think he.underestimated the variation between programmers.  he wrote about productivity in lines.of code:  the best programmers can solve a given problem in a tenth.the time.  but what if the problem isn't given? in programming, as.in many fields, the hard part isn't solving problems, but deciding.what problems to solve.  imagination is hard to measure, but.in practice it dominates the kind of productivity that's measured.in lines of code.productivity varies in any field, but there are few in which it.varies so much.  the variation between programmers.is so great that it becomes a difference in kind.  i don't.think this is something intrinsic to programming, though.  in every field,.technology magnifies differences in productivity.  i think what's.happening in programming is just that we have a lot of technological.leverage.  but in every field the lever is getting longer, so the.variation we see is something that more and more fields will see.as time goes on.  and the success of companies, and countries, will.depend increasingly on how they deal with it.if variation in productivity increases with technology, then the.contribution of the most productive individuals will not only be.disproportionately large, but will actually grow with time.  when.you reach the point where 90% of a group's output is created by 1%.of its members, you lose big if something (whether viking raids,.or central planning) drags their productivity down to the average.if we want to get the most out of them, we need to understand these.especially productive people.  what motivates them?  what do they.need to do their jobs?  how do you recognize them? how do you.get them to come and work for you?  and then of course there's the.question, how do you become one?more than moneyi know a handful of super-hackers, so i sat down and thought about.what they have in common.  their defining quality is probably that.they really love to program.  ordinary programmers write code to pay.the bills.  great hackers think of it as something they do for fun,.and which they're delighted to find people will pay them for.great programmers are sometimes said to be indifferent to money..this isn't quite true.  it is true that all they really care about.is doing interesting work.  but if you make enough money, you get.to work on whatever you want, and for that reason hackers are.attracted by the idea of making really large amounts of money..but as long as they still have to show up for work every day, they.care more about what they do there than how much they get paid for.it.economically, this is a fact of the greatest importance, because.it means you don't have to pay great hackers anything like what.they're worth.  a great programmer might be ten or a hundred times.as productive as an ordinary one, but he'll consider himself lucky.to get paid three times as much.  as i'll explain later, this is.partly because great hackers don't know how good they are.  but.it's also because money is not the main thing they want.what do hackers want?  like all craftsmen, hackers like good tools..in fact, that's an understatement.  good hackers find it unbearable.to use bad tools.  they'll simply refuse to work on projects with.the wrong infrastructure.at a startup i once worked for, one of the things pinned up on our.bulletin board was an ad from ibm.  it was a picture of an as400,.and the headline read, i think, "hackers despise.it.'' [1]when you decide what infrastructure to use for a project, you're.not just making a technical decision.  you're also making a social.decision, and this may be the more important of the two.  for.example, if your company wants to write some software, it might.seem a prudent choice to write it in java.  but when you choose a.language, you're also choosing a community.  the programmers you'll.be able to hire to work on a java project won't be as.smart as the.ones you could get to work on a project written in python..and the quality of your hackers probably matters more than the.language you choose.  though, frankly, the fact that good hackers.prefer python to java should tell you something about the relative.merits of those languages.business types prefer the most popular languages because they view.languages as standards. they don't want to bet the company on.betamax.  the thing about languages, though, is that they're not.just standards.  if you have to move bits over a network, by all.means use tcp/ip.  but a programming language isn't just a format..a programming language is a medium of expression.i've read that java has just overtaken cobol as the most popular.language.  as a standard, you couldn't wish for more.  but as a.medium of expression, you could do a lot better.  of all the great.programmers i can think of, i know of only one who would voluntarily.program in java.  and of all the great programmers i can think of.who don't work for sun, on java, i know of zero.great hackers also generally insist on using open source software..not just because it's better, but because it gives them more control..good hackers insist on control.  this is part of what makes them.good hackers:  when something's broken, they need to fix it.  you.want them to feel this way about the software they're writing for.you.  you shouldn't be surprised when they feel the same way about.the operating system.a couple years ago a venture capitalist friend told me about a new.startup he was involved with.  it sounded promising.  but the next.time i talked to him, he said they'd decided to build their software.on windows nt, and had just hired a very experienced nt developer.to be their chief technical officer.  when i heard this, i thought,.these guys are doomed.  one, the cto couldn't be a first rate.hacker, because to become an eminent nt developer he would have.had to use nt voluntarily, multiple times, and i couldn't imagine.a great hacker doing that; and two, even if he was good, he'd have.a hard time hiring anyone good to work for him if the project had.to be built on nt. [2]the final frontierafter software, the most important tool to a hacker is probably.his office.  big companies think the function of office space is to express.rank.  but hackers use their offices for more than that: they.use their office as a place to think in.  and if you're a technology.company, their thoughts are your product.  so making hackers work.in a noisy, distracting environment is like having a paint factory.where the air is full of soot.the cartoon strip dilbert has a lot to say about cubicles, and with.good reason.  all the hackers i know despise them.  the mere prospect.of being interrupted is enough to prevent hackers from working on.hard problems.  if you want to get real work done in an office with.cubicles, you have two options: work at home, or come in early or.late or on a weekend, when no one else is there.  don't companies.realize this is a sign that something is broken?  an office.environment is supposed to be something that helps.you work, not something you work despite.companies like cisco are proud that everyone there has a cubicle,.even the ceo.  but they're not so advanced as they think; obviously.they still view office space as a badge of rank.  note too that.cisco is famous for doing very little product development in house..they get new technology by buying the startups that created it-- where.presumably the hackers did have somewhere quiet to work.one big company that understands what hackers need is microsoft..i once saw a recruiting ad for microsoft with a big picture of a.door.  work for us, the premise was, and we'll give you a place to.work where you can actually get work done.   and you know, microsoft.is remarkable among big companies in that they are able to develop.software in house.  not well, perhaps, but well enough.if companies want hackers to be productive, they should look at.what they do at home.  at home, hackers can arrange things themselves.so they can get the most done.  and when they work at home, hackers.don't work in noisy, open spaces; they work in rooms with doors.  they.work in cosy, neighborhoody places with people around and somewhere.to walk when they need to mull something over, instead of in glass.boxes set in acres of parking lots.  they have a sofa they can take.a nap on when they feel tired, instead of sitting in a coma at.their desk, pretending to work.  there's no crew of people with.vacuum cleaners that roars through every evening during the prime.hacking hours.  there are no meetings or, god forbid, corporate.retreats or team-building exercises.  and when you look at what.they're doing on that computer, you'll find it reinforces what i.said earlier about tools.  they may have to use java and windows.at work, but at home, where they can choose for themselves, you're.more likely to find them using perl and linux.indeed, these statistics about cobol or java being the most popular.language can be misleading.  what we ought to look at, if we want.to know what tools are best, is what hackers choose when they can.choose freely-- that is, in projects of their own.  when you ask.that question, you find that open source operating systems already.have a dominant market share, and the number one language is probably.perl.interestingalong with good tools, hackers want interesting projects.  what.makes a project interesting?  well, obviously overtly sexy.applications like stealth planes or special effects software would.be interesting to work on.  but any application can be interesting.if it poses novel technical challenges.  so it's hard to predict.which problems hackers will like, because some become.interesting only when the people working on them discover a new.kind of solution.  before ita.(who wrote the software inside orbitz),.the people working on airline fare searches probably thought it.was one of the most boring applications imaginable.  but ita made.it interesting by.redefining the problem in a more ambitious way.i think the same thing happened at google.  when google was founded,.the conventional wisdom among the so-called portals was that search.was boring and unimportant.  but the guys at google didn't think.search was boring, and that's why they do it so well.this is an area where managers can make a difference.  like a parent.saying to a child, i bet you can't clean up your whole room in.ten minutes, a good manager can sometimes redefine a problem as a.more interesting one.  steve jobs seems to be particularly good at.this, in part simply by having high standards.  there were a lot.of small, inexpensive computers before the mac.  he redefined the.problem as: make one that's beautiful.  and that probably drove.the developers harder than any carrot or stick could.they certainly delivered.  when the mac first appeared, you didn't.even have to turn it on to know it would be good; you could tell.from the case.  a few weeks ago i was walking along the street in.cambridge, and in someone's trash i saw what appeared to be a mac.carrying case.  i looked inside, and there was a mac se.  i carried.it home and plugged it in, and it booted.  the happy macintosh.face, and then the finder.  my god, it was so simple.  it was just.like ... google.hackers like to work for people with high standards.  but it's not.enough just to be exacting.  you have to insist on the right things..which usually means that you have to be a hacker yourself.  i've.seen occasional articles about how to manage programmers.  really.there should be two articles: one about what to do if.you are yourself a programmer, and one about what to do if you're not.  and the.second could probably be condensed into two words:  give up.the problem is not so much the day to day management.  really good.hackers are practically self-managing.  the problem is, if you're.not a hacker, you can't tell who the good hackers are.  a similar.problem explains why american cars are so ugly.  i call it the.design paradox.  you might think that you could make your products.beautiful just by hiring a great designer to design them.  but if.you yourself don't have good taste,.how are you going to recognize.a good designer?  by definition you can't tell from his portfolio..and you can't go by the awards he's won or the jobs he's had,.because in design, as in most fields, those tend to be driven by.fashion and schmoozing, with actual ability a distant third..there's no way around it:  you can't manage a process intended to.produce beautiful things without knowing what beautiful is.  american.cars are ugly because american car companies are run by people with.bad taste.many people in this country think of taste as something elusive,.or even frivolous.  it is neither.  to drive design, a manager must.be the most demanding user of a company's products.  and if you.have really good taste, you can, as steve jobs does, make satisfying.you the kind of problem that good people like to work on.nasty little problemsit's pretty easy to say what kinds of problems are not interesting:.those where instead of solving a few big, clear, problems, you have.to solve a lot of nasty little ones.  one of the worst kinds of.projects is writing an interface to a piece of software that's.full of bugs.  another is when you have to customize.something for an individual client's complex and ill-defined needs..to hackers these kinds of projects are the death of a thousand.cuts.the distinguishing feature of nasty little problems is that you.don't learn anything from them.   writing a compiler is interesting.because it teaches you what a compiler is.  but writing an interface.to a buggy piece of software doesn't teach you anything, because the.bugs are random.  [3] so it's not just fastidiousness that makes good.hackers avoid nasty little problems.  it's more a question of.self-preservation.  working on nasty little problems makes you.stupid.  good hackers avoid it for the same reason models avoid.cheeseburgers.of course some problems inherently have this character.  and because.of supply and demand, they pay especially well.  so a company that.found a way to get great hackers to work on tedious problems would.be very successful.  how would you do it?one place this happens is in startups.  at our startup we had.robert morris working as a system administrator.  that's like having the.rolling stones play at a bar mitzvah.  you can't hire that kind of.talent.  but people will do any amount of drudgery for companies.of which they're the founders.  [4]bigger companies solve the problem by partitioning the company..they get smart people to work for them by establishing a separate.r&d department where employees don't have to work directly on.customers' nasty little problems. [5] in this model, the research.department functions like a mine. they produce new ideas; maybe.the rest of the company will be able to use them.you may not have to go to this extreme..bottom-up programming.suggests another way to partition the company: have the smart people.work as toolmakers.  if your company makes software to do x, have.one group that builds tools for writing software of that type, and.another that uses these tools to write the applications.  this way.you might be able to get smart people to write 99% of your code,.but still keep them almost as insulated from users as they would.be in a traditional research department.  the toolmakers would have.users, but they'd only be the company's own developers.  [6]if microsoft used this approach, their software wouldn't be so full.of security holes, because the less smart people writing the actual.applications wouldn't be doing low-level stuff like allocating.memory.  instead of writing word directly in c, they'd be plugging.together big lego blocks of word-language.  (duplo, i believe, is.the technical term.)clumpingalong with interesting problems, what good hackers like is other.good hackers.  great hackers tend to clump together-- sometimes.spectacularly so, as at xerox parc.   so you won't attract good.hackers in linear proportion to how good an environment you create.for them.  the tendency to clump means it's more like the square.of the environment.  so it's winner take all.  at any given time,.there are only about ten or twenty places where hackers most want to.work, and if you aren't one of them, you won't just have fewer.great hackers, you'll have zero.having great hackers is not, by itself, enough to make a company.successful.  it works well for google and ita, which are two of.the hot spots right now, but it didn't help thinking machines or.xerox.  sun had a good run for a while, but their business model.is a down elevator.  in that situation, even the best hackers can't.save you.i think, though, that all other things being equal, a company that.can attract great hackers will have a huge advantage.  there are.people who would disagree with this.  when we were making the rounds.of venture capital firms in the 1990s, several told us that software.companies didn't win by writing great software, but through brand,.and dominating channels, and doing the right deals.they really seemed to believe this, and i think i know why.  i.think what a lot of vcs are looking for, at least unconsciously,.is the next microsoft.  and of course if microsoft is your model,.you shouldn't be looking for companies that hope to win by writing.great software.  but vcs are mistaken to look for the next microsoft,.because no startup can be the next microsoft unless some other.company is prepared to bend over at just the right moment and be.the next ibm.it's a mistake to use microsoft as a model, because their whole.culture derives from that one lucky break.  microsoft is a bad data.point.  if you throw them out, you find that good products do tend.to win in the market.  what vcs should be looking for is the next.apple, or the next google.i think bill gates knows this.  what worries him about google is.not the power of their brand, but the fact that they have.better hackers. [7].recognitionso who are the great hackers?  how do you know when you meet one?.that turns out to be very hard.  even hackers can't tell.  i'm.pretty sure now that my friend trevor blackwell is a great hacker..you may have read on slashdot how he made his.own segway.  the.remarkable thing about this project was that he wrote all the.software in one day (in python, incidentally).for trevor, that's.par for the course.  but when i first met him, i thought he was a.complete idiot.  he was standing in robert morris's office babbling.at him about something or other, and i remember standing behind.him making frantic gestures at robert to shoo this nut out of his.office so we could go to lunch.  robert says he misjudged trevor.at first too.  apparently when robert first met him, trevor had.just begun a new scheme that involved writing down everything about.every aspect of his life on a stack of index cards, which he carried.with him everywhere.  he'd also just arrived from canada, and had.a strong canadian accent and a mullet.the problem is compounded by the fact that hackers, despite their.reputation for social obliviousness, sometimes put a good deal of.effort into seeming smart.  when i was in grad school i used to.hang around the mit ai lab occasionally. it was kind of intimidating.at first.  everyone there spoke so fast.  but after a while i.learned the trick of speaking fast.  you don't have to think any.faster; just use twice as many words to say everything.  with this amount of noise in the signal, it's hard to tell good.hackers when you meet them.  i can't tell, even now.  you also.can't tell from their resumes.  it seems like the only way to judge.a hacker is to work with him on something.and this is the reason that high-tech areas.only happen around universities.  the active ingredient.here is not so much the professors as the students.  startups grow up.around universities because universities bring together promising young.people and make them work on the same projects.  the.smart ones learn who the other smart ones are, and together.they cook up new projects of their own.because you can't tell a great hacker except by working with him,.hackers themselves can't tell how good they are.  this is true to.a degree in most fields.  i've found that people who.are great at something are not so much convinced of their own.greatness as mystified at why everyone else seems so incompetent..but it's particularly hard for hackers to know how good they are,.because it's hard to compare their work.  this is easier in most.other fields.  in the hundred meters, you know in 10 seconds who's.fastest.  even in math there seems to be a general consensus about.which problems are hard to solve, and what constitutes a good.solution.  but hacking is like writing.  who can say which of two.novels is better?  certainly not the authors.with hackers, at least, other hackers can tell.  that's because,.unlike novelists, hackers collaborate on projects.  when you get.to hit a few difficult problems over the net at someone, you learn.pretty quickly how hard they hit them back.  but hackers can't.watch themselves at work.  so if you ask a great hacker how good.he is, he's almost certain to reply, i don't know.  he's not just.being modest.  he really doesn't know.and none of us know, except about people we've actually worked.with.  which puts us in a weird situation: we don't know who our.heroes should be.  the hackers who become famous tend to become.famous by random accidents of pr.  occasionally i need to give an.example of a great hacker, and i never know who to use.  the first.names that come to mind always tend to be people i know personally,.but it seems lame to use them.  so, i think, maybe i should say.richard stallman, or linus torvalds, or alan kay, or someone famous.like that.  but i have no idea if these guys are great hackers..i've never worked with them on anything.if there is a michael jordan of hacking, no one knows, including.him.cultivationfinally, the question the hackers have all been wondering about:.how do you become a great hacker?  i don't know if it's possible.to make yourself into one.  but it's certainly possible to do things.that make you stupid, and if you can make yourself stupid, you.can probably make yourself smart too.the key to being a good hacker may be to work on what you like..when i think about the great hackers i know, one thing they have.in common is the extreme.difficulty of making them work.on anything they.don't want to.  i don't know if this is cause or effect; it may be.both.to do something well you have to love it..so to the extent you.can preserve hacking as something you love, you're likely to do it.well.  try to keep the sense of wonder you had about programming at.age 14.  if you're worried that your current job is rotting your.brain, it probably is.the best hackers tend to be smart, of course, but that's true in.a lot of fields.  is there some quality that's unique to hackers?.i asked some friends, and the number one thing they mentioned was.curiosity..i'd always supposed that all smart people were curious--.that curiosity was simply the first derivative of knowledge.  but.apparently hackers are particularly curious, especially about how.things work.  that makes sense, because programs are in effect.giant descriptions of how things work.several friends mentioned hackers' ability to concentrate-- their.ability, as one put it, to "tune out everything outside their own.heads.''  i've certainly noticed this.  and i've heard several.hackers say that after drinking even half a beer they can't program at.all.   so maybe hacking does require some special ability to focus..perhaps great hackers can load a large amount of context into their.head, so that when they look at a line of code, they see not just.that line but the whole program around it.  john mcphee.wrote that bill bradley's success as a basketball player was due.partly to his extraordinary peripheral vision.  "perfect'' eyesight.means about 47 degrees of vertical peripheral vision.  bill bradley.had 70; he could see the basket when he was looking at the floor..maybe great hackers have some similar inborn ability.  (i cheat by.using a very dense language,.which shrinks the court.)this could explain the disconnect over cubicles.  maybe the people.in charge of facilities, not having any concentration to shatter,.have no idea that working in a cubicle feels to a hacker like having.one's brain in a blender.  (whereas bill, if the rumors of autism.are true, knows all too well.)one difference i've noticed between great hackers and smart people.in general is that hackers are more.politically incorrect.  to the.extent there is a secret handshake among good hackers, it's when they.know one another well enough to express opinions that would get.them stoned to death by the general public.  and i can see why.political incorrectness would be a useful quality in programming..programs are very complex and, at least in the hands of good.programmers, very fluid.  in such situations it's helpful to have.a habit of questioning assumptions.can you cultivate these qualities?  i don't know.  but you can at.least not repress them.  so here is my best shot at a recipe.  if.it is possible to make yourself into a great hacker, the way to do.it may be to make the following deal with yourself: you never have.to work on boring projects (unless your family will starve otherwise),.and in return, you'll never allow yourself to do a half-assed job..all the great hackers i know seem to have made that deal, though.perhaps none of them had any choice in the matter.notes.[1] in fairness, i have to say that ibm makes decent hardware.  i.wrote this on an ibm laptop.[2] they did turn out to be doomed.  they shut down a few months.later.[3] i think this is what people mean when they talk.about the "meaning of life."  on the face of it, this seems an.odd idea.  life isn't an expression; how could it have meaning?.but it can have a quality that feels a lot like meaning.  in a project.like a compiler, you have to solve a lot of problems, but the problems.all fall into a pattern, as in a signal.  whereas when the problems.you have to solve are random, they seem like noise..[4] einstein at one point worked designing refrigerators. (he had equity.)[5] it's hard to say exactly what constitutes research in the.computer world, but as a first approximation, it's software that.doesn't have users.i don't think it's publication that makes the best hackers want to work.in research departments.  i think it's mainly not having to have a.three hour meeting with a product manager about problems integrating.the korean version of word 13.27 with the talking paperclip.[6] something similar has been happening for a long time in the.construction industry. when you had a house built a couple hundred.years ago, the local builders built everything in it.  but increasingly.what builders do is assemble components designed and manufactured.by someone else.  this has, like the arrival of desktop publishing,.given people the freedom to experiment in disastrous ways, but it.is certainly more efficient.[7] google is much more dangerous to microsoft than netscape was..probably more dangerous than any other company has ever been.  not.least because they're determined to fight.  on their job listing.page, they say that one of their "core values'' is "don't be evil.''.from a company selling soybean oil or mining equipment, such a.statement would merely be eccentric.  but i think all of us in the.computer world recognize who that is a declaration of war on.thanks to jessica livingston, robert morris, and sarah harlin.for reading earlier versions of this talk.audio of talkthe python paradoxjapanese translationrussian translationitalian translationspanish translation.if you liked this, you may also like.hackers & painters.<eot><sot>mind the gap.may 2004
when people care enough about something to do it well, those who.do it best tend to be far better than everyone else.  there's a.huge gap between leonardo and second-rate contemporaries like.borgognone.  you see the same gap between raymond chandler and the.average writer of detective novels.  a top-ranked professional chess.player could play ten thousand games against an ordinary club player.without losing once.like chess or painting or writing novels, making money is a very.specialized skill.   but for some reason we treat this skill.differently.  no one complains when a few people surpass all the.rest at playing chess or writing novels, but when a few people make.more money than the rest, we get editorials saying this is wrong.why?  the pattern of variation seems no different than for any other.skill.  what causes people to react so strongly when the skill is.making money?i think there are three reasons we treat making money as different:.the misleading model of wealth we learn as children; the disreputable.way in which, till recently, most fortunes were accumulated; and.the worry that great variations in income are somehow bad for.society.  as far as i can tell, the first is mistaken, the second.outdated, and the third empirically false.  could it be that, in a.modern democracy, variation in income is actually a sign of health?the daddy model of wealthwhen i was five i thought electricity was created by electric.sockets.  i didn't realize there were power plants out there.generating it.  likewise, it doesn't occur to most kids that wealth.is something that has to be generated.  it seems to be something.that flows from parents.because of the circumstances in which they encounter it, children.tend to misunderstand wealth.  they confuse it with money.  they.think that there is a fixed amount of it.  and they think of it as.something that's distributed by authorities (and so should be.distributed equally), rather than something that has to be created.(and might be created unequally).in fact, wealth is not money.  money is just a convenient way of.trading one form of wealth for another.  wealth is the underlying.stuff—the goods and services we buy.  when you travel to a.rich or poor country, you don't have to look at people's bank.accounts to tell which kind you're in.  you can see.wealth—in buildings and streets, in the clothes and the health.of the people.where does wealth come from?  people make it.  this was easier to.grasp when most people lived on farms, and made many of the things.they wanted with their own hands.  then you could see in the house,.the herds, and the granary the wealth that each family created.  it.was obvious then too that the wealth of the world was not a fixed.quantity that had to be shared out, like slices of a pie.  if you.wanted more wealth, you could make it.this is just as true today, though few of us create wealth directly.for ourselves (except for a few vestigial domestic tasks).  mostly.we create wealth for other people in exchange for money, which we.then trade for the forms of wealth we want..[1]because kids are unable to create wealth, whatever they have has.to be given to them.  and when wealth is something you're given,.then of course it seems that it should be distributed equally..[2].as in most families it is.  the kids see to that.  "unfair," they.cry, when one sibling gets more than another.in the real world, you can't keep living off your parents.  if you.want something, you either have to make it, or do something of.equivalent value for someone else, in order to get them to give you.enough money to buy it.  in the real world, wealth is (except for.a few specialists like thieves and speculators) something you have.to create, not something that's distributed by daddy.  and since.the ability and desire to create it vary from person to person,.it's not made equally.you get paid by doing or making something people want, and those.who make more money are often simply better at doing what people.want.  top actors make a lot more money than b-list actors.  the.b-list actors might be almost as charismatic, but when people go.to the theater and look at the list of movies playing, they want.that extra oomph that the big stars have.doing what people want is not the only way to get money, of course..you could also rob banks, or solicit bribes, or establish a monopoly..such tricks account for some variation in wealth, and indeed for.some of the biggest individual fortunes, but they are not the root.cause of variation in income.  the root cause of variation in income,.as occam's razor implies, is the same as the root cause of variation.in every other human skill.in the united states, the ceo of a large public company makes about.100 times as much as the average person..[3].basketball players.make about 128 times as much, and baseball players 72 times as much..editorials quote this kind of statistic with horror.  but i have.no trouble imagining that one person could be 100 times as productive.as another.  in ancient rome the price of slaves varied by.a factor of 50 depending on their skills..[4].and that's without.considering motivation, or the extra leverage in productivity that.you can get from modern technology.editorials about athletes' or ceos' salaries remind me of early.christian writers, arguing from first principles about whether the.earth was round, when they could just walk outside and check..[5].how much someone's work is worth is not a policy question.  it's.something the market already determines."are they really worth 100 of us?" editorialists ask.  depends on.what you mean by worth.  if you mean worth in the sense of what.people will pay for their skills, the answer is yes, apparently.a few ceos' incomes reflect some kind of wrongdoing.  but are there.not others whose incomes really do reflect the wealth they generate?.steve jobs saved a company that was in a terminal decline.  and not.merely in the way a turnaround specialist does, by cutting costs;.he had to decide what apple's next products should be.  few others.could have done it.  and regardless of the case with ceos, it's.hard to see how anyone could argue that the salaries of professional.basketball players don't reflect supply and demand.it may seem unlikely in principle that one individual could really.generate so much more wealth than another.  the key to this mystery.is to revisit that question, are they really worth 100 of us?.would a basketball team trade one of their players for 100.random people?  what would apple's next product look like if you.replaced steve jobs with a committee of 100 random people?.[6].these.things don't scale linearly.  perhaps the ceo or the professional.athlete has only ten times (whatever that means) the skill and.determination of an ordinary person.  but it makes all the difference.that it's concentrated in one individual.when we say that one kind of work is overpaid and another underpaid,.what are we really saying?  in a free market, prices are determined.by what buyers want.  people like baseball more than  poetry, so.baseball players make more than poets.  to say that a certain kind.of work is underpaid is thus identical with saying that people want.the wrong things.well, of course people want the wrong things.  it seems odd to be.surprised by that.  and it seems even odder to say that it's.unjust that certain kinds of work are underpaid..[7].then.you're saying that it's unjust that people want the wrong things..it's  lamentable that people prefer reality tv and corndogs to.shakespeare and steamed vegetables, but unjust?  that seems like.saying that blue is heavy, or that up is circular.the appearance of the word "unjust" here is the unmistakable spectral.signature of the daddy model.  why else would this idea occur in.this odd context?  whereas if the speaker were still operating on.the daddy model, and saw wealth as something that flowed from a.common source and had to be shared out, rather than something.generated by doing what other people wanted, this is exactly what.you'd get on noticing that some people made much more than others.when we talk about "unequal distribution of income," we should.also ask, where does that income come from?.[8].who made the wealth.it represents?  because to the extent that income varies simply.according to how much wealth people create, the distribution may.be unequal, but it's hardly unjust.stealing itthe second reason we tend to find great disparities of wealth.alarming is that for most of human history the usual way to accumulate.a fortune was to steal it: in pastoral societies by cattle raiding;.in agricultural societies by appropriating others' estates in times.of war, and taxing them in times of peace.in conflicts, those on the winning side would receive the estates.confiscated from the losers.  in england in the 1060s, when william.the conqueror distributed the estates of the defeated anglo-saxon.nobles to his followers, the conflict was military.  by the 1530s,.when henry viii distributed the estates of the monasteries to his.followers, it was mostly political..[9].but the principle was the.same.  indeed, the same principle is at work now in zimbabwe.in more organized societies, like china, the ruler and his officials.used taxation instead of confiscation.  but here too we see the.same principle: the way to get rich was not to create wealth, but.to serve a ruler powerful enough to appropriate it.this started to change in europe with the rise of the middle class..now we think of the middle class as people who are neither rich nor.poor, but originally they were a distinct group.  in a feudal.society, there are just two classes: a warrior aristocracy, and the.serfs who work their estates.  the middle class were a new, third.group who lived in towns and supported themselves by manufacturing.and trade.starting in the tenth and eleventh centuries, petty nobles and.former serfs banded together in towns that gradually became powerful.enough to ignore the local feudal lords..[10].like serfs, the middle.class made a living largely by creating wealth.  (in port cities.like genoa and pisa, they also engaged in piracy.) but unlike serfs.they had an incentive to create a lot of it.  any wealth a serf.created belonged to his master.  there was not much point in making.more than you could hide.  whereas the independence of the townsmen.allowed them to keep whatever wealth they created.once it became possible to get rich by creating wealth, society as.a whole started to get richer very rapidly.  nearly everything we.have was created by the middle class.  indeed, the other two classes.have effectively disappeared in industrial societies, and their.names been given to either end of the middle class.  (in the original.sense of the word, bill gates is middle class.)but it was not till the industrial revolution that wealth creation.definitively replaced corruption as the best way to get rich.  in.england, at least, corruption only became unfashionable (and in.fact only started to be called "corruption") when there started to.be other, faster ways to get rich.seventeenth-century england was much like the third world today,.in that government office was a recognized route to wealth.  the.great fortunes of that time still derived more from what we would.now call corruption than from commerce..[11].by the nineteenth.century that had changed.  there continued to be bribes, as there.still are everywhere, but politics had by then been left to men who.were driven more by vanity than greed.  technology had made it.possible to create wealth faster than you could steal it.  the.prototypical rich man of the nineteenth century was not a courtier.but an industrialist.with the rise of the middle class, wealth stopped being a zero-sum.game.  jobs and wozniak didn't have to make us poor to make themselves.rich.  quite the opposite: they created things that made our lives.materially richer.  they had to, or we wouldn't have paid for them.but since for most of the world's history the main route to wealth.was to steal it, we tend to be suspicious of rich people.  idealistic.undergraduates find their unconsciously preserved child's model of.wealth confirmed by eminent writers of the past.  it is a case of.the mistaken meeting the outdated."behind every great fortune, there is a crime," balzac wrote.  except.he didn't.  what he actually said was that a great fortune with no.apparent cause was probably due to a crime well enough executed.that it had been forgotten.  if we were talking about europe in.1000, or most of the third world today, the standard misquotation.would be spot on.  but balzac lived in nineteenth-century france,.where the industrial revolution was well advanced.  he knew you.could make a fortune without stealing it.  after all, he did himself,.as a popular novelist..[12]only a few countries (by no coincidence, the richest ones) have.reached this stage.  in most, corruption still has the upper hand..in most, the fastest way to get wealth is by stealing it.  and so.when we see increasing differences in income in a rich country,.there is a tendency to worry that it's sliding back toward becoming.another venezuela.  i think the opposite is happening. i think.you're seeing a country a full step ahead of venezuela.the lever of technologywill technology increase the gap between rich and poor?  it will.certainly increase the gap between the productive and the unproductive..that's the whole point of technology.   with a tractor an energetic.farmer could plow six times as much land in a day as he could with.a team of horses.  but only if he mastered a new kind of farming.i've seen the lever of technology grow visibly in my own time.  in.high school i made money by mowing lawns and scooping ice cream at.baskin-robbins.  this was the only kind of work available at the.time.  now high school kids could write software or design web.sites.  but only some of them will; the rest will still be scooping.ice cream.i remember very vividly when in 1985 improved technology made it.possible for me to buy a computer of my own.  within months i was.using it to make money as a freelance programmer.  a few years.before, i couldn't have done this.  a few years before, there was.no such thing as a freelance programmer.  but apple created.wealth, in the form of powerful, inexpensive computers, and programmers.immediately set to work using it to create more.as this example suggests, the rate at which technology increases.our productive capacity is probably exponential, rather than linear..so we should expect to see ever-increasing variation in individual.productivity as time goes on.   will that increase the gap between.rich and the poor?  depends which gap you mean.technology should increase the gap in income, but it seems to.decrease other gaps.  a hundred years ago, the rich led a different.kind of life from ordinary people.  they lived in houses.full of servants, wore elaborately uncomfortable clothes, and.travelled about in carriages drawn by teams of horses which themselves.required their own houses and servants.  now, thanks to technology,.the rich live more like the average person.cars are a good example of why.  it's possible to buy expensive,.handmade cars that cost hundreds of thousands of dollars.  but there.is not much point.  companies make more money by building a large.number of ordinary cars than a small number of expensive ones.  so.a company making a mass-produced car can afford to spend a lot more.on its design.  if you buy a custom-made car, something will always.be breaking.  the only point of buying one now is to advertise that.you can.or consider watches.  fifty years ago, by spending a lot of money.on a watch you could get better performance.  when watches had.mechanical movements, expensive watches kept better time.  not any.more.  since the invention of the quartz movement, an ordinary timex.is more accurate than a patek philippe costing hundreds of thousands.of dollars..[13].indeed, as with expensive cars, if you're determined.to spend a lot of money on a watch, you have to put up with some.inconvenience to do it: as well as keeping worse time, mechanical.watches have to be wound.the only thing technology can't cheapen is brand.  which is precisely.why we hear ever more about it.  brand is the residue left as the.substantive differences between rich and poor evaporate.  but what.label you have on your stuff is a much smaller matter than having.it versus not having it.  in 1900, if you kept a carriage, no one.asked what year or brand it was.  if you had one, you were rich..and if you weren't rich, you took the omnibus or walked.  now even.the poorest americans drive cars, and it is only because we're so.well trained by advertising that we can even recognize the especially.expensive ones..[14]the same pattern has played out in industry after industry.  if.there is enough demand for something, technology will make it cheap.enough to sell in large volumes, and the mass-produced versions.will be, if not better, at least more convenient..[15].and there.is nothing the rich like more than convenience.  the rich people i.know drive the same cars, wear the same clothes, have the same kind.of furniture, and eat the same foods as my other friends.  their.houses are in different neighborhoods, or if in the same neighborhood.are different sizes, but within them life is similar.  the houses.are made using the same construction techniques and contain much.the same objects.  it's inconvenient to do something expensive and.custom.the rich spend their time more like everyone else too.  bertie.wooster seems long gone.  now, most people who are rich enough not.to work do anyway.  it's not just social pressure that makes them;.idleness is lonely and demoralizing.nor do we have the social distinctions there were a hundred years.ago.   the novels and etiquette manuals of that period read now.like descriptions of some strange tribal society.  "with respect.to the continuance of friendships..." hints mrs. beeton's book.of household management (1880), "it may be found necessary, in.some cases, for a mistress to relinquish, on assuming the responsibility.of a household, many of those commenced in the earlier part of her.life." a woman who married a rich man was expected to drop friends.who didn't.  you'd seem a barbarian if you behaved that way today..you'd also have a very boring life.  people still tend to segregate.themselves somewhat, but much more on the basis of education than.wealth..[16]materially and socially, technology seems to be decreasing the gap.between the rich and the poor, not increasing it.  if lenin walked.around the offices of a company like yahoo or intel or cisco, he'd.think communism had won.  everyone would be wearing the same clothes,.have the same kind of office (or rather, cubicle) with the same.furnishings, and address one another by their first names instead.of by honorifics.  everything would seem exactly as he'd predicted,.until he looked at their bank accounts.  oops.is it a problem if technology increases that gap?  it doesn't seem.to be so far.  as it increases the gap in income, it seems to.decrease most other gaps.alternative to an axiomone often hears a policy criticized on the grounds that it would.increase the income gap between rich and poor.  as if it were an.axiom that this would be bad.  it might be true that increased.variation in income would be bad, but i don't see how we can say.it's axiomatic.indeed, it may even be false, in industrial democracies.  in a.society of serfs and warlords, certainly, variation in income is a.sign of an underlying problem.  but serfdom is not the only cause.of variation in income.  a 747 pilot doesn't make 40 times as much.as a checkout clerk because he is a warlord who somehow holds her.in thrall.  his skills are simply much more valuable.i'd like to propose an alternative idea: that in a modern society,.increasing variation in income is a sign of health.  technology.seems to increase the variation in productivity at faster than.linear rates.  if we don't see corresponding variation in income,.there are three possible explanations: (a) that technical innovation.has stopped, (b) that the people who would create the most wealth.aren't doing it, or (c) that they aren't getting paid for it.i think we can safely say that (a) and (b) would be bad.  if you.disagree, try living for a year using only the resources available.to the average frankish nobleman in 800, and report back to us..(i'll be generous and not send you back to the stone age.)the only option, if you're going to have an increasingly prosperous.society without increasing variation in income, seems to be (c),.that people will create a lot of wealth without being paid for it..that jobs and wozniak, for example, will cheerfully work 20-hour.days to produce the apple computer for a society that allows them,.after taxes, to keep just enough of their income to match what they.would have made working 9 to 5 at a big company.will people create wealth if they can't get paid for it?  only if.it's fun.  people will write operating systems for free.  but they.won't install them, or take support calls, or train customers to.use them.  and at least 90% of the work that even the highest tech.companies do is of this second, unedifying kind.all the unfun kinds of wealth creation slow dramatically in a society.that confiscates private fortunes.  we can confirm this empirically..suppose you hear a strange noise that you think may be due to a.nearby fan.  you turn the fan off, and the noise stops.  you turn.the fan back on, and the noise starts again.  off, quiet.  on,.noise.  in the absence of other information, it would seem the noise.is caused by the fan.at various times and places in history, whether you could accumulate.a fortune by creating wealth has been turned on and off.  northern.italy in 800, off (warlords would steal it).  northern italy in.1100, on.  central france in 1100, off (still feudal).  england in.1800, on.  england in 1974, off (98% tax on investment income)..united states in 1974, on.  we've even had a twin study: west.germany, on;  east germany, off.  in every case, the creation of.wealth seems to appear and disappear like the noise of a fan as you.switch on and off the prospect of keeping it.there is some momentum involved.  it probably takes at least a.generation to turn people into east germans (luckily for england)..but if it were merely a fan we were studying, without all the extra.baggage that comes from the controversial topic of wealth, no one.would have any doubt that the fan was causing the noise.if you suppress variations in income, whether by stealing private.fortunes, as feudal rulers used to do, or by taxing them away, as.some modern governments have done, the result always seems to be.the same.    society as a whole ends up poorer.if i had a choice of living in a society where i was materially.much better off than i am now, but was among the poorest, or in one.where i was the richest, but much worse off than i am now, i'd take.the first option.  if i had children, it would arguably be immoral.not to.  it's absolute poverty you want to avoid, not relative.poverty.  if, as the evidence so far implies, you have to have one.or the other in your society, take relative poverty.you need rich people in your society not so much because in spending.their money they create jobs, but because of what they have to do.to get rich.  i'm not talking about the trickle-down effect.here.  i'm not saying that if you let henry ford get rich, he'll.hire you as a waiter at his next party.  i'm saying that he'll make.you a tractor to replace your horse.notes[1].part of the reason this subject is so contentious is that some.of those most vocal on the subject of wealth—university.students, heirs, professors, politicians, and journalists—have.the least experience creating it.  (this phenomenon will be familiar.to anyone who has overheard conversations about sports in a bar.)students are mostly still on the parental dole, and have not stopped.to think about where that money comes from.  heirs will be on the.parental dole for life.  professors and politicians live within.socialist eddies of the economy, at one remove from the creation.of wealth, and are paid a flat rate regardless of how hard they.work.  and journalists as part of their professional code segregate.themselves from the revenue-collecting half of the businesses they.work for (the ad sales department).  many of these people never.come face to face with the fact that the money they receive represents.wealth—wealth that, except in the case of journalists, someone.else created earlier.  they live in a world in which income is.doled out by a central authority according to some abstract notion.of fairness (or randomly, in the case of heirs), rather than given.by other people in return for something they wanted, so it may seem.to them unfair that things don't work the same in the rest of the.economy.(some professors do create a great deal of wealth for.society.  but the money they're paid isn't a quid pro quo..it's more in the nature of an investment.)[2].when one reads about the origins of the fabian society, it.sounds like something cooked up by the high-minded edwardian.child-heroes of edith nesbit's the wouldbegoods.[3].according to a study by the corporate library, the median total.compensation, including salary, bonus, stock grants, and the exercise.of stock options, of s&p 500 ceos in 2002 was $3.65 million..according to sports illustrated, the average nba player's.salary during the 2002-03 season was $4.54 million, and the average.major league baseball player's salary at the start of the 2003.season was $2.56 million.  according to the bureau of labor.statistics, the mean annual wage in the us in 2002 was $35,560.[4].in the early empire the price of an ordinary adult slave seems.to have been about 2,000 sestertii (e.g. horace, sat. ii.7.43)..a servant girl cost 600 (martial vi.66), while columella (iii.3.8).says that a skilled vine-dresser was worth 8,000.  a doctor, p..decimus eros merula, paid 50,000 sestertii for his freedom (dessau,.inscriptiones 7812).  seneca (ep. xxvii.7) reports.that one calvisius sabinus paid 100,000 sestertii apiece for slaves.learned in the greek classics.  pliny (hist. nat. vii.39).says that the highest price paid for a slave up to his time was.700,000 sestertii, for the linguist (and presumably teacher) daphnis,.but that this had since been exceeded by actors buying their own.freedom.classical athens saw a similar variation in prices.  an ordinary.laborer was worth about 125 to 150 drachmae.  xenophon (mem..ii.5) mentions prices ranging from 50 to 6,000 drachmae (for the.manager of a silver mine).for more on the economics of ancient slavery see:jones, a. h. m., "slavery in the ancient world," economic history.review, 2:9 (1956), 185-199, reprinted in finley, m. i. (ed.),.slavery in classical antiquity, heffer, 1964.[5].eratosthenes (276—195 bc) used shadow lengths in different.cities to estimate the earth's circumference.  he was off by only.about 2%.[6].no, and windows, respectively.[7].one of the biggest divergences between the daddy model and.reality is the valuation of hard work.  in the daddy model, hard.work is in itself deserving.  in reality, wealth is measured by.what one delivers, not how much effort it costs.  if i paint someone's.house, the owner shouldn't pay me extra for doing it with a toothbrush.it will seem to someone still implicitly operating on the daddy.model that it is unfair when someone works hard and doesn't get.paid much.  to help clarify the matter, get rid of everyone else.and put our worker on a desert island, hunting and gathering fruit..if he's bad at it he'll work very hard and not end up with much.food.  is this unfair?  who is being unfair to him?[8].part of the reason for the tenacity of the daddy model may be.the dual meaning of "distribution." when economists talk about."distribution of income," they mean statistical distribution.  but.when you use the phrase frequently, you can't help associating it.with the other sense of the word (as in e.g. "distribution of alms"),.and thereby subconsciously seeing wealth as something that flows.from some central tap.  the word "regressive" as applied to tax.rates has a similar effect, at least on me; how can anything.regressive be good?[9]."from the beginning of the reign thomas lord roos was an assiduous.courtier of the young henry viii and was soon to reap the rewards..in 1525 he was made a knight of the garter and given the earldom.of rutland.  in the thirties his support of the breach with rome,.his zeal in crushing the pilgrimage of grace, and his readiness to.vote the death-penalty in the succession of spectacular treason.trials that punctuated henry's erratic matrimonial progress made.him an obvious candidate for grants of monastic property."stone, lawrence, family and fortune: studies in aristocratic.finance in the sixteenth and seventeenth centuries, oxford.university press, 1973, p. 166.[10].there is archaeological evidence for large settlements earlier,.but it's hard to say what was happening in them.hodges, richard and david whitehouse, mohammed, charlemagne and.the origins of europe, cornell university press, 1983.[11].william cecil and his son robert were each in turn the most.powerful minister of the crown, and both used their position to.amass fortunes among the largest of their times.  robert in particular.took bribery to the point of treason.  "as secretary of state and.the leading advisor to king james on foreign policy, [he] was a.special recipient of favour, being offered large bribes by the dutch.not to make peace with spain, and large bribes by spain to make.peace." (stone, op. cit., p. 17.)[12].though balzac made a lot of money from writing, he was notoriously.improvident and was troubled by debts all his life.[13].a timex will gain or lose about .5 seconds per day.  the most.accurate mechanical watch, the patek philippe 10 day tourbillon,.is rated at -1.5 to +2 seconds.  its retail price is about $220,000.[14].if asked to choose which was more expensive, a well-preserved.1989 lincoln town car ten-passenger limousine ($5,000) or a 2004.mercedes s600 sedan ($122,000), the average edwardian might well.guess wrong.[15].to say anything meaningful about income trends, you have to.talk about real income, or income as measured in what it can buy..but the usual way of calculating real income ignores much of the.growth in wealth over time, because it depends on a consumer price.index created by bolting end to end a series of numbers that are.only locally accurate, and that don't include the prices of new.inventions until they become so common that their prices stabilize.so while we might think it was very much better to live in a world.with antibiotics or air travel or an electric power grid than.without, real income statistics calculated in the usual way will.prove to us that we are only slightly richer for having these things.another approach would be to ask, if you were going back to the.year x in a time machine, how much would you have to spend on trade.goods to make your fortune?  for example, if you were going back.to 1970 it would certainly be less than $500, because the processing.power you can get for $500 today would have been worth at least.$150 million in 1970.  the function goes asymptotic fairly quickly,.because for times over a hundred years or so you could get all you.needed in present-day trash.  in 1800 an empty plastic drink bottle.with a screw top would have seemed a miracle of workmanship.[16].some will say this amounts to the same thing, because the rich.have better opportunities for education.  that's a valid point.  it.is still possible, to a degree, to buy your kids' way into top.colleges by sending them to private schools that in effect hack the.college admissions process.according to a 2002 report by the national center for education.statistics, about 1.7% of american kids attend private, non-sectarian.schools.  at princeton, 36% of the class of 2007 came from such.schools.  (interestingly, the number at harvard is significantly.lower, about 28%.)  obviously this is a huge loophole.  it does at.least seem to be closing, not widening.perhaps the designers of admissions processes should take a lesson.from the example of computer security, and instead of just assuming.that their system can't be hacked, measure the degree to which it.is.spanish translation<eot><sot>how to make wealth.want to start a startup?  get funded by.y combinator..may 2004
.(this essay was originally published in hackers.& painters.).if you wanted to get rich, how would you do it? i think your best.bet would be to start or join a startup.  that's been a.reliable way to get rich for hundreds of years.  the word "startup".dates from the 1960s, but what happens in one is.very similar to the venture-backed trading voyages of the.middle ages.startups usually involve technology, so much so that the phrase."high-tech startup" is almost redundant.  a startup is a small.company that takes on a hard technical problem.lots of people get rich knowing nothing more than that..you don't have to know physics to be a good pitcher.  but.i think it could give you an edge to understand the underlying principles..why do startups have to be small?.will a startup inevitably stop being a startup as it.grows larger?.and why do they so often work on.developing new technology?   why are there so many startups.selling new drugs or computer software, and none selling corn oil.or laundry detergent?the propositioneconomically, you can think of a startup as a way to.compress your whole working life into a few years.  instead.of working at a low intensity for forty years, you work as.hard as you possibly can for four.  this pays especially well.in technology, where you earn a premium for working fast.here is a brief sketch of the economic proposition.  if you're.a good hacker in your mid twenties, you can.get a job paying about $80,000 per year.  so on average.such a hacker must be.able to do at least $80,000 worth of work per year for the.company just to break even.  you could probably.work twice as many hours as a corporate employee, and if.you focus you can probably get three times as much done in.an hour..[1].you should get another multiple of two, at.least, by eliminating the drag.of the pointy-haired middle.manager who would be your boss in a big company..then there is one more multiple: how much smarter are you.than your job description expects you to be?.suppose another multiple of three.  combine all these multipliers, and i'm.claiming you could be 36 times more.productive than you're expected to be in a random corporate.job..[2].if a fairly good hacker is worth $80,000 a year at a.big company, then a smart.hacker working very hard without any corporate.bullshit to slow him down should be able to do work worth about.$3 million a year.like all back-of-the-envelope calculations, this one.has a lot of wiggle room.  i wouldn't try to.defend the actual numbers.  but i stand by the.structure of the calculation.  i'm not claiming.the multiplier is precisely 36, but it is certainly more.than 10, and probably rarely as high as 100.if $3 million a year seems.high, remember that we're talking about the limit case:.the case where you not only have zero leisure time.but indeed work so hard that you endanger your health.startups are not magic.  they don't change the laws of.wealth creation.  they just represent a point at the far end of the curve..there is a conservation law at work here: if.you want to make a million dollars, you have to endure a.million dollars' worth of pain..for example, one way to.make a million dollars would be to work for the.post office your whole life, and save every penny of your.salary.  imagine the stress of working for the post.office for fifty years.   in a startup you compress all.this stress into three or four years.  you do tend to get a.certain.bulk discount if you buy the economy-size pain,.but you can't evade the fundamental conservation law..if starting a startup were easy, everyone would do it.millions, not billionsif $3 million a year seems high to some people, it will seem.low to others.  three million?.how do i get to be a billionaire, like bill gates?so let's get bill gates out of the way right now.  it's not.a good idea to use famous rich people.as examples, because the press only.write about the very richest, and these tend to be outliers..bill gates is a smart, determined, and hardworking man,.but you need more than.that to make as much money as he has.  you also need to be.very lucky.there is a large random.factor in the success of any company.  so the guys you end.up reading about in the papers are the ones who are very.smart, totally dedicated, and win the lottery..certainly bill is smart and dedicated, but microsoft also.happens to have been the beneficiary of one of the most spectacular.blunders in the history of business: the licensing deal for.dos.  no doubt bill did.everything he could to steer ibm into making that blunder,.and he has done an excellent job of exploiting it, but if.there had been one person with a brain on ibm's side,.microsoft's future would have been very different..microsoft at that stage had little leverage over ibm..they were effectively a component supplier.  if ibm had.required an exclusive license, as they should have, microsoft.would still have signed the deal.  it would still have.meant a lot of money for them,  and ibm.could easily have gotten an operating system elsewhere.instead ibm ended up using all its power in the market.to give microsoft control of the pc standard.  from.that point, all microsoft had to do was execute.  they.never had to bet the company on a bold decision.  all they.had to do was play hardball with licensees and copy more.innovative products reasonably promptly.if ibm hadn't made this mistake, microsoft would.still have been a successful company, but it.could not have grown so big so fast..bill gates would be rich, but he'd be somewhere.near the bottom of the forbes 400 with the other guys his age.there are a lot of ways to get.rich, and this essay is about only one of them.  this.essay is about how to make money by creating wealth and.getting paid for it.  there are plenty of other ways to.get money, including chance, speculation, marriage, inheritance,.theft, extortion, fraud, monopoly,.graft, lobbying,.counterfeiting, and prospecting.  most of the greatest fortunes.have probably involved several of these.the advantage of creating wealth, as a way to get rich,.is not just that it's more legitimate.(many of the other methods are now illegal).but that it's more.straightforward.  you just have to do something people want.money is not wealthif you want to create wealth, it will help to understand what it is..wealth is not the same thing as money..[3].wealth is as old as.human history.  far older, in fact; ants have wealth..money is a comparatively recent invention.wealth is the fundamental thing.  wealth is stuff we want: food,.clothes, houses, cars, gadgets, travel to interesting places,.and so on.  you can have wealth without.having money.  if you had a magic machine that.could on command make you a car or cook you dinner or do your.laundry, or do anything else you wanted, you wouldn't need money..whereas if you were in the middle of antarctica, where there is.nothing to buy, it wouldn't matter how much money you had.wealth is what you want, not money.  but if wealth is the important.thing, why does everyone talk about making money?   it is.a kind of shorthand: money is a way of moving wealth, and in practice.they are usually interchangeable.  but they are not the same thing,.and unless you plan to get rich by counterfeiting, talking about.making money can make it harder to understand how to.make money.money is a side effect of specialization..in a specialized society, most of the.things you need, you can't make for yourself.  if you want a potato.or a pencil or a place to live, you have to get it from someone.else.how do you get the person who grows the potatoes to give you some?.by giving him something he wants in return.  but you can't get.very far by trading things directly with the people who.need them.  if you make violins, and none of the local.farmers wants one, how will you eat?the solution societies find, as they get more specialized, is to.make the trade into a two-step process.  instead of trading violins.directly for potatoes, you trade violins for, say, silver,.which you can then trade again for anything else you need.  the.intermediate stuff-- the medium of exchange-- can be anything that's.rare and portable.  historically metals have been the most common,.but recently we've been using a medium of exchange, called the dollar,.that doesn't physically exist.  it works as a medium of exchange,.however, because its rarity.is guaranteed by the u.s. government.the advantage of a medium of exchange is that it makes trade work..the disadvantage is that it tends to obscure what trade really.means.  people think that what a business does is make money..but money is just the intermediate stage-- just.a shorthand-- for whatever people want..what most businesses really do is make.wealth.  they do something people want..[4]the pie fallacya surprising number of people retain from childhood the idea.that there is a fixed amount of wealth in the world..there is, in any normal family, a fixed amount of money at.any moment.  but that's not the same thing.when wealth is talked about in this context, it is often.described as a pie.  "you can't make the pie larger,".say politicians..when you're.talking about the amount of money in one family's bank.account, or the amount available to a government from one.year's tax revenue, this is true..if one person gets more, someone else has to get less.i can remember believing, as a child, that if a few.rich people had all the money, it left less for everyone else..many people seem to continue to believe something like this.well into adulthood.  this fallacy is usually there in the.background when you hear someone talking about how x percent.of the population have y percent of the wealth.  if you plan.to start a startup, then whether you realize it or not, you're.planning to disprove the pie fallacy.what leads people astray here is the abstraction of.money.  money is not wealth.  it's.just something we use to move wealth around..so although there may be, in certain specific moments (like.your family, this month) a fixed amount of money available to.trade with other people for things you want,.there is not a fixed amount of wealth in the world..you can make more wealth.  wealth has been getting created and.destroyed (but on balance, created) for all of human history.suppose you own a beat-up old car..instead of sitting on your butt next.summer, you could spend the time restoring your car to pristine condition..in doing so you create wealth.  the world is-- and.you specifically are-- one pristine old car the richer.  and not.just in some metaphorical way.  if you sell your car,.you'll get more for it.in restoring your old car you have made yourself.richer.  you haven't made anyone else poorer.  so there is.obviously not a fixed pie.  and in fact, when you look at.it this way, you wonder why anyone would think there was..[5]kids know, without knowing they know, that they can create.wealth.  if you need to give someone a present and don't.have any money, you make one.  but kids are so bad at making.things that they consider home-made presents to be a distinct,.inferior, sort of thing to store-bought ones-- a mere expression.of the proverbial thought that counts..and indeed, the lumpy ashtrays.we made for our parents did not have much of a resale market.craftsmenthe people most likely to grasp that wealth can be.created are the ones who are good at making things, the craftsmen..their hand-made objects become store-bought ones..but with the rise of industrialization there are fewer and.fewer craftsmen.  one of the biggest remaining groups  is.computer programmers.a programmer can sit down in front of a computer and.create wealth.  a good piece of software is, in itself,.a valuable thing..there is no manufacturing to confuse the issue.  those.characters you type.are a complete, finished product..if someone sat down and wrote a web.browser that didn't suck (a fine idea, by the way), the world.would be that much richer..[5b]everyone in a company works together to create.wealth, in the sense of making more things people want..many of the employees (e.g. the people in the mailroom or.the personnel department) work at one remove from the.actual making of stuff.  not the programmers.  they.literally think the product, one line at a time..and so it's clearer to programmers that wealth is something.that's made, rather than being distributed, like slices of a.pie, by some imaginary daddy.it's also obvious to programmers that there are huge variations.in the rate at which wealth is created.  at viaweb we had one.programmer who was a sort of monster of productivity..i remember watching what he did one long day and estimating that.he had added several hundred thousand dollars.to the market value of the company..a great programmer, on a roll, could.create a million dollars worth of wealth in a couple weeks..a mediocre programmer over the same period will generate zero or.even negative wealth (e.g. by introducing bugs).this is.why so many of the best programmers are libertarians..in our world, you sink or swim, and there are no excuses..when those far removed from the creation of wealth-- undergraduates,.reporters, politicians-- hear.that the richest 5% of the people have.half the total wealth, they tend to think injustice!.an experienced programmer would be more likely to think.is that all?  the top 5% of programmers.probably write 99% of the good software.wealth can be created without being sold.  scientists, till.recently at least, effectively donated the wealth they.created.  we are all richer for knowing about penicillin,.because we're less likely to die from infections.  wealth.is whatever people want, and not dying is certainly something.we want.  hackers often donate their work by.writing open source software that anyone can use for free..i am much the richer for the operating system.freebsd, which i'm running on the computer i'm using now,.and so is yahoo, which runs it on all their servers.what a job isin industrialized countries, people belong to one institution or.another at least until their twenties.  after all those years you get.used to the idea of belonging to a group of people who all get up.in the morning, go to some set of buildings, and do things that they.do not, ordinarily, enjoy doing.  belonging to such a group becomes.part of your identity: name, age, role, institution..if you have to introduce yourself, or.someone else describes you, it will be as something like, john.smith, age 10, a student at such and such elementary school, or.john smith, age 20, a student at such and such college.when john smith finishes school he is expected to get a job.  and.what getting a job seems to mean is joining another institution..superficially it's a lot like college.  you pick the companies you.want to work for and apply to join them.  if one likes you, you.become a member of this new group.  you get up in the morning and.go to a new set of buildings, and do things that you do not, ordinarily,.enjoy doing.  there are a few differences: life is not as much fun,.and you get paid, instead of paying, as you did in college.  but.the similarities feel greater than the differences.  john smith is.now john smith, 22, a software developer at such and such corporation.in fact john smith's.life has changed more than he realizes.  socially, a company.looks much like college, but the deeper you go into the.underlying reality, the more different it gets.what a company does, and has to do if it wants to continue to.exist, is earn money.  and the way most companies make money.is by creating wealth.  companies can be so specialized that this.similarity is concealed, but it is not only manufacturing.companies that create wealth.  a big component of wealth is.location..remember that magic machine that could.make you cars and cook you dinner and so on?  it would not be.so useful if it delivered your dinner to a random location.in central asia..if wealth means what people want, companies that move.things also create wealth.  ditto for.many other kinds of companies that don't make anything.physical.  nearly all companies exist to do something people.want.and that's what you do, as well, when you go to work for a company..but here there is another layer that tends to obscure the underlying.reality.  in a company, the work you do is averaged together with.a lot of other people's..you may not even be aware you're doing something people.want.  your contribution may be indirect.  but the company as a.whole must be giving people something they want, or they won't make.any money.  and if they are paying you x dollars a year, then on.average you must be contributing at least x dollars a year worth.of work, or the company will be spending more than it makes,.and will go out of business.someone graduating from college thinks, and is told, that he needs.to get a job, as if the important thing were becoming a member of.an institution.  a more direct way to put it would be: you need to.start doing something people want.  you don't.need to.join a company to do that.  all a company is is a group of people.working together to do something people want.  it's doing something people.want that matters, not joining the group..[6]for most people the.best plan probably is to go to work for some existing.company.  but it is a good idea to understand what's happening.when you do this.  a job means doing something people want,.averaged together with everyone else in that company.working harderthat averaging gets to be a problem..i think the single biggest problem afflicting large companies is the.difficulty of assigning a value to each person's work..for the most part they punt.  in a.big company you get paid a fairly predictable salary for working.fairly hard.  you're expected not to be obviously incompetent or.lazy, but you're not expected to devote your whole life to your.work.it turns out, though, that there are economies of scale in how much of your.life you devote to your work.  in the right kind of business,.someone who really devoted himself to work could generate ten or.even a hundred times as much wealth as an average.employee.  a programmer, for example, instead of chugging along.maintaining and updating an existing piece of software, could write.a whole new piece of software, and with it create a new source of.revenue.companies are not set up to reward people who want to do this..you can't go to your boss and say, i'd like to start working ten.times as hard, so will you please pay me ten times as much? for.one thing, the official fiction is that you are already working as.hard as you can.  but a more serious problem is that the company.has no way of measuring the value of your work.salesmen are an exception.  it's easy.to measure how much revenue they generate, and they're.usually paid a percentage of it.  if a salesman wants to work harder,.he can just start doing it, and he will automatically.get paid proportionally more.there is one other job besides sales where big companies can.hire first-rate people: in the top management jobs..and for the same reason: their performance can.be measured.  the top managers are.held responsible for the performance of the entire company..because an ordinary employee's performance can't usually.be measured, he is not expected to do.more than put in a solid effort.  whereas top management, like.salespeople, have to actually come up with the numbers..the ceo of a company that tanks cannot plead that he put in.a solid effort.  if the company does badly, he's done badly.a company that could pay all its employees so straightforwardly.would be enormously successful.  many employees would work harder.if they could get paid for it.  more importantly,.such a company would attract people who wanted to work.especially hard..it would crush its competitors.unfortunately, companies can't pay everyone like salesmen.  salesmen.work alone.  most employees' work is tangled together.  suppose.a company makes some kind of consumer gadget.  the.engineers build a reliable gadget with all kinds of new features;.the industrial designers design a beautiful case for it; and then.the marketing people convince everyone that.it's something they've got to have.  how do you know how much of the.gadget's sales are due to each group's efforts?  or, for that.matter, how much is due to the creators of past gadgets that gave.the company a reputation for quality?  there's no way to.untangle all their contributions.  even if you could read the minds.of the consumers, you'd find these factors were all blurred together.if you want to go faster, it's a problem to have your work.tangled together with a large number of other people's.  in a.large group, your performance is not separately measurable-- and.the rest of the group slows you down.measurement and leverageto get rich you need to get yourself in a situation with two.things, measurement and leverage.  you need to be in a.position where your performance can be measured, or there is.no way to get paid more by doing more.  and you have to.have leverage, in the sense that the decisions you make have.a big effect.measurement alone is not enough.  an example of a job with.measurement but not leverage is doing piecework in a.sweatshop.  your performance is measured and you get paid.accordingly, but you have no scope for decisions.  the only.decision you get to make is how fast you work, and that.can probably only increase your earnings by a factor.of two or three.an example of a job with both measurement and leverage would.be lead actor in a movie.  your performance can be measured in the.gross of the movie.  and you have leverage in the sense that your.performance can make or break it.ceos also have both measurement and leverage.  they're measured,.in that the performance of the company is their performance..and they have leverage in that their decisions.set the whole company moving in one direction or another.i think everyone who gets rich by their own efforts will be.found to be in a situation with measurement and leverage..everyone i can think of does: ceos, movie stars,.hedge fund managers, professional athletes.  a good hint to the.presence of leverage is the possibility of failure..upside must be balanced by downside, so if there is.big potential for gain there must also be a terrifying.possibility of loss.  ceos, stars, fund managers, and athletes.all live with the sword hanging over their heads;.the moment they start to suck, they're out.  if you're in.a job that feels safe, you are not going to get rich,.because if there is no danger there is almost certainly no leverage.but you don't have to become a ceo or a movie star to.be in a situation with measurement and leverage.  all you.need to do is be part of a small group working on a.hard problem.smallness = measurementif you can't measure the value of the work done by individual.employees, you can get close.  you can measure the value.of the work done by small groups.one level at which you can accurately measure the revenue.generated by employees is at the level of the whole company..when the company is small, you are thereby fairly close to.measuring the contributions of individual employees.  a viable.startup might only have ten employees, which puts you within a.factor of ten of measuring individual effort.starting or joining a startup is thus as close as most.people can get to saying to one's boss, i want to work ten times.as hard, so please pay me ten times as much.  there are two.differences: you're not saying it to your boss, but directly to the.customers (for whom your boss is only a proxy after all), and.you're not doing it individually, but along with a small group.of other ambitious people.it will, ordinarily, be a group.  except in a few unusual kinds.of work, like acting or writing books, you can't be a company.of one person..and the people you work with had better be good, because it's their work that.yours is going to be averaged with.a big company is like a giant galley driven by a thousand rowers..two things keep the speed of the.galley down.  one is that individual rowers don't see any.result from working harder..the other is that, in a group of a.thousand people, the average rower is likely  to be.pretty average.if you took ten people at random out of the big galley and.put them in a boat by themselves, they could probably go.faster.  they would have both carrot and stick to motivate.them.  an energetic rower would be encouraged by the thought.that he could have a visible effect on the speed of.the boat.  and if someone was lazy, the others would be more likely.to notice and complain.but the real advantage of the ten-man boat shows when.you take the ten best rowers out of the big galley.and put them in a boat together.  they will have all.the extra motivation that comes from being in a small group..but more importantly, by selecting that small a group.you can get the best rowers.  each one will be in.the top 1%.  it's a much better deal for them to average.their work together with a small group of their peers than to.average it with everyone.that's the real point of startups.  ideally, you are getting.together with a group of other people who also want to work.a lot harder, and get paid a lot more, than they would in.a big company.  and because startups tend to get founded.by self-selecting groups of ambitious people who already.know one another (at least by reputation), the level of.measurement is more precise than you get from smallness alone..a startup is not merely ten people, but ten people like you.steve jobs once said that the success or failure of a startup.depends on the first ten employees.  i agree. if.anything, it's more like the first five..being small is not, in itself, what makes startups kick butt,.but rather that small groups can be select..you don't want small in the sense of a.village, but small in the sense of an all-star team.the larger a group, the closer its average member will be to the average.for the population as a whole.   so all other things being.equal, a very able person in a big company is probably.getting a bad deal, because his performance is dragged down by.the overall lower performance of the others.  of course,.all other things often are not equal: the able person may.not care about money, or may prefer the stability of a large.company.  but a very able person who does care about money.will ordinarily do better to go off and work with a small.group of peers.technology = leveragestartups offer anyone a way to be in a situation with.measurement and leverage..they allow measurement because they're small,.and they offer leverage because they.make money by inventing new technology.what is technology?  it's technique. it's the way.we all do things.  and when.you discover a new way to do things, its value is multiplied.by all the people who use it.  it is the proverbial fishing.rod, rather than the fish.  that's the difference between a.startup and a restaurant or a barber shop.  you fry eggs or cut.hair one customer at a time.  whereas if.you solve a technical problem that a lot of people care about,.you help everyone who uses your solution..that's leverage.if you look at history, it seems that most people.who got rich by creating wealth did it by developing.new technology.  you just can't fry eggs or cut hair fast enough..what made the florentines rich in 1200.was the discovery of new techniques for making the high-tech.product of the time, fine woven cloth.  what made the.dutch rich in 1600 was the discovery of shipbuilding and.navigation techniques that enabled them to dominate the seas.of the far east.fortunately there is a natural fit between smallness and.solving hard problems.  the leading edge of technology moves.fast.  technology that's valuable today could be worthless.in a couple years.  small companies are more at home in this.world, because they don't have layers of bureaucracy to.slow them down..also, technical advances tend to come from unorthodox approaches,.and small companies are less constrained by convention.big companies can develop technology.  they just can't do it.quickly.  their size makes them slow and prevents.them from rewarding employees for the extraordinary.effort required.  so in practice big companies only get to develop.technology in fields where large capital requirements prevent startups from.competing with them, like microprocessors, power plants,.or passenger aircraft.  and even in those fields they depend heavily.on startups for components and ideas.it's obvious that biotech or software startups exist to solve.hard technical problems, but.i think it will also be found to be true.in businesses that don't seem to be about technology.  mcdonald's,.for example, grew big by designing a system, the mcdonald's.franchise, that could then be reproduced at will all over the.face of the earth.  a mcdonald's franchise is controlled by rules.so precise that it is practically.a piece of software.  write once, run everywhere..ditto for wal-mart.  sam walton got rich not by being a.retailer, but by designing a new kind of store.use difficulty as a guide not just in selecting the overall.aim of your company, but also at decision points along the way..at viaweb one of our rules of thumb was run upstairs..suppose you are a little, nimble guy being chased by a big,.fat, bully.  you open a door and find yourself in a.staircase.  do you go up or down?  i say up.  the.bully can probably run downstairs as fast as you can..going upstairs his bulk will be more of a disadvantage..running upstairs is hard for you but even harder for him.what this meant in practice was that we deliberately sought.hard problems.  if there were two features we could add to our.software, both equally valuable in proportion to their difficulty,.we'd always take the harder one.  not just because it was.more valuable, but because it was harder..we delighted in forcing bigger, slower competitors.to follow us over difficult ground..like guerillas, startups prefer the difficult terrain of the.mountains, where the troops of the central government.can't follow.  i can remember times when we were just.exhausted after wrestling all day with some horrible technical.problem.  and i'd be delighted, because something that was.hard for us would be impossible for our competitors.this is not just a good way to run a startup.  it's what.a startup is..venture capitalists know about this and have a phrase for it:.barriers to entry.  if you go to a vc with a new.idea and ask him to invest in it, one of the first things.he'll ask is, how hard would this be for someone else to.develop?  that is, how much difficult ground.have you put between yourself and potential pursuers?.[7].and you had better have a convincing explanation of why.your technology would be hard to duplicate.  otherwise as.soon as some big company becomes aware of it, they'll make.their own, and with their brand name, capital, and.distribution clout, they'll take away your market overnight..you'd be like guerillas caught in the open field by regular.army forces.one way to put up barriers to entry is through patents..but patents may not provide much protection..competitors commonly find ways to work around a patent..and if they can't, they.may simply violate it and invite you to sue them..a big company is not afraid to be sued; it's an everyday thing.for them.  they'll make sure that suing them is expensive and.takes a long time..ever heard of philo farnsworth?  he invented.television.  the reason you've never.heard of him is that his company was not the one to make.money from it..[8].the company that did was rca, and.farnsworth's reward for his efforts was a decade of.patent litigation.here, as so often, the best defense is a good offense.  if.you can develop technology that's simply too hard for.competitors to duplicate, you don't need to rely on other.defenses.  start by picking a hard problem, and.then at every decision point, take the harder choice..[9]the catch(es)if it were simply a matter of working harder than.an ordinary employee and getting paid proportionately, it would.obviously be a good deal to start a startup.  up to a point it.would be more fun. i don't think many people.like the slow pace of big companies, the interminable meetings,.the water-cooler conversations, the clueless middle managers,.and so on.unfortunately there are a couple catches.  one is that you.can't choose the point on the curve that you want to inhabit..you can't decide, for example, that you'd like to work just.two or three times as hard, and get paid that much more.  when.you're running a startup, your competitors decide how.hard you work.  and they pretty much all make the same decision:.as hard as you possibly can.the other catch is that the payoff is only on average proportionate.to your productivity.  there is, as i said before, a large.random multiplier in the success of any company.  so in.practice the deal is not that you're 30 times as productive and get.paid 30 times as much.  it is that you're 30 times as productive,.and get paid between zero and a thousand times as much..if the mean is 30x, the median is probably zero..most startups tank, and not just the dogfood.portals we all heard about during.the internet bubble.  it's common for a startup.to be developing a genuinely good product, take slightly.too long to do it, run out of money, and have to shut down.a startup is like a mosquito.  a bear can absorb a hit and a crab.is armored against one, but a mosquito is designed for one thing:.to score.  no energy is wasted on defense.  the defense of mosquitos,.as a species, is that there are a lot of them, but this is little.consolation to the individual mosquito.startups, like mosquitos, tend to be an all-or-nothing proposition..and you don't generally know which of the two you're going to.get till the last minute..viaweb came close to tanking several times. our trajectory.was like a sine wave.  fortunately we got bought at.the top of the cycle, but it was damned close.   while we were.visiting yahoo in california to talk about selling the company.to them, we had to borrow a conference room to reassure.an investor who was about to back out of a new round of funding.that we needed to stay alive.the all-or-nothing aspect of startups was not something we wanted..viaweb's hackers were all extremely risk-averse..if there had been some way just to work super hard and get.paid for it, without having a lottery mixed in, we would have.been delighted.  we would have much preferred a 100% chance of.$1 million to a 20% chance of $10 million, even though.theoretically the second is worth twice as much.   unfortunately,.there is not currently any space in the business world where.you can get the first deal.the closest you can get is by.selling your startup in the early stages, giving up upside.(and risk) for a smaller but guaranteed payoff.  we had a.chance to do this, and stupidly, as we then thought, let it slip by..after that we became comically eager to sell..for the next year or so,.if anyone expressed the slightest curiosity about viaweb.we would try to sell them the company.  but there were no takers,.so we had to keep going.it would have been a bargain to.buy us at an early stage, but companies doing acquisitions are not.looking for bargains.  a company big enough to acquire.startups will be big enough to be fairly conservative, and.within the company the people in charge of acquisitions will.be among the more conservative, because they are likely to be.business school types who joined the company late..they would rather overpay for a safe choice.  so.it is easier to sell an established startup, even at a large.premium, than an early-stage one.get usersi think it's a good idea to get bought, if you can.  running a.business is different from growing one..it is just as well to let a big company take over once you reach.cruising altitude.  it's.also financially wiser, because selling allows you to diversify..what would you think of a financial advisor who put all his.client's assets into one volatile stock?how do you get bought?  mostly by doing the same things.you'd do if you didn't intend to sell the company.  being.profitable, for example.   but getting bought is also an art.in its own right, and one that we spent a lot of time trying.to master.potential buyers will.always delay if they can.  the hard part about getting.bought is getting them to act.  for most people, the most powerful motivator.is not the hope of gain, but the fear of loss.  for potential.acquirers, the most powerful motivator is the prospect that.one of their competitors will buy you.  this, as we found,.causes ceos to take red-eyes..the second biggest is the worry that, if they don't buy you.now, you'll continue to grow rapidly and will cost more to.acquire later, or even become a competitor.in both cases, what it all comes down to is users..you'd think that a company about to buy you would do a lot of.research and decide for themselves how valuable your technology.was.  not at all.  what they go by is the number of users you.have.in effect, acquirers assume the customers know who has the.best technology.  and this is not as stupid as it sounds.  users.are the only real proof that you've created wealth.  wealth is.what people want, and if people aren't using your software,.maybe it's not just because you're bad at marketing.  maybe it's.because you haven't made what they want.venture capitalists have a list of danger signs to watch out for..near the top is the company run by techno-weenies who are.obsessed with solving interesting technical problems, instead.of making users happy.  in a startup, you're not just trying to.solve problems.  you're trying to solve problems that.users care about.so i think you should make users the test, just as.acquirers do.  treat a startup as an optimization problem.in which performance is measured by number of users.  as anyone.who has tried to optimize software knows, the key is measurement..when you try to guess where your program is slow, and what would.make it faster, you almost always guess wrong.number of users may not be the perfect test, but it will.be very close.  it's what acquirers care about.  it's what.revenues depend on..it's what makes competitors unhappy..it's what impresses reporters, and potential.new users.  certainly it's a better test than your a priori.notions of what problems are important to solve, no matter how.technically adept you are.among other things, treating a startup as an optimization.problem will help you avoid another.pitfall that vcs worry about, and rightly-- taking a long time.to develop a product.  now we can recognize this as something.hackers already know to avoid: premature optimization.  get a version.1.0 out there as soon as you can.  until you have some users to.measure, you're optimizing based on guesses.the ball you need to keep your eye on here is the underlying.principle that wealth is what people want.  if you plan to get.rich by creating wealth, you have to know what people want..so few businesses really pay attention to making customers happy..how often do you walk into a store, or call a company on the.phone, with a feeling of dread in the back of your mind?.when you hear "your call is important to us, please stay on.the line," do you think, oh good, now everything will be all right?a restaurant can afford to serve the occasional burnt dinner..but in technology, you cook one thing and that's what everyone.eats.  so any difference between what people want and what.you deliver is multiplied..you please or annoy.customers wholesale.  the closer you can get to what they want,.the more wealth you generate.wealth and powermaking wealth is not the only way to get rich.  for most of.human history it has not even been the most common.  until.a few centuries ago,.the main sources of wealth were mines, slaves and serfs,.land, and cattle,.and the only ways to acquire these rapidly were by inheritance,.marriage, conquest, or confiscation..naturally wealth had a bad reputation.two things changed.  the first was the rule of law.  for most of the world's.history, if you did somehow accumulate a fortune, the ruler or his.henchmen.would find a way to steal it..but in medieval europe something new happened..a new class of merchants and manufacturers.began to collect in towns..[10].together they were able to withstand the local feudal.lord.  so.for the first time in our history, the bullies stopped stealing the.nerds' lunch money..this was naturally a great incentive,.and possibly indeed the main cause of the second big change,.industrialization.a great deal has been written about the causes of the industrial.revolution.  but surely a necessary, if not sufficient, condition.was that people who made fortunes be able to enjoy them in peace..[11].one piece of evidence is what happened to countries.that tried to return to the old model, like the soviet.union, and to a lesser extent britain under the labor.governments of the 1960s and early 1970s.  take away the incentive.of wealth, and technical innovation grinds to a halt.remember what a startup is, economically:.a way of saying, i want to work faster.  instead of accumulating.money slowly by being paid a regular wage for fifty years, i.want to get it over with as soon as possible.  so governments.that forbid you to accumulate wealth are in effect decreeing.that you work slowly.  they're willing to let you earn $3 million over.fifty years, but they're not willing to let you work so hard that.you can do it in two.  they are like.the corporate boss that you can't go to and say, i want to work.ten times as hard, so please pay me ten times a much..except this is not a boss you can escape by starting your own.company.the problem with working slowly is not just that technical.innovation happens slowly.  it's that it tends not to happen at all..it's only when you're deliberately looking for hard problems,.as a way to use speed to the greatest advantage, that you take.on this kind of project.  developing new technology is a.pain in the ass. it is, as edison said, one percent.inspiration and ninety-nine percent perspiration..without the incentive of wealth, no one wants to do it..engineers will work on sexy projects like fighter planes and moon.rockets for ordinary salaries, but more mundane technologies.like light bulbs or semiconductors have to be developed by entrepreneurs.startups.are not just something that happened in silicon valley in.the last couple decades.  since it became possible to.get rich by creating wealth, everyone who has done it has.used essentially the same recipe: measurement and leverage,.where measurement comes from working with a small.group, and leverage from developing new techniques..the recipe was the same in florence in 1200 as it is.in santa clara today.understanding this may help to answer an important question:.why europe grew so powerful..was it something about the geography of.europe?  was it that europeans are somehow racially superior?.was it their religion?  the answer (or at least.the proximate cause) may be that the.europeans.rode on the crest of a powerful new idea: allowing those who.made a lot of money to keep it.once you're allowed to do that,.people who want to get rich can do it by generating.wealth instead of stealing it..the resulting technological growth translates not only.into wealth but into military power.  the theory that led to.the stealth plane was developed by a soviet mathematician..but because the soviet union didn't have a computer industry,.it remained for them a theory;.they didn't have hardware capable of executing the calculations.fast enough to design an actual airplane.in that respect the cold war teaches the same lesson as.world war ii and, for that matter, most wars in recent history..don't let a ruling.class of warriors and politicians squash the entrepreneurs..the same recipe that makes individuals rich.makes countries powerful.  let the nerds keep their lunch.money, and you rule the world.notes[1].one valuable thing you tend to get only in startups is.uninterruptability.  different kinds of.work have different time quanta.  someone proofreading a.manuscript.could probably be interrupted every fifteen minutes.with little loss of productivity.  but the time quantum for.hacking is very long: it might take an hour just to load.a problem into your head.  so the.cost of having someone from personnel.call you about a form you forgot to fill out can be huge.this is why hackers give you such a baleful stare as they.turn from their screen to answer your question.  inside.their heads a giant house of cards is tottering.the mere possibility of being interrupted deters hackers.from starting hard projects.  this is why they.tend to work late at night, and why it's next to impossible.to write great software in a cubicle (except late at night).one great advantage of startups is that they don't yet have.any of the people who interrupt you.  there is no personnel.department, and thus no form nor anyone to call you about it.[2].faced with the idea that people working for startups might be.20 or 30 times as productive as those working for large companies,.executives at large companies will naturally wonder, how could.i get the people working for me to do that?  the answer is.simple: pay them to.internally most companies are run like communist states..if you believe in free markets, why not turn your company into one?hypothesis: a company will be maximally profitable when each.employee is paid in proportion to the wealth they generate.[3].until recently even governments sometimes didn't grasp the.distinction between money and wealth.  adam.smith (wealth of nations, v:i) mentions several.that tried to preserve their."wealth" by forbidding the export of gold or silver..but having more of the medium of exchange would not make.a country richer; if you have more money chasing the same.amount of material wealth, the only result is higher prices.[4].there are many senses of the word "wealth," not all of.them material.  i'm not trying to make a deep philosophical.point here about which.is the true kind.  i'm writing about one specific,.rather technical sense of the word "wealth."  what.people will give you money for..this is an interesting sort of wealth to study, because.it is the kind that prevents you from starving..and what people will give you money for depends on them,.not you.when you're starting a business,.it's easy to slide into thinking that customers.want what you do.  during the internet bubble i talked.to a woman who, because she liked the outdoors, was.starting an "outdoor portal." you know what.kind of business you should start if you like.the outdoors?  one to recover data from crashed hard disks.what's the connection?  none at all.  which is precisely my point..if you want.to create wealth (in the narrow technical sense of not.starving) then you should be especially skeptical about any.plan that centers on things you like doing..that is where your idea of what's valuable is least.likely to coincide with other people's.[5].in the average car restoration you probably do make everyone.else microscopically poorer, by doing a small amount of damage to.the environment.  while environmental costs should be taken.into account, they don't.make wealth a zero-sum game.  for example, if you repair.a machine that's broken because a part has come unscrewed,.you create wealth with no environmental cost.[5b].this essay was written before firefox.[6].many people feel confused and depressed in.their early twenties.  life seemed so much more fun in college..well, of course it was.  don't be fooled by the surface similarities..you've gone from guest to servant..it's possible to have fun in this new world..among other things, you now get to go behind the doors that say."authorized personnel only.".but the change is a shock at first, and all the worse.if you're not consciously aware of it.[7].when vcs asked us how long it would take another startup.to duplicate our software, we used to reply that they probably.wouldn't be able to at all. i think this made us seem naive,.or liars.[8].few technologies have one clear inventor.  so as.a rule, if you know the "inventor" of something.(the telephone, the assembly line, the airplane,.the light bulb, the transistor) it is because their.company made money from it, and the company's pr people worked.hard to spread the story.  if you don't know who invented.something (the automobile, the television, the computer,.the jet engine, the laser), it's because other companies.made all the money.[9].this is a good plan for life in general..if you have two choices, choose the harder..if you're trying to decide whether to go out running or.sit home and watch tv, go running..probably the reason this trick works so well is that.when you have two choices and one is harder, the.only reason you're even considering the other is laziness..you know in the back of your mind what's the right thing.to do, and this trick merely forces you to acknowledge it.[10].it is probably no accident that the middle class.first appeared in northern italy and the low countries,.where there were no strong central governments.   these two.regions were the richest of their time and became the twin.centers from which renaissance civilization radiated..if they no longer play that role, it is because.other places, like the united states, have been truer to the.principles they discovered.[11].it may indeed be a sufficient condition.  but if so, why didn't.the industrial revolution happen earlier?  two possible (and.not incompatible) answers: (a) it did..the industrial revolution was one in a series..(b) because in medieval towns, monopolies.and guild regulations initially slowed the development of new means.of production..comment on this essay.russian translationarabic translationspanish translation.you'll find this essay and 14 others in.hackers & painters.<eot><sot>the word "hacker".april 2004
to the popular press, "hacker" means someone who breaks.into computers.  among programmers it means a good programmer..but the two meanings are connected.  to programmers,."hacker" connotes mastery in the most literal sense: someone.who can make a computer do what he wants—whether the computer.wants to or not.to add to the confusion, the noun "hack" also has two senses.  it can.be either a compliment or an insult.  it's called a hack when.you do something in an ugly way.  but when you do something.so clever that you somehow beat the system, that's also.called a hack.  the word is used more often in the former than.the latter sense, probably because ugly solutions are more.common than brilliant ones.believe it or not, the two senses of "hack" are also.connected.  ugly and imaginative solutions have something in.common: they both break the rules.  and there is a gradual.continuum between rule breaking that's merely ugly (using.duct tape to attach something to your bike) and rule breaking.that is brilliantly imaginative (discarding euclidean space).hacking predates computers.  when he.was working on the manhattan project, richard feynman used to.amuse himself by breaking into safes containing secret documents..this tradition continues today..when we were in grad school, a hacker friend of mine who spent too much.time around mit had.his own lock picking kit..(he now runs a hedge fund, a not unrelated enterprise.)it is sometimes hard to explain to authorities why one would.want to do such things..another friend of mine once got in trouble with the government for.breaking into computers.  this had only recently been declared.a crime, and the fbi found that their usual investigative.technique didn't work.  police investigation apparently begins with.a motive.  the usual motives are few: drugs, money, sex,.revenge.  intellectual curiosity was not one of the motives on.the fbi's list.  indeed, the whole concept seemed foreign to.them.those in authority tend to be annoyed by hackers'.general attitude of disobedience.  but that disobedience is.a byproduct of the qualities that make them good programmers..they may laugh at the ceo when he talks in generic corporate.newspeech, but they also laugh at someone who tells them.a certain problem can't be solved..suppress one, and you suppress the other.this attitude is sometimes affected.  sometimes young programmers.notice the eccentricities of eminent hackers and decide to.adopt some of their own in order to seem smarter..the fake version is not merely.annoying; the prickly attitude of these posers.can actually slow the process of innovation.but even factoring in their annoying eccentricities,.the disobedient attitude of hackers is a net win.  i wish its.advantages were better understood.for example, i suspect people in hollywood are.simply mystified by.hackers' attitudes toward copyrights.  they are a perennial.topic of heated discussion on slashdot..but why should people who program computers.be so concerned about copyrights, of all things?partly because some companies use mechanisms to prevent.copying.  show any hacker a lock and his first thought is.how to pick it.  but there is a deeper reason that.hackers are alarmed by measures like copyrights and patents..they see increasingly aggressive measures to protect."intellectual property".as a threat to the intellectual.freedom they need to do their job..and they are right.it is by poking about inside current technology that.hackers get ideas for the next generation.  no thanks,.intellectual homeowners may say, we don't need any.outside help.  but they're wrong..the next generation of computer technology has.often—perhaps more often than not—been developed by outsiders.in 1977 there was no doubt some group within ibm developing.what they expected to be.the next generation of business computer.  they were mistaken..the next generation of business computer was.being developed on entirely different lines by two long-haired.guys called steve in a garage in los altos.  at about the.same time, the powers that be.were cooperating to develop the.official next generation operating system, multics..but two guys who thought multics excessively complex went off.and wrote their own.  they gave it a name that.was a joking reference to multics: unix.the latest intellectual property laws impose.unprecedented restrictions on the sort of poking around that.leads to new ideas. in the past, a competitor might use patents.to prevent you from selling a copy of something they.made, but they couldn't prevent you from.taking one apart to see how it worked.   the latest.laws make this a crime.  how are we.to develop new technology if we can't study current.technology to figure out how to improve it?ironically, hackers have brought this on themselves..computers are responsible for the problem.  the control systems.inside machines used to be physical: gears and levers and cams..increasingly, the brains (and thus the value) of products is.in software. and by this i mean software in the general sense:.i.e. data.  a song on an lp is physically stamped into the.plastic.  a song on an ipod's disk is merely stored on it.data is by definition easy to copy.  and the internet.makes copies easy to distribute.  so it is no wonder.companies are afraid.  but, as so often happens, fear has.clouded their judgement.  the government has responded.with draconian laws to protect intellectual property..they probably mean well. but.they may not realize that such laws will do more harm.than good.why are programmers so violently opposed to these laws?.if i were a legislator, i'd be interested in this.mystery—for the same reason that, if i were a farmer and suddenly.heard a lot of squawking coming from my hen house one night,.i'd want to go out and investigate.  hackers are not stupid,.and unanimity is very rare in this world..so if they're all squawking,.perhaps there is something amiss.could it be that such laws, though intended to protect america,.will actually harm it?  think about it.  there is something.very american about feynman breaking into safes during.the manhattan project.  it's hard to imagine the authorities.having a sense of humor about such things over.in germany at that time.  maybe it's not a coincidence.hackers are unruly.  that is the essence of hacking.  and it.is also the essence of americanness.  it is no accident.that silicon valley.is in america, and not france, or germany,.or england, or japan. in those countries, people color inside.the lines.i lived for a while in florence.  but after i'd been there.a few months i realized that what i'd been unconsciously hoping.to find there was back in the place i'd just left..the reason florence is famous is that in 1450, it was new york..in 1450 it was filled with the kind of turbulent and ambitious.people you find now in america.  (so i went back to america.)it is greatly to america's advantage that it is.a congenial atmosphere for the right sort of unruliness—that.it is a home not just for the smart, but for smart-alecks..and hackers are invariably smart-alecks.  if we had a national.holiday, it would be april 1st.  it says a great deal about.our work that we use the same word for a brilliant or a.horribly cheesy solution.   when we cook one up we're not.always 100% sure which kind it is.  but as long as it has.the right sort of wrongness, that's a promising sign..it's odd that people.think of programming as precise and methodical.  computers.are precise and methodical.  hacking is something you do.with a gleeful laugh.in our world some of the most characteristic solutions.are not far removed from practical.jokes.  ibm was no doubt rather surprised by the consequences.of the licensing deal for dos, just as the hypothetical."adversary" must be when michael rabin solves a problem by.redefining it as one that's easier to solve.smart-alecks have to develop a keen sense of how much they.can get away with.  and lately hackers.have sensed a change.in the atmosphere..lately hackerliness seems rather frowned upon.to hackers the recent contraction in civil liberties seems.especially ominous.  that must also mystify outsiders..why should we care especially about civil.liberties?  why programmers, more than.dentists or salesmen or landscapers?let me put the case in terms a government official would appreciate..civil liberties are not just an ornament, or a quaint.american tradition.  civil liberties make countries rich..if you made a graph of.gnp per capita vs. civil liberties, you'd notice a definite.trend.  could civil liberties really be a cause, rather.than just an effect?  i think so.  i think a society in which.people can do and say what they want will also tend to.be one in which the most efficient solutions win, rather than.those sponsored by the most influential people..authoritarian countries become corrupt;.corrupt countries become poor; and poor countries are weak..it seems to me there is.a laffer curve for government power, just as for.tax revenues.  at least, it seems likely enough that it.would be stupid to try the experiment and find out.  unlike.high tax rates, you can't repeal totalitarianism if it.turns out to be a mistake.this is why hackers worry.  the government spying on people doesn't.literally make programmers write worse code.  it just leads.eventually to a world in which bad ideas win.  and because.this is so important to hackers, they're especially sensitive.to it.  they can sense totalitarianism approaching from a.distance, as animals can sense an approaching.thunderstorm.it would be ironic if, as hackers fear, recent measures.intended to protect national security and intellectual property.turned out to be a missile aimed right at what makes.america successful.  but it would not be the first time that.measures taken in an atmosphere of panic had.the opposite of the intended effect.there is such a thing as americanness..there's nothing like living abroad to teach you that..and if you want to know whether something will nurture or squash.this quality, it would be hard to find a better focus.group than hackers, because they come closest of any group.i know to embodying it.  closer, probably,  than.the men running our government,.who for all their talk of patriotism.remind me more of richelieu or mazarin.than thomas jefferson or george washington.when you read what the founding fathers had to say for.themselves, they sound more like hackers.."the spirit of resistance to government,".jefferson wrote, "is so valuable on certain occasions, that i wish.it always to be kept alive."imagine an american president saying that today..like the remarks of an outspoken old grandmother, the sayings of.the founding fathers have embarrassed generations of.their less confident successors.  they remind us where we come from..they remind us that it is the people who break rules that are.the source of america's wealth and power.those in a position to impose rules naturally want them to be.obeyed.  but be careful what you ask for. you might get it.thanks to ken anderson, trevor blackwell, daniel giffin,.sarah harlin,  shiro kawai, jessica livingston, matz,.jackie mcdonough, robert morris, eric raymond, guido van rossum,.david weinberger, and.steven wolfram for reading drafts of this essay..(the image shows steves jobs and wozniak.with a "blue box.".photo by margret wozniak. reproduced by permission of steve.wozniak.)portuguese translationhebrew translationromanian translation.you'll find this essay and 14 others in.hackers & painters.<eot><sot>what you can't say.january 2004
.have you ever seen an old photo of yourself and.been embarrassed at the way you looked?   did we actually.dress like that?  we did.  and we had no idea how.silly we looked..it's the nature of fashion to be invisible, in the.same way the movement of the earth is invisible to all.of us riding on it.what scares me is that there are moral fashions too..they're just as arbitrary, and just as invisible to most people..but they're much more dangerous..fashion is mistaken for good design;.moral fashion is mistaken for good..dressing oddly gets you laughed at.  violating.moral fashions can get you fired, ostracized, imprisoned, or.even killed.if you could travel back in a time machine, one thing.would be true no matter where you went: you'd have to watch.what you said..opinions we consider harmless could have.gotten you in big trouble..i've already said at least one thing that would have gotten me in big.trouble in most of europe in the seventeenth century,.and did get galileo in big trouble when he said.it  that the earth moves. [1].it seems to be a constant throughout history: in every.period, people believed things that were just ridiculous,.and believed them so strongly that you would have gotten in.terrible trouble for saying otherwise.is our time any different?.to anyone who has read any amount of history, the answer is.almost certainly no.   it would be a remarkable coincidence if ours.were the first era to get everything just right.it's tantalizing to think we believe.things that people in the future will find ridiculous..what would someone coming back to visit us in a time machine.have to be careful not to say?.that's what i want to study here..but.i want to do more than just shock everyone with.the heresy du jour.  i want to find general.recipes for discovering what you can't say, in any era.the conformist testlet's start with a test:.do you have any opinions that you would be reluctant to express.in front of a group of your peers?if the answer is no,.you might want to stop and think about that.  if everything.you believe is something you're supposed to believe, could.that possibly be a coincidence?  odds are it isn't.  odds are.you just think what you're told.the other alternative would be that you independently considered.every question and came up with the exact same answers that.are now considered acceptable.  that seems unlikely, because.you'd also have to make the same mistakes.  mapmakers.deliberately put slight mistakes in their maps so they can.tell when someone copies them.  if another map has the same.mistake, that's very convincing evidence.like every other era in history, our moral map almost certainly.contains a few mistakes.  and anyone who makes the same mistakes.probably didn't do it by accident.  it would be.like someone claiming they had independently decided in.1972 that bell-bottom jeans were a good idea.if you believe everything you're supposed to now, how can.you be sure you wouldn't also have believed everything you.were supposed to if you had grown up among the plantation.owners of the pre-civil war south, or in germany in the 1930s  or.among the mongols in 1200, for that matter?  odds are you.would have.back in the era of terms like "well-adjusted," the idea.seemed to be that there was something wrong with.you if you thought things you didn't dare say out loud..this seems backward.  almost certainly, there.is something wrong with you if you don't think things.you don't dare say out loud.troublewhat can't we say?  one way to find these ideas is simply to look.at things people do say, and get in trouble for.  [2]of course, we're not just looking for things we can't say..we're looking for things we can't say that are true, or at least.have enough chance of being true that the question.should remain open.  but many of the.things people get in trouble for saying probably.do make it over this second, lower threshold.  no one.gets in trouble for saying.that 2 + 2 is 5, or that people in pittsburgh are ten feet tall..such obviously false statements might be treated as jokes, or.at worst as evidence of insanity, but they are not likely to.make anyone mad.  the statements that make people mad are.the ones they worry might be believed..i suspect the statements that make people maddest.are those they worry might be true.if galileo had said that people in padua were ten feet tall,.he would have been regarded as a harmless eccentric.  saying.the earth orbited the sun was another matter.  the church knew.this would set people thinking.certainly, as we look back on the past, this rule of thumb works.well.  a lot of the statements people got in trouble for seem.harmless now.  so it's likely that visitors from the.future would agree with at least some of the statements that.get people in trouble today.  do we have no galileos?  not.likely.to find them,.keep track of opinions that get.people in trouble, and start asking, could this be true?.ok, it may be heretical (or whatever modern equivalent), but.might it also be true?heresythis won't get us all the answers, though.  what if no one.happens to have gotten in trouble for a particular idea yet?.what if some idea would be so radioactively controversial that.no one would dare express it in public?   how can we find these too?another approach is to follow that word, heresy.  in every period.of history, there seem to have been labels that got applied to.statements to shoot them down before anyone had a chance to ask.if they were true or not.  "blasphemy", "sacrilege", and "heresy".were such.labels for a good part of western history, as in more recent times."indecent", "improper", and "unamerican" have been.   by now these.labels have lost their sting.  they always do..by now they're mostly used ironically..but in their time,.they had real force.the word "defeatist", for example, has no particular political.connotations now..but in germany in 1917 it was a weapon, used by ludendorff in.a purge of those who favored a negotiated peace..at the start of world war ii it was used.extensively by churchill and his supporters to silence their.opponents..in 1940, any argument against churchill's aggressive policy was "defeatist"..was it right or wrong?  ideally, no one got far enough to ask.that..we have such labels today, of course, quite a lot of them,.from the all-purpose "inappropriate" to the dreaded "divisive.".in any period, it should be easy to figure out what such labels are,.simply by looking at what people call ideas they disagree.with besides untrue.  when a politician says his opponent is.mistaken, that's a straightforward criticism, but when he.attacks a statement as "divisive" or "racially insensitive".instead of arguing that it's false, we should start paying.attention.so another way to figure out which of our taboos future generations.will laugh at is to start with the.labels.  take a label  "sexist", for example  and try to think.of some ideas that would be called that.  then for each ask, might.this be true?just start listing ideas at random?  yes, because they.won't really be random.  the ideas that come to mind first.will be the most plausible ones.  they'll be things you've already.noticed but didn't let yourself think.in 1989 some clever researchers tracked.the eye movements of radiologists as they scanned chest images for.signs of lung cancer. [3]  they found that even when the radiologists.missed a cancerous lesion, their eyes had usually paused at the site of it..part of their brain knew there was something there; it just.didn't percolate all the way up into conscious knowledge..i think many interesting heretical thoughts are already mostly.formed in our minds.  if we turn off our self-censorship.temporarily, those will be the first to emerge.time and spaceif we could look into the future it would be obvious which.of our taboos they'd laugh at..we can't do that, but we can do something almost as good: we can.look into the past.  another way to figure out what we're.getting wrong is to look at what used to be acceptable.and is now unthinkable.changes between the past and the present sometimes do represent.progress.  in a field like physics,.if we disagree with past generations it's because we're.right and they're wrong.  but this becomes rapidly less true as.you move away from the certainty of the hard sciences.  by the time.you get to social questions, many changes are just fashion..the age of consent fluctuates like hemlines.we may imagine that we are a great deal smarter and more virtuous than.past generations, but the more history you read, the less likely.this seems.  people in past times were much like us.  not heroes,.not barbarians.  whatever their ideas were, they were ideas.reasonable people could believe.so here is another source of interesting heresies.  diff present.ideas against those of various past cultures, and see what you.get. [4].some will be.shocking by present standards.  ok, fine; but which might also be true?you don't have to look into the past to find big differences..in our own time, different societies have wildly varying ideas.of what's ok and what isn't..so you can try diffing other cultures' ideas against ours as well..(the best way to do that is to visit them.).any idea that's considered harmless in a significant.percentage of times and places, and yet is taboo in ours,.is a  candidate for something we're mistaken.about.for example, at the high water mark of political correctness.in the early 1990s, harvard distributed to its.faculty and staff a brochure saying, among other things, that it.was inappropriate to compliment a colleague or student's.clothes.  no more "nice shirt.".i think this principle is rare among the world's cultures, past or present..there are probably more where it's considered especially.polite to compliment someone's clothing than where it's considered.improper..odds are this is, in a mild form, an example of one of.the taboos a visitor from the future would.have to be careful to avoid if he happened to set his time machine for.cambridge, massachusetts, 1992. [5]prigsof course, if they have time machines in the future they'll.probably have a separate reference manual just for cambridge..this has always been a fussy place, a town of i dotters and.t crossers, where you're liable to get both your grammar and.your ideas corrected in the same conversation.   and that.suggests another way to find taboos.  look for prigs,.and see what's inside their heads.kids' heads are repositories of all our taboos..it seems fitting to us that kids' ideas should be bright and clean..the picture we give them of the world is.not merely simplified, to suit their developing minds,.but sanitized as well, to suit our.ideas of what kids ought to think. [6]you can see this on a small scale in the matter of.dirty words.  a lot of my friends are starting to have children.now, and they're all trying.not to use words like."fuck" and "shit" within baby's hearing, lest baby start using.these words too..but these.words are part of the language, and adults use them all the.time.  so parents are giving their kids an inaccurate idea of.the language by not using.them.  why do they do this?  because they don't think it's.fitting that kids should use the whole language.  we like.children to seem innocent. [7]most adults, likewise, deliberately give kids a misleading.view of the world..one of the most obvious.examples is santa claus.  we think it's cute for little kids to.believe in santa claus.  i myself think it's cute for little.kids to believe in santa claus.  but one wonders, do we tell.them this stuff for their sake, or for ours?i'm not arguing for or against this idea here.  it is probably.inevitable that parents should want to dress up their kids'.minds in cute little baby outfits.  i'll probably do it myself..the important thing for our purposes is that, as a result,.a well brought-up teenage kid's brain is a more.or less complete collection of all our taboos  and in mint.condition, because they're untainted by experience..whatever we think that will later turn out to be ridiculous,.it's almost certainly inside that head.how do we get at these ideas?  by the following thought experiment..imagine a kind of latter-day conrad character.who has worked for a time as a mercenary in africa, for a time.as a doctor in nepal, for a time as the manager of a.nightclub in miami.  the specifics don't matter  just.someone who has.seen a lot.  now imagine comparing what's inside this guy's head.with what's inside the head.of a well-behaved sixteen year old girl from.the suburbs.  what does he think that.would shock her?.he knows the world; she knows, or at least embodies, present.taboos.  subtract one from the other, and the result is what.we can't say..mechanismi can think of one more way to figure out what we can't.say: to look at how taboos are created.   how do moral.fashions arise, and why are they adopted?.if we can understand this mechanism, we.may be able to see it at work in our own time.moral fashions don't seem to be created the way ordinary.fashions are.  ordinary fashions seem to arise by accident when.everyone imitates the whim of some influential person..the fashion for broad-toed shoes in.late fifteenth century europe began because charles viii of.france had six toes on one foot.  the fashion for the.name gary began when the actor frank cooper adopted the name.of a tough mill town in indiana.  moral fashions more often.seem to be created deliberately.  when there's something we.can't say, it's often because some group doesn't want us to.the prohibition will be strongest when the group is nervous..the irony of galileo's situation was that he got in trouble.for repeating copernicus's ideas.  copernicus himself didn't..in fact, copernicus was a canon of a cathedral, and dedicated his.book to the pope.  but by galileo's time the church was in.the throes of the counter-reformation and was much more.worried about unorthodox ideas.to launch a taboo, a group has to be poised halfway between.weakness and power.  a confident group doesn't need taboos.to protect it.  it's not considered improper to.make disparaging remarks about americans, or the english..and yet a group has to be powerful enough to enforce a.taboo.  coprophiles, as of this writing, don't seem to be.numerous or energetic enough to have had their.interests promoted to a lifestyle.i suspect the biggest source of moral taboos will turn out to.be power struggles in which one side only barely has.the upper hand.  that's where you'll find a group.powerful enough to enforce taboos, but weak enough to need them.most struggles, whatever they're really about, will be cast.as struggles between competing ideas..the english reformation was at bottom a struggle for wealth and power,.but it ended up being.cast as a struggle to preserve the souls.of englishmen from the corrupting influence of rome..it's easier to get people to fight for an idea..and whichever side wins, their.ideas will also be considered to have triumphed, as if god.wanted to signal his agreement by selecting that side as the victor.we often like to think of world war ii as a triumph.of freedom over totalitarianism.  we conveniently forget that.the soviet union was also one of the winners.i'm not saying that struggles are never about ideas,.just that they will always be made to seem to be about.ideas, whether they are or not.   and just as there is nothing.so unfashionable as the last, discarded fashion, there is.nothing so wrong as the principles of the most recently.defeated opponent..representational art is only now.recovering from the approval of both hitler and stalin. [8]although moral fashions tend to arise from different sources.than fashions in clothing, the mechanism of their adoption seems.much the same.  the early adopters will be driven by ambition:.self-consciously cool people who want to distinguish themselves.from the common herd.  as the fashion becomes established they'll.be joined by a second, much larger group, driven by fear. [9] this.second group adopt the fashion not because they want to stand.out but because they are afraid of standing out.so if you want to figure out what we can't say, look at the.machinery of fashion and try to predict what it would make.unsayable.  what groups are powerful but nervous, and what.ideas would they like to suppress?  what ideas were tarnished by.association when they ended up on the losing side of a recent.struggle?  if a self-consciously cool person wanted to differentiate.himself from preceding fashions (e.g. from his parents),.which of their ideas would he tend to reject?.what are conventional-minded people afraid of saying?this technique won't find us all the things we can't say..i can think of some that aren't the result of.any recent struggle. many of our taboos are rooted.deep in the past.  but this approach, combined with the.preceding four, will turn up a good number of unthinkable.ideas.whysome would ask, why would one want to do this?  why deliberately.go poking around among nasty, disreputable ideas?  why look.under rocks?i do it, first of all, for the same reason i did look under.rocks as a kid: plain curiosity.  and i'm especially curious about.anything that's forbidden.  let me see and decide for myself.second, i do it because i don't like the idea of being mistaken..if, like other eras, we believe things that will later seem ridiculous,.i want to know what they are so that i, at least, can avoid.believing them.third, i do it because it's good for the brain.  to do good work.you need a brain that can go anywhere.  and you especially need a.brain that's in the habit of going where it's not supposed to.great work tends to grow out of ideas.that others have overlooked, and no idea is so overlooked as one that's.unthinkable..natural selection, for example..it's so simple.  why didn't anyone think of it before?  well,.that is all too obvious.  darwin himself was careful to tiptoe.around the implications of his theory.  he wanted to spend his.time thinking about biology, not arguing with people who accused.him of being an atheist.in the sciences, especially, it's a great advantage to be able to.question assumptions..the m.o. of scientists, or at least of the.good ones, is precisely that: look for places where.conventional wisdom is broken, and then try to pry apart the.cracks and see what's underneath.  that's where new theories come.from.a good scientist, in other words, does not merely ignore.conventional wisdom, but makes a special effort to break it..scientists go looking for trouble..this should be the m.o. of any scholar, but.scientists seem much more willing to look under rocks. [10]why?  it could.be that the scientists are simply smarter; most physicists could,.if necessary, make it through a phd program in french literature,.but few professors of french literature could make it through.a phd program in physics.  or it could be because it's clearer.in the sciences whether theories are true or false, and this.makes scientists bolder.  (or it could be that, because it's.clearer in the sciences whether theories are true or false, you.have to be smart to get jobs as a scientist, rather than just a.good politician.)whatever the reason, there seems a clear correlation between.intelligence and willingness to consider shocking ideas..this isn't just because smart people actively work to find holes in.conventional thinking.  i think conventions also have.less hold over them to start with..you can see that in the.way they dress.it's not only in the sciences that heresy pays off..in any competitive field, you can.win big by seeing things that others daren't..and in every.field there are probably heresies few dare utter.  within.the us car industry there is a lot of hand-wringing now.about declining market share..yet the cause is so obvious that any observant outsider could.explain it in a second: they make bad cars.  and they have for.so long that by now the us car brands are antibrands  something.you'd buy a car despite, not because of.  cadillac stopped.being the cadillac of cars in about 1970.  and yet i suspect.no one dares say this. [11]  otherwise these companies would have.tried to fix the problem.training yourself to think unthinkable thoughts has advantages.beyond the thoughts themselves.  it's like stretching..when you stretch before running, you put your body into positions.much more extreme.than any it will assume during the run..if you can think things.so outside the box that they'd make people's hair stand on end,.you'll have no trouble with the small trips outside the box that.people call innovative.pensieri strettiwhen you find something you can't say, what do you do with it?.my advice is, don't say it.   or at least, pick your battles.suppose in the future there is a movement to ban.the color yellow. proposals to paint anything yellow are.denounced as "yellowist", as is anyone suspected of liking the.color.  people who like orange are tolerated but viewed with.suspicion.  suppose you realize there is nothing.wrong with yellow.  if you go around saying this, you'll be.denounced as a yellowist too, and you'll find yourself having a.lot of arguments with anti-yellowists..if your aim in life is to rehabilitate the color yellow, that may.be what you want..but if you're mostly interested in.other questions, being labelled as a yellowist will just be.a distraction.  argue with idiots, and you become an idiot.the most important thing is to be able to think what you.want, not to say what you want.  and if you feel you have to.say everything you think, it may inhibit you from thinking.improper thoughts.  i think it's better to follow the opposite.policy.  draw a sharp line between your thoughts and your.speech.  inside your head, anything is allowed..within my head i make a point of encouraging the most outrageous.thoughts i can imagine..but, as in.a secret society, nothing that happens within the building.should be told to outsiders.  the first rule of fight.club is, you do not talk about fight club.when milton was going to visit italy in the 1630s,.sir henry wootton, who had been ambassador to venice, told him.his motto should be."i pensieri stretti & il viso sciolto."  closed thoughts.and an open face.  smile at everyone, and don't tell them.what you're thinking.   this was wise advice..milton was an argumentative fellow, and the inquisition.was a bit restive at that time.  but i think the difference.between milton's situation and ours is only a matter of.degree..every era has its heresies, and if you don't get imprisoned for them you.will at least get in enough trouble that it becomes a complete.distraction.i admit it seems cowardly to keep quiet..when i read about the harassment to which.the scientologists subject their critics [12], or that pro-israel groups.are "compiling dossiers" on those who speak out against israeli.human rights abuses [13], or about people being sued for.violating the dmca [14], part of me wants.to say, "all right, you bastards, bring it on.".the problem is, there are so many things you can't say..if you said them all you'd.have no time left for your real work..you'd have to turn into noam chomsky.  [15]the trouble with keeping your thoughts secret, though,.is that you lose the advantages of discussion.  talking.about an idea leads to more ideas..so the optimal plan, if you can manage it,.is to have a few trusted.friends you can speak openly to.  this is not just a.way to develop ideas; it's also a good.rule of thumb for choosing friends.  the people.you can say heretical things to without getting jumped on.are also the most interesting to know.viso sciolto?i don't think we need.the viso sciolto so much as the pensieri stretti..perhaps the best policy is to make it plain that you don't.agree with whatever zealotry is current in your time, but.not to be too specific about what you disagree with.  zealots.will try to draw you out, but you don't have to answer them..if they try to force you to treat a question on their.terms by asking "are you with us or against us?" you can.always just answer "neither".better still, answer "i haven't decided.".that's what larry summers.did when a group tried to put.him in this position.  explaining himself later, he said."i don't do litmus tests." [16].a lot of the.questions people get hot about are actually quite complicated..there is no prize for getting the answer quickly.if the anti-yellowists seem to be getting out of hand and.you want to fight back, there are ways.to do it without getting yourself accused of being a.yellowist.  like skirmishers in.an ancient army, you want to avoid directly engaging the.main body of the enemy's troops.  better to harass them.with arrows from a distance.one way to do this is to ratchet the debate up one level of.abstraction..if you argue against censorship in general, you can avoid being.accused of whatever heresy is contained.in the book or film that someone is trying to censor..you can attack labels with meta-labels: labels that refer.to the use of labels to prevent discussion..the spread of the term "political correctness" meant the beginning of.the end of political correctness, because it enabled one to.attack the phenomenon as a whole without being accused of any.of the specific heresies it sought to suppress.another way to counterattack is with metaphor.  arthur miller.undermined the house un-american activities committee.by writing a play, "the crucible," about the salem witch trials..he never referred directly to the committee and so gave them.no way to reply..what could huac do, defend the salem witch trials?  and yet.miller's metaphor stuck so well that to this day the activities.of the committee are often described as a "witch-hunt."best of all, probably, is humor.  zealots, whatever their.cause, invariably lack a sense of humor..they can't reply in kind to jokes..they're as unhappy on the territory of.humor as a mounted knight on a skating rink..victorian prudishness, for example, seems to have been defeated.mainly by treating it as a joke.  likewise its reincarnation as.political correctness.."i am glad that i.managed to write 'the crucible,'" arthur miller wrote,."but looking back i have often wished i'd.had the temperament to do an absurd comedy, which is what the.situation deserved." [17]abqa dutch friend says.i should use holland as an example of a tolerant society..it's true they have a long tradition of.comparative open-mindedness.  for centuries the low countries were the place.to go to say things you couldn't say anywhere else,.and this helped to make the region a center of scholarship and industry.(which have been closely tied for longer than most people realize)..descartes, though claimed by the french, did much of his thinking in.holland.and yet, i wonder.  the dutch seem to live their lives up to their.necks in rules and regulations.  there's so much you can't do there;.is there really nothing.you can't say?certainly the fact that they value open-mindedness is no guarantee..who thinks they're not open-minded?  our hypothetical prim miss from.the suburbs thinks she's open-minded.  hasn't she been.taught to be?  ask anyone, and they'll say the same thing: they're.pretty open-minded, though they draw the line at things that are really.wrong.  (some tribes.may avoid "wrong" as.judgemental, and may instead use a more neutral sounding euphemism.like "negative" or "destructive".)when people are bad at math, they know it, because they get the.wrong answers on tests.  but when people are bad at open-mindedness.they don't know it.  in fact they tend to think the opposite..remember, it's the nature of fashion to be invisible.  it wouldn't.work otherwise.  fashion doesn't.seem like fashion to someone in the grip of it.  it just seems like.the right thing to do.  it's only by looking from a distance that.we see oscillations in people's idea of the right thing to do, and.can identify them as fashions.time gives us such distance for free.  indeed, the arrival of new.fashions makes old fashions easy to see, because they.seem so ridiculous by contrast.  from one end of a pendulum's.swing, the other end seems especially far away.to see fashion in your own time, though, requires a conscious effort..without time to give you distance, you have to create distance yourself..instead of being part of the mob, stand.as far away from it as you can and watch what it's.doing.  and pay especially close attention whenever an idea is being.suppressed.  web filters for children and employees often ban.sites containing pornography, violence, and hate speech.  what.counts as pornography and violence?  and what, exactly, is."hate speech?" this sounds like a phrase out of 1984.labels like that are probably the biggest external clue..if a statement is false,.that's the worst thing you can say about it.  you don't.need to say that it's heretical.  and if it isn't false, it.shouldn't be suppressed.  so when you see statements being.attacked as x-ist or y-ic (substitute your current values of.x and y), whether in 1630 or 2030, that's a sure sign that.something is wrong.  when you hear such labels being used,.ask why.especially if you hear yourself using them.  it's not just.the mob you need to learn to watch from a distance.  you need to be.able to watch your own thoughts from a distance.  that's not.a radical idea, by the way; it's the main difference between.children and adults.  when a child gets angry because he's.tired, he doesn't know what's happening.  an adult can.distance himself enough from the.situation to say "never mind, i'm just tired."  i don't.see why one couldn't, by a similar process, learn to.recognize and discount the effects of moral fashions.you have to take that extra step if you want to think clearly..but it's harder, because now you're working against social customs.instead of with them.  everyone encourages you to grow up to the.point where you can discount your own bad moods.  few encourage.you to continue to the point where you can discount society's bad.moods.how can you see the wave, when you're the water?  always be.questioning.  that's the only defence.  what can't you say?  and why?notesthanks to sarah harlin, trevor blackwell, jessica livingston,.robert morris, eric raymond and bob van der zwaan for reading drafts of this.essay, and to lisa randall, jackie mcdonough, ryan stanley and joel rainey.for conversations about heresy..needless to say they bear no blame for opinions.expressed in it, and especially for opinions not.expressed in it.re: what you can't saylabelsjapanese translationfrench translationgerman translationdutch translationromanian translationhebrew translationturkish translationchinese translationbuttonsa civic duty to annoythe perils of obediencealiens cause global warminghays codestratagem 32conspiracy theoriesmark twain: corn-pone opinionsa blacklist for "excuse makers"what you can't say will hurt you<eot><sot>filters that fight back.august 2003
.we may be able to improve the accuracy of bayesian spam filters.by having them follow links to see what's.waiting at the other end.  richard jowsey of.death2spam now does.this in borderline cases, and reports that it works well.why only do it in borderline cases?  and why only do it once?as i mentioned in will filters kill spam?,.following all the urls in.a spam would have an amusing side-effect.  if popular email clients.did this in order to filter spam, the spammer's servers.would take a serious pounding.  the more i think about this,.the better an idea it seems.  this isn't just amusing; it.would be hard to imagine a more perfectly targeted counterattack.on spammers.so i'd like to suggest an additional feature to those.working on spam filters: a "punish" mode which,.if turned on, would spider every url.in a suspected spam n times, where n could be set by the user. [1]as many people have noted, one of the problems with the.current email system is that it's too passive.  it does.whatever you tell it.  so far all the suggestions for fixing.the problem seem to involve new protocols.  this one.wouldn't.if widely used, auto-retrieving spam filters would make.the email system rebound.  the huge volume of the.spam, which has so far worked in the spammer's favor,.would now work against him, like a branch snapping back in.his face.   auto-retrieving spam filters would drive the.spammer's.costs up,.and his sales down:  his bandwidth usage.would go through the roof, and his servers would grind to a.halt under the load, which would make them unavailable.to the people who would have responded to the spam.pump out a million emails an hour, get a.million hits an hour on your servers..we would want to ensure that this is only done to.suspected spams.  as a rule, any url sent to millions of.people is likely to be a spam url, so submitting every http.request in every email would work fine nearly all the time..but there are a few cases where this isn't true: the urls.at the bottom of mails sent from free email services like.yahoo mail and hotmail, for example.to protect such sites, and to prevent abuse, auto-retrieval.should be combined with blacklists of spamvertised sites..only sites on a blacklist would get crawled, and.sites would be blacklisted.only after being inspected by humans. the lifetime of a spam.must be several hours at least, so.it should be easy to update such a list in time to.interfere with a spam promoting a new site. [2]high-volume auto-retrieval would only be practical for users.on high-bandwidth.connections, but there are enough of those to cause spammers.serious trouble.   indeed, this solution neatly.mirrors the problem.  the problem with spam is that in.order to reach a few gullible people the spammer sends.mail to everyone.  the non-gullible recipients.are merely collateral damage.  but the non-gullible majority.won't stop getting spam until they can stop (or threaten to.stop) the gullible.from responding to it.  auto-retrieving spam filters offer.them a way to do this.would that kill spam?  not quite.  the biggest spammers.could probably protect their servers against auto-retrieving.filters.  however, the easiest and cheapest way for them.to do it would be to include working unsubscribe links in.their mails.  and this would be a necessity for smaller fry,.and for "legitimate" sites that hired spammers to promote.them.  so if auto-retrieving filters became widespread,.they'd become auto-unsubscribing filters.in this scenario, spam would, like os crashes, viruses, and.popups, become one of those plagues that only afflict people.who don't bother to use the right software..notes[1] auto-retrieving filters will have to follow redirects,.and should in some cases (e.g. a page that just says."click here") follow more than one level of links..make sure too that.the http requests are indistinguishable from those of.popular web browsers, including the order and referrer.if the response.doesn't come back within x amount of time, default to.some fairly high spam probability.instead of making n constant, it might be a good idea to.make it a function of the number of spams that have been.seen mentioning the site.  this would add a further level of.protection against abuse and accidents.[2] the original version of this article used the term."whitelist" instead of "blacklist".  though they were.to work like blacklists, i preferred to call them whitelists.because it might make them less vulnerable to legal attack..this just seems to have confused readers, though.there should probably be multiple blacklists.  a single point.of failure would be vulnerable both to attack and abuse..thanks to brian burton, bill yerazunis, dan giffin,.eric raymond, and richard jowsey for reading drafts of this.ffb faqjapanese translationa perl ffblycos ddos@home<eot><sot>hackers and painters.may 2003
(this essay is derived from a guest lecture at harvard, which incorporated.an earlier talk at northeastern.)when i finished grad school in computer science i went.to art school to study painting.  a lot of people seemed surprised.that someone interested in computers would also be interested in painting..they seemed to think that.hacking and painting were very different kinds of work-- that.hacking was cold, precise, and methodical, and that.painting was the frenzied expression of some primal urge.both of these images are wrong.  hacking and painting have a.lot in common.  in fact, of all the different types of people i've.known, hackers and painters are among the most alike.what hackers and painters have in common is that they're.both makers.  along with composers, architects, and writers,.what hackers and painters are trying to do is make good things..they're not doing research per se, though if in the course of.trying to make good things they discover some new technique,.so much the better.i've never liked the term "computer science."  the main.reason i don't like it is that there's no such thing..computer science is a.grab bag of tenuously related areas thrown together.by an accident of history, like yugoslavia..at one end you have people who are really mathematicians,.but call what they're doing computer science so they can get darpa grants..in the middle you have people working on.something like the natural history of computers-- studying the.behavior of algorithms for routing data through.networks, for example.  and then at the other extreme you.have the hackers, who are trying to.write interesting software, and for whom computers are just a.medium of expression, as concrete is for architects or.paint for painters.  it's as if.mathematicians, physicists, and architects all had to be in.the same department.sometimes what the hackers do is called "software engineering,".but this term is just as misleading..good software designers are no more engineers than architects are..the border between architecture and engineering is not sharply.defined, but it's there..it falls between what and how: architects decide what to do,.and engineers figure out how to do it.what and how should not be kept too separate.  you're.asking for trouble if you try to decide what to do without.understanding how to do it..but hacking can certainly be more than just deciding how to.implement some spec.  at its best, it's creating the spec-- though.it turns out the best way to do that is to implement it.perhaps one day."computer science" will, like yugoslavia, get broken up into its.component parts.  that might be a good thing.  especially if it.meant independence for my native land, hacking.bundling all these different types of work together in one.department may be convenient administratively, but it's confusing.intellectually. that's the other reason i don't like the name."computer science."  arguably the people in the middle are doing.something like an experimental science.  but the people at either.end, the hackers and the mathematicians, are not actually doing science.the mathematicians don't seem bothered by this.  they happily.set to work proving theorems like the other mathematicians.over in the math department, and probably soon stop noticing.that the building they work in says ``computer science'' on the.outside.  but for the hackers this label is a problem..if what they're doing is called science, it makes them feel they.ought to be acting scientific..so instead of doing what they really want to do, which is.to design beautiful software, hackers in universities and.research labs feel they ought to be writing research papers.in the best case, the papers are just a formality.  hackers write.cool software, and then write a paper about it, and the paper.becomes a proxy for the achievement represented by the software..but often this mismatch causes problems.  it's easy to.drift away from building beautiful things toward building ugly.things that make more suitable subjects for research papers.unfortunately, beautiful things don't always make the.best subjects for papers..number one, research must be original-- and.as anyone who has written a phd dissertation knows, the way to.be sure that you're exploring virgin territory is to stake.out a piece of ground that no one wants.  number two, research must be.substantial-- and awkward systems yield meatier papers,.because you can write about the obstacles you have to overcome.in order to get things done.  nothing yields meaty problems like.starting with the wrong assumptions.  most of ai is an example.of this rule; if you assume that knowledge can be represented.as a list of predicate logic expressions whose arguments represent.abstract concepts, you'll have a lot of.papers to write about how to make this work.  as ricky ricardo.used to say, "lucy, you got a lot of explaining to do."the way to create something beautiful is often to make subtle.tweaks to something that already exists, or to combine existing.ideas in a slightly new way.  this kind of work is hard to.convey in a research paper.so why do universities and research labs continue to judge.hackers by publications?.for the same reason that "scholastic aptitude".gets measured by simple-minded standardized tests, or.the productivity of programmers gets measured in lines of code..these tests.are easy to apply, and there is nothing so tempting as an easy test.that kind of works.measuring what hackers are actually trying to do, designing.beautiful software, would be much more difficult.  you need.a good sense of design to judge.good design.  and.there is no correlation, except possibly.a negative.one, between people's ability to recognize good.design and their confidence that they can.the only external test is time.  over time, beautiful.things tend to thrive, and ugly.things tend to get discarded.  unfortunately, the amounts of time.involved can be longer than human lifetimes.  samuel johnson.said it took a hundred years for a writer's reputation to.converge.  you have to wait for the writer's.influential friends to die, and then for all their followers.to die.i think hackers just have to resign themselves to having a large random.component in their reputations.  in this they are no different.from other makers.  in fact, they're lucky by comparison..the influence of fashion is not nearly so great in hacking as it.is in painting.there are worse things than having people misunderstand your.work.  a worse danger is that you.will yourself misunderstand your work.  related fields are.where you go looking for ideas.  if you find yourself in the computer science.department, there is a natural temptation to believe, for example,.that hacking is the applied version of what theoretical computer.science is the theory of.   all.the time i was in graduate school i had an uncomfortable feeling.in the back of my mind that i ought to know more theory,.and that it was very remiss of me to have forgotten all that.stuff within three weeks of the final exam.now i realize i was.mistaken.  hackers need to understand the theory of computation.about as much as painters need to understand paint chemistry..you need to know how to calculate time and.space complexity and about.turing completeness.  you might also want to remember at.least the concept of a state machine, in case you have to write.a parser or a regular expression library.  painters in fact.have to remember a good deal more about paint chemistry than.that.i've found that the best sources of ideas.are not the other fields that have the word "computer" in.their names, but the other fields inhabited by makers..painting has been a much richer source of ideas than the.theory of computation.for example, i was taught in college.that one ought to figure out a program.completely on paper.before even going near a computer.  i found that i did not.program this way.  i found that i liked to program.sitting in front of a computer, not a piece of paper.  worse.still, instead of patiently writing out a complete program.and assuring myself it was correct, i tended to just spew.out code that was hopelessly broken, and gradually beat it into.shape.  debugging, i was taught, was a kind of final pass where.you caught typos and oversights.  the way i worked, it.seemed like programming consisted of debugging.for a long time i felt bad about this, just as i once.felt bad that i didn't hold my pencil the way they taught me.to in elementary school..if i had only looked over at.the other makers, the painters or the architects, i would.have realized that there was a name for what i was doing:.sketching.  as far as i can tell, the.way they taught me to program in college was all wrong..you should figure out programs as you're writing them,.just as writers and painters and architects do.realizing this has real implications for software design..it means that a programming language should, above all, be.malleable.  a programming language is for.thinking of.programs, not for expressing programs you've already thought.of.  it should be a pencil, not a pen.  static typing would.be a fine idea if people actually did write programs the way.they taught me to in college.  but that's not how any of the.hackers i know write programs.  we need a language that lets us.scribble and smudge and smear, not a language where you have.to sit with a teacup of types balanced on your knee and make.polite conversation with a strict old aunt of a compiler.while we're on the subject of static typing, identifying with.the makers will save us from another problem that afflicts.the sciences: math envy.  everyone in the sciences.secretly believes that mathematicians are smarter than they are..i think mathematicians also believe this.  at any rate,.the result is that scientists tend to make their.work look as mathematical as possible.  in a field like.physics this probably doesn't do much harm, but the further you.get from the natural sciences, the more of a problem it.becomes.a page of formulas just looks so impressive..(tip: for extra impressiveness, use greek variables.)  and.so there is a great temptation to work on problems you.can treat formally, rather than problems that are, say,.important.if hackers identified with other makers, like writers and.painters, they wouldn't feel tempted to do.this.  writers and painters don't suffer from math envy..they feel as if they're doing something completely unrelated..so are hackers, i think.if universities and research labs keep hackers from doing.the kind of work they want to do,.perhaps the place for them is in companies..unfortunately, most companies won't let hackers do what they.want either.  universities and research labs force hackers.to be scientists, and companies force them to be engineers.i only discovered this myself quite recently.  when yahoo bought.viaweb, they asked me what i wanted to do.  i had never.liked the business side very much, and said that i just wanted to.hack.  when i got to yahoo, i found that what hacking meant.to them was implementing software, not designing it.  programmers.were seen as technicians who translated the visions (if.that is the word) of product managers into code.this seems to be the.default plan in big companies.  they do it because.it decreases the standard deviation of the outcome..only a small percentage of hackers can actually design software,.and it's hard for the.people running a company to pick these out.  so instead of.entrusting the future of the software to.one brilliant hacker, most companies set things up so that it is.designed by committee, and the hackers merely.implement the design.if you want to make money at some point, remember this,.because this is one of the reasons startups win.  big companies want.to decrease the standard deviation of design outcomes because they.want to avoid disasters.  but when you damp oscillations, you.lose the high points as well as the low.  this is not a problem for.big companies, because they don't win by making great.products.  big companies win by sucking less than other big companies.so if you can figure out a way to get in a.design war with a company big enough that its software is.designed by product managers, they'll never be able to keep up.with you.  these opportunities are not easy to find, though..it's hard to engage a big company in a design war,.just as it's hard to engage an opponent inside a castle in hand.to hand combat.  it would be pretty easy to write a better.word processor than microsoft word, for example, but microsoft,.within the castle of their operating system monopoly,.probably wouldn't even notice if you did.the place to fight design wars is in new markets, where no one.has yet managed to establish any fortifications.  that's where.you can win big by taking the bold approach to design, and.having the same people both design and implement the product..microsoft themselves did this at the start.  so did apple..and hewlett-packard.  i suspect almost every successful startup.has.so one way to build great software is to start your own.startup.  there are two problems with this, though.  one is.that in a startup you have to do so much besides write software..at viaweb i considered myself lucky if i.got to hack a quarter of the time.  and the things i had to.do the other three quarters of the time ranged from tedious.to terrifying.  i have a benchmark for this, because i.once had to leave a board meeting to have.some cavities filled.  i remember sitting back in the.dentist's chair, waiting for the drill, and feeling like.i was on vacation.the other problem with startups is that there is not much.overlap between the kind of software that makes money and the.kind that's interesting to write.  programming languages.are interesting to write, and microsoft's first product was.one, in fact, but no one will pay for programming languages.now.  if you want to make money, you tend to be forced to work.on problems that are too nasty for anyone to solve for free.all makers face this problem.  prices are.determined by supply and demand, and there is just not as much.demand for things that are fun to work on as there is for.things that solve the mundane problems of individual customers..acting in off-broadway plays just doesn't pay as well as.wearing a gorilla suit in someone's booth at a.trade show.  writing novels doesn't pay as well as writing.ad copy for garbage disposals..and hacking programming languages doesn't pay as well.as figuring out how to connect some company's.legacy database to their web server.i think the answer to this problem, in the case of software,.is a concept known to nearly all makers: the day job..this phrase began with musicians, who.perform at night.  more generally, it means that you have one.kind of work you do for money, and another for love.nearly all makers have day jobs early in their careers..painters and writers notoriously do.  if you're lucky.you can get a day job that's closely.related to your real work.  musicians often.seem to work in record stores.  a hacker working on some.programming language or operating system might likewise be able to.get a day job using it.  [1]when i say that the answer is for hackers to have day jobs,.and work on beautiful software on the side, i'm not proposing.this as a new idea.  this is what open-source hacking is all.about.  what i'm saying is that open-source is probably the right.model, because it has been independently confirmed by all the.other makers.it seems surprising to me that any employer would be reluctant.to let hackers work on open-source projects..at viaweb, we would have been reluctant to hire anyone.who didn't.  when we interviewed.programmers, the main.thing we cared about was what kind of software they.wrote in their spare time..you can't do anything really well unless.you love it, and if you love to hack you'll inevitably.be working on projects of your own. [2]because hackers are makers rather than scientists,.the right place to look for metaphors is not in the.sciences, but among other kinds of makers.  what else can painting.teach us about hacking?one thing we can learn, or at least confirm, from the.example of painting is how to learn to hack.  you learn to.paint mostly by doing it..ditto for hacking.  most hackers don't learn to hack by.taking college courses in programming.  they learn to hack.by writing programs of their own at age thirteen.  even in.college classes, you learn to hack mostly by hacking. [3]because painters leave a trail of work behind them, you.can watch them learn by doing.  if you look at the work.of a painter in chronological order, you'll find that each.painting builds on things that have been learned in previous.ones.  when there's something in.a painting that works very well, you can usually find version.1 of it in a smaller form in some earlier painting.i think most makers work this way.  writers and architects seem.to as well.  maybe it would be good for hackers.to act more like painters, and regularly start over from scratch,.instead of continuing to work for years on one project, and.trying to incorporate all their later ideas as revisions.the fact that hackers learn to hack by doing it is another.sign of how different hacking is from the sciences.  scientists.don't learn science by doing it, but by doing labs and problem sets..scientists start out doing work that's perfect, in the sense.that they're just trying to reproduce work someone else has.already done for them..eventually, they get.to the point where they can do original work..whereas hackers, from the start, are doing original work; it's.just very bad.  so hackers start original, and get good, and.scientists start good, and get original..the other way makers learn is from examples..for a painter, a museum is a reference library of techniques..for hundreds of years it has been part of the traditional.education of painters to copy the works of the great masters,.because copying forces you to look closely.at the way a painting is made.writers do this too..benjamin franklin learned to write by summarizing the points.in the essays of addison and steele and then trying to.reproduce them.  raymond chandler did the same thing.with detective stories.hackers, likewise, can learn to program by looking at.good programs-- not just at what they do, but the source.code too.  one of the less publicized benefits.of the open-source movement is that it has made it easier.to learn to program.  when i learned to program, we had to rely.mostly on examples in books.  the one big chunk of.code available then was unix, but even this was not.open source.  most of the people who read the source.read it in illicit photocopies of john lions' book, which.though written in 1977 was not allowed to be published.until 1996.another example we can take from painting is the way that.paintings are created by gradual refinement.  paintings usually.begin with a sketch..gradually the details get filled in..but it is not merely a process of filling in. sometimes.the original plans turn out to be mistaken..countless paintings,.when you look at them in xrays, turn out to have limbs that.have been moved or facial features that have been readjusted.here's a case where we can learn from painting.  i think hacking.should work this way too.  it's unrealistic.to expect that the specifications for a program will be.perfect. you're.better off if you admit this up front, and write programs in.a way that allows specifications to change on the fly.(the structure of large companies makes this hard for them.to do, so here is another place where startups have an advantage.)everyone by now presumably knows about the danger of premature.optimization.  i think we should be just as worried about.premature design-- deciding too early what.a program should do.the right tools can help us avoid.this danger..a good programming language should, like oil paint, make it.easy to change your mind.  dynamic typing is a win here because.you don't have to.commit to specific data representations up front..but the key to flexibility, i think, is to make the language.very abstract..the easiest program to change is one that's very short..this sounds like a paradox, but a great painting.has to be better than it has to be..for example, when leonardo.painted the portrait of ginevra de benci.in the national gallery, he put a juniper bush behind her head..in it he carefully.painted each individual leaf.  many painters might have thought,.this is just something to put in the background to frame.her head.  no one will look that closely at it.not leonardo.  how hard he worked on part of a painting didn't.depend at all on how closely he expected anyone to look at it..he was like michael jordan.  relentless.relentlessness wins because, in the aggregate, unseen details.become visible..when people walk by the portrait of ginevra de benci,.their attention is often immediately arrested by it,.even before they look at the label and notice that it says.leonardo da vinci.  all those unseen details combine to produce.something that's just stunning, like a thousand barely audible.voices all singing in tune.great software, likewise, requires a fanatical devotion to.beauty.  if you look inside good software, you find that.parts no one is ever supposed to see are beautiful too..i'm not claiming i write great software, but i.know that when it comes to code i behave in a way that would.make me eligible for prescription drugs if i approached everyday.life the same way..it drives me crazy to see code that's badly indented,.or that uses ugly variable names.if a hacker were a mere implementor, turning a spec into code, then.he could just work his way through it from one end to the other like.someone digging a ditch.  but if the hacker is a creator, we have.to take inspiration into account.in hacking, like painting,.work comes in cycles.  sometimes you get excited about some.new project and you want to work sixteen hours a day on it..other times nothing seems interesting.to do good work you have to take these cycles into.account, because they're affected by how you react to them..when you're driving a.car with a manual transmission on a hill, you have to back off.the clutch sometimes to avoid stalling.  backing.off can likewise prevent ambition from stalling..in both painting and hacking there are some.tasks that are terrifyingly ambitious, and others that are.comfortingly routine.  it's a good idea to save some easy.tasks for moments when you would otherwise stall.in hacking, this can literally mean saving up bugs..i like debugging: it's the.one time that hacking is as straightforward as.people think it is.  you have a.totally constrained problem, and all you have to do is solve.it.  your program is supposed to do x.  instead it does y..where does it go wrong? you know you're going to win.in the end.  it's as relaxing as painting a wall.the example of painting can teach us not only how to manage our.own work, but how to work together.  a lot of the.great art of the past is the work of multiple hands, though.there may only be one name on the wall next to it in the.museum.  leonardo was an apprentice in the workshop of.verrocchio and painted one of the angels in his baptism of.christ.  this sort of thing was the rule, not the exception..michelangelo was considered especially dedicated for insisting.on painting all the figures on the ceiling of the sistine.chapel himself.as far as i know, when painters worked together on a painting,.they never worked on the same parts.  it was common.for the master to paint the principal figures and for assistants.to paint the others and the background.  but you never had.one guy painting over the work of another.i think this is the right model for collaboration in software.too.  don't push it too far.  when a piece of code is.being hacked by three or four different people, no one of whom.really owns it, it will end up being like a common-room.  it will.tend to feel bleak and abandoned, and accumulate cruft..the right.way to collaborate, i think, is to divide projects into sharply.defined modules, each with a definite owner, and with interfaces.between them that are as carefully designed and, if possible,.as articulated as programming languages.like painting, most software is intended for.a human audience.  and so hackers, like painters, must have.empathy to do really great work.  you have to be able to see.things from the user's point of view.when i was a kid i was always being told to look at things from.someone else's point of view.  what this always meant in.practice was to do what someone else wanted, instead of what.i wanted.  this of course gave empathy a bad name, and i made a.point of not cultivating it.boy, was i wrong.  it turns out that looking at things from.other people's point of view is practically the secret of.success.  it doesn't necessarily mean being self-sacrificing..far from it.  understanding how someone else sees things.doesn't imply that you'll act in his interest; in some.situations-- in war, for example-- you want to do exactly.the opposite. [4]most makers make things for a human audience..and to engage an audience you have to understand what they need..nearly all the greatest paintings are paintings of people,.for example, because people are what people are interested in.empathy is probably the single most important difference.between a good hacker and a great one.  some hackers.are quite smart, but when it comes to empathy are.practically solipsists.  it's hard for such.people to design great software [5], because they can't.see things from the user's point of view.one way to tell how good people are at empathy is to watch.them explain a technical question to someone without a technical.background.  we probably all know people who, though otherwise smart,.are just comically bad at this.  if someone asks them at.a dinner party what a programming language is, they'll.say something like ``oh, a high-level language is what.the compiler uses as input to generate object code.''.high-level language?  compiler?  object code?  someone who.doesn't know what a programming language is obviously doesn't.know what these things are, either.part of what software has to do is explain itself.  so to.write good software you have to understand how little users.understand..they're going to walk up to the software with no preparation, and.it had better do what they guess it will, because they're.not going to read the manual.  the best system i've ever seen.in this respect was the original macintosh, in 1985..it did what software almost never does: it just worked. [6]source code, too, should explain itself.  if i could get people to.remember just one quote about programming, it would be the.one at the beginning of structure and interpretation of computer.programs..programs should be written for people to read, and.only incidentally for machines to execute..you need to have.empathy not just for your users, but for your readers.  it's in.your interest, because you'll be one of them..many a hacker has written a program only to.find on returning to it six months later that he has no idea.how it works.  i know several people who've sworn off perl after.such experiences. [7]lack of empathy is associated with intelligence, to the point.that there is even something of a fashion for it in some places..but i don't think there's any correlation..you can do well in math and.the natural sciences without having to learn empathy, and people in these.fields tend to be smart, so the two qualities have come to be.associated.  but there are plenty of dumb people who are bad at.empathy too.  just listen to the people who call in with questions on.talk shows.  they ask whatever it is they're asking in.such a roundabout way.that the hosts often have to rephrase the question for them.so, if hacking works like painting and writing, is it as cool?.after all, you only get one life..you might as well spend it working on something great.unfortunately, the question is hard to answer.  there is always.a big time lag in prestige.  it's like light from a distant star..painting has prestige now because of great work people did five hundred.years ago.  at the time, no one thought.these paintings were as important as we do today.  it would have.seemed very odd to people at the time that federico da montefeltro,.the duke of urbino, would one day be known mostly as the guy.with the strange nose in a painting.by piero della francesca.so while i admit that hacking doesn't seem as cool as painting now,.we should remember that painting itself didn't seem as cool in.its glory days as it does now.what we can say with some confidence is that these are the glory.days of hacking.  in most fields the great work is done early on..the paintings made between 1430 and 1500 are still unsurpassed..shakespeare appeared just as professional theater was being born,.and pushed the medium.so far that every playwright since has had to live in his shadow..albrecht durer did the same thing with engraving, and jane austen.with the novel.over and over we see the same pattern.  a new medium appears, and.people are so excited about it that they explore most of its.possibilities in the first couple generations.   hacking seems.to be in this phase now.painting was not, in leonardo's time, as cool as his work.helped make it..how cool hacking turns out to be will depend on what we can.do with this new medium..notes[1] the greatest damage that photography has done.to painting may be the fact that it killed the best day job..most of the great painters in history supported.themselves by painting portraits.  [2] i've been told that microsoft discourages.employees from contributing to open-source projects, even in.their spare time..but so many of the best hackers work on open-source.projects now that the main effect of this policy may be.to ensure that they won't be able to hire any first-rate.programmers.[3] what you learn about programming in college is much like.what you learn about books or clothes or dating: what bad taste you.had in high school.[4] here's an example of applied empathy..at viaweb, if we couldn't decide between two alternatives, we'd.ask, what would our competitors hate most?  at one point a.competitor added a feature to their software that was basically.useless, but since it was one of few they had that we didn't, they.made much of it in the trade press..we could have tried to explain that the feature was useless,.but we decided it would annoy our competitor more if we.just implemented it ourselves, so we hacked together our own.version that afternoon.[5] except text editors and compilers.  hackers don't need empathy to.design these, because they are themselves typical users.[6] well, almost.  they overshot the available ram somewhat,.causing much inconvenient disk swapping, but this could be fixed.within a few months by buying an additional disk drive.[7] the way to make programs easy to read is not to.stuff them with comments. i would take abelson and sussman's.quote a step further.  programming languages should be designed.to express algorithms, and only incidentally to tell computers.how to execute them.  a good programming language.ought to be better for explaining software than english..you should only.need comments when there is some kind of kludge you need to warn.readers about, just as on a road there are only.arrows on parts with unexpectedly sharp curves..thanks to trevor blackwell, robert morris, dan giffin, and lisa.randall for reading drafts of this, and to henry leitner.and larry finkelstein for inviting me to speak.japanese translationspanish translationgerman translationportuguese translationczech translationwhy good design comes from bad designknuth: computer programming as an art.you'll find this essay and 14 others in.hackers & painters.<eot><sot>if lisp is so great.may 2003
if lisp is so great, why don't more people use it?  i was.asked this question by a student in the audience at a.talk i gave recently.  not for the first time, either.in languages, as in so many things, there's not much.correlation between popularity and quality.  why does.john grisham (king of torts sales rank, 44) outsell.jane austen (pride and prejudice sales rank, 6191)?.would even grisham claim that it's because he's a better.writer?here's the first sentence of pride and prejudice:.it is a truth universally acknowledged, that a single man.in possession of a good fortune must be in want of a.wife.."it is a truth universally acknowledged?"  long words for.the first sentence of a love story.like jane austen, lisp looks hard.  its syntax, or lack.of syntax, makes it look completely unlike.the languages.most people are used to.  before i learned lisp, i was afraid.of it too.  i recently came across a notebook from 1983.in which i'd written:.i suppose i should learn lisp, but it seems so foreign..fortunately, i was 19 at the time and not too resistant to learning.new things.  i was so ignorant that learning.almost anything meant learning new things.people frightened by lisp make up other reasons for not.using it.  the standard.excuse, back when c was the default language, was that lisp.was too slow.  now that lisp dialects are among.the faster.languages available, that excuse has gone away..now the standard excuse is openly circular: that other languages.are more popular.(beware of such reasoning.  it gets you windows.)popularity is always self-perpetuating, but it's especially.so in programming languages. more libraries.get written for popular languages, which makes them still.more popular.  programs often have to work with existing programs,.and this is easier if they're written in the same language,.so languages spread from program to program like a virus..and managers prefer popular languages, because they give them.more leverage over developers, who can more easily be replaced.indeed, if programming languages were all more or less equivalent,.there would be little justification for using any but the most.popular.  but they aren't all equivalent, not by a long.shot.  and that's why less popular languages, like jane austen's.novels, continue to survive at all.  when everyone else is reading.the latest john grisham novel, there will always be a few people.reading jane austen instead.japanese translationromanian translationspanish translation<eot><sot>the hundred-year language.april 2003
(this essay is derived from a keynote talk at pycon 2003.)it's hard to predict what.life will be like in a hundred years.  there are only a few.things we can say with certainty.  we know that everyone will.drive flying cars,.that zoning laws will be relaxed to allow buildings.hundreds of stories tall, that it will be dark most of the.time, and that women will all be trained in the martial arts..here i want to zoom in on one detail of this.picture.  what kind of programming language will they use to.write the software controlling those flying cars?this is worth thinking about not so.much because we'll actually get to use these languages as because,.if we're lucky, we'll use languages on the path from this.point to that.i think that, like species, languages will form evolutionary trees,.with dead-ends branching off all over.  we can see this.happening already..cobol, for all its sometime popularity, does not seem to have any.intellectual descendants.  it is an evolutionary dead-end-- a.neanderthal language.i predict a similar fate for java.  people.sometimes send me mail saying, "how can you say that java.won't turn out to be a successful language?  it's already.a successful language."  and i admit that it is, if you.measure success by shelf space taken up by books on it.(particularly individual books on it), or by.the number of undergrads who believe they have to.learn it to get a job.  when i say java won't.turn out to be a successful language, i mean something more.specific:  that java.will turn out to be an evolutionary dead-end, like cobol.this is just a guess.  i may be wrong.  my point here is not to dis java,.but to raise the issue of evolutionary.trees and get people asking, where on the tree is language x?.the reason to ask this question isn't just so that.our ghosts can say, in a.hundred years, i told you so.  it's because staying close to.the main branches is a useful heuristic for finding languages that will.be good to program in now.at any given time, you're probably happiest on.the main branches of an evolutionary tree..even when there were still plenty of neanderthals,.it must have sucked to be one.  the.cro-magnons would have been constantly coming over and.beating you up and stealing your food.the reason i want to.know what languages will be like in a hundred years is so that.i know what branch of the tree to bet on now.the evolution of languages differs from the evolution of species.because branches can converge.  the fortran branch, for example,.seems to be merging with the descendants.of algol.  in theory this is possible for species too, but it's.not likely to have happened to any bigger than a cell.convergence.is more likely for languages partly because the space of.possibilities is smaller, and partly because mutations.are not random.  language designers deliberately incorporate.ideas from other languages.it's especially useful for language designers to think.about where the evolution of programming languages is likely.to lead, because they can steer accordingly..in that case, "stay on a main branch" becomes more than a.way to choose a good language..it becomes a heuristic for making the right decisions about.language design.any programming language can be divided into.two parts:  some set of fundamental operators that play the role.of axioms, and the rest of the language, which could in principle.be written in terms of these fundamental operators.i think the fundamental operators are the most important factor in a.language's long term survival.  the rest you can change.  it's.like the rule that in buying a house you should consider.location first of all.  everything else you can fix later, but you.can't fix the location.i think it's important not just that the axioms be well chosen,.but that there be few of them.  mathematicians have always felt.this way about axioms-- the fewer, the better-- and i think they're.onto something.at the very least, it has to be a useful exercise to look closely.at the core of a language to see if there are any axioms that.could be weeded out.  i've found in my long career as a slob that.cruft breeds cruft, and i've seen this happen in software as.well as under beds and in the corners of rooms.i have a hunch that.the main branches of the evolutionary tree pass through the languages.that have the smallest, cleanest cores..the more of a language you can write in itself,.the better.of course, i'm making a big assumption in even asking what.programming languages will be like in a hundred years..will we even be writing programs in a hundred years?  won't.we just tell computers what we want them to do?there hasn't been a lot of progress in that department.so far..my guess is that a hundred years from now people will.still tell computers what to do using programs we would recognize.as such.  there may be tasks that we.solve now by writing programs and which in a hundred years.you won't have to write programs to solve, but i think.there will still be a good deal of.programming of the type that we do today.it may seem presumptuous to think anyone can predict what.any technology will look like in a hundred years.  but.remember that we already have almost fifty years of history behind us..looking forward a hundred years is a graspable idea.when we consider how slowly languages have evolved in the.past fifty.languages evolve slowly because they're not really technologies..languages are notation.  a program is a formal description of.the problem you want a computer to solve for you.  so the rate.of evolution in programming languages is more like the.rate of evolution in mathematical notation than, say,.transportation or communications..mathematical notation does evolve, but not with the giant.leaps you see in technology.whatever computers are made of in a hundred years, it seems.safe to predict they will be much faster than.they are now.  if moore's law continues to put out, they will be 74.quintillion (73,786,976,294,838,206,464) times faster.  that's kind of.hard to imagine.  and indeed, the most likely prediction in the.speed department may be that moore's law will stop working..anything that is supposed to double every eighteen months seems.likely to run up against some kind of fundamental limit eventually..but i have no trouble believing that computers will be very much.faster. even if they only end up being a paltry million.times faster, that should change the ground rules for programming.languages substantially.  among other things, there.will be more room for what.would now be considered slow languages, meaning languages.that don't yield very efficient code.and yet some applications will still demand speed..some of the problems we want to solve with.computers are created by computers; for example, the.rate at which you have to process video images depends.on the rate at which another computer can.generate them.  and there is another class of problems.which inherently have an unlimited capacity to soak up cycles:.image rendering, cryptography, simulations.if some applications can be increasingly inefficient while.others continue to demand all the speed the hardware can.deliver, faster computers will mean that languages have.to cover an ever wider range of efficiencies.  we've seen.this happening already.  current implementations of some.popular new languages are shockingly wasteful by the.standards of previous decades.this isn't just something that happens with programming.languages.  it's a general historical trend.  as technologies improve,.each generation can do things that the previous generation.would have considered wasteful.  people thirty years ago would.be astonished at how casually we make long distance phone calls..people a hundred years ago would be even more astonished that.a package would one day travel from boston to new york via memphis.i can already tell you what's going to happen to all those extra.cycles that faster hardware is going to give us in the.next hundred years.  they're nearly all going to be wasted.i learned to program when computer power was scarce..i can remember taking all the spaces out of my basic programs.so they would fit into the memory of a 4k trs-80.  the.thought of all this stupendously inefficient software.burning up cycles doing the same thing over and over seems.kind of gross to me.  but i think my intuitions here are wrong.  i'm.like someone who grew up poor, and can't bear to spend money.even for something important, like going to the doctor.some kinds of waste really are disgusting.  suvs, for example, would.arguably be gross even if they ran on a fuel which would never.run out and generated no pollution.  suvs are gross because they're.the solution to a gross problem. (how to make minivans look more.masculine.).but not all waste is bad.  now that we have the infrastructure.to support it, counting the minutes of your long-distance.calls starts to seem niggling.   if you have the.resources, it's more elegant to think of all phone calls as.one kind of thing, no matter where the other person is.there's good waste, and bad waste.  i'm interested.in good waste-- the kind where, by spending more, we can get.simpler designs.  how will we take advantage of the opportunities.to waste cycles that we'll get from new, faster hardware?the desire for speed is so deeply engrained in us, with.our puny computers, that it will take a conscious effort.to overcome it.  in language design, we should be consciously seeking out.situations where we can trade efficiency for even the.smallest increase in convenience.most data structures exist because of speed.  for example,.many languages today have both strings and lists.  semantically, strings.are more or less a subset of lists in which the elements are.characters.  so why do you need a separate data type?.you don't, really.  strings only.exist for efficiency.  but it's lame to clutter up the semantics.of the language with hacks to make programs run faster..having strings in a language seems to be a case of.premature optimization.if we think of the core of a language as a set of axioms,.surely it's gross to have additional axioms that add no expressive.power, simply for the sake of efficiency.  efficiency is.important, but i don't think that's the right way to get it.the right way to solve that problem, i think, is to separate.the meaning of a program from the implementation details..instead of having both lists and strings, have just lists,.with some way to give the compiler optimization advice that.will allow it to lay out strings as contiguous bytes if.necessary.since speed doesn't matter in most of a program, you won't.ordinarily need to bother with.this sort of micromanagement..this will be more and more true as computers get faster.saying less about implementation should also make programs.more flexible..specifications change while a program is being written, and this is not.only inevitable, but desirable.the word "essay" comes.from the french verb "essayer", which means "to try"..an essay, in the original sense, is something you.write to try to figure something out.  this happens in.software too.  i think some of the best programs were essays,.in the sense that the authors didn't know when they started.exactly what they were trying to write.lisp hackers already know about the value of being flexible.with data structures.  we tend to write the first version of.a program so that it does everything with lists.  these.initial versions can be so shockingly inefficient that it.takes a conscious effort not to think about what they're.doing, just as, for me at least, eating a steak requires a.conscious effort not to think where it came from.what programmers in a hundred years will be looking for, most of.all, is a language where you can throw together an unbelievably.inefficient version 1 of a program with the least possible.effort.  at least, that's how we'd describe it in present-day.terms.  what they'll say is that they want a language that's.easy to program in.inefficient software isn't gross.  what's gross is a language.that makes programmers do needless work.  wasting programmer time.is the true inefficiency, not wasting machine time.  this will.become ever more clear as computers get faster.i think getting rid of strings is already something we.could bear to think about.  we did it in arc, and it seems.to be a win;  some operations that would be awkward to.describe as regular expressions can be described.easily as recursive functions.how far will this flattening of data structures go?  i can think.of possibilities that shock even me, with my conscientiously broadened.mind.  will we get rid of arrays, for example?  after all, they're.just a subset of hash tables where the keys are vectors of.integers.   will we replace hash tables themselves with lists?there are more shocking prospects even than that.  the lisp.that mccarthy described in 1960, for example, didn't.have numbers.  logically, you don't need to have a separate notion.of numbers, because you can represent them as lists:  the integer.n could be represented as a list of n elements.  you can do math this.way.  it's just unbearably inefficient.no one actually proposed implementing numbers as lists in.practice.  in fact, mccarthy's 1960 paper was not, at the time,.intended to be implemented at all.  it was a theoretical exercise,.an attempt to create a more elegant alternative to the turing.machine.  when someone did, unexpectedly, take this paper and.translate it into a working lisp interpreter, numbers certainly.weren't represented as lists; they were represented in binary,.as in every other language.could a programming language go so far as to get rid of numbers.as a fundamental data type?  i ask this not so much as a serious.question as as a way to play chicken with the future.  it's like.the hypothetical case of an irresistible force meeting an.immovable object-- here, an unimaginably inefficient.implementation meeting unimaginably great resources..i don't see why not.  the future is pretty long.  if there's.something we can do to decrease the number of axioms in the core.language, that would seem to be the side to bet on as t approaches.infinity.  if the idea still seems unbearable in a hundred years,.maybe it won't in a thousand.just to be clear about this, i'm not proposing that all numerical.calculations would actually be carried out using lists.  i'm proposing.that the core language, prior to any additional notations about.implementation, be defined this way.  in practice any program.that wanted to do any amount of math would probably represent.numbers in binary, but this would be an optimization, not part of.the core language semantics.another way to burn up cycles is to have many layers of.software between the application and the hardware.  this too is.a trend we see happening already: many recent languages are.compiled into byte code.  bill woods once told me that,.as a rule of thumb, each layer of interpretation costs a.factor of 10 in speed.  this extra cost buys you flexibility.the very first version of arc was an extreme case of this sort.of multi-level slowness, with corresponding benefits.  it.was a classic "metacircular" interpreter written.on top of common lisp, with a definite family resemblance.to the eval function defined in mccarthy's original lisp paper..the whole thing was only a couple hundred lines of.code, so it was very easy to understand and change.  the.common lisp we used, clisp, itself runs on top.of a byte code interpreter.  so here we had two levels of.interpretation, one of them (the top one) shockingly inefficient,.and the language was usable.  barely usable, i admit, but.usable.writing software as multiple layers is a powerful technique.even within applications.  bottom-up programming means writing.a program as a series of layers, each of which serves as a.language for the one above.  this approach tends to yield.smaller, more flexible programs.  it's also the best route to.that holy grail, reusability.  a language is by definition.reusable.  the more.of your application you can push down into a language for writing.that type of application, the more of your software will be.reusable.somehow the idea of reusability got attached.to object-oriented programming in the 1980s, and no amount of.evidence to the contrary seems to be able to shake it free.  but.although some object-oriented software is reusable, what makes.it reusable is its bottom-upness, not its object-orientedness..consider libraries: they're reusable because they're language,.whether they're written in an object-oriented style or not.i don't predict the demise of object-oriented programming, by the.way.  though i don't think it has much to offer good programmers,.except in certain specialized domains, it is irresistible to.large organizations.  object-oriented programming.offers a sustainable way to write spaghetti code.  it lets you accrete.programs as a series of patches..large organizations.always tend to develop software this way, and i expect this.to be as true in a hundred years as it is today..as long as we're talking about the future, we had better.talk about parallel computation, because that's where this.idea seems to live.  that is, no matter when you're talking, parallel.computation seems to be something that is going to happen.in the future.will the future ever catch up with it?  people have been.talking about parallel computation as something imminent.for at least 20.years, and it hasn't affected programming practice much so far..or hasn't it?  already.chip designers have to think about it, and so must.people trying to write systems software on multi-cpu computers.the real question is, how far up the ladder of abstraction will.parallelism go?.in a hundred years will it affect even application programmers?  or.will it be something that compiler writers think about, but.which is usually invisible in the source code of applications?one thing that does seem likely is that most opportunities for.parallelism will be wasted.  this is a special case of my more.general prediction that most of the extra computer power we're.given will go to waste.  i expect that, as with the stupendous.speed of the underlying hardware, parallelism will be something.that is available if you ask for it explicitly, but ordinarily.not used.  this implies that the kind of parallelism we have in.a hundred years will not, except in special applications, be.massive parallelism.  i expect for.ordinary programmers it will be more like being able to fork off.processes that all end up running in parallel.and this will, like asking for specific implementations of data.structures, be something that you do fairly late in the life of a.program, when you try to optimize it.  version 1s will ordinarily.ignore any advantages to be got from parallel computation, just.as they will ignore advantages to be got from specific representations.of data.except in special kinds of applications, parallelism won't.pervade the programs that are written in a hundred years.  it would be.premature optimization if it did.how many programming languages will there.be in a hundred years?  there seem to be a huge number of new.programming languages lately.  part of the reason is that.faster hardware has allowed programmers to make different.tradeoffs between speed and convenience, depending on the.application.  if this is a real trend, the hardware we'll.have in a hundred years should only increase it.and yet there may be only a few widely-used languages in a.hundred years.  part of the reason i say this.is optimism: it seems that, if you did a really good job,.you could make a language that was ideal for writing a.slow version 1, and yet with the right optimization advice.to the compiler, would also yield very fast code when necessary..so, since i'm optimistic, i'm going to predict that despite.the huge gap they'll have between acceptable and maximal.efficiency, programmers in a hundred years will have languages.that can span most of it.as this gap widens, profilers will become increasingly important..little attention is paid to profiling now.  many people still.seem to believe that the way to get fast applications is to.write compilers that generate fast code.  as the gap between.acceptable and maximal performance widens, it will become.increasingly clear that the way to get fast applications is.to have a good guide from one to the other.when i say there may only be a few languages, i'm not including.domain-specific "little languages".  i think such embedded languages.are a great idea, and i expect them to proliferate.  but i expect.them to be written as thin enough skins that users can see.the general-purpose language underneath.who will design the languages of the future?  one of the most exciting.trends in the last ten years has been the rise of open-source.languages like perl, python, and ruby..language design is being taken over by hackers.  the results.so far are messy, but encouraging.  there are some stunningly.novel ideas in perl, for example. many are stunningly bad, but.that's always true of ambitious efforts.  at its current rate.of mutation, god knows what perl might evolve into in a hundred.years.it's not true that those who can't do, teach (some of the best.hackers i know are professors), but it is true that there are a.lot of things that those who teach can't do.  research imposes.constraining caste restrictions.  in any academic.field there are topics that are ok to work on and others that.aren't.  unfortunately the distinction between acceptable and.forbidden topics is usually based on how intellectual.the work sounds when described in research papers, rather than.how important it is for getting good results.  the extreme case.is probably literature; people studying literature rarely.say anything that would be of the slightest use to those.producing it.though the situation is better in the sciences,.the overlap between the kind of work you're allowed to do and the.kind of work that yields good languages is distressingly small..(olin shivers has grumbled eloquently.about this.)  for example, types seem to be an inexhaustible source.of research papers, despite the fact that static typing.seems to preclude true macros-- without which, in my opinion, no.language is worth using.the trend is not merely toward languages being developed.as open-source projects rather than "research", but toward.languages being designed by the application programmers who need.to use them, rather than by compiler writers.  this seems a good.trend and i expect it to continue..unlike physics in a hundred years, which is almost necessarily.impossible to predict, i think it may be possible in principle.to design a language now that would appeal to users in a hundred.years.one way to design a language is to just write down the program.you'd like to be able to write, regardless of whether there.is a compiler that can translate it or hardware that can run it..when you do this you can assume unlimited resources.  it seems.like we ought to be able to imagine unlimited resources as well.today as in a hundred years.what program would one like to write?  whatever is least work..except not quite: whatever would be least work if your ideas about.programming weren't already influenced by the languages you're.currently used to.  such influence can be so pervasive that.it takes a great effort to overcome it.  you'd think it would.be obvious to creatures as lazy as us how to express a program.with the least effort.  in fact, our ideas about what's possible.tend to be so limited by whatever language we think in  that.easier formulations of programs seem very surprising.  they're.something you have to discover, not something you naturally.sink into.one helpful trick here.is to use the length of the program as an approximation for.how much work it is to write.  not the length in characters,.of course, but the length in distinct syntactic elements-- basically,.the size of the parse tree.  it may not be quite true that.the shortest program is the least work to write, but it's.close enough that you're better off aiming for the solid.target of brevity than the fuzzy, nearby one of least work..then the algorithm for language design becomes: look at a program.and ask, is there any way to write this that's shorter?in practice, writing programs in an imaginary hundred-year.language will work to varying degrees depending.on how close you are to the core.  sort routines you can.write now.  but it would be.hard to predict now what kinds of libraries might be needed in.a hundred years.  presumably many libraries will be for domains that.don't even exist yet.  if seti@home works, for example, we'll.need libraries for communicating with aliens.  unless of course.they are sufficiently advanced that they already communicate.in xml.at the other extreme, i think you might be able to design the.core language today.  in fact, some might argue that it was already.mostly designed in 1958.if the hundred year language were available today, would we.want to program in it?  one way to answer this question is to.look back.  if present-day programming languages had been available.in 1960, would anyone have wanted to use them?in some ways, the answer is no.  languages today assume.infrastructure that didn't exist in 1960.  for example, a language.in which indentation is significant, like python, would not.work very well on printer terminals.  but putting such problems.aside-- assuming, for example, that programs were all just.written on paper-- would programmers of the 1960s have liked.writing programs in the languages we use now?i think so..some of the less imaginative ones,.who had artifacts of early languages built into their ideas of.what a program was, might have had trouble.  (how can you manipulate.data without doing pointer arithmetic?  how can you implement.flow charts without gotos?)  but i think the smartest programmers.would have had no trouble making the most of present-day.languages, if they'd had them.if we had the hundred-year language now, it would at least make a.great pseudocode.  what about using it to write software?.since the hundred-year language.will need to generate fast code for some applications, presumably.it could generate code efficient enough to run acceptably well.on our hardware.  we might have to give more optimization advice.than users in a hundred years, but it still might be a net win.now we have two ideas that, if you combine them, suggest interesting.possibilities: (1) the hundred-year language could, in principle, be.designed today, and (2) such a language, if it existed, might be good to.program in today.  when you see these ideas laid out like that,.it's hard not to think, why not try writing the hundred-year language.now?when you're working on language design, i think it is good to.have such a target and to keep it consciously in mind.  when you.learn to drive, one of the principles they teach you is to.align the car not by lining up the hood with the stripes painted.on the road, but by aiming at some point in the distance.  even.if all you care about is what happens in the next ten feet, this.is the right answer.  i.think we can and should do the same thing with programming languages..notesi believe lisp machine lisp was the first language to embody.the principle that declarations (except those of dynamic variables).were merely optimization advice,.and would not change the meaning of a correct program.  common lisp.seems to have been the first to state this explicitly.thanks to trevor blackwell, robert morris, and dan giffin for.reading drafts of this, and to guido van rossum, jeremy hylton, and the.rest of the python crew for inviting me to speak at pycon..you'll find this essay and 14 others in.hackers & painters.<eot><sot>why nerds are unpopular.february 2003
when we were in junior high school, my friend rich and i made a map.of the school lunch tables according to popularity. this was easy.to do, because kids only ate lunch with others of about the same.popularity. we graded them from a to e. a tables were full of.football players and cheerleaders and so on. e tables contained the.kids with mild cases of down's syndrome, what in the language of.the time we called "retards."we sat at a d table, as low as you could get without looking.physically different. we were not being especially candid to grade.ourselves as d. it would have taken a deliberate lie to say otherwise..everyone in the school knew exactly how popular everyone else was,.including us.my stock gradually rose during high school. puberty finally arrived;.i became a decent soccer player; i started a scandalous underground.newspaper.  so i've seen a good part of the popularity landscape.i know a lot of people who were nerds in school, and they all tell.the same story: there is a strong correlation between being smart.and being a nerd, and an even stronger inverse correlation between.being a nerd and being popular. being smart seems to make you.unpopular.why? to someone in school now, that may seem an odd question to.ask. the mere fact is so overwhelming that it may seem strange to.imagine that it could be any other way. but it could. being smart.doesn't make you an outcast in elementary school. nor does it harm.you in the real world. nor, as far as i can tell, is the problem.so bad in most other countries. but in a typical american secondary.school, being smart is likely to make your life difficult.  why?.the key to this mystery is to rephrase the question slightly. why.don't smart kids make themselves popular? if they're so smart, why.don't they figure out how popularity works and beat the system,.just as they do for standardized tests?one argument says that this would be impossible, that the smart.kids are unpopular because the other kids envy them for being smart,.and nothing they could do could make them popular. i wish. if the.other kids in junior high school envied me, they did a great job.of concealing it. and in any case, if being smart were really an.enviable quality, the girls would have broken ranks. the guys that.guys envy, girls like.in the schools i went to, being smart just didn't matter much. kids.didn't admire it or despise it. all other things being equal, they.would have preferred to be on the smart side of average rather than the.dumb side, but intelligence counted far less than, say, physical.appearance, charisma, or athletic ability.so if intelligence in itself is not a factor in popularity, why are.smart kids so consistently unpopular? the answer, i think, is that.they don't really want to be popular.if someone had told me that at the time, i would have laughed at.him. being unpopular in school makes kids miserable, some of them.so miserable that they commit suicide. telling me that i didn't.want to be popular would have seemed like telling someone dying of.thirst in a desert that he didn't want a glass of water. of course.i wanted to be popular.but in fact i didn't, not enough. there was something else i wanted.more: to be smart. not simply to do well in school, though that.counted for something, but to design beautiful rockets, or to write.well, or to understand how to program computers. in general, to.make great things.at the time i never tried to separate my wants and weigh them.against one another. if i had, i would have seen that being smart.was more important. if someone had offered me the chance to be.the most popular kid in school, but only at the price of being of.average intelligence (humor me here), i wouldn't have taken it.much as they suffer from their unpopularity, i don't think many.nerds would. to them the thought of average intelligence is unbearable..but most kids would take that deal. for half of them, it would be.a step up. even for someone in the eightieth percentile (assuming,.as everyone seemed to then, that intelligence is a scalar), who.wouldn't drop thirty points in exchange for being loved and admired.by everyone?and that, i think, is the root of the problem. nerds serve two.masters. they want to be popular, certainly, but they want even.more to be smart. and popularity is not something you can do in.your spare time, not in the fiercely competitive environment of an.american secondary school..alberti, arguably the archetype of the renaissance man, writes that."no art, however minor, demands less than total dedication if you.want to excel in it.".i wonder if anyone in the world works harder.at anything than american school kids work at popularity. navy seals.and neurosurgery residents seem slackers by comparison. they.occasionally take vacations; some even have hobbies. an american.teenager may work at being popular every waking hour, 365 days a.year.i don't mean to suggest they do this consciously. some of them truly.are little machiavellis, but what i really mean here is that teenagers.are always on duty as conformists.for example, teenage kids pay a great deal of attention to clothes..they don't consciously dress to be popular. they dress to look good..but to who? to the other kids. other kids' opinions become their.definition of right, not just for clothes, but for almost everything.they do, right down to the way they walk. and so every effort they.make to do things "right" is also, consciously or not, an effort.to be more popular.nerds don't realize this. they don't realize that it takes work to.be popular. in general, people outside some very demanding field.don't realize the extent to which success depends on constant (though.often unconscious) effort. for example, most people seem to consider.the ability to draw as some kind of innate quality, like being tall..in fact, most people who "can draw" like drawing, and have spent.many hours doing it; that's why they're good at it. likewise, popular.isn't just something you are or you aren't, but something you make.yourself.the main reason nerds are unpopular is that they have other things.to think about. their attention is drawn to books or the natural.world, not fashions and parties. they're like someone trying to.play soccer while balancing a glass of water on his head. other.players who can focus their whole attention on the game beat them.effortlessly, and wonder why they seem so incapable.even if nerds cared as much as other kids about popularity, being.popular would be more work for them. the popular kids learned to.be popular, and to want to be popular, the same way the nerds learned.to be smart, and to want to be smart: from their parents. while the.nerds were being trained to get the right answers, the popular kids.were being trained to please..so far i've been finessing the relationship between smart and nerd,.using them as if they were interchangeable. in fact it's only the.context that makes them so. a nerd is someone who isn't socially.adept enough. but "enough" depends on where you are. in a typical.american school, standards for coolness are so high (or at least,.so specific) that you don't have to be especially awkward to look.awkward by comparison.few smart kids can spare the attention that popularity requires..unless they also happen to be good-looking, natural athletes, or.siblings of popular kids, they'll tend to become nerds. and that's.why smart people's lives are worst between, say, the ages of eleven.and seventeen. life at that age revolves far more around popularity.than before or after.before that, kids' lives are dominated by their parents, not by.other kids. kids do care what their peers think in elementary school,.but this isn't their whole life, as it later becomes.around the age of eleven, though, kids seem to start treating their.family as a day job. they create a new world among themselves, and.standing in this world is what matters, not standing in their family..indeed, being in trouble in their family can win them points in the.world they care about.the problem is, the world these kids create for themselves is at.first a very crude one. if you leave a bunch of eleven-year-olds.to their own devices, what you get is lord of the flies. like.a lot of american kids, i read this book in school. presumably it.was not a coincidence. presumably someone wanted to point out to.us that we were savages, and that we had made ourselves a cruel and.stupid world. this was too subtle for me. while the book seemed.entirely believable, i didn't get the additional message. i wish.they had just told us outright that we were savages and our world.was stupid..nerds would find their unpopularity more bearable if it merely.caused them to be ignored. unfortunately, to be unpopular in school.is to be actively persecuted.why? once again, anyone currently in school might think this a.strange question to ask. how could things be any other way? but.they could be. adults don't normally persecute nerds. why do teenage.kids do it?partly because teenagers are still half children, and many.children are just intrinsically cruel. some torture nerds for the.same reason they pull the legs off spiders. before you develop a.conscience, torture is amusing.another reason kids persecute nerds is to make themselves feel.better. when you tread water, you lift yourself up by pushing water.down. likewise, in any social hierarchy, people unsure of their own.position will try to emphasize it by maltreating those they think.rank below. i've read that this is why poor whites in the united.states are the group most hostile to blacks.but i think the main reason other kids persecute nerds is that it's.part of the mechanism of popularity. popularity is only partially.about individual attractiveness. it's much more about alliances..to become more popular, you need to be constantly doing things that.bring you close to other popular people, and nothing brings people.closer than a common enemy.like a politician who wants to distract voters from bad times at.home, you can create an enemy if there isn't a real one. by singling.out and persecuting a nerd, a group of kids from higher in the.hierarchy create bonds between themselves. attacking an outsider.makes them all insiders. this is why the worst cases of bullying.happen with groups. ask any nerd: you get much worse treatment from.a group of kids than from any individual bully, however sadistic.if it's any consolation to the nerds, it's nothing personal. the.group of kids who band together to pick on you are doing the same.thing, and for the same reason, as a bunch of guys who get together.to go hunting. they don't actually hate you. they just need something.to chase.because they're at the bottom of the scale, nerds are a safe target.for the entire school. if i remember correctly, the most popular.kids don't persecute nerds; they don't need to stoop to such things..most of the persecution comes from kids lower down, the nervous.middle classes.the trouble is, there are a lot of them. the distribution of.popularity is not a pyramid, but tapers at the bottom like a pear..the least popular group is quite small. (i believe we were the only.d table in our cafeteria map.) so there are more people who want.to pick on nerds than there are nerds.as well as gaining points by distancing oneself from unpopular kids,.one loses points by being close to them. a woman i know says that.in high school she liked nerds, but was afraid to be seen talking.to them because the other girls would make fun of her. unpopularity.is a communicable disease; kids too nice to pick on nerds will still.ostracize them in self-defense.it's no wonder, then, that smart kids tend to be unhappy in middle.school and high school. their other interests leave them little.attention to spare for popularity, and since popularity resembles.a zero-sum game, this in turn makes them targets for the whole.school. and the strange thing is, this nightmare scenario happens.without any conscious malice, merely because of the shape of the.situation..for me the worst stretch was junior high, when kid culture was new.and harsh, and the specialization that would later gradually separate.the smarter kids had barely begun. nearly everyone i've talked to.agrees: the nadir is somewhere between eleven and fourteen.in our school it was eighth grade, which was ages twelve and thirteen.for me. there was a brief sensation that year when one of our.teachers overheard a group of girls waiting for the school bus, and.was so shocked that the next day she devoted the whole class to an.eloquent plea not to be so cruel to one another.it didn't have any noticeable effect. what struck me at the time.was that she was surprised. you mean she doesn't know the kind of.things they say to one another? you mean this isn't normal?it's important to realize that, no, the adults don't know what the.kids are doing to one another. they know, in the abstract, that.kids are monstrously cruel to one another, just as we know in the.abstract that people get tortured in poorer countries. but, like.us, they don't like to dwell on this depressing fact, and they don't.see evidence of specific abuses unless they go looking for it.public school teachers are in much the same position as prison.wardens. wardens' main concern is to keep the prisoners on the.premises. they also need to keep them fed, and as far as possible.prevent them from killing one another. beyond that, they want to.have as little to do with the prisoners as possible, so they leave.them to create whatever social organization they want. from what.i've read, the society that the prisoners create is warped, savage,.and pervasive, and it is no fun to be at the bottom of it.in outline, it was the same at the schools i went to. the most.important thing was to stay on the premises. while there, the.authorities fed you, prevented overt violence, and made some effort.to teach you something. but beyond that they didn't want to have.too much to do with the kids. like prison wardens, the teachers.mostly left us to ourselves. and, like prisoners, the culture we.created was barbaric..why is the real world more hospitable to nerds? it might seem that.the answer is simply that it's populated by adults, who are too.mature to pick on one another. but i don't think this is true..adults in prison certainly pick on one another. and so, apparently,.do society wives; in some parts of manhattan, life for women sounds.like a continuation of high school, with all the same petty intrigues.i think the important thing about the real world is not that it's.populated by adults, but that it's very large, and the things you.do have real effects. that's what school, prison, and ladies-who-lunch.all lack. the inhabitants of all those worlds are trapped in little.bubbles where nothing they do can have more than a local effect..naturally these societies degenerate into savagery. they have no.function for their form to follow.when the things you do have real effects, it's no longer enough.just to be pleasing. it starts to be important to get the right.answers, and that's where nerds show to advantage. bill gates will.of course come to mind. though notoriously lacking in social skills,.he gets the right answers, at least as measured in revenue.the other thing that's different about the real world is that it's.much larger. in a large enough pool, even the smallest minorities.can achieve a critical mass if they clump together. out in the real.world, nerds collect in certain places and form their own societies.where intelligence is the most important thing. sometimes the current.even starts to flow in the other direction: sometimes, particularly.in university math and science departments, nerds deliberately.exaggerate their awkwardness in order to seem smarter. john nash.so admired norbert wiener that he adopted his habit of touching the.wall as he walked down a corridor..as a thirteen-year-old kid, i didn't have much more experience of.the world than what i saw immediately around me. the warped little.world we lived in was, i thought, the world. the world seemed cruel.and boring, and i'm not sure which was worse.because i didn't fit into this world, i thought that something must.be wrong with me. i didn't realize that the reason we nerds didn't.fit in was that in some ways.we were a step ahead. we were already thinking about.the kind of things that matter in the real world, instead of spending.all our time playing an exacting but mostly pointless game like the.others.we were a bit like an adult would be if he were thrust back into.middle school. he wouldn't know the right clothes to wear, the right.music to like, the right slang to use. he'd seem to the kids a.complete alien. the thing is, he'd know enough not to care what.they thought. we had no such confidence.a lot of people seem to think it's good for smart kids to be thrown.together with "normal" kids at this stage of their lives. perhaps..but in at least some cases the reason the nerds don't fit in really.is that everyone else is crazy. i remember sitting in the audience.at a "pep rally" at my high school, watching as the cheerleaders.threw an effigy of an opposing player into the audience to be torn.to pieces. i felt like an explorer witnessing some bizarre tribal.ritual..if i could go back and give my thirteen year old self some advice,.the main thing i'd tell him would be to stick his head up and look.around. i didn't really grasp it at the time, but the whole world.we lived in was as fake as a twinkie. not just school, but the.entire town. why do people move to suburbia? to have kids! so no.wonder it seemed boring and sterile. the whole place was a giant.nursery, an artificial town created explicitly for the purpose of.breeding children.where i grew up, it felt as if there was nowhere to go, and nothing.to do. this was no accident. suburbs are deliberately designed to.exclude the outside world, because it contains things that could.endanger children.and as for the schools, they were just holding pens within this.fake world. officially the purpose of schools is to teach kids. in.fact their primary purpose is to keep kids locked up in one.place for a big chunk of the day so adults can get things done. and.i have no problem with this: in a specialized industrial society,.it would be a disaster to have kids running around loose.what bothers me is not that the kids are kept in prisons, but that.(a) they aren't told about it, and (b) the prisons are run mostly.by the inmates. kids are sent off to spend six years memorizing.meaningless facts in a world ruled by a caste of giants who run.after an oblong brown ball, as if this were the most natural thing.in the world. and if they balk at this surreal cocktail, they're.called misfits..life in this twisted world is stressful for the kids. and not just.for the nerds. like any war, it's damaging even to the winners.adults can't avoid seeing that teenage kids are tormented. so why.don't they do something about it? because they blame it on puberty..the reason kids are so unhappy, adults tell themselves, is that.monstrous new chemicals, hormones, are now coursing through their.bloodstream and messing up everything. there's nothing wrong with.the system; it's just inevitable that kids will be miserable at.that age.this idea is so pervasive that even the kids believe it, which.probably doesn't help. someone who thinks his feet naturally hurt.is not going to stop to consider the possibility that he is wearing.the wrong size shoes.i'm suspicious of this theory that thirteen-year-old kids are.intrinsically messed up. if it's physiological, it should be.universal. are mongol nomads all nihilists at thirteen? i've read.a lot of history, and i have not seen a single reference.to this supposedly universal fact before the twentieth century..teenage apprentices in the renaissance seem to have been cheerful.and eager. they got in fights and played tricks on one another of.course (michelangelo had his nose broken by a bully), but they.weren't crazy.as far as i can tell, the concept of the hormone-crazed teenager.is coeval with suburbia. i don't think this is a coincidence. i.think teenagers are driven crazy by the life they're made to lead..teenage apprentices in the renaissance were working dogs. teenagers.now are neurotic lapdogs. their craziness is the craziness of the.idle everywhere..when i was in school, suicide was a constant topic among the smarter.kids. no one i knew did it, but several planned to, and.some may have tried. mostly this was just a pose. like other.teenagers, we loved the dramatic, and suicide seemed very dramatic..but partly it was because our lives were at times genuinely miserable.bullying was only part of the problem. another problem, and possibly.an even worse one, was that we never had anything real to work on..humans like to work; in most of the world, your work is your identity..and all the work we did was.pointless, or seemed so at the time.at best it was practice for real work we might do far in the future,.so far that we didn't even know at the time what we were practicing.for. more often it was just an arbitrary series of hoops to jump.through, words without content designed mainly for testability..(the three main causes of the civil war were.....test: list the three main causes of the civil war.)and there was no way to opt out. the adults had agreed among.themselves that this was to be the route to college. the only way.to escape this empty life was to submit to it..teenage kids used to have a more active role in society. in.pre-industrial times, they were all apprentices of one sort or.another, whether in shops or on farms or even on warships. they.weren't left to create their own societies. they were junior members.of adult societies.teenagers seem to have respected adults more then, because.the adults were the visible experts in the skills they were trying.to learn. now most kids have little idea what their parents do in.their distant offices, and see no connection (indeed, there is.precious little) between schoolwork and the work they'll do as.adults.and if teenagers respected adults more, adults also had more use.for teenagers. after a couple years' training, an apprentice could.be a real help. even the newest apprentice could be made to carry.messages or sweep the workshop.now adults have no immediate use for teenagers. they would be in.the way in an office. so they drop them off at school on their way.to work, much as they might drop the dog off at a kennel if they.were going away for the weekend.what happened? we're up against a hard one here. the cause of this.problem is the same as the cause of so many present ills: specialization..as jobs become more specialized, we have to train longer for them..kids in pre-industrial times started working at about 14 at.the latest; kids on farms, where most people lived, began far.earlier. now kids who go to college don't start working full-time.till 21 or 22. with some degrees, like mds and phds, you may not.finish your training till 30.teenagers now are useless, except as cheap labor in industries like.fast food, which evolved to exploit precisely this fact. in almost.any other kind of work, they'd be a net loss. but they're also too.young to be left unsupervised. someone has to watch over them, and.the most efficient way to do this is to collect them together in.one place. then a few adults can watch all of them.if you stop there, what you're describing is literally a prison,.albeit a part-time one. the problem is, many schools practically.do stop there. the stated purpose of schools is to educate the kids..but there is no external pressure to do this well. and so most.schools do such a bad job of teaching that the kids don't really.take it seriously-- not even the smart kids. much of the time we.were all, students and teachers both, just going through the motions.in my high school french class we were supposed to read hugo's les.miserables. i don't think any of us knew french well enough to make.our way through this enormous book. like the rest of the class, i.just skimmed the cliff's notes. when we were given a test on the.book, i noticed that the questions sounded odd. they were full of.long words that our teacher wouldn't have used. where had these.questions come from? from the cliff's notes, it turned out. the.teacher was using them too. we were all just pretending.there are certainly great public school teachers.  the energy and.imagination of my fourth grade teacher, mr. mihalko, made that.year something his students still talk about, thirty years later..but teachers like him were individuals swimming.upstream. they couldn't fix the system..in almost any group of people you'll find hierarchy..when groups of adults form in the real world, it's generally for.some common purpose, and the leaders end up being those who are best.at it. the problem with most schools is, they have no purpose..but hierarchy there must be..and so the kids make one out of nothing.we have a phrase to describe what happens when rankings have to be.created without any meaningful criteria. we say that the situation.degenerates into a popularity contest. and that's exactly what.happens in most american schools..instead of depending on some real test, one's rank.depends mostly on one's ability to increase one's rank. it's.like the court of louis xiv. there is no external opponent, so the.kids become one another's opponents.when there is some real external test of skill, it isn't painful.to be at the bottom of the hierarchy. a rookie on a football team.doesn't resent the skill of the veteran; he hopes to be like him.one day and is happy to have the chance to learn from him..the veteran may in turn feel a sense of.noblesse oblige..and most importantly, their status depends on how well they.do against opponents, not on whether they can push the other down.court hierarchies are another thing entirely. this type of society.debases anyone who enters it. there is neither admiration at the.bottom, nor noblesse oblige at the top. it's kill or be killed.this is the sort of society that gets created.in american.secondary schools. and it happens because these schools have no.real purpose beyond keeping the kids all in one place for a certain.number of hours each day. what i didn't realize at the time, and.in fact didn't realize till very recently, is that the twin horrors.of school life, the cruelty and the boredom, both have the same.cause..the mediocrity of american public schools has worse consequences.than just making kids unhappy for six years. it breeds a rebelliousness.that actively drives kids away from the things they're supposed to.be learning.like many nerds, probably, it was years after high school before i.could bring myself to read anything we'd been assigned then..and i lost more than books. i mistrusted words like "character" and."integrity" because they had been so debased by adults. as they.were used then, these words all seemed to mean the same thing:.obedience. the kids who got praised for these qualities tended to.be at best dull-witted prize bulls, and at worst facile schmoozers..if that was what character and integrity were, i wanted no part of.them.the word i most misunderstood was "tact." as used by adults, it.seemed to mean keeping your mouth shut..i assumed it was derived from the same root as."tacit" and "taciturn," and that it literally meant being quiet. i.vowed that i would never be tactful; they were never going to shut.me up. in fact, it's derived from the same root as "tactile," and.what it means is to have a deft touch. tactful is the opposite of.clumsy. i don't think i learned this until college.nerds aren't the only losers in the popularity rat race. nerds are.unpopular because they're distracted. there are other kids who.deliberately opt out because they're so disgusted with the whole.process.teenage kids, even rebels, don't like to be alone, so when kids opt.out of the system, they tend to do it as a group. at the schools i.went to, the focus of rebellion was drug use, specifically marijuana..the kids in this tribe wore black concert t-shirts and were called."freaks."freaks and nerds were allies, and there was a good deal of overlap.between them. freaks were on the whole smarter than other kids,.though never studying (or at least never appearing to) was an.important tribal value. i was more in the nerd camp, but i was.friends with a lot of freaks.they used drugs, at least at first, for the social bonds they.created. it was something to do together, and because the drugs.were illegal, it was a shared badge of rebellion.i'm not claiming that bad schools are the whole reason kids get.into trouble with drugs. after a while, drugs have their own momentum..no doubt some of the freaks ultimately used drugs to escape from.other problems-- trouble at home, for example. but, in my school.at least, the reason most kids started using drugs was rebellion..fourteen-year-olds didn't start smoking pot because they'd heard.it would help them forget their problems. they started because they.wanted to join a different tribe.misrule breeds rebellion; this is not a new idea. and yet the.authorities still for the most part act as if drugs were themselves.the cause of the problem..the real problem is the emptiness of school life. we won't see.solutions till adults realize that. the adults who.may realize it first are the ones who were themselves nerds in.school. do you want your kids to be as unhappy in eighth grade as.you were? i wouldn't. well, then, is there anything we can do to.fix things? almost certainly. there is nothing inevitable about the.current system. it has come about mostly by default.adults, though, are busy. showing up for school plays is one thing..taking on the educational bureaucracy is another. perhaps a few.will have the energy to try to change things. i suspect the hardest.part is realizing that you can.nerds still in school should not hold their breath. maybe one day.a heavily armed force of adults will show up in helicopters to.rescue you, but they probably won't be coming this month. any.immediate improvement in nerds' lives is probably going to have to.come from the nerds themselves.merely understanding the situation they're in should make it less.painful. nerds aren't losers. they're just playing a different game,.and a game much closer to the one played in the real world. adults.know this. it's hard to find successful adults now who don't claim.to have been nerds in high school.it's important for nerds to realize, too, that school is not life..school is a strange, artificial thing, half sterile and half feral..it's all-encompassing, like life, but it isn't the real thing. it's.only temporary, and if you look, you can see beyond it even while.you're still in it.if life seems awful to kids, it's neither because hormones are.turning you all into monsters (as your parents believe), nor because.life actually is awful (as you believe). it's because the adults,.who no longer have any economic use for you, have abandoned you to.spend years cooped up together with nothing real to do.  any society.of that type is awful to live in..you don't have.to look any further to explain why teenage kids are unhappy.i've said some harsh things in this essay, but really the thesis.is an optimistic one-- that several problems we take for granted.are in fact not insoluble after all. teenage kids are not inherently.unhappy monsters. that should be encouraging news to kids and adults.both..thanks to sarah harlin, trevor blackwell, robert morris,.eric raymond, and jackie weicker for reading drafts of this essay,.and maria daniels for scanning photos.re: why nerds are unpopulargateway high school, 1981japanese translationfrench translationmy war with brianbuttonsportuguese translationspanish translation<eot><sot>better bayesian filtering.january 2003
(this article was given as a talk at the 2003 spam conference..it describes the work i've done to improve the performance of.the algorithm described in a plan for spam,.and what i plan to do in the future.)the first discovery i'd like to present here is an algorithm for.lazy evaluation of research papers.  just.write whatever you want and don't cite any previous work, and.indignant readers will send you references to all the papers you.should have cited.   i discovered this algorithm.after ``a plan for spam'' [1] was on slashdot.spam filtering is a subset of text classification,.which is a well established field, but the first papers about.bayesian.spam filtering per se seem to have been two.given at the same conference in 1998,.one by pantel and lin [2],.and another by a group from.microsoft research [3].when i heard about this work i was a bit surprised.  if.people had been onto bayesian filtering four years ago,.why wasn't everyone using it?.when i read the papers i found out why.  pantel and lin's filter was the.more effective of the two, but it.only caught 92% of spam, with 1.16% false positives.when i tried writing a bayesian spam filter,.it caught 99.5% of spam with less than .03% false.positives [4]..it's always alarming when two people.trying the same experiment get widely divergent results..it's especially alarming here because those two sets of numbers.might yield opposite conclusions..different users have different requirements, but i think for.many people a filtering rate of 92% with 1.16% false positives means.that filtering is not an acceptable solution, whereas.99.5% with less than .03% false positives means that it is.so why did we get such different numbers?.i haven't tried to reproduce pantel and lin's results, but.from reading the paper i see five things that probably account.for the difference.one is simply that they trained their filter on very little.data: 160 spam and 466 nonspam mails..filter performance should still be climbing with data.sets that small.  so their numbers may not even be an accurate.measure of the performance of their algorithm, let alone of.bayesian spam filtering in general.but i think the most important difference is probably.that they ignored message headers.  to anyone who has worked.on spam filters, this will seem a perverse decision..and yet in the very first filters i tried writing, i ignored the.headers too.  why?  because i wanted to keep the problem neat..i didn't know much about mail headers then, and they seemed to me.full of random stuff.  there is a lesson here for filter.writers: don't ignore data.  you'd think this lesson would.be too obvious to mention, but i've had to learn it several times.third, pantel and lin stemmed the tokens, meaning they reduced e.g. both.``mailing'' and ``mailed'' to the root ``mail''.   they may.have felt they were forced to do this by the small size.of their corpus, but if so this is a kind of premature.optimization.fourth, they calculated probabilities differently..they used all the tokens, whereas i only.use the 15 most significant.  if you use all the tokens.you'll tend to miss longer spams, the type where someone tells you their life.story up to the point where they got rich from some multilevel.marketing scheme.  and such an algorithm.would be easy for spammers to spoof: just add a big.chunk of random text to counterbalance the spam terms.finally, they didn't bias against false positives..i think.any spam filtering algorithm ought to have a convenient.knob you can twist to decrease the.false positive rate at the expense of the filtering rate..i do this by counting the occurrences.of tokens in the nonspam corpus double..i don't think it's a good idea to treat spam filtering as.a straight text classification problem.  you can use.text classification techniques, but solutions can and should.reflect the fact that the text is email, and spam.in particular.  email is not just text; it has structure..spam filtering is not just classification, because.false positives are so much worse than false negatives.that you should treat them as a different kind of error..and the source of error is not just random variation, but.a live human spammer working actively to defeat your filter.tokensanother project i heard about.after the slashdot article was bill yerazunis'.crm114 [5]..this is the counterexample to the design principle i.just mentioned.  it's a straight text classifier,.but such a stunningly effective one that it manages to filter.spam almost perfectly without even knowing that's.what it's doing.once i understood how crm114 worked, it seemed.inevitable that i would eventually have to move from filtering based.on single words to an approach like this.  but first, i thought,.i'll see how far i can get with single words.  and the answer is,.surprisingly far.mostly i've been working on smarter tokenization.  on.current spam, i've been able to achieve filtering rates that.approach crm114's.  these techniques are mostly orthogonal to bill's;.an optimal solution might incorporate both.``a plan for spam'' uses a very simple.definition of a token.  letters, digits, dashes, apostrophes,.and dollar signs are constituent characters, and everything.else is a token separator.  i also ignored case.now i have a more complicated definition of a token:.case is preserved. exclamation points are constituent characters. periods and commas are constituents if they occur.between two digits.  this lets me get ip addresses.and prices intact. a price range like $20-25 yields two tokens,.$20 and $25. tokens that occur within the.to, from, subject, and return-path lines, or within urls,.get marked accordingly.  e.g. ``foo'' in the subject line.becomes ``subject*foo''.  (the asterisk could.be any character you don't allow as a constituent.).such measures increase the filter's vocabulary, which.makes it more discriminating.  for example, in the current.filter, ``free'' in the subject line.has a spam probability of 98%, whereas the same token.in the body has a spam probability of only 65%.here are some of the current probabilities [6]:.subject*free      0.9999.free!!            0.9999.to*free           0.9998.subject*free      0.9782.free!             0.9199.free              0.9198.url*free          0.9091.free              0.8747.from*free         0.7636.free              0.6546.in the plan for spam filter, all these tokens would have had the.same probability, .7602.  that filter recognized about 23,000.tokens.  the current one recognizes about 187,000.the disadvantage of having a larger universe of tokens.is that there is more.chance of misses..spreading your corpus out over more tokens.has the same effect as making it smaller..if you consider exclamation points as.constituents, for example, then you could end up.not having a spam probability for free with seven exclamation.points, even though you know that free with just two.exclamation points has a probability of 99.99%.one solution to this is what i call degeneration.  if you.can't find an exact match for a token,.treat it as if it were a less specific.version.  i consider terminal exclamation.points, uppercase letters, and occurring in one of the.five marked contexts as making a token more specific..for example, if i don't find a probability for.``subject*free!'', i look for probabilities for.``subject*free'', ``free!'', and ``free'', and take whichever one.is farthest from .5.here are the alternatives [7].considered if the filter sees ``free!!!'' in the.subject line and doesn't have a probability for it..subject*free!!!.subject*free!!!.subject*free!.subject*free!.subject*free!.subject*free.subject*free.subject*free.free!!!.free!!!.free!!!.free!.free!.free!.free.free.free.if you do this, be sure to consider versions with initial.caps as well as all uppercase and all lowercase.  spams.tend to have more sentences in imperative mood, and in.those the first word is a verb.  so verbs with initial caps.have higher spam probabilities than they would in all.lowercase.  in my filter, the spam probability of ``act''.is 98% and for ``act'' only 62%.if you increase your filter's vocabulary, you can end up.counting the same word multiple times, according to your old.definition of ``same''..logically, they're not the.same token anymore.  but if this still bothers you, let.me add from experience that the words you seem to be.counting multiple times tend to be exactly the ones you'd.want to.another effect of a larger vocabulary is that when you.look at an incoming mail you find more interesting tokens,.meaning those with probabilities far from .5.  i use the.15 most interesting to decide if mail is spam..but you can run into a problem when you use a fixed number.like this.  if you find a lot of maximally interesting tokens,.the result can end up being decided by whatever random factor.determines the ordering of equally interesting tokens..one way to deal with this is to treat some.as more interesting than others.for example, the.token ``dalco'' occurs 3 times in my spam corpus and never.in my legitimate corpus.  the token ``url*optmails''.(meaning ``optmails'' within a url) occurs 1223 times..and yet, as i used to calculate probabilities for tokens,.both would have the same spam probability, the threshold of .99.that doesn't feel right.  there are theoretical.arguments for giving these two tokens substantially different.probabilities (pantel and lin do), but i haven't tried that yet..it does seem at least that if we find more than 15 tokens.that only occur in one corpus or the other, we ought to.give priority to the ones that occur a lot.  so now.there are two threshold values.  for tokens that occur only.in the spam corpus, the probability is .9999 if they.occur more than 10 times and .9998 otherwise.  ditto.at the other end of the scale for tokens found.only in the legitimate corpus.i may later scale token probabilities substantially,.but this tiny amount of scaling at least ensures that.tokens get sorted the right way.another possibility would be to consider not.just 15 tokens, but all the tokens over a certain.threshold of interestingness.  steven hauser does this.in his statistical spam filter [8]..if you use a threshold, make it very high, or.spammers could spoof you by packing messages with.more innocent words.finally, what should one do.about html?  i've tried the whole spectrum of options, from.ignoring it to parsing it all.  ignoring html is a bad idea,.because it's full of useful spam signs.  but if you parse.it all, your filter might degenerate into a mere html.recognizer.  the most effective approach.seems to be the middle course, to notice some tokens but not.others.  i look at a, img, and font tags, and ignore the.rest.  links and images you should certainly look at, because.they contain urls.i could probably be smarter about dealing with html, but i.don't think it's worth putting a lot of time into this..spams full of html are easy to filter.  the smarter.spammers already avoid it.  so.performance in the future should not depend much on how.you deal with html.performancebetween december 10 2002 and january 10 2003 i got about.1750 spams..of these, 4 got through.  that's a filtering.rate of about 99.75%.two of the four spams i missed got through because they.happened to use words that occur often in my legitimate.email.the third was one of those that exploit.an insecure cgi script to send mail to third parties..they're hard to filter based just.on the content because the headers are innocent and.they're careful about the words they use.  even so i can.usually catch them.  this one squeaked by with a.probability of .88, just under the threshold of .9.of course, looking at multiple token sequences.would catch it easily.  ``below is the result of.your feedback form'' is an instant giveaway.the fourth spam was what i call.a spam-of-the-future, because this is what i expect spam to.evolve into: some completely neutral.text followed by a url.  in this case it was was from.someone saying they had finally finished their homepage.and would i go look at it.  (the page was of course an.ad for a porn site.)if the spammers are careful about the headers and use a.fresh url, there is nothing in spam-of-the-future for filters.to notice.  we can of course counter by sending a.crawler to look at the page.  but that might not be necessary..the response rate for spam-of-the-future must.be low, or everyone would be doing it..if it's low enough,.it won't pay for spammers to send it, and we won't.have to work too hard on filtering it.now for the really shocking news: during that same one-month.period i got three false positives.in a way it's.a relief to get some false positives.  when i wrote ``a plan.for spam'' i hadn't had any, and i didn't know what they'd.be like.  now that i've had a few, i'm relieved to find.they're not as bad as i feared..false positives yielded by statistical.filters turn out to be mails that sound a lot like spam, and.these tend to be the ones you would least mind missing [9].two of the false positives were newsletters.from companies i've bought things from.  i never.asked to receive them, so arguably they.were spams, but i count them as false positives because.i hadn't been deleting them as spams before.  the reason.the filters caught them was that both companies in.january switched to commercial email senders.instead of sending the mails from their own servers,.and both the headers and the bodies became much spammier.the third false positive was a bad one, though.  it was.from someone in egypt and written in all uppercase.  this was.a direct result of making tokens case sensitive; the plan.for spam filter wouldn't have caught it.it's hard to say what the overall false positive rate is,.because we're up in the noise, statistically..anyone who has worked on filters (at least, effective filters) will.be aware of this problem..with some emails it's.hard to say whether they're spam or not, and these are.the ones you end up looking at when you get filters.really tight.  for example, so far the filter has.caught two emails that were sent to my address because.of a typo, and one sent to me in the belief that i was.someone else.  arguably, these are neither my spam.nor my nonspam mail.another false positive was from a vice president at virtumundo..i wrote to them pretending to be a customer,.and since the reply came back through virtumundo's.mail servers it had the most incriminating.headers imaginable.  arguably this isn't a real false.positive either, but a sort of heisenberg uncertainty.effect: i only got it because i was writing about spam.filtering.not counting these, i've had a total of five false positives.so far, out of about 7740 legitimate emails, a rate of .06%..the other two were a notice that something i bought.was back-ordered, and a party reminder from evite.i don't think this number can be trusted, partly.because the sample is so small, and partly because.i think i can fix the filter not to catch.some of these.false positives seem to me a different kind of error from.false negatives..filtering rate is a measure of performance.  false.positives i consider more like bugs.  i approach improving the.filtering rate as optimization, and decreasing false.positives as debugging.so these five false positives are my bug list.  for example,.the mail from egypt got nailed because the uppercase text.made it look to the filter like a nigerian spam..this really is kind of a bug.  as with.html, the email being all uppercase is really conceptually one.feature, not one for each word.  i need to handle case in a.more sophisticated way.so what to make of this .06%?  not much, i think.  you could.treat it as an upper bound, bearing in mind the small sample size..but at this stage it is more a measure of the bugs.in my implementation than some intrinsic false positive rate.of bayesian filtering.futurewhat next?  filtering is an optimization problem,.and the key to optimization is profiling.  don't.try to guess where your code is slow, because you'll.guess wrong.  look at where your code is slow,.and fix that.  in filtering, this translates to:.look at the spams you miss, and figure out what you.could have done to catch them.for example, spammers are now working aggressively to.evade filters, and one of the things they're doing is.breaking up and misspelling words to prevent filters from.recognizing them.  but working on this is not my first.priority, because i still have no trouble catching these.spams [10].there are two kinds of spams i currently do.have trouble with..one is the type that pretends to be an email from.a woman inviting you to go chat with her or see her profile on a dating.site.  these get through because they're the one type of.sales pitch you can make without using sales talk.  they use.the same vocabulary as ordinary email.the other kind of spams i have trouble filtering are those.from companies in e.g. bulgaria offering contract programming.services.   these get through because i'm a programmer too, and.the spams are full of the same words as my real mail.i'll probably focus on the personal ad type first.  i think if.i look closer i'll be able to find statistical differences.between these and my real mail.  the style of writing is.certainly different, though it may take multiword filtering.to catch that..also, i notice they tend to repeat the url,.and someone including a url in a legitimate mail wouldn't do that [11].the outsourcing type are going to be hard to catch.  even if.you sent a crawler to the site, you wouldn't find a smoking.statistical gun..maybe the only answer is a central list of.domains advertised in spams [12].  but there can't be that.many of this type of mail.  if the only.spams left were unsolicited offers of contract programming.services from bulgaria, we could all probably move on to.working on something else.will statistical filtering actually get us to that point?.i don't know.  right now, for me personally, spam is.not a problem.  but spammers haven't yet made a serious.effort to spoof statistical filters.  what will happen when they do?i'm not optimistic about filters that work at the.network level [13]..when there is a static obstacle worth getting past, spammers.are pretty efficient at getting past it.  there.is already a company called assurance systems that will.run your mail through spamassassin and tell you whether.it will get filtered out.network-level filters won't be completely useless..they may be enough to kill all the "opt-in".spam, meaning spam from companies like virtumundo and.equalamail who claim that they're really running opt-in lists..you can filter those based just on the headers, no.matter what they say in the body.  but anyone willing to.falsify headers or use open relays, presumably including.most porn spammers, should be able to get some message past.network-level filters if they want to.  (by no means the.message they'd like to send though, which is something.)the kind of filters i'm optimistic about are ones that.calculate probabilities based on each individual user's mail..these can be much more effective, not only in.avoiding false positives, but in filtering too: for example,.finding the recipient's email address base-64 encoded anywhere in.a message is a very good spam indicator.but the real advantage of individual filters is that they'll all be.different.  if everyone's filters have different probabilities,.it will make the spammers' optimization loop, what programmers.would call their edit-compile-test cycle, appallingly slow..instead of just tweaking a spam till it gets through a copy of.some filter they have on their desktop, they'll have to do a.test mailing for each tweak.  it would be like programming in.a language without an interactive toplevel,.and i wouldn't wish that.on anyone.notes[1].paul graham.  ``a plan for spam.'' august 2002..http://paulgraham.com/spam.html.probabilities in this algorithm are.calculated using a degenerate case of bayes' rule.  there are.two simplifying assumptions: that the probabilities.of features (i.e. words) are independent, and that we know.nothing about the prior probability of an email being.spam.the first assumption is widespread in text classification..algorithms that use it are called ``naive bayesian.''the second assumption i made because the proportion of spam in.my incoming mail fluctuated so much from day to day (indeed,.from hour to hour) that the overall prior ratio seemed.worthless as a predictor.  if you assume that p(spam) and.p(nonspam) are both .5, they cancel out and you can.remove them from the formula.if you were doing bayesian filtering in a situation where.the ratio of spam to nonspam was consistently very high or.(especially) very low, you could probably improve filter.performance by incorporating prior probabilities.  to do.this right you'd have to track ratios by time of day, because.spam and legitimate mail volume both have distinct daily.patterns.[2].patrick pantel and dekang lin. ``spamcop-- a spam.classification & organization program.''  proceedings of aaai-98.workshop on learning for text categorization.[3].mehran sahami, susan dumais, david heckerman and eric horvitz..``a bayesian approach to filtering junk e-mail.'' proceedings of aaai-98.workshop on learning for text categorization.[4] at the time i had zero false positives out of about 4,000.legitimate emails.  if the next legitimate email was.a false positive, this would give us .03%.  these false positive.rates are untrustworthy, as i explain later. i quote.a number here only to emphasize that whatever the false positive rate.is, it is less than 1.16%..[5] bill yerazunis. ``sparse binary polynomial hash message.filtering and the crm114 discriminator.''  proceedings of 2003.spam conference.[6] in ``a plan for spam'' i used thresholds of .99 and .01..it seems justifiable to use thresholds proportionate to the.size of the corpora.  since i now have on the order of 10,000 of each.type of mail, i use .9999 and .0001.[7] there is a flaw here i should probably fix.  currently,.when ``subject*foo'' degenerates to just ``foo'', what that means is.you're getting the stats for occurrences of ``foo'' in.the body or header lines other than those i mark..what i should do is keep track of statistics for ``foo''.overall as well as specific versions, and degenerate from.``subject*foo'' not to ``foo'' but to ``anywhere*foo''.  ditto for.case: i should degenerate from uppercase to any-case, not.lowercase.it would probably be a win to do this with prices.too, e.g. to degenerate from ``$129.99'' to ``$--9.99'', ``$--.99'',.and ``$--''.you could also degenerate from words to their stems,.but this would probably only improve filtering rates early on.when you had small corpora.[8] steven hauser.  ``statistical spam filter works for me.''.http://www.sofbot.com.[9] false positives are not all equal, and we should remember.this when comparing techniques for stopping spam..whereas many of the false positives caused by filters.will be near-spams that you wouldn't mind missing,.false positives caused by blacklists, for example, will be just.mail from people who chose the wrong isp.  in both.cases you catch mail that's near spam, but for blacklists nearness.is physical, and for filters it's textual..[10] if spammers get good enough at obscuring tokens.for this to be a problem, we can respond by simply removing.whitespace, periods, commas, etc.  and using a dictionary to.pick the words out of the resulting sequence..and of course finding words this way that weren't visible in.the original text would in itself be evidence of spam.picking out the words won't be trivial.  it will require.more than just reconstructing word boundaries; spammers.both add (``xhot nporn csite'') and omit (``p#rn'') letters..vision research may be useful here, since human vision is.the limit that such tricks will approach.[11].in general, spams are more repetitive than regular email..they want to pound that message home.  i currently don't.allow duplicates in the top 15 tokens, because.you could get a false positive if the sender happens to use.some bad word multiple times. (in my current filter, ``dick'' has.a spam probabilty of .9999, but it's also a name.).it seems we should at least notice duplication though,.so i may try allowing up to two of each token, as brian burton does in.spamprobe.[12]  this is what approaches like brightmail's will.degenerate into once spammers are pushed into using mad-lib.techniques to generate everything else in the message.[13].it's sometimes argued that we should be working on filtering.at the network level, because it is more efficient.  what people.usually mean when they say this is: we currently filter at the.network level, and we don't want to start over from scratch..but you can't dictate the problem to fit your solution.historically, scarce-resource arguments have been the losing.side in debates about software design..people only tend to use them to justify choices.(inaction in particular) made for other reasons.thanks to sarah harlin, trevor blackwell, and.dan giffin for reading drafts of this paper, and to dan again.for most of the infrastructure that this filter runs on.related:a plan for spamplan for spam faq2003 spam conference proceedingsjapanese translationchinese translationtest of these suggestions<eot><sot>design and research.january 2003
(this article is derived from a keynote talk at the fall 2002 meeting.of nepls.)visitors to this country are often surprised to find that.americans like to begin a conversation by asking "what do you do?".i've never liked this question.  i've rarely had a.neat answer to it.  but i think i have finally solved the problem..now, when someone asks me what i do, i look them straight.in the eye and say "i'm designing a.new dialect of lisp.".i recommend this answer to anyone who doesn't like being asked what.they do.  the conversation will turn immediately to other topics.i don't consider myself to be doing research on programming languages..i'm just designing one, in the same way that someone might design.a building or a chair or a new typeface..i'm not trying to discover anything new.  i just want.to make a language that will be good to program in.  in some ways,.this assumption makes life a lot easier.the difference between design and research seems to be a question.of new versus good.  design doesn't have to be new, but it has to.be good.  research doesn't have to be good, but it has to be new..i think these two paths converge at the top: the best design.surpasses its predecessors by using new ideas, and the best research.solves problems that are not only new, but actually worth solving..so ultimately we're aiming for the same destination, just approaching.it from different directions.what i'm going to talk about today is what your target looks like.from the back.  what do you do differently when you treat.programming languages as a design problem instead of a research topic?the biggest difference is that you focus more on the user..design begins by asking, who is this.for and what do they need from it?  a good architect,.for example, does not begin by creating a design that he then.imposes on the users, but by studying the intended users and figuring.out what they need.notice i said "what they need," not "what they want."  i don't mean.to give the impression that working as a designer means working as.a sort of short-order cook, making whatever the client tells you.to.  this varies from field to field in the arts, but.i don't think there is any field in which the best work is done by.the people who just make exactly what the customers tell them to.the customer is always right in.the sense that the measure of good design is how well it works.for the user.  if you make a novel that bores everyone, or a chair.that's horribly uncomfortable to sit in, then you've done a bad.job, period.  it's no defense to say that the novel or the chair.is designed according to the most advanced theoretical principles.and yet, making what works for the user doesn't mean simply making.what the user tells you to.  users don't know what all the choices.are, and are often mistaken about what they really want.the answer to the paradox, i think, is that you have to design.for the user, but you have to design what the user needs, not simply.what he says he wants..it's much like being a doctor.  you can't just treat a patient's.symptoms.  when a patient tells you his symptoms, you have to figure.out what's actually wrong with him, and treat that.this focus on the user is a kind of axiom from which most of the.practice of good design can be derived, and around which most design.issues center.if good design must do what the user needs, who is the user?  when.i say that design must be for users, i don't mean to imply that good.design aims at some kind of.lowest common denominator.  you can pick any group of users you.want.  if you're designing a tool, for example, you can design it.for anyone from beginners to experts, and what's good design.for one group might be bad for another.  the point.is, you have to pick some group of users.  i don't think you can.even talk about good or bad design except with.reference to some intended user.you're most likely to get good design if the intended users include.the designer himself.  when you design something.for a group that doesn't include you, it tends to be for people.you consider to be less sophisticated than you, not more sophisticated.that's a problem, because looking down on the user, however benevolently,.seems inevitably to corrupt the designer..i suspect that very few housing.projects in the us were designed by architects who expected to live.in them.   you can see the same thing.in programming languages.  c, lisp, and smalltalk were created for.their own designers to use.  cobol, ada, and java, were created.for other people to use.if you think you're designing something for idiots, the odds are.that you're not designing something good, even for idiots..even if you're designing something for the most sophisticated.users, though, you're still designing for humans.  it's different.in research.  in math you.don't choose abstractions because they're.easy for humans to understand; you choose whichever make the.proof shorter.  i think this is true for the sciences generally..scientific ideas are not meant to be ergonomic.over in the arts, things are very different.  design is.all about people.  the human body is a strange.thing, but when you're designing a chair,.that's what you're designing for, and there's no way around it..all the arts have to pander to the interests and limitations.of humans.   in painting, for example, all other things being.equal a painting with people in it will be more interesting than.one without.  it is not merely an accident of history that.the great paintings of the renaissance are all full of people..if they hadn't been, painting as a medium wouldn't have the prestige.that it does.like it or not, programming languages are also for people,.and i suspect the human brain is just as lumpy and idiosyncratic.as the human body.  some ideas are easy for people to grasp.and some aren't.  for example, we seem to have a very limited.capacity for dealing with detail.  it's this fact that makes.programing languages a good idea in the first place; if we.could handle the detail, we could just program in machine.language.remember, too, that languages are not.primarily a form for finished programs, but something that.programs have to be developed in.  anyone in the arts could.tell you that you might want different mediums for the.two situations.  marble, for example, is a nice, durable.medium for finished ideas, but a hopelessly inflexible one.for developing new ideas.a program, like a proof,.is a pruned version of a tree that in the past has had.false starts branching off all over it.  so the test of.a language is not simply how clean the finished program looks.in it, but how clean the path to the finished program was..a design choice that gives you elegant finished programs.may not give you an elegant design process.  for example,.i've written a few macro-defining macros full of nested.backquotes that look now like little gems, but writing them.took hours of the ugliest trial and error, and frankly, i'm still.not entirely sure they're correct.we often act as if the test of a language were how good.finished programs look in it..it seems so convincing when you see the same program.written in two languages, and one version is much shorter..when you approach the problem from the direction of the.arts, you're less likely to depend on this sort of.test.  you don't want to end up with a programming.language like marble.for example, it is a huge win in developing software to.have an interactive toplevel, what in lisp is called a.read-eval-print loop.  and when you have one this has.real effects on the design of the language.  it would not.work well for a language where you have to declare.variables before using them, for example.  when you're.just typing expressions into the toplevel, you want to be.able to set x to some value and then start doing things.to x.  you don't want to have to declare the type of x.first.  you may dispute either of the premises, but if.a language has to have a toplevel to be convenient, and.mandatory type declarations are incompatible with a.toplevel, then no language that makes type declarations.mandatory could be convenient to program in.in practice, to get good design you have to get close, and stay.close, to your users.  you have to calibrate your ideas on actual.users constantly, especially in the beginning.  one of the reasons.jane austen's novels are so good is that she read them out loud to.her family.  that's why she never sinks into self-indulgently arty.descriptions of landscapes,.or pretentious philosophizing.  (the philosophy's there, but it's.woven into the story instead of being pasted onto it like a label.).if you open an average "literary" novel and imagine reading it out loud.to your friends as something you'd written, you'll feel all too.keenly what an imposition that kind of thing is upon the reader.in the software world, this idea is known as worse is better..actually, there are several ideas mixed together in the concept of.worse is better, which is why people are still arguing about.whether worse.is actually better or not.  but one of the main ideas in that.mix is that if you're building something new, you should get a.prototype in front of users as soon as possible.the alternative approach might be called the hail mary strategy..instead of getting a prototype out quickly and gradually refining.it, you try to create the complete, finished, product in one long.touchdown pass.  as far as i know, this is a.recipe for disaster.  countless startups destroyed themselves this.way during the internet bubble.  i've never heard of a case.where it worked.what people outside the software world may not realize is that.worse is better is found throughout the arts..in drawing, for example, the idea was discovered during the.renaissance.  now almost every drawing teacher will tell you that.the right way to get an accurate drawing is not to.work your way slowly around the contour of an object, because errors will.accumulate and you'll find at the end that the lines don't meet..instead you should draw a few quick lines in roughly the right place,.and then gradually refine this initial sketch.in most fields, prototypes.have traditionally been made out of different materials..typefaces to be cut in metal were initially designed.with a brush on paper.  statues to be cast in bronze.were modelled in wax.  patterns to be embroidered on tapestries.were drawn on paper with ink wash.  buildings to be.constructed from stone were tested on a smaller scale in wood.what made oil paint so exciting, when it.first became popular in the fifteenth century, was that you.could actually make the finished work from the prototype..you could make a preliminary drawing if you wanted to, but you.weren't held to it; you could work out all the details, and.even make major changes, as you finished the painting.you can do this in software too.  a prototype doesn't have to.be just a model; you can refine it into the finished product..i think you should always do this when you can.  it lets you.take advantage of new insights you have along the way.  but.perhaps even more important, it's good for morale.morale is key in design.  i'm surprised people.don't talk more about it.  one of my first.drawing teachers told me: if you're bored when you're.drawing something, the drawing will look boring..for example, suppose you have to draw a building, and you.decide to draw each brick individually.  you can do this.if you want, but if you get bored halfway through and start.making the bricks mechanically instead of observing each one,.the drawing will look worse than if you had merely suggested.the bricks.building something by gradually refining a prototype is good.for morale because it keeps you engaged.  in software, my.rule is: always have working code.  if you're writing.something that you'll be able to test in an hour, then you.have the prospect of an immediate reward to motivate you..the same is true in the arts, and particularly in oil painting..most painters start with a blurry sketch and gradually.refine it..if you work this way, then in principle.you never have to end the day with something that actually.looks unfinished.  indeed, there is even a saying among.painters: "a painting is never finished, you just stop.working on it."  this idea will be familiar to anyone who.has worked on software.morale is another reason that it's hard to design something.for an unsophisticated user.   it's hard to stay interested in.something you don't like yourself.  to make something.good, you have to be thinking, "wow, this is really great,".not "what a piece of shit; those fools will love it."design means making things for humans.  but it's not just the.user who's human.  the designer is human too.notice all this time i've been talking about "the designer.".design usually has to be under the control of a single person to.be any good.   and yet it seems to be possible for several people.to collaborate on a research project.  this seems to.me one of the most interesting differences between research and.design.there have been famous instances of collaboration in the arts,.but most of them seem to have been cases of molecular bonding rather.than nuclear fusion.  in an opera it's common for one person to.write the libretto and another to write the music.   and during the renaissance,.journeymen from northern.europe were often employed to do the landscapes in the.backgrounds of italian paintings.  but these aren't true collaborations..they're more like examples of robert frost's."good fences make good neighbors."  you can stick instances.of good design together, but within each individual project,.one person has to be in control.i'm not saying that good design requires that one person think.of everything.  there's nothing more valuable than the advice.of someone whose judgement you trust.  but after the talking is.done, the decision about what to do has to rest with one person.why is it that research can be done by collaborators and.design can't?  this is an interesting question.  i don't.know the answer.  perhaps,.if design and research converge, the best research is also.good design, and in fact can't be done by collaborators..a lot of the most famous scientists seem to have worked alone..but i don't know enough to say whether there.is a pattern here.  it could be simply that many famous scientists.worked when collaboration was less common.whatever the story is in the sciences, true collaboration.seems to be vanishingly rare in the arts.  design by committee is a.synonym for bad design.  why is that so?  is there some way to.beat this limitation?i'm inclined to think there isn't-- that good design requires.a dictator.  one reason is that good design has to.be all of a piece.  design is not just for humans, but.for individual humans.  if a design represents an idea that.fits in one person's head, then the idea will fit in the user's.head too.related:japanese translationtaste for makersromanian translationspanish translation<eot><sot>a plan for spam.like to build things? try hacker.news..august 2002
(this article describes the spam-filtering techniques.used in the spamproof web-based mail reader we.built to exercise arc. an.improved algorithm is described in better.bayesian filtering.)i think it's possible to stop spam, and that.content-based filters are the way to do it..the achilles heel of the spammers is their message..they can circumvent any other barrier you set up.  they have so far, at.least.  but they have to deliver their message, whatever it.is.  if we can write software that recognizes their messages,.there is no way they can get around that._ _ _to the recipient, spam is easily recognizable.  if you hired.someone to read your mail and discard the spam, they would.have little trouble doing it.  how much do we have.to do, short of ai, to automate this process?i think we will be able to solve the problem with fairly.simple algorithms.  in fact, i've found that you can filter.present-day spam acceptably well using nothing more than a.bayesian combination of the spam probabilities of individual.words.  using a slightly tweaked (as described below) bayesian.filter, we now miss less than 5 per 1000 spams, with 0 false positives.the statistical approach is not usually the first one people.try when they write spam filters.  most hackers' first instinct is.to try to write software that recognizes individual properties of.spam.  you look at spams.and you think, the gall of these guys to try sending me mail.that begins "dear friend" or has a subject line that's all.uppercase and ends in eight exclamation points.  i can filter.out that stuff with about one line of code.and so you do,.and in the beginning it works.  a few simple rules will take.a big bite out of your incoming spam.  merely looking.for the word "click" will catch 79.7% of the.emails in my spam corpus, with only 1.2% false positives.i spent about six months writing software that looked for.individual spam features before i tried the statistical.approach.  what i found was that recognizing that last few.percent of spams got very hard, and that as i.made the filters stricter i got more false positives.false positives are innocent emails that get mistakenly.identified as spams..for most users,.missing legitimate email is.an order of magnitude worse than receiving spam, so a.filter that yields false positives is like an acne cure.that carries a risk of death to the patient.the more spam a user gets, the less.likely he'll be to notice one innocent mail sitting in his.spam folder.  and strangely enough, the better your spam filters get,.the more dangerous false positives become, because when the.filters are really good, users will be more likely to.ignore everything they catch.i don't know why i avoided trying the statistical approach.for so long.  i think it was because i got addicted to.trying to identify spam features myself, as if i were playing.some kind of competitive game with the spammers.  (nonhackers.don't often realize this, but most hackers are very competitive.).when i did try statistical analysis, i.found immediately that it was much cleverer than i had been..it discovered, of course, that terms like "virtumundo" and."teens" were good indicators of spam.  but it also.discovered that "per" and "fl" and "ff0000" are good.indicators of spam.  in fact, "ff0000" (html for bright red).turns out to be as good an indicator of spam as any.pornographic term._ _ _here's a sketch of how i do statistical filtering.  i start.with one corpus of spam and one of nonspam mail.  at the.moment each one has about 4000 messages in it.  i scan.the entire text, including headers and embedded html.and javascript, of each message in each corpus..i currently consider alphanumeric characters,.dashes, apostrophes, and dollar signs to be part of tokens,.and everything else to be a token separator.  (there is.probably room for improvement here.)  i ignore tokens that.are all digits, and i also ignore html comments, not even.considering them as token separators.i count the number.of times each token (ignoring case, currently) occurs in.each corpus.  at this stage i end up with two large hash.tables, one for each corpus, mapping tokens to number.of occurrences.next i create a third hash table, this time mapping.each token to the probability that an email containing it is a spam,.which i calculate as follows [1]:.(let ((g (* 2 (or (gethash word good) 0))).(b (or (gethash word bad) 0))).(unless (< (+ g b) 5).(max .01.(min .99 (float (/ (min 1 (/ b nbad)).(+ (min 1 (/ g ngood)).(min 1 (/ b nbad))))))))).where word is the token whose probability we're.calculating, good and bad are the hash tables.i created in the first step, and ngood and nbad.are the number of nonspam and spam messages respectively.i explained this as code to show a couple of important details..i want to bias the probabilities slightly to avoid false.positives, and by trial and error i've found that a good.way to do it is to double all the numbers in good..this helps to distinguish between words that occasionally.do occur in legitimate email and words that almost never do..i only consider words that occur more than five times in.total (actually, because of the doubling, occurring three.times in nonspam mail would be enough).  and then there is.the question of what probability to assign to words that.occur in one corpus but not the other.  again by trial and.error i chose .01 and .99.  there may be room for tuning.here, but as the corpus grows such tuning will happen.automatically anyway.the especially observant will notice that while i consider.each corpus to be a single long stream of text for purposes.of counting occurrences, i use the number of emails in.each, rather than their combined length, as the divisor.in calculating spam probabilities.  this adds another.slight bias to protect against false positives.when new mail arrives, it is scanned into tokens, and.the most interesting fifteen tokens, where interesting is.measured by how far their spam probability is from a.neutral .5, are used to calculate the probability that.the mail is spam.  if probs.is a list of the fifteen individual probabilities, you.calculate the.combined probability thus:.(let ((prod (apply #'* probs))).(/ prod (+ prod (apply #'* (mapcar #'(lambda (x).(- 1 x)).probs))))).one question that arises in.practice is what probability to assign to a word you've.never seen, i.e. one that doesn't occur in the hash table.of word probabilities.  i've found, again by trial and.error, that .4 is a good number to use.  if you've never.seen a word before, it is probably fairly innocent; spam.words tend to be all too familiar.there are examples of this algorithm being applied to.actual emails in an appendix at the end.i treat mail as spam if the algorithm above gives it a.probability of more than .9 of being spam.  but in practice.it would not matter much where i put this threshold, because.few probabilities end up in the middle of the range._ _ _one great advantage of the statistical approach is that you.don't have to read so many spams.  over the past six months,.i've read literally thousands of spams, and it is really.kind of demoralizing.  norbert wiener said if you compete.with slaves you become a slave, and there is something.similarly degrading about competing with spammers.   to.recognize individual spam features you have to try to get.into the mind of the spammer, and frankly i want to spend.as little time inside the minds of spammers as possible.but the real advantage of the bayesian approach, of course,.is that you know what.you're measuring.  feature-recognizing filters like.spamassassin assign a spam "score" to email.  the bayesian.approach assigns an actual probability.  the problem with.a "score" is that no one knows what it means.  the user.doesn't know what it means, but worse still, neither does.the developer of the filter.  how many points should an.email get for having the word "sex" in it?  a probability.can of course be mistaken, but there is little ambiguity.about what it means, or how evidence should be combined.to calculate it.  based on my corpus, "sex" indicates.a .97 probability of the containing email being a spam,.whereas "sexy" indicates .99 probability..and bayes' rule, equally unambiguous, says that an email.containing both words would, in the (unlikely).absence of any other evidence, have a 99.97% chance of.being a spam.because it is measuring probabilities, the bayesian approach.considers all the evidence in the email, both good and bad..words that occur disproportionately rarely.in spam (like "though" or "tonight" or "apparently").contribute as much to decreasing the probability as.bad words like "unsubscribe" and "opt-in" do to.increasing it.  so an otherwise innocent email that happens.to include the word "sex" is not going to get tagged as spam.ideally, of course, the probabilities should be calculated.individually for each user.  i get a lot of email containing.the word "lisp", and (so far) no spam that does.  so a word.like that is effectively a kind of password for sending.mail to me.  in my earlier spam-filtering software, the user.could set up a list of such words and mail containing.them would automatically get past the filters.  on my.list i put words like "lisp" and also my zipcode, so.that (otherwise rather spammy-sounding) receipts from.online orders would get through.  i thought i was being.very clever, but i found that the bayesian filter did the.same thing for me, and moreover discovered of a lot of words i.hadn't thought of.when i said at the start that our filters let through less than.5 spams per 1000 with 0 false positives, i'm talking about.filtering my mail based on a corpus of my mail.  but these.numbers are not misleading, because that is the approach i'm.advocating: filter each user's mail based on the spam and.nonspam mail he receives.  essentially, each user should.have two delete buttons, ordinary delete and delete-as-spam..anything deleted as spam goes into the spam corpus,.and everything else goes into the nonspam corpus.you could start.users with a seed filter, but ultimately each user should have.his own per-word probabilities based on the actual mail he.receives.  this (a) makes the filters more effective, (b) lets.each user decide their own precise definition of spam,.and (c) perhaps best of all makes it hard for spammers.to tune mails to get through the filters.  if a lot of the.brain of the filter is in the individual databases, then.merely tuning spams to get through the seed filters.won't guarantee anything about how well they'll get through.individual users' varying and much more trained filters.content-based spam filtering is often combined with a whitelist,.a list of senders whose mail can be accepted with no filtering..one easy way to build such a.whitelist is to keep a list of every address the user has.ever sent mail to.  if a mail reader has a delete-as-spam.button then you could also add the from address.of every email the user has deleted as ordinary trash.i'm an advocate of whitelists, but more as a way to save.computation than as a way to improve filtering.  i used to think that.whitelists would make filtering easier, because you'd.only have to filter email from people you'd never heard.from, and someone sending you mail for the first time is.constrained by convention in what they can say to you..someone you already know might send you an email talking about sex,.but someone sending you mail for the first time would not.be likely to.  the problem is, people can have more than one.email address, so a new from-address doesn't guarantee that.the sender is writing to you for the first time..it is not unusual.for an old friend (especially if he is a hacker) to suddenly.send you an email with a new from-address, so you can't.risk false positives by filtering mail from unknown.addresses especially stringently.in a sense, though, my filters do themselves embody a kind.of whitelist (and blacklist) because they are based on.entire messages, including the headers.  so to that.extent they "know" the email addresses of trusted senders.and even the routes by which mail gets from them to me..and they know the same about spam, including the server.names, mailer versions, and protocols._ _ _if i thought that i could keep up current rates of spam.filtering, i would consider this problem solved.  but it.doesn't mean much to be able to filter out most present-day.spam, because spam evolves..indeed, most.antispam techniques so far have been like pesticides that.do nothing more than create a new, resistant strain of bugs.i'm more hopeful about bayesian filters, because they evolve.with the spam.  so as spammers start using "c0ck".instead of "cock" to evade simple-minded spam filters.based on individual words, bayesian filters automatically.notice.  indeed, "c0ck" is far more damning evidence than."cock", and bayesian filters know precisely how much more.still, anyone who proposes a plan for spam filtering has to.be able to answer the question: if the spammers knew.exactly what you were doing,.how well could they get past you?  for example, i think that if.checksum-based spam filtering becomes a serious obstacle,.the spammers will just.switch to mad-lib techniques for generating message bodies.to beat bayesian filters, it would not be enough for spammers.to make their emails unique or to stop using individual.naughty words.  they'd have to make their mails indistinguishable.from your ordinary mail.  and this i think would severely.constrain them.  spam is mostly sales.pitches, so unless your regular mail is all sales pitches,.spams will inevitably have a different character.  and.the spammers would also, of course, have to change (and keep.changing) their whole infrastructure, because otherwise.the headers would look as bad to the bayesian filters as ever,.no matter what they did to the message body.  i don't know.enough about the infrastructure that spammers use to know.how hard it would be to make the headers look innocent, but.my guess is that it would be even harder than making the.message look innocent.assuming they could solve the problem of the headers,.the spam of the future will probably look something like.this:.hey there.  thought you should check out the following:.http://www.27meg.com/foo.because that is about as much sales pitch as content-based.filtering will leave the spammer room to make.  (indeed, it.will be hard even to get this past filters, because if everything.else in the email is neutral, the spam probability will hinge on.the url, and it will take some effort to make that look neutral.)spammers range from businesses running so-called.opt-in lists who don't even try to conceal their identities,.to guys who hijack mail servers to send out spams promoting.porn sites.  if we use filtering to whittle their.options down to mails like the one above, that should.pretty much put the spammers on the "legitimate" end of.the spectrum out of business; they feel obliged.by various state laws to include boilerplate about why.their spam is not spam, and how to cancel your."subscription,"  and that kind of text is easy to.recognize.(i used to think it was naive to believe that stricter laws.would decrease spam.  now i think that while stricter laws.may not decrease the amount of spam that spammers send,.they can certainly help filters to decrease the amount of.spam that recipients actually see.)all along the spectrum, if you restrict the sales pitches spammers.can make, you will inevitably tend to put them out of.business.  that word business is an important one to.remember.  the spammers are businessmen.  they send spam because.it works.  it works because although the response rate.is abominably low (at best 15 per million, vs 3000 per.million for a catalog mailing), the cost, to them, is.practically nothing.  the cost is enormous for the recipients,.about 5 man-weeks for each million recipients who spend.a second to delete the spam, but the spammer.doesn't have to pay that.sending spam does cost the spammer something, though. [2].so the lower we can get the.response rate-- whether by filtering, or by using filters to force.spammers to dilute their pitches-- the fewer businesses will find it.worth their while to send spam.the reason the spammers use the kinds of.sales.pitches that they do is to increase response rates..this is possibly even more disgusting.than getting inside the mind of a spammer,.but let's take a quick look inside the mind of someone.who responds to a spam.  this person is either.astonishingly credulous or deeply in denial about their.sexual interests.  in either case, repulsive or.idiotic as the spam seems to us, it is exciting.to them.  the spammers wouldn't say these things if they.didn't sound exciting.  and "thought you.should check out the following" is just not going to.have nearly the pull with the spam recipient as.the kinds of things that spammers say now..result: if it can't contain exciting sales pitches,.spam becomes less effective as a marketing vehicle,.and fewer businesses want to use it.that is the big win in the end.  i started writing spam.filtering software because i didn't want have to look at.the stuff anymore..but if we get good enough at filtering.out spam, it will stop working, and the spammers.will actually stop sending it._ _ _of all the approaches to fighting spam, from software to laws,.i believe bayesian filtering will be the single most.effective.  but i also.think that the more different kinds of antispam efforts.we undertake, the better, because any measure that.constrains spammers will tend to make filtering easier..and even within the world of content-based filtering, i think.it will be a good thing if there are many different kinds.of software being used simultaneously.  the more different.filters there are, the harder it will be for.spammers to tune spams to get through them..appendix: examples of filteringhere is an example of a spam that arrived while i was writing.this article.  the fifteen most interesting words in this spam are:.qvp0045.indira.mx-05.intimail.$7500.freeyankeedom.cdo.bluefoxmedia.jpg.unsecured.platinum.3d0.qves.7c5.7c266675.the words are a mix of stuff from the headers and from the.message body, which is typical of spam.  also typical of spam.is that every one of these words has a spam probability,.in my database, of .99.  in fact there are more than fifteen words.with probabilities of .99, and these are just the first.fifteen seen.unfortunately that makes this email a boring example of.the use of bayes' rule.  to see an interesting variety of.probabilities we have to look at this actually quite.atypical spam.the fifteen most interesting words in this spam, with their probabilities,.are:.madam           0.99.promotion       0.99.republic        0.99.shortest        0.047225013.mandatory       0.047225013.standardization 0.07347802.sorry           0.08221981.supported       0.09019077.people's        0.09019077.enter           0.9075001.quality         0.8921298.organization    0.12454646.investment      0.8568143.very            0.14758544.valuable        0.82347786.this time the evidence is a mix of good and bad.  a word like."shortest" is almost as much evidence for innocence as a.word like "madam" or "promotion" is for guilt.  but still the.case for guilt is stronger.  if you combine these numbers.according to bayes' rule, the resulting probability is .9027."madam" is obviously from spams beginning."dear sir or madam."  they're not very common, but the.word "madam" never occurs in my legitimate email, and.it's all about the ratio."republic" scores high because.it often shows up in nigerian scam emails, and also occurs once.or twice in spams referring to korea and south africa..you might say that it's.an accident that it thus helps identify this spam.  but i've.found when examining spam probabilities that there are.a lot of these accidents, and they have an uncanny tendency to.push things in the right direction rather than the wrong one..in this case, it is not entirely a coincidence that the word."republic" occurs in nigerian scam emails and this spam..there is a whole class of dubious business propositions involving.less developed countries, and these in turn are more likely.to have names that specify explicitly (because they aren't) that they.are republics.[3]on the other hand, "enter" is a genuine miss.  it occurs.mostly in unsubscribe instructions, but here is used in a.completely innocent way.  fortunately the statistical approach is.fairly robust, and can tolerate quite a lot of misses.before the results start to be thrown off.for comparison,.here is an example of that rare bird, a spam that.gets through the filters.  why?  because by sheer chance it happens.to be loaded with words that occur in my actual email:.perl       0.01.python     0.01.tcl        0.01.scripting  0.01.morris     0.01.graham     0.01491078.guarantee  0.9762507.cgi        0.9734398.paul       0.027040077.quite      0.030676773.pop3       0.042199217.various    0.06080265.prices     0.9359873.managed    0.06451222.difficult  0.071706355.there are a couple pieces of good news here.  first, this mail.probably wouldn't get through the filters of someone who didn't.happen to specialize in programming languages and have a good.friend called morris.  for the average user, all the top five words here.would be neutral and would not contribute to the spam probability.second, i think filtering based on word pairs.(see below) might well.catch this one:  "cost effective", "setup fee", "money back" -- pretty.incriminating stuff.  and of course if they continued to spam me.(or a network i was part of), "hostex" itself would be.recognized as  a spam term.finally, here is an innocent email..its  fifteen most interesting words are as follows:.continuation  0.01.describe      0.01.continuations 0.01.example       0.033600237.programming   0.05214485.i'm           0.055427782.examples      0.07972858.color         0.9189189.localhost     0.09883721.hi            0.116539136.california    0.84421706.same          0.15981844.spot          0.1654587.us-ascii      0.16804294.what          0.19212411.most of the words here indicate the mail is an innocent one..there are two bad smelling words,  "color".(spammers love colored fonts) and "california".(which occurs in testimonials and also in menus in.forms), but they are not enough to outweigh obviously.innocent words like "continuation" and "example".it's interesting that "describe" rates as so thoroughly.innocent.  it hasn't occurred in a.single one of my 4000 spams.  the data turns out to be.full of such surprises.  one of the things you learn.when you analyze spam texts is how.narrow a subset of the language spammers operate in.  it's.that fact, together with the equally characteristic vocabulary.of any individual user's mail, that makes bayesian filtering.a good bet.appendix: more ideasone idea that i haven't tried yet is to filter based on.word pairs, or even triples, rather than individual words..this should yield a much sharper estimate of the probability..for example, in my current database, the word "offers".has a probability of .96.  if you based the probabilities.on word pairs, you'd end up with "special offers".and "valuable offers" having probabilities of .99.and, say, "approach offers" (as in "this approach offers").having a probability of .1 or less.the reason i haven't done this is that filtering based on.individual words already works so well.  but it does.mean that there is room to tighten the filters if spam.gets harder to detect..(curiously, a filter based on word pairs would be.in effect a markov-chaining text generator running.in reverse.)specific spam features (e.g. not seeing the recipient's.address in the to: field) do of course have value in.recognizing spam.  they can be considered in this.algorithm by treating them as virtual words.  i'll probably.do this in future versions, at least for a handful of the.most egregious spam indicators. feature-recognizing.spam filters are right in many details; what they lack.is an overall discipline for combining evidence.recognizing nonspam features may be more important than.recognizing spam features.  false positives are such a.worry that they demand extraordinary measures.  i will.probably in future versions add a second level of testing.designed specifically to avoid false positives.  if a.mail triggers this second level of filters it will be accepted.even if its spam probability is above the threshold.i don't expect this second level of filtering to be bayesian..it will inevitably.be not only ad hoc, but based on guesses, because the number of.false positives will not tend to be large enough to notice patterns..(it is just as well, anyway, if a backup system doesn't rely on the same.technology as the primary system.)another thing i may try in the future is to focus extra attention.on specific parts of the email.  for example, about 95% of current.spam includes the url of a site they want.you to visit.  (the remaining 5% want you to call a phone number,.reply by email or to a us mail address, or in a few.cases to buy a certain stock.)   the url is in such cases.practically enough by itself to determine whether the email.is spam.domain names differ from the rest of the text in.a (non-german) email in that they often consist of several.words stuck together.  though computationally expensive.in the general case, it might be worth trying to.decompose them.  if a filter has never seen the.token "xxxporn" before it will have an individual spam.probability of .4, whereas "xxx" and "porn" individually.have probabilities (in my corpus) of .9889 and .99.respectively, and a combined probability of .9998.i expect decomposing domain names to become more.important as spammers are gradually forced to stop using.incriminating words in the text of their messages.  (a url.with an ip address is of course an extremely incriminating sign,.except in the mail of a few sysadmins.)it might be a good idea to have a cooperatively maintained.list of urls promoted by spammers.  we'd need a trust metric.of the type studied by raph levien to prevent malicious.or incompetent submissions, but if we had such a thing it.would provide a boost to any filtering software.   it would.also be a convenient basis for boycotts.another way to test dubious urls would be to send out a.crawler to look at the site before the user looked at the.email mentioning it.  you could use a bayesian filter to.rate the site just as you would an email, and whatever.was found on the site could be included in calculating.the probability of the email being a spam.  a url that led.to a redirect would of course be especially suspicious.one cooperative project that i think really would be a good.idea would be to accumulate a giant corpus of spam.  a large,.clean corpus is the key to making bayesian filtering work.well.  bayesian filters could actually use the corpus as.input.  but such a corpus would be useful for other kinds.of filters too, because it could be used to test them.creating such a corpus poses some technical problems.  we'd.need trust metrics to prevent malicious or incompetent.submissions, of course.  we'd also need ways of erasing.personal information (not just to-addresses and ccs, but.also e.g. the arguments to unsubscribe urls, which often.encode the to-address) from mails in the corpus.  if anyone.wants to take on this project, it would be a good thing for.the world.appendix: defining spami think there is a rough.consensus on what spam is, but it would be useful to have.an explicit definition.  we'll need to do this if we want to establish.a central corpus of spam, or even to compare spam filtering.rates meaningfully.to start with, spam is not unsolicited commercial email..if someone in my neighborhood heard that i was looking for an old.raleigh three-speed in good condition, and sent me an email.offering to sell me one, i'd be delighted, and yet this.email would be both commercial and unsolicited.  the.defining feature of spam (in fact, its raison d'etre).is not that it is unsolicited, but that it is automated.it is merely incidental, too, that spam is usually commercial..if someone started sending mass email to support some political.cause, for example, it would be just as much spam as email.promoting a porn site.i propose we define spam as unsolicited automated email..this definition thus includes some email.that many legal definitions of spam don't.  legal definitions.of spam, influenced presumably by lobbyists, tend to exclude.mail sent by companies that have an "existing relationship" with.the recipient.  but buying something from a company, for.example, does not imply that you have solicited.ongoing email from them..if i order something from an online.store, and they then send me a stream of spam, it's still.spam.companies sending spam often give you a way to "unsubscribe,".or ask you to go to their site and change your "account.preferences" if you want to stop getting spam.  this is.not enough to stop the mail from being spam.  not opting out.is not the same as opting in.  unless the.recipient explicitly checked a clearly labelled box (whose.default was no) asking to receive the email, then it is spam.in some business relationships, you do implicitly solicit.certain kinds of mail.   when you order online, i think you.implicitly solicit a receipt, and notification when the.order ships..i don't mind when verisign sends me mail warning that.a domain name is about to expire (at least, if they are the.actual.registrar for it).  but when verisign sends me.email offering a free guide to building my.e-commerce web site, that's spam..notes:[1] the examples in this article are translated.into common lisp for, believe it or not, greater accessibility..the application described here is one that we wrote in order to.test a new lisp dialect called arc that is.not yet released.[2] currently the lowest rate seems to be about $200 to send a million spams..that's very cheap, 1/50th of a cent per spam..but filtering out 95%.of spam, for example, would increase the spammers' cost to reach.a given audience by a factor of 20.  few can have.margins big enough to absorb that.[3] as a rule of thumb, the more qualifiers there are before the.name of a country, the more corrupt the rulers.  a.country called the socialist people's democratic republic.of x is probably the last place in the world you'd want to live..thanks to sarah harlin for reading drafts of this; daniel giffin (who is.also writing the production arc interpreter) for several good ideas about.filtering and for creating our mail infrastructure; robert morris,.trevor blackwell and erann gat for many discussions about spam; raph.levien for advice about trust metrics;  and chip coldwell.and sam steingold for advice about statistics..you'll find this essay and 14 others in.hackers & painters..more info:plan for spam faqbetter bayesian filteringfilters that fight backwill filters kill spam?japanese translationspanish translationchinese translationprobabilityspam is differentfilters vs. blackliststrust metricsfiltering researchmicrosoft patentslashdot articlethe wrong waylwn: filter comparisoncrm114 gets 99.87%<eot><sot>revenge of the nerds.want to start a startup?  get funded by.y combinator..may 2002
."we were after the c++ programmers. we managed to drag a.lot of them about halfway to lisp."- guy steele, co-author of the java spec.in the software business there is an ongoing.struggle between the pointy-headed academics, and another.equally formidable force, the pointy-haired bosses.  everyone.knows who the pointy-haired boss is, right?  i think most.people in the technology world not only recognize this.cartoon character, but know the actual person in their company.that he is modelled upon.the pointy-haired boss miraculously combines two qualities.that are common by themselves, but rarely seen together:.(a) he knows nothing whatsoever about technology, and.(b) he has very strong opinions about it.suppose, for example, you need to write a piece of software..the pointy-haired boss has no idea how this software.has to work, and can't tell one programming language from.another, and yet he knows what language you should write it in..exactly.  he thinks you should write it in java.why does he think this?  let's.take a look inside the brain of the pointy-haired boss.  what.he's thinking is something like this.  java is a standard..i know it must be, because i read about it in the press all the time..since it is a standard, i won't get in trouble for using it..and that also means there will always be lots of java programmers,.so if the programmers working for me now quit, as programmers.working for me mysteriously always do, i can easily replace.them.well, this doesn't sound that unreasonable.  but it's all.based on one unspoken assumption, and that assumption.turns out to be false.  the pointy-haired boss believes that all.programming languages are pretty much equivalent..if that were true, he would be right on.target.  if languages are all equivalent, sure, use whatever.language everyone else is using.but all languages are not equivalent, and i think i can prove.this to you without even getting into the differences between them..if you asked the pointy-haired boss in 1992 what language.software should be written in, he would have answered with as.little hesitation as he does today.  software should be.written in c++.  but if languages are all equivalent, why should the.pointy-haired boss's opinion ever change?  in fact, why should.the developers of java have even bothered to create a new.language?presumably, if you create a new language, it's because you think.it's better in some way than what people already had.  and in fact, gosling.makes it clear in the first java white paper that java.was designed to fix some problems with c++..so there you have it: languages are not all equivalent..if you follow the.trail through the pointy-haired boss's brain to java and then.back through java's history to its origins, you end up holding.an idea that contradicts the assumption you started with.so, who's right?  james gosling, or the pointy-haired boss?.not surprisingly, gosling is right.  some languages are better,.for certain problems, than others.  and you know, that raises some.interesting questions.  java was designed to be better, for certain.problems, than c++.  what problems?  when is java better and.when is c++?  are there situations where other languages are.better than either of them?once you start considering this question, you have opened a.real can of worms.  if the pointy-haired boss had to think.about the problem in its full complexity, it would make his.brain explode.  as long as he considers all languages.equivalent, all he has to do is choose the one.that seems to have the most momentum, and since that is more.a question of fashion than technology, even he.can probably get the right answer..but if languages vary, he suddenly.has to solve two simultaneous equations, trying to find.an optimal balance between two things he knows nothing.about: the relative suitability of the twenty or so leading.languages for the problem he needs to solve, and the odds of.finding programmers, libraries, etc. for each..if that's what's on the other side of the door, it.is no surprise that the pointy-haired boss doesn't want to open it.the disadvantage of believing that all programming languages.are equivalent is that it's not true.  but the advantage is.that it makes your life a lot simpler..and i think that's the main reason the idea is so widespread..it is a comfortable idea.we know that java must be pretty good, because it is the.cool, new programming language.  or is it?  if you look at the world of.programming languages from a distance, it looks like java is.the latest thing.  (from far enough away, all you can see is.the large, flashing billboard paid for by sun.).but if you look at this world.up close, you find that there are degrees of coolness.  within.the hacker subculture, there is another language called perl.that is considered a lot cooler than java.  slashdot, for.example, is generated by perl.  i don't think you would find.those guys using java server pages.  but there is another,.newer language, called python, whose users tend to look down on perl,.and more waiting in the wings.if you look at these languages in order, java, perl, python,.you notice an interesting pattern.  at least, you notice this.pattern if you are a lisp hacker.  each one is progressively.more like lisp.  python copies even features.that many lisp hackers consider to be mistakes..you could translate simple lisp programs into python line for line..it's 2002, and programming languages have almost caught up.with 1958.catching up with mathwhat i mean is that.lisp was first discovered by john mccarthy in 1958,.and popular programming languages are only now.catching up with the ideas he developed then.now, how could that be true?  isn't computer technology something.that changes very rapidly?  i mean, in 1958, computers were.refrigerator-sized behemoths with the processing power of.a wristwatch.  how could any technology that old even be.relevant, let alone superior to the latest developments?i'll tell you how.  it's because lisp was not really.designed to be a programming language, at least not in the sense.we mean today.  what we mean by a programming language is.something we use to tell a computer what to do.   mccarthy.did eventually intend to develop a programming language in.this sense, but the lisp that we actually ended up with was based.on something separate that he did as a.theoretical exercise-- an effort.to define a more convenient alternative to the turing machine..as mccarthy said later,.another way to show that lisp was neater than turing machines.was to write a universal lisp function.and show that it is briefer and more comprehensible than the.description of a universal turing machine..this was the lisp function eval...,.which computes the value of.a lisp expression.....writing eval required inventing a notation representing lisp.functions as lisp data, and such a notation.was devised for the purposes of the paper with no thought that.it would be used to express lisp programs in practice..what happened next was that, some time in late 1958, steve russell,.one of mccarthy's.grad students, looked at this definition of eval and realized.that if he translated it into machine language, the result.would be a lisp interpreter.this was a big surprise at the time..here is what mccarthy said about it later in an interview:.steve russell said, look, why don't i program this eval..., and.i said to him, ho, ho, you're confusing theory with practice,.this eval is intended for reading, not for.computing. but he went ahead and did it. that is, he compiled the eval.in my paper into [ibm] 704 machine.code, fixing bugs, and then advertised this as a lisp interpreter,.which it certainly was. so at that point lisp.had essentially the form that it has today.....suddenly, in a matter of weeks i think, mccarthy found his theoretical.exercise transformed into an actual programming language-- and a.more powerful one than he had intended.so the short explanation of why this 1950s language is not.obsolete is that it was not technology but math, and.math doesn't get stale.   the right thing to compare lisp.to is not 1950s hardware, but, say, the quicksort.algorithm, which was discovered in 1960 and is still.the fastest general-purpose sort.there is one other language still.surviving from the 1950s, fortran, and it represents the.opposite approach to language design.  lisp was a.piece of theory that unexpectedly got turned into a.programming language.  fortran was developed intentionally as.a programming language, but what we would now consider a.very low-level one.fortran i, the language that was.developed in 1956, was a very different animal from present-day.fortran.   fortran i was pretty much assembly.language with math.  in some ways it was less.powerful than more recent assembly languages; there were no.subroutines, for example, only branches..present-day fortran is now arguably closer to lisp than to.fortran i.lisp and fortran were the trunks of two separate evolutionary trees,.one rooted in math and one rooted in machine architecture..these two trees have been converging ever since..lisp started out powerful, and over the next twenty years.got fast.  so-called mainstream languages started out.fast, and over the next forty years gradually got more powerful,.until now the most advanced.of them are fairly close to lisp..close, but they are still missing a few things....what made lisp differentwhen it was first developed, lisp embodied nine new.ideas.  some of these we now take for granted, others are.only seen in more advanced languages, and two are still.unique to lisp.  the nine ideas are, in order of their.adoption by the mainstream,.conditionals.  a conditional is an if-then-else.construct.  we take these for granted now, but fortran i.didn't have them. it had only a conditional goto.closely based on the underlying machine instruction. a function type. in lisp, functions are.a data type just like integers or strings..they have a literal representation, can be stored in variables,.can be passed as arguments, and so on. recursion.  lisp was the first programming language to.support it. dynamic typing.  in lisp, all variables.are effectively pointers. values are what.have types, not variables, and assigning or binding.variables means copying pointers, not what they point to. garbage-collection. programs composed of expressions.  lisp programs are.trees of expressions, each of which returns a value..this is in contrast to fortran.and most succeeding languages, which distinguish between.expressions and statements.it was natural to have this.distinction in fortran i because.you could not nest statements.  and.so while you needed expressions for math to work, there was.no point in making anything else return a value, because.there could not be anything waiting for it.this limitation.went away with the arrival of block-structured languages,.but by then it was too late. the distinction between.expressions and statements was entrenched.  it spread from.fortran into algol and then to both their descendants. a symbol type.  symbols are effectively pointers to strings.stored in a hash table.  so.you can test equality by comparing a pointer,.instead of comparing each character. a notation for code using trees of symbols and constants. the whole language there all the time.  there is.no real distinction between read-time, compile-time, and runtime..you can compile or run code while reading, read or run code.while compiling, and read or compile code at runtime.running code at read-time lets users reprogram lisp's syntax;.running code at compile-time is the basis of macros; compiling.at runtime is the basis of lisp's use as an extension.language in programs like emacs; and reading at runtime.enables programs to communicate using s-expressions, an.idea recently reinvented as xml..when lisp first appeared, these ideas were far.removed from ordinary programming practice, which was.dictated largely by the hardware available in the late 1950s..over time, the default language, embodied.in a succession of popular languages, has.gradually evolved toward lisp.  ideas 1-5 are now widespread..number 6 is starting to appear in the mainstream..python has a form of 7, though there doesn't seem to be.any syntax for it.as for number 8, this may be the most interesting of the.lot.  ideas 8 and 9 only became part of lisp.by accident, because steve russell implemented.something mccarthy had never intended to be implemented..and yet these ideas turn out to be responsible for.both lisp's strange appearance and its most distinctive.features.  lisp looks strange not so much because.it has a strange syntax as because it has no syntax;.you express programs directly in the parse trees that.get built behind the scenes when other languages are.parsed, and these trees are made.of lists, which are lisp data structures.expressing the language in its own data structures turns.out to be a very powerful feature. ideas 8 and 9.together mean that you.can write programs that write programs.  that may sound.like a bizarre idea, but it's an everyday thing in lisp..the most common way to do it is with something called a.macro.the term "macro" does not mean in lisp what it means in other.languages..a lisp macro can be anything from an abbreviation.to a compiler for a new language..if you want to really understand lisp,.or just expand your programming horizons, i would.learn more about macros.macros (in the lisp sense) are still, as far as.i know, unique to lisp..this is partly because in order to have macros you.probably have to make your language look as strange as.lisp.  it may also be because if you do add that final.increment of power, you can no.longer claim to have invented a new language, but only.a new dialect of lisp.i mention this mostly.as a joke, but it is quite true. if you define.a language that has car, cdr, cons, quote, cond, atom,.eq, and.a notation for functions expressed as lists, then you.can build all the rest of lisp out of it.  that is in.fact the defining quality of lisp: it was in order to.make this so that mccarthy gave lisp the shape it has.where languages matterso suppose lisp does represent a kind of limit.that mainstream languages are approaching asymptotically-- does.that mean you should actually use it to write software?.how much do you lose by using a less powerful language?.isn't it wiser, sometimes, not to be.at the very edge of innovation?.and isn't popularity to some extent.its own justification?  isn't the pointy-haired boss right,.for example, to want to use a language for which he can easily.hire programmers?there are, of course, projects where the choice of programming.language doesn't matter much.  as a.rule, the more demanding the application, the more.leverage you get from using a powerful language.  but.plenty of projects are not demanding at all..most programming probably consists of writing.little glue programs, and for.little glue programs you.can use any language that you're already.familiar with and that has good libraries for whatever you.need to do.  if you just need to feed data from one.windows app to another, sure, use visual basic.you can write little glue programs in lisp too.(i use it as a desktop calculator), but the biggest win.for languages like lisp is at the other end of.the spectrum, where you need to write sophisticated.programs to solve hard problems in the face of fierce competition..a good example is the.airline fare search program that ita software licenses to.orbitz.  these.guys entered a market already dominated by two big,.entrenched competitors, travelocity and expedia, and.seem to have just humiliated them technologically.the core of ita's application is a 200,000 line common lisp program.that searches many orders of magnitude more possibilities.than their competitors, who apparently.are still using mainframe-era programming techniques..(though ita is also in a sense.using a mainframe-era programming language.).i have never seen any of ita's code, but according to.one of their top hackers they use a lot of macros,.and i am not surprised to hear it.centripetal forcesi'm not saying there is no cost to using uncommon.technologies.  the pointy-haired boss is not completely.mistaken to worry about this.  but because he doesn't understand.the risks, he tends to magnify them.i can think of three problems that could arise from using.less common languages.  your programs might not work well with.programs written in other languages.  you might have fewer.libraries at your disposal.  and you might have trouble.hiring programmers.how much of a problem is each of these?  the importance of.the first varies depending on whether you have control.over the whole system.  if you're writing software that has.to run on a remote user's machine on top of a buggy,.closed operating system (i mention no names), there may be.advantages to writing your application in the.same language as the os..but if you control the whole system and.have the source code of all the parts, as ita presumably does, you.can use whatever languages you want.  if.any incompatibility arises, you can fix it yourself.in server-based applications you can.get away with using the most advanced technologies,.and i think this is the main.cause of what jonathan erickson calls the "programming language.renaissance."  this is why we even hear about new.languages like perl and python.  we're not hearing about these.languages because people are using them to write windows.apps, but because people are using them on servers.  and as.software shifts.off the desktop and onto servers (a future even.microsoft seems resigned to), there will be less.and less pressure to use middle-of-the-road technologies.as for libraries, their importance also.depends on the application.  for less demanding problems,.the availability of libraries can outweigh the intrinsic power.of the language.  where is the breakeven point?  hard to say.exactly, but wherever it is, it is short of anything you'd.be likely to call an application.  if a company considers.itself to be in the software business, and they're writing.an application that will be one of their products,.then it will probably involve several hackers and take at.least six months to write.  in a project of that.size, powerful languages probably start to outweigh.the convenience of pre-existing libraries.the third worry of the pointy-haired boss, the difficulty.of hiring programmers, i think is a red herring.   how many.hackers do you need to hire, after all?  surely by now we.all know that software is best developed by teams of less.than ten people.   and you shouldn't have trouble hiring.hackers on that scale for any language anyone has ever heard.of.  if you can't find ten lisp hackers, then your company is.probably based in the wrong city for developing software.in fact, choosing a more powerful language probably decreases the.size of the team you need, because (a) if you use a more powerful.language you probably won't need as many hackers,.and (b) hackers who work in more advanced languages are likely.to be smarter.i'm not saying that you won't get a lot of pressure to use.what are perceived as "standard" technologies.  at viaweb.(now yahoo store),.we raised some eyebrows among vcs and potential acquirers by.using lisp.  but we also raised eyebrows by using.generic intel boxes as servers instead of."industrial strength" servers like suns, for using a.then-obscure open-source unix variant called freebsd instead.of a real commercial os like windows nt, for ignoring.a supposed e-commerce standard called.set that no one now.even remembers, and so on.you can't let the suits make technical decisions for you..did it.alarm some potential acquirers that we used lisp?  some, slightly,.but if we hadn't used lisp, we wouldn't have been.able to write the software that made them want to buy us..what seemed like an anomaly to them was in fact.cause and effect.if you start a startup, don't design your product to please.vcs or potential acquirers.  design your product to please.the users.  if you win the users, everything else will.follow.  and if you don't, no one will care.how comfortingly orthodox your technology choices were.the cost of being averagehow much do you lose by using a less powerful language?.there is actually some data out there about that.the most convenient measure of power is probably.code size..the point of high-level.languages is to give you bigger abstractions-- bigger bricks,.as it were, so you don't need as many to build.a wall of a given size..so the more powerful.the language, the shorter the program (not simply in.characters, of course, but in distinct elements).how does a more powerful language enable you to write.shorter programs?  one technique you can use, if the language will.let you, is something called.bottom-up programming.  instead of.simply writing your application in the base language, you.build on top of the base language a language for writing.programs like yours, then write your program.in it. the combined code can be much shorter than if you.had written your whole program in the base language-- indeed,.this is how most compression algorithms work..a bottom-up program should be easier to modify as well,.because in many cases the language layer won't have to change.at all.code size is important, because the time it takes.to write a program depends mostly on its length..if your program would be three times as long in another.language, it will take three times as long to write-- and.you can't get around this by hiring more people, because.beyond a certain size new hires are actually a net lose..fred brooks described this phenomenon in his famous.book the mythical man-month, and everything i've seen.has tended to confirm what he said.so how much shorter are your programs if you write them in.lisp?  most of the numbers i've heard for lisp.versus c, for example, have been around 7-10x..but a recent article about ita in.new.architect magazine said that."one line of lisp can replace 20 lines of c," and since.this article was full of quotes from ita's president, i.assume they got this number from ita.  if so then.we can put some faith in it; ita's software includes a lot.of c and  c++ as well as lisp, so they are speaking from.experience.my guess is that these multiples aren't even constant..i think they increase when.you face harder problems and also when you have smarter.programmers.  a really good hacker can squeeze more.out of better tools.as one data point on the curve, at any rate,.if you were to compete with ita and.chose to write your software in c, they would be able to develop.software twenty times faster than you..if you spent a year on a new feature, they'd be able to.duplicate it in less than three weeks.  whereas if they spent.just three months developing something new, it would be.five years before you had it too.and you know what?  that's the best-case scenario..when you talk about code-size ratios, you're implicitly assuming.that you can actually write the program in the weaker language..but in fact there are limits on what programmers can do..if you're trying to solve a hard problem with a language that's.too low-level, you reach a point where there is just too.much to keep in your head at once.so when i say it would take ita's imaginary.competitor five years to duplicate something ita could.write in lisp in three months, i mean five years.if nothing goes wrong.  in fact, the way things work in.most companies, any.development project that would take five years is.likely never to get finished at all.i admit this is an extreme case.  ita's hackers seem to.be unusually smart, and c is a pretty low-level language..but in a competitive market, even a differential of two or.three to one would.be enough to guarantee that you'd always be behind.a recipethis is the kind of possibility that the pointy-haired boss.doesn't even want to think about.  and so most of them don't..because, you know, when it comes down to it, the pointy-haired.boss doesn't mind if his company gets their ass kicked, so.long as no one can prove it's his fault..the safest plan for him personally.is to stick close to the center of the herd.within large organizations, the phrase used to.describe this approach is "industry best practice.".its purpose is to shield the pointy-haired.boss from responsibility: if he chooses.something that is "industry best practice," and the company.loses, he can't be blamed.  he didn't choose, the industry did.i believe this term was originally used to describe.accounting methods and so on.  what it means, roughly,.is don't do anything weird.  and in accounting that's.probably a good idea.  the terms "cutting-edge" and."accounting" do not sound good together.  but when you import.this criterion into decisions about technology, you start.to get the wrong answers.technology often should be.cutting-edge.  in programming languages, as erann gat.has pointed out, what "industry best practice"  actually.gets you is not the best, but merely the.average.  when a decision causes you to develop software at.a fraction of the rate of more aggressive competitors,."best practice" is a misnomer..so here we have two pieces of information that i think are.very valuable.  in fact, i know it from my own experience..number 1, languages vary in power.  number 2, most managers.deliberately ignore this.  between them, these two facts.are literally a recipe for making money.  ita is an example.of this recipe in action..if you want to win in a software.business, just take on the hardest problem you can find,.use the most powerful language you can get, and wait for.your competitors' pointy-haired bosses to revert to the mean..appendix: poweras an illustration of what i mean about the relative power.of programming languages, consider the following problem..we want to write a function that generates accumulators-- a.function that takes a number n, and.returns a function that takes another number i and.returns n incremented by i.(that's incremented by, not plus.  an accumulator.has to accumulate.)in common lisp this would be.(defun foo (n).(lambda (i) (incf n i))).and in perl 5,.sub foo {.my ($n) = @_;.sub {$n += shift}.}.which has more elements than the lisp version because.you have to extract parameters manually in perl.in smalltalk the code is slightly longer than in lisp.foo: n.|s|.s := n..^[:i| s := s+i. ].because although in general lexical variables work, you can't.do an assignment to a parameter, so you have to create a.new variable s.in javascript the example is, again, slightly longer, because.javascript retains.the distinction between statements and.expressions, so you need explicit return statements.to return values:.function foo(n) {.return function (i) {.return n += i } }.(to be fair, perl also retains.this distinction, but deals with it in typical perl fashion.by letting you omit returns.)if you try to translate the lisp/perl/smalltalk/javascript code into.python you run into some limitations.  because python.doesn't fully support lexical variables,.you have to create a data structure to hold the value of n..and although.python does have a function data type, there is no.literal representation for one (unless the body is.only a single expression) so you need to create a named.function to return.  this is what you end up with:.def foo(n):.s = [n].def bar(i):.s[0] += i.return s[0].return bar.python users might legitimately ask why they can't.just write.def foo(n):.return lambda i: return n += i.or even.def foo(n):.lambda i: n += i.and my guess is that they probably will, one day..(but if they don't want to wait for python to evolve the rest.of the way into lisp, they could always just...).in oo languages, you can, to a limited extent, simulate.a closure (a function that refers to variables defined in.enclosing scopes) by defining a class with one method.and a field to replace each variable from an enclosing.scope.  this makes the programmer do the kind of code.analysis that would be done by the compiler in a language.with full support for lexical scope, and it won't work.if more than one function refers to the same variable,.but it is enough in simple cases like this.python experts seem to agree that this is the.preferred way to solve the problem in python, writing.either.def foo(n):.class acc:.def __init__(self, s):.self.s = s.def inc(self, i):.self.s += i.return self.s.return acc(n).inc.or.class foo:.def __init__(self, n):.self.n = n.def __call__(self, i):.self.n += i.return self.n.i include these because i wouldn't want python.advocates to say i was misrepresenting the language,.but both seem to me more complex than the first.version.  you're doing the same thing, setting up.a separate place to hold the accumulator; it's just.a field in an object instead of the head of a list..and the use of these special,.reserved field names, especially __call__, seems.a bit of a hack.in the rivalry between perl and python, the claim of the.python hackers seems to be that.that python is a more elegant alternative to perl, but what.this case shows is that power is the ultimate elegance:.the perl program is simpler (has fewer elements), even if the.syntax is a bit uglier.how about other languages? in the other languages.mentioned in this talk-- fortran, c, c++, java, and.visual basic-- it is not clear whether you can actually.solve this problem..ken anderson says that the following code is about as close.as you can get in java:.public interface inttoint {.public int call(int i);.}.public static inttoint foo(final int n) {.return new inttoint() {.int s = n;.public int call(int i) {.s = s + i;.return s;.}};.}.this falls short of the spec because it only works for.integers.  after many email exchanges with java hackers,.i would say that writing a properly polymorphic version.that behaves like the preceding examples is somewhere.between damned awkward and impossible.  if anyone wants to.write one i'd be very curious to see it, but i personally.have timed out.it's not literally true that you can't solve this.problem in other languages, of course.  the fact.that all these languages are turing-equivalent means.that, strictly speaking, you can write any program in.any of them.  so how would you do it?  in the limit case,.by writing a lisp.interpreter in the less powerful language.that sounds like a joke, but it happens so often to.varying degrees in large programming projects that.there is a name for the phenomenon, greenspun's tenth.rule:.any sufficiently.complicated c or fortran program contains an ad hoc.informally-specified bug-ridden slow implementation of half of.common lisp..if you try to solve a.hard problem, the question is not whether you will use.a powerful enough language, but whether you will (a).use a powerful language, (b) write a de facto interpreter.for one, or (c) yourself become a human compiler for one..we see this already.begining to happen in the python example, where we are.in effect simulating the code that a compiler.would generate to implement a lexical variable.this practice is not only common, but institutionalized.  for example,.in the oo world you hear a good deal about."patterns"..i wonder if these patterns are not sometimes evidence of case (c),.the human compiler, at work.  when i see patterns in my programs,.i consider it a sign of trouble.  the shape of a program.should reflect only the problem it needs to solve..any other regularity in the code is a sign, to me at.least, that i'm using abstractions that aren't powerful.enough-- often that i'm generating by hand the.expansions of some macro that i need to write.notes.the ibm 704 cpu was about the size of a refrigerator,.but a lot heavier.  the cpu weighed 3150 pounds,.and the 4k of ram was in a separate.box weighing another 4000 pounds.  the.sub-zero 690, one of the largest household refrigerators,.weighs 656 pounds. steve russell also wrote the first (digital) computer.game, spacewar, in 1962. if you want to trick a pointy-haired boss into letting you.write software in lisp, you could try telling him it's xml. here is the accumulator generator in other lisp dialects:.scheme: (define (foo n).(lambda (i) (set! n (+ n i)) n)).goo:    (df foo (n) (op incf n _))).arc:    (def foo (n) [++ n _]).erann gat's sad tale about."industry best practice" at jpl inspired me to address.this generally misapplied phrase. peter norvig found that.16 of the 23 patterns in design patterns were."invisible.or simpler" in lisp. thanks to the many people who answered my questions about.various languages and/or read drafts of this, including.ken anderson, trevor blackwell, erann gat, dan giffin, sarah harlin,.jeremy hylton, robert morris, peter norvig, guy steele, and anton.van straaten..they bear no blame for any opinions expressed..related:many people have responded to this talk,.so i have set up an additional page to deal with the issues they have.raised: re: revenge of the nerds.it also set off an extensive and often useful discussion on the.ll1.mailing list.  see particularly the mail by anton van straaten on semantic.compression.some of the mail on ll1 led me to try to go deeper into the subject.of language power in succinctness is power.a larger set of canonical implementations of the accumulator.generator benchmark are collected together on their own page.japanese translation, spanish.translation,.chinese translation.you'll find this essay and 14 others in.hackers & painters.<eot><sot>succinctness is power.may 2002
."the quantity of meaning compressed into a small space by.algebraic signs, is another circumstance that facilitates.the reasonings we are accustomed to carry on by their aid."- charles babbage, quoted in iverson's turing award lecture.in the discussion about issues raised by revenge.of the nerds on the ll1 mailing list, paul prescod wrote.something that stuck in my mind..python's goal is regularity and readability, not succinctness..on the face of it, this seems a rather damning thing to claim about a.programming language.  as far as i can tell, succinctness = power..if so, then substituting, we get.python's goal is regularity and readability, not power..and this doesn't seem a tradeoff (if it is a tradeoff).that you'd want to make..it's not far from saying that python's goal is not to be effective.as a programming language.does succinctness = power?  this seems to me an important question,.maybe the most important question for anyone interested in.language design, and one that it would be useful to confront.directly.  i don't feel sure yet that the answer is a simple yes, but it seems.a good hypothesis to begin with.hypothesismy hypothesis is that succinctness is power, or is close enough.that except in pathological examples you can treat them as.identical.it seems to me that succinctness is what programming languages are.for.  computers would be just as happy to be told what to.do directly in machine language.  i think that the main.reason we take the trouble to develop high-level languages is to.get leverage, so that we can say (and more importantly, think).in 10 lines of a high-level language what would require 1000.lines of machine language.  in other words,.the main point of high-level languages is to make source code smaller.if smaller source code is the purpose of high-level languages, and.the power of something is how well it achieves its purpose, then.the measure of the power of a programming language is how small it.makes your programs.conversely, a language that doesn't make your programs small is.doing a bad job of what programming languages are supposed to.do, like a knife that doesn't cut well, or printing that's illegible..metricssmall in what sense though?  the most common measure of code size is.lines of code.  but i think that this metric is the most common because.it is the easiest to measure.  i don't think anyone really believes.it is the true test of the length of a program. different.languages have different conventions for how much you should put.on a line; in c a lot of lines have nothing on them but a delimiter or two.another easy test is the number of characters in a.program, but this is not very good either; some languages (perl,.for example) just.use shorter identifiers than others.i think a better measure of the size of a program would be the.number of elements, where an element is anything that.would be a distinct node if you drew a tree representing the.source code. the name of.a variable or function is an element;.an integer or a floating-point number is an element;.a segment of literal text is an element;.an element of a pattern, or a format directive, is an element;.a new block is an element.  there are borderline cases.(is -5 two elements or one?) but i think most of them are the.same for every language, so they don't affect comparisons much.this metric needs fleshing out, and.it could require interpretation in the case of specific languages,.but i think it tries to measure the right thing, which is the.number of parts a program has.  i think the tree you'd draw in this.exercise is what you have to make in your head in order to.conceive of the program, and so its size is proportionate to the.amount of work you have to do to write or read it.designthis kind of metric would allow us to compare different languages,.but that is not, at least for me, its main value.  the main value.of the succinctness test is as a guide in designing languages..the most useful comparison between languages is between two.potential variants of the same language.  what can i do in the.language to make programs shorter?if the conceptual load of.a program is proportionate to its complexity, and a given programmer.can tolerate a fixed conceptual load, then this is the same as asking,.what can i do to enable programmers to get the most done?  and.that seems to me identical to asking, how can i design a good.language?(incidentally, nothing makes it more patently obvious that the old.chestnut "all languages are equivalent" is false than designing.languages.  when you are designing a new language, you're constantly.comparing two languages-- the language if i did x, and if i didn't-- to.decide which is better.  if this were really a meaningless question,.you might as well flip a coin.)aiming for succinctness seems a good way to find new ideas..if you can do something that makes many.different programs shorter, it is probably not a coincidence: you have.probably discovered a useful new abstraction.  you might even be.able to write a program to help by searching.source code for repeated patterns.  among other languages, those.with a reputation for succinctness would be the ones to look to for.new ideas: forth, joy, icon.comparisonthe first person to write about these issues, as far as i know, was.fred brooks in the mythical man month.  he wrote.that programmers seemed to generate about the same.amount of code per day regardless of the language..when i first read this in my early twenties,.it was a big surprise to me and seemed to have huge implications..it meant that (a) the only way to get software written faster was to.use a more succinct language, and (b) someone who took the.trouble to do this could leave competitors who didn't in the dust.brooks' hypothesis, if it's true, seems to be at the very heart of hacking..in the years since, i've paid close attention to any evidence i could.get on the question, from formal studies to anecdotes about individual.projects.   i have seen nothing to contradict him.i have not yet seen evidence that seemed to me conclusive,.and i don't expect to.  studies.like lutz prechelt's comparison of programming languages, while.generating the kind of results i expected, tend to use problems that.are too short to be meaningful tests.  a better test of a language is.what happens in programs that take a month to write.  and the only.real test, if you believe as i do that the main purpose of a language.is to be good to think in (rather than just to tell a computer what to.do once you've thought of it) is what new things you can write in it..so any language comparison where.you have to meet a predefined spec is testing slightly the wrong.thing.the true test of a language is how well you can discover.and solve new problems, not.how well you can use it to solve a problem someone else has.already formulated.  these two are quite different criteria..in art, mediums like embroidery and mosaic work well if you.know beforehand what you want to make, but are absolutely lousy if.you don't.  when you want to discover the image as you make it--.as you have to do with anything as complex as an image of a.person, for example-- you need to use a more fluid medium like pencil or.ink wash or oil paint.  and indeed, the way tapestries and mosaics are made in.practice is to make a painting first, then copy it.  (the word."cartoon" was originally used to describe a painting intended for.this purpose).what this means is that we are never likely to have accurate comparisons.of the relative power of programming languages.  we'll have precise.comparisons, but not accurate ones.  in particular, explicit studies.for the purpose of comparing languages,.because they will probably use small problems, and will necessarily use.predefined problems, will tend to underestimate the power of the.more powerful languages.reports from the field, though they will necessarily be less precise than."scientific" studies, are likely to be more meaningful.  for example,.ulf wiger of ericsson did a.study that.concluded that erlang was 4-10x.more succinct than c++, and proportionately faster to develop.software in:.comparisons between ericsson-internal development projects indicate.similar line/hour productivity, including all phases of software development,.rather independently of which language (erlang, plex, c, c++, or java).was used.  what differentiates the different languages then becomes source.code volume..the study also deals explictly with a point that was.only implicit in brooks' book (since he measured lines of debugged code):.programs written in more powerful languages tend to have fewer bugs..that becomes an end in itself, possibly more important than programmer.productivity, in applications like network switches.the taste testultimately, i think you have to go with your gut.  what does it feel.like to program in the language?  i think the way to find (or design).the best language is to become hypersensitive to how well a language.lets you think, then choose/design the language that feels best.  if.some language feature is awkward or restricting, don't worry, you'll.know about it.such hypersensitivity will come at a cost.  you'll find that you can't.stand programming in clumsy languages.   i find it unbearably.restrictive to program in languages without macros, just as someone used.to dynamic typing finds it unbearably restrictive to have to go back to.programming in a language where you have to declare the type of.every variable, and can't make a list of objects of different types..i'm not the only one.  i know many lisp hackers that this has happened.to.  in fact, the most accurate measure of the relative power of programming.languages might be the percentage of people who know the language.who will take any job where they get to use that language, regardless.of the application domain.restrictivenessi think most hackers know what it means for a language to feel restrictive..what's happening when you feel that?  i think it's the same feeling.you get when the street you want to take is blocked off, and you have to.take a long detour to get where you wanted to go.  there is something.you want to say, and the language won't let you.what's really going on here, i think, is that a restrictive language is.one that isn't succinct enough.  the problem is not simply that you can't.say what you planned to.  it's that the detour the language makes you.take is longer.  try this thought experiment.  suppose there were.some program you wanted to write, and the language wouldn't let you.express it the way you planned to, but instead forced you to write the.program in some other way that was shorter.  for me at least,.that wouldn't feel very restrictive.  it would be like the street you.wanted to take being blocked off, and the policeman at the.intersection directing you to a shortcut instead of a detour.  great!i think most (ninety percent?) of.the feeling of restrictiveness comes from being forced to make the program.you write in the language longer than one you have in your head..restrictiveness is mostly lack of succinctness..so when a language feels restrictive, what that (mostly) means is that it isn't.succinct enough, and when a language isn't succinct, it will.feel restrictive.readabilitythe quote i began with mentions two other qualities, regularity and.readability.  i'm not sure what regularity is, or what advantage,.if any, code that is regular and readable has over code that is merely.readable.  but i think i know what is meant by readability, and i think.it is also related to succinctness.we have to be careful here to distinguish between the readability of.an individual line of code and the readability of the whole program..it's the second that matters.  i agree that a line of basic is likely to be.more readable than a line of lisp.  but a program written in basic is.is going to have more lines than the same program written in.lisp (especially once you cross over into greenspunland). the.total effort of reading the basic program will surely be greater..total effort  = effort per line x number of lines.i'm not as sure that readability is directly proportionate to succinctness.as i am that power is, but certainly succinctness is a factor.(in the mathematical sense; see equation above) in readability..so it may not even be meaningful to say that the goal of a language is.readability, not succinctness; it could be like saying the goal was readability,.not readability.what readability-per-line does mean, to the user encountering the language.for the first time, is that source code will look unthreatening.  so.readability-per-line.could be a good marketing decision, even if it is a bad design.decision.  it's isomorphic to the very successful technique of letting.people pay in installments: instead of frightening them with a high.upfront price, you tell them the low monthly payment.  installment plans.are a net lose for the buyer, though, as mere readability-per-line probably.is for the programmer..the buyer is going to make a lot of those low, low payments; and.the programmer is going to read a lot of those individually readable lines.this tradeoff predates programming languages.  if you're used to reading.novels and newspaper articles, your first experience of reading a math.paper can be dismaying.  it could take half an hour to read a single page..and yet, i am pretty sure that the notation is not the problem, even though.it may feel like it is.  the math paper is hard to read.because the ideas are hard.  if you expressed the same ideas in prose.(as mathematicians had to do before they evolved succinct notations),.they wouldn't be any easier to read, because the paper would grow to the.size of a book.to what extent?a number of people have rejected.the idea that succinctness = power.  i think it would be more useful, instead.of simply arguing that they are the same or aren't, to ask:.to what extent does succinctness = power?.because clearly succinctness is.a large part of what higher-level languages are for.  if it is not all they're.for, then what else are they for, and how important, relatively, are these.other functions?i'm not proposing this just to make the debate more civilized.  i really.want to know the answer.  when, if ever,  is a language too succinct for.its own good?the hypothesis i began with was that, except in pathological examples,.i thought succinctness could be considered identical with power.  what.i meant was that in any language anyone would design, they.would be identical, but that if someone wanted to design a language.explicitly to disprove this hypothesis, they could probably do it.  i'm.not even sure of that, actually.languages, not programswe should be clear that we are talking about the succinctness.of languages, not of individual programs..it certainly is possible for individual programs to be written too densely.i wrote about this in on lisp. a complex macro.may have to save many times its own length to be justified.  if writing.some hairy macro could save you ten lines of code every time you use it,.and the macro is itself ten lines of code, then you get a net saving in.lines if you use it more than once.  but that could still be a bad move,.because macro definitions are harder to read than ordinary code.  you.might have to use the macro ten or twenty times before it yielded a net.improvement in readability.i'm sure every language has such tradeoffs (though i suspect the stakes.get higher as the language gets more powerful).  every programmer must.have seen code that some clever person has made marginally shorter.by using dubious programming tricks.so there is no argument about that-- at least, not from me.  individual.programs can certainly be too succinct for their own good.  the question.is, can a language be?  can a language compel programmers to write.code that's short (in elements) at the expense of overall readability?one reason it's hard to imagine a language being too succinct is that if.there were some excessively compact way to phrase something, there would.probably also be a longer way.  for example, if you felt lisp programs using.a lot of macros or higher-order functions were too dense,  you could, if you.preferred, write code that was isomorphic to pascal.  if you.don't want to express factorial in arc as a call to a higher-order function.(rec zero 1 * 1-).you can also write out a recursive definition:.(rfn fact (x) (if (zero x) 1 (* x (fact (1- x))))).though i can't off the top of my head think of any examples, i am interested.in the question of whether a language could be too succinct.  are there languages.that force you to write code in a way that is crabbed and incomprehensible?.if anyone has examples, i would be very interested to see them.(reminder: what i'm looking for are programs that are very dense according.to the metric of "elements" sketched above, not merely programs that are.short because delimiters can be omitted and everything has a one-character name.).japanese translationrussian translationlutz prechelt: comparison of seven languageserann gat: lisp vs. javapeter norvig tries prechelt's testmatthias felleisen: expressive power of languageskragen sitaker: redundancy and powerforthjoyiconjk<eot><sot>what languages fix.kevin kelleher suggested an interesting way to compare programming.languages: to describe each in terms of the problem it.fixes.  the surprising thing is how many, and how well, languages can be.described this way..algol: assembly language is too low-level.pascal: algol doesn't have enough data types.modula: pascal is too wimpy for systems programming..simula: algol isn't good enough at simulations.smalltalk: not everything in simula is an object.fortran: assembly language is too low-level.cobol: fortran is scary.pl/1: fortran doesn't have enough data types.ada: every existing language is missing something.basic: fortran is scary.apl: fortran isn't good enough at manipulating arrays.j: apl requires its own character set.c: assembly language is too low-level.c++: c is too low-level.java: c++ is a kludge.  and microsoft is going to crush us.c#: java is controlled by sun..lisp: turing machines are an awkward way to describe computation.scheme: maclisp is a kludge.t: scheme has no libraries.common lisp: there are too many dialects of lisp.dylan: scheme has no libraries, and lisp syntax is scary..perl: shell scripts/awk/sed are not enough like programming languages.python: perl is a kludge.ruby: perl is a kludge, and lisp syntax is scary.prolog: programming is not enough like logic..japanese translationfrench translationportuguese translation<eot><sot>taste for makers.february 2002
."...copernicus'.aesthetic objections to [equants] provided one essential.motive for his rejection of the ptolemaic system...."- thomas kuhn, the copernican revolution"all of us had been trained by kelly johnson and believed.fanatically in his insistence that an airplane that looked.beautiful would fly the same way."- ben rich, skunk works"beauty is the first test: there is no permanent place in this.world for ugly mathematics."- g. h. hardy, a mathematician's apology.i was talking recently to a friend who teaches.at mit.  his field is hot now and.every year he is inundated by applications from.would-be graduate students.  "a lot of them seem smart,".he said.  "what i can't tell is whether they have any kind.of taste."taste.  you don't hear that word much now..and yet we still need the underlying.concept, whatever we call it.  what my friend meant was.that he wanted students who were not just good technicians,.but who could use their technical knowledge to.design beautiful things.mathematicians call good work "beautiful,".and so, either now or in the past, have.scientists, engineers, musicians, architects, designers,.writers, and painters..is it just a coincidence that they used the same word, or is.there some overlap in what they meant?  if there.is an overlap, can we use one field's discoveries.about beauty to help us in another?for those of us who design things, these are not just.theoretical questions.  if there is such a thing as.beauty, we need to be able to recognize it.  we need.good taste to make good things..instead of.treating beauty as an airy abstraction, to be either blathered.about or avoided depending on how one feels about airy.abstractions, let's try considering it as a practical question:.how do you make good stuff?if you mention taste nowadays, a lot of people will tell.you that "taste is subjective.".they believe this because it really feels that.way to them.  when they like something, they have no idea.why.  it could be because it's beautiful, or because their.mother had one, or because they saw a movie star with one.in a magazine, or because they know it's expensive..their thoughts are a tangle of unexamined impulses.most of us are encouraged, as children, to leave this tangle.unexamined.  if you make fun of your little brother for.coloring people green in his coloring book, your.mother is likely to tell you something like "you like to.do it your way and he likes to do it his way."your mother at this point is not trying to teach you.important truths about aesthetics.  she's trying to get.the two of you to stop bickering.like many of the half-truths adults tell us, this one.contradicts other things they tell us.  after dinning.into you that taste is merely a matter of personal preference,.they take you to the museum and tell you that you should.pay attention because leonardo is a great artist.what goes through the kid's head at this point?  what does.he think "great artist" means?  after having been.told for years that everyone just likes to do.things their own way, he is.unlikely to head straight for the conclusion that a great.artist is someone whose work is better than the others'..a far more likely theory, in his ptolemaic model of.the universe, is that a great artist is something that's.good for you, like broccoli, because someone said so in a book.saying that taste is just personal preference is a good way.to prevent disputes.  the trouble is, it's not true..you feel this when you start to design things.whatever job people do, they naturally want to do better..football players.like to win games.  ceos like to increase earnings.  it's.a matter of pride, and a real pleasure, to get better at.your job. but if.your job is to design things, and there is no such thing.as beauty, then there is no way to get better at your job..if taste is just personal preference, then everyone's is.already perfect: you like whatever you like, and that's it.as in any job, as you continue to design things, you'll get.better at it.  your tastes will change.  and, like anyone.who gets better at their job, you'll know you're getting.better.  if so,.your old tastes were.not merely different, but worse.  poof goes the axiom that.taste can't be wrong.relativism is fashionable at the moment, and that may hamper.you from thinking about taste, even as yours grows..but if you come out of the closet and admit, at least to yourself,.that there is such a thing as good and bad design, then you.can start to study good design in detail..how has.your taste changed?  when you made mistakes, what.caused you to make them?  what have other people learned about.design?once you start to examine the question, it's surprising how.much different fields' ideas of beauty have in common.  the same.principles of good design crop up again and again.good design is simple.  you hear this from math to.painting.  in math it means that a shorter proof tends to be.a better one.  where axioms are concerned, especially,.less is more.  it means much the same thing in programming..for architects and designers it means that beauty should.depend on a few carefully chosen structural elements.rather than a profusion of superficial ornament.  (ornament.is not in itself bad, only when it's camouflage on insipid.form.)  similarly, in painting, a.still life of a few carefully observed and solidly.modelled objects will tend to be more interesting than a.stretch of flashy.but mindlessly repetitive painting of, say, a lace collar..in writing it means: say what you mean.and say it briefly.it seems strange to have to emphasize simplicity..you'd think simple would be the default.  ornate.is more work.  but something seems to come over people.when they try to be creative.  beginning writers adopt.a pompous tone that doesn't sound anything like the way.they speak.  designers trying to be artistic resort to.swooshes and curlicues.  painters discover that they're expressionists..it's all evasion..underneath.the long words or the "expressive" brush strokes, there.is not much going on, and that's frightening.when you're.forced to be simple, you're forced to face the real problem..when you can't deliver ornament, you have to deliver.substance.good design is timeless..in math, every proof is timeless unless it contains a mistake..so what does hardy mean when he says there is no permanent.place for ugly mathematics?  he means the same thing kelly johnson did:.if something is ugly, it can't be the best solution.  there.must be a better one, and eventually.someone will discover it.aiming at timelessness is a way to make.yourself find the best answer:.if you can imagine someone surpassing you, you should do it yourself..some of the greatest masters did this so well that they.left little room for those who came after..every engraver since durer has had to live in his shadow.aiming at timelessness is also a way to evade.the grip of fashion.  fashions almost by definition.change with time, so if you can make something that.will still look good far into the future, then its.appeal must derive more from merit and less from fashion.strangely enough, if you want to make something that will.appeal to future generations, one way to do it is to.try to appeal to past generations.  it's hard to guess what.the future will be like, but we can be sure it will be.like the past in caring nothing for present fashions..so if you can make something that appeals to people today.and would also have appealed to people in 1500, there is a good.chance it will appeal to people in 2500.good design solves the right problem. the typical.stove has four burners arranged in a square, and a dial.to control each.  how do you arrange the dials?  the.simplest answer is to put them in a row.  but this is a.simple answer to the wrong question..the dials are for humans to use, and if you put them in a row,.the unlucky human will have to stop and think each time.about which dial matches which burner.  better to arrange the dials.in a square like the burners.a lot of bad design is industrious, but misguided..in the mid twentieth century there was a vogue for.setting text in sans-serif fonts..these fonts are closer to the pure, underlying letterforms..but in text that's not the problem you're trying to solve..for legibility it's more important that letters be easy.to tell apart..it may look victorian, but a times roman lowercase g is.easy to tell from a lowercase y.problems can be improved as well as solutions..in software, an intractable problem can usually be replaced.by an equivalent one that's easy to solve..physics progressed faster as the problem became.predicting observable behavior, instead of reconciling it.with scripture.good design is suggestive..jane austen's novels contain almost no.description; instead of telling you how.everything looks, she tells her story so well that you.envision the scene for yourself..likewise, a painting that suggests is usually more engaging.than one that tells.  everyone makes up their own story about the.mona lisa.in architecture and design, this.principle means that a building or object should let you.use it how you want: a good building, for example, will.serve as a backdrop for whatever life people want to lead in it, instead.of making them live as if they were executing a program.written by the architect.in software, it means you should give users a few.basic elements that they can combine as they wish, like lego..in math it means a proof that.becomes the basis for a lot of new work is.preferable to a proof that was difficult,.but doesn't lead to future discoveries; in the.sciences generally, citation is considered a rough.indicator of merit.good design is often slightly funny.  this one.may not always be true.  but durer's.engravings.and saarinen's.womb chair and the.pantheon and the.original porsche 911 all seem.to me slightly funny.  godel's incompleteness theorem.seems like a practical joke.i think it's because humor is related to strength..to have a sense of humor is to be strong:.to keep one's sense of humor is to shrug off misfortunes,.and to lose one's sense of humor is to be wounded by them..and so the mark-- or at least the prerogative-- of strength.is not to take.oneself too seriously..the confident will often, like.swallows, seem to be making fun of the whole process slightly,.as hitchcock does in his films or bruegel in his paintings-- or.shakespeare, for that matter.good design may not have to be funny, but it's hard to.imagine something that could be called humorless also being.good design.good design is hard.  if you look at the people who've.done great work, one thing they all seem to have in common is that they.worked very hard.  if you're not working hard,.you're probably wasting your time.hard problems call for great.efforts.  in math, difficult proofs require ingenious solutions,.and those tend to be interesting.  ditto in engineering.when you.have to climb a mountain you toss everything unnecessary.out of your pack.  and so an architect who has to build.on a difficult site, or a small budget, will find that he.is forced to produce an elegant design.  fashions and.flourishes get knocked aside by the difficult business.of solving the problem at all.not every kind of hard is good.  there is good pain and bad pain..you want the kind of pain you get from going running, not the.kind you get from stepping on a nail..a difficult.problem could be good for a designer, but a fickle client or unreliable.materials would not be.in art, the highest place has traditionally been given to.paintings of people.  there is something to this tradition,.and not just because pictures of faces get to press.buttons in our brains that other pictures don't.  we are.so good at looking at faces that we force anyone who.draws them to work hard to satisfy us.  if you.draw a tree and you change the angle of a branch.five degrees, no one will know.  when you change the angle.of someone's eye five degrees, people notice.when bauhaus designers adopted sullivan's "form follows function,".what they meant was, form should follow function.  and.if function is hard enough, form is forced to follow it,.because there is no effort to spare for error.  wild animals.are beautiful because they have hard lives.good design looks easy.  like great athletes,.great designers make it look easy.  mostly this is.an illusion.  the easy, conversational tone of good.writing comes only on the eighth rewrite.in science and engineering, some of the greatest.discoveries seem so simple that you say to yourself,.i could have thought of that.  the discoverer is.entitled to reply, why didn't you?some leonardo heads are just a few lines.  you look.at them and you think, all you have to do is get eight.or ten lines in the right place and you've made this beautiful.portrait.  well, yes, but you have to get them in.exactly the right place.  the slightest error.will make the whole thing collapse.line drawings are in fact the most difficult visual.medium, because they demand near perfection..in math terms, they are a closed-form solution; lesser.artists literally solve the same problems by successive.approximation.  one of the reasons kids give up drawing.at ten or so is that they decide to start.drawing like grownups, and one of the first things.they try is a line drawing of a face.  smack!in most fields the appearance of ease seems to come with.practice.  perhaps what practice does is train your.unconscious mind to handle tasks that used to.require conscious thought.  in some cases.you literally train your body.  an expert pianist can.play notes faster than the brain can send signals to.his hand..likewise an artist, after a while, can.make visual perception flow in through his eye and.out through his hand as automatically as someone tapping his foot to.a beat.when people talk about being in."the zone," i think what they mean is that the.spinal cord has the situation under control..your spinal cord is less hesitant, and.it frees conscious thought for the hard problems..good design uses symmetry..i think symmetry may just.be one way to achieve simplicity, but it's important enough.to be mentioned on its own..nature uses it a lot, which is a good sign.there are two kinds of symmetry, repetition and recursion..recursion means repetition in subelements, like the.pattern of veins in a leaf.symmetry is unfashionable in some fields now, in reaction to.excesses in the past.  architects started consciously.making buildings asymmetric in victorian times and by the.1920s asymmetry was an explicit premise of modernist architecture..even these buildings only tended to be asymmetric.about major axes, though; there were hundreds of minor symmetries.in writing you find symmetry at every level, from the phrases.in a sentence to the plot of a novel.  you find the same.in music and art..mosaics (and some cezannes) get extra visual punch by making.the whole picture out of the same atoms.  compositional.symmetry yields some of the most memorable paintings,.especially when two halves react to one another, as in.the creation of adam or.american gothic.in math and engineering, recursion, especially, is a big win..inductive proofs are wonderfully short.  in software,.a problem that can be solved by recursion is nearly always.best solved that way. the eiffel tower looks striking partly.because it is a recursive solution, a tower on a tower.the danger of symmetry, and repetition especially, is that.it can be used as a substitute for thought.good design resembles nature.  it's not so much that.resembling nature is intrinsically good as that nature.has had a long time to work on the.problem.  it's a good sign when your answer resembles nature's.it's not cheating to copy..few would deny that a story should be like life..working from life is a valuable tool in painting too, though its.role has often been misunderstood..the aim is not simply to make a record..the point of painting from life is.that it gives your mind something to chew on:  when your.eyes are looking at something, your hand will do more.interesting work.imitating nature also works in engineering.  boats have.long had spines and ribs like an animal's ribcage..in some cases we may have to wait for better technology:.early aircraft designers were mistaken to.design aircraft that looked like birds, because they didn't.have materials or power sources light enough (the wrights' engine.weighed 152 lbs. and.generated only 12 hp.) or control systems sophisticated.enough for machines that flew like birds, but i could.imagine little unmanned reconnaissance planes flying.like birds in fifty years.now that we have enough computer power, we can imitate nature's.method as well as its results.  genetic algorithms may let us.create things too complex to design in the ordinary.sense.good design is redesign.  it's rare to get things right.the first time.  experts expect to throw away some early work..they plan for plans to change.it takes confidence to throw work away.  you have to be able.to think, there's more where that came from..when people first start drawing, for example,.they're often reluctant to redo parts that aren't.right; they feel they've been lucky to get that far,.and if they try to redo something, it will turn out worse.  instead.they convince themselves that the drawing is not that bad,.really-- in fact, maybe they meant it to look that way.dangerous territory, that; if anything you should.cultivate dissatisfaction..in leonardo's drawings there are often five.or six attempts to get a line right..the distinctive back of the porsche.911 only appeared in the redesign of an awkward.prototype..in wright's early plans for the.guggenheim,.the right half was a ziggurat; he inverted it to get the.present shape.mistakes are natural.  instead of treating them.as disasters, make them easy to acknowledge and easy to fix..leonardo more or less invented the sketch, as a.way to make drawing bear a greater weight of exploration..open-source software has fewer bugs because it admits the.possibility of bugs.it helps to have a medium that makes change easy..when oil paint replaced tempera in the fifteenth century,.it helped.painters to deal with difficult subjects like the human.figure because, unlike tempera, oil can be blended and overpainted..good design can copy.  attitudes to copying.often make a round trip.  a novice.imitates without knowing it; next he tries.consciously to be original; finally, he decides it's.more important to be right than original.unknowing imitation is almost a recipe for bad design..if you don't know where your ideas are coming from,.you're probably imitating an imitator..raphael so pervaded mid-nineteenth century taste that almost.anyone who tried to draw was imitating him, often at several.removes..it was this, more than raphael's own work, that bothered.the pre-raphaelites.the ambitious are not content to imitate. the.second phase in the growth of taste is a conscious.attempt at originality.i think the.greatest masters go on to achieve a kind of selflessness..they just want to get the right answer, and if part of the.right answer has already been discovered by someone else,.that's no reason not to use it..they're confident enough to take from anyone without.feeling that their own vision will be lost in the process..good design is often strange.  some of the very best work.has an uncanny quality: euler's.formula,.bruegel's.hunters in the snow, the.sr-71, lisp.  they're not just.beautiful, but strangely beautiful.i'm not sure why.  it may just be my own stupidity.  a.can-opener must seem miraculous to a dog.  maybe if i were smart.enough it would seem the most natural thing in the world that.ei*pi = -1.  it is after all necessarily true.most of the qualities i've mentioned are things that can be.cultivated, but i don't think it works to cultivate strangeness..the best you can do is not squash it if it starts to appear..einstein didn't try to make relativity strange..he tried to make it true, and the truth turned out to be strange.at an art school where i once studied, the students wanted.most of all to develop a personal style..but if you just try to make good things, you'll.inevitably do it in a distinctive way, just as each person.walks in a distinctive way.  michelangelo was not trying.to paint like michelangelo.  he was just trying to paint.well; he couldn't help painting like michelangelo.the only style worth having is the one you can't help..and this is especially true for strangeness.  there is no.shortcut to it.  the northwest passage that the mannerists,.the romantics, and two generations of american high school.students have searched for does not seem to exist.  the.only way to get there is to go through good and come out.the other side..good design happens in chunks.  the inhabitants.of fifteenth century florence included brunelleschi, ghiberti,.donatello, masaccio, filippo lippi,.fra angelico, verrocchio, botticelli, leonardo, and michelangelo..milan at the time was as big as florence..how many fifteenth century milanese artists can you name?something was happening in florence in the fifteenth century..and it can't have been heredity, because it isn't happening now..you have to assume that whatever.inborn ability leonardo and michelangelo had, there were.people born in milan with just as much.  what happened to.the milanese leonardo?there are roughly a thousand times.as many people alive in the us right now as lived in.florence during the fifteenth century.  a thousand leonardos.and a thousand michelangelos walk among us..if dna ruled, we should be greeted daily by artistic.marvels.  we aren't, and the reason is that to make leonardo.you need more than his innate ability.  you also need florence.in 1450.nothing is more powerful.than a community of talented people working on related.problems.  genes count for little by comparison: being a genetic.leonardo was not enough to compensate for having been born.near milan instead of florence..today we move around more, but great work still comes.disproportionately from a few hotspots:.the bauhaus, the manhattan project, the new yorker,.lockheed's skunk works, xerox parc.at any given time there are a.few hot topics and a few groups doing great work on them,.and it's nearly impossible to do.good work yourself if you're too far removed from one.of these centers.  you can push or pull these trends.to some extent, but you can't break away from them..(maybe you can, but the milanese leonardo couldn't.).good design is often daring.  at every period.of history, people have believed things that were just.ridiculous, and believed them so strongly that you risked.ostracism or even violence by saying otherwise.if our own time were any different, that would be remarkable..as far as i can tell it isn't.this problem afflicts not just every.era, but in some degree every field..much renaissance art was in its time considered shockingly secular:.according to vasari, botticelli repented and gave up painting, and.fra bartolommeo and lorenzo di credi actually burned some of their.work..einstein's theory of relativity offended many contemporary physicists,.and was not fully accepted for decades-- in france, not until the.1950s.today's experimental error is tomorrow's new theory.  if.you want to discover great new things, then instead of turning.a blind eye to the places where conventional wisdom and.truth don't quite meet, you should pay particular attention.to them.as a practical matter, i think it's easier to see ugliness.than to imagine beauty.  most of the people who've made beautiful.things seem to have done it by fixing something that they.thought ugly.  great work usually seems to happen because someone sees.something and thinks, i could do better than that.  giotto.saw traditional byzantine madonnas painted according to a.formula that had satisfied everyone for centuries, and to him.they looked wooden and unnatural..copernicus was so troubled by a hack that all his contemporaries.could tolerate that he felt there must be a better solution.intolerance for ugliness is not in itself enough.  you have to.understand a field well before you develop a good nose for.what needs fixing.  you have to do your homework.  but as.you become expert in a field, you'll start to hear little.voices saying, what a hack!  there must be a better way..don't ignore those voices.  cultivate them.  the recipe for.great work is: very exacting taste, plus the ability.to gratify it.notessullivan.actually said "form ever follows function," but.i think the usual misquotation is closer to what modernist.architects meant..stephen g. brush, "why was relativity accepted?".phys. perspect. 1 (1999) 184-214.japanese translationchinese translationslovenian translationgerman translationinterview: milton glaserrussian translation.you'll find this essay and 14 others in.hackers & painters.<eot><sot>why arc isn't especially object-oriented.there is a kind of mania for object-oriented programming at the moment, but.some of the smartest programmers i know are some of the least excited about it.my own feeling is that object-oriented.programming is a useful technique in some.cases, but it isn't something that has to pervade every program you.write.  you should be able to define new types,.but you shouldn't have to express every program as the.definition of new types.i think there are five reasons people like object-oriented.programming, and three and a half of them are bad:.object-oriented programming is exciting.if you have a statically-typed language without.lexical closures or macros.  to some degree, it offers a way around these.limitations.  (see greenspun's tenth rule.) object-oriented programming is popular in big companies,.because it suits the way they write software.  at big companies,.software tends to be written by large (and frequently changing).teams of.mediocre programmers.  object-oriented programming imposes a.discipline on these programmers that prevents any one of them.from doing too much damage.  the price is that the resulting.code is bloated with protocols and full of duplication..this is not too high a price for big companies, because their.software is probably going to be bloated and full of.duplication anyway. object-oriented.programming generates a lot of what looks like work..back in the days of fanfold, there was a type of programmer who.would only put five or ten lines of code on a page, preceded.by twenty lines of elaborately formatted comments..object-oriented programming is like crack for these people: it lets.you incorporate all this scaffolding right into your source.code.  something that a lisp hacker might handle by pushing.a symbol onto a list becomes a whole file of classes and.methods.  so it is a good tool if you want to convince yourself,.or someone else, that you are doing a lot of work. if a language is itself an object-oriented program, it can.be extended by users.  well, maybe.  or maybe you can do.even better by offering the sub-concepts.of object-oriented programming a la carte.  overloading,.for example, is not intrinsically tied to classes.  we'll see. object-oriented abstractions map neatly onto the domains.of  certain specific kinds of programs, like simulations and cad.systems..i personally have never needed object-oriented abstractions..common lisp has an enormously powerful object system and i've.never used it once.  i've done a lot of things (e.g. making.hash tables full of closures) that would have required.object-oriented techniques to do in wimpier languages, but.i have never had to use clos.maybe i'm just stupid, or have worked on some limited subset.of applications.  there is a danger in designing a language.based on one's own experience of programming.  but it seems.more dangerous to put stuff in that you've never needed.because it's thought to be a good idea.rees re: oospanish translation<eot><sot>what made lisp different.december 2001
 (rev. may 2002).(this article came about in response to some questions on.the ll1 mailing list.  it is now.incorporated in revenge of the nerds.)when mccarthy designed lisp in the late 1950s, it was.a radical departure from existing languages,.the most important of which was fortran.lisp embodied nine new ideas:.1. conditionals.  a conditional is an if-then-else.construct.  we take these for granted now.  they were.invented.by mccarthy in the course of developing lisp..(fortran at that time only had a conditional.goto, closely based on the branch instruction in the.underlying hardware.)  mccarthy, who was on the algol committee, got.conditionals into algol, whence they spread to most other.languages.2. a function type. in lisp, functions are first class.objects-- they're a data type just like integers, strings,.etc, and have a literal representation, can be stored in variables,.can be passed as arguments, and so on.3. recursion.  recursion existed as a mathematical concept.before lisp of course, but lisp was the first programming language to support.it.  (it's arguably implicit in making functions first class.objects.)4. a new concept of variables.  in lisp, all variables.are effectively pointers. values are what.have types, not variables, and assigning or binding.variables means copying pointers, not what they point to.5. garbage-collection.6. programs composed of expressions. lisp programs are.trees of expressions, each of which returns a value..(in some lisps expressions.can return multiple values.)  this is in contrast to fortran.and most succeeding languages, which distinguish between.expressions and statements.it was natural to have this.distinction in fortran because (not surprisingly in a language.where the input format was punched cards) the language was.line-oriented.  you could not nest statements.  and.so while you needed expressions for math to work, there was.no point in making anything else return a value, because.there could not be anything waiting for it.this limitation.went away with the arrival of block-structured languages,.but by then it was too late. the distinction between.expressions and statements was entrenched.  it spread from.fortran into algol and thence to both their descendants.when a language is made entirely of expressions, you can.compose expressions however you want.  you can say either.(using arc syntax)(if foo (= x 1) (= x 2))or(= x (if foo 1 2))7. a symbol type.  symbols differ from strings in that.you can test equality by comparing a pointer.8. a notation for code using trees of symbols.9. the whole language always available..there is.no real distinction between read-time, compile-time, and runtime..you can compile or run code while reading, read or run code.while compiling, and read or compile code at runtime.running code at read-time lets users reprogram lisp's syntax;.running code at compile-time is the basis of macros; compiling.at runtime is the basis of lisp's use as an extension.language in programs like emacs; and reading at runtime.enables programs to communicate using s-expressions, an.idea recently reinvented as xml..when lisp was first invented, all these ideas were far.removed from ordinary programming practice, which was.dictated largely by the hardware available in the late 1950s.over time, the default language, embodied.in a succession of popular languages, has.gradually evolved toward lisp.  1-5 are now widespread..6 is starting to appear in the mainstream..python has a form of 7, though there doesn't seem to be.any syntax for it..8, which (with 9) is what makes lisp macros.possible, is so far still unique to lisp,.perhaps because (a) it requires those parens, or something.just as bad, and (b) if you add that final increment of power,.you can no.longer claim to have invented a new language, but only.to have designed a new dialect of lisp ; -)though useful to present-day programmers, it's.strange to describe lisp in terms of its.variation from the random expedients other languages.adopted.  that was not, probably, how mccarthy.thought of it.  lisp wasn't designed to fix the mistakes.in fortran; it came about more as the byproduct of an.attempt to axiomatize computation.japanese translation<eot><sot>the other road ahead.september 2001
.(this article explains why much of the next generation of software.may be server-based, what that will mean for programmers,.and why this new kind of software is a great opportunity for startups..it's derived from a talk at bbn labs.).in the summer of 1995, my friend robert morris and i decided to.start a startup.  the pr campaign leading up to netscape's ipo was.running full blast then, and there was a lot of talk in the press.about online commerce.  at the time there might have been thirty.actual stores on the web, all made by hand.  if there were going.to be a lot of online stores, there would need to be software for making.them, so we decided to write some.for the first week or so we intended to make this an ordinary.desktop application.  then one day we had the idea of making the.software run on our web server, using the browser as an.interface.  we tried rewriting the software to work over.the web, and it was clear that this was the way to go..if we wrote our software to run on the server, it would be a lot easier.for the users and for us as well.this turned out to be a good plan.  now, as.yahoo store, this.software is the most popular online store builder, with.about 14,000 users.when we started viaweb, hardly anyone understood what we meant when.we said that the software ran on the server.  it was not until.hotmail was launched a year later that people started to get it..now everyone knows that this is a valid approach.  there is.a name now for what we were: an application service provider,.or asp.i think that a lot of the next generation of software will be.written on this model.  even microsoft, who have the most to.lose, seem to see the inevitablity of moving some things off.the desktop. if software moves.off the desktop and onto servers, it will mean a very different.world for developers.  this article describes the surprising.things we saw, as some of the first visitors to this new world..to the extent software does move onto.servers, what i'm describing here is the future.the next thing?when we look back on the desktop software era, i think we'll marvel.at the inconveniences people put up with, just as we marvel now at.what early car owners put up with.  for the first twenty or thirty.years, you had to be a car expert to own a car.  but cars were such.a big win that lots of people who weren't car experts wanted to.have them as well.computers are in this phase now.  when you own a desktop computer,.you end up learning a lot more than you wanted to know about what's.happening inside it.  but more than half the households in the us.own one.  my mother has a computer that she uses for email and for.keeping accounts.  about a year ago she was alarmed to receive a.letter from apple, offering her a discount on a new version of the.operating system.  there's something wrong when a sixty-five year.old woman who wants to use a computer for email and accounts has.to think about installing new operating systems.  ordinary users.shouldn't even know the words "operating system," much less "device.driver" or "patch."there is now another way to deliver software that will save users.from becoming system administrators.  web-based applications are.programs that run on web servers and use web pages as the user.interface.  for the average user this new kind of software will be.easier, cheaper, more mobile, more reliable, and often more powerful.than desktop software.with web-based software, most users won't have to think about.anything except the applications they use.  all the messy, changing.stuff will be sitting on a server somewhere, maintained by the kind.of people who are good at that kind of thing.  and so you won't.ordinarily need a computer, per se, to use software.  all you'll.need will be something with a keyboard, a screen, and a web browser..maybe it will have wireless internet access.  maybe it will also.be your cell phone.  whatever it is, it will be consumer electronics:.something that costs about $200, and that people choose mostly.based on how the case looks.  you'll pay more for internet services.than you do for the hardware, just as you do now with telephones. [1]it will take about a tenth of a second for a click to get to the.server and back, so users of heavily interactive software, like.photoshop, will still want to have the computations happening on.the desktop.  but if you look at the kind of things most people.use computers for, a tenth of a second latency would not be a.problem.  my mother doesn't really need a desktop computer, and.there are a lot of people like her.the win for usersnear my house there is a car with a bumper sticker that reads "death.before inconvenience."  most people, most of the time, will take.whatever choice requires least work.  if web-based software wins,.it will be because it's more convenient.  and it looks as if it.will be, for users and developers both.to use a purely web-based application, all you need is a browser.connected to the internet.  so you can use a web-based application.anywhere.  when you install software on your desktop computer, you.can only use it on that computer.  worse still, your files are.trapped on that computer.  the inconvenience of this model becomes.more and more evident as people get used to networks.the thin end of the wedge here was web-based email.  millions of.people now realize that you should have access to email messages.no matter where you are.  and if you can see your email, why not.your calendar?.if you can discuss a document with your colleagues,.why can't you edit it?  why should any of your data be trapped on.some computer sitting on a faraway desk?the whole idea of "your computer" is going away, and being replaced.with "your data."  you should be able to get at your data from any.computer.  or rather, any client, and a client doesn't have to be.a computer.clients shouldn't store data; they should be like telephones.  in.fact they may become telephones, or vice versa.  and as clients.get smaller, you have another reason not to keep your data on them:.something you carry around with you can be lost or stolen.   leaving.your pda in a taxi is like a disk crash, except that your data is.handed to someone else.instead of being vaporized.with purely web-based software, neither your data nor the applications.are kept on the client.  so you don't have to install anything to.use it.  and when there's no installation, you don't have to worry.about installation going wrong.  there can't be incompatibilities.between the application and your operating system, because the.software doesn't run on your operating system.because it needs no installation, it will be easy, and common, to.try web-based software before you "buy" it.  you should expect to.be able to test-drive any web-based application for free, just by.going to the site where it's offered.  at viaweb our whole site.was like a big arrow pointing users to the test drive.after trying the demo, signing up for the service should require.nothing more than filling out a brief form (the briefer the better)..and that should be the last work the user has to do.  with web-based.software, you should get new releases without paying extra, or.doing any work, or possibly even knowing about it.upgrades won't be the big shocks they are now.  over time applications.will quietly grow more powerful.  this will take some effort on.the part of the developers.  they will have to design software so.that it can be updated without confusing the users.  that's a new.problem, but there are ways to solve it.with web-based applications, everyone uses the same version, and.bugs can be fixed as soon as they're discovered.  so web-based.software should have far fewer bugs than desktop software.  at.viaweb, i doubt we ever had ten known bugs at any one time.  that's.orders of magnitude better than desktop software.web-based applications can be used by several people at the same.time.  this is an obvious win for collaborative applications, but.i bet users will start to want this in most applications once they.realize it's possible.  it will often be useful to let two people.edit the same document, for example.  viaweb let multiple users.edit a site simultaneously, more because that was the right way to.write the software than because we expected users to want to, but.it turned out that many did.when you use a web-based application, your data will be safer..disk crashes won't be a thing of the past, but users won't hear.about them anymore.  they'll happen within server farms.  and.companies offering web-based applications will actually do backups--.not only because they'll have real system administrators worrying.about such things, but because an asp that does lose people's data.will be in big, big trouble.  when people lose their own data in.a disk crash, they can't get that mad, because they only have.themselves to be mad at.  when a company loses their data for them,.they'll get a lot madder.finally, web-based software should be less vulnerable to viruses..if the client doesn't run anything except a browser, there's less.chance of running viruses, and no data locally to damage.  and a.program that attacked the servers themselves should find them very.well defended. [2]for users, web-based software will be less stressful.  i think if.you looked inside the average windows user you'd find a huge and.pretty much untapped desire for software meeting that description..unleashed, it could be a powerful force.city of codeto developers, the most conspicuous difference between web-based.and desktop software is that a web-based application is not a single.piece of code.  it will be a collection of programs of different.types rather than a single big binary.  and so designing web-based.software is like desiging a city rather than a building: as well.as buildings you need roads, street signs, utilities, police and.fire departments, and plans for both growth and various kinds of.disasters.at viaweb, software included fairly big applications that users.talked to directly, programs that those programs used, programs.that ran constantly in the background looking for problems, programs.that tried to restart things if they broke, programs that ran.occasionally to compile statistics or build indexes for searches,.programs we ran explicitly to garbage-collect resources or to move.or restore data, programs that pretended to be users (to measure.performance or expose bugs), programs for diagnosing network.troubles, programs for doing backups, interfaces to outside services,.software that drove an impressive collection of dials displaying.real-time server statistics (a hit with visitors, but indispensable.for us too), modifications (including bug fixes) to open-source.software, and a great many configuration files and settings.  trevor.blackwell wrote a spectacular program for moving stores to new.servers across the country, without shutting them down, after we.were bought by yahoo. programs paged us, sent faxes and email to.users, conducted transactions with credit card processors, and.talked to one another through sockets, pipes, http requests, ssh,.udp packets, shared memory, and files.  some of viaweb even consisted.of the absence of programs, since one of the keys to unix security.is not to run unnecessary utilities that people might use to break.into your servers.it did not end with software.  we spent a lot of time thinking.about server configurations.  we built the servers ourselves, from.components-- partly to save money, and partly to get exactly what.we wanted.  we had to think about whether our upstream isp had fast.enough connections to all the backbones.  we serially.dated.raid suppliers.but hardware is not just something to worry about.  when you control.it you can do more for users.  with a desktop application, you can.specify certain minimum hardware, but you can't add more.  if you.administer the servers, you can in one step enable all your users.to page people, or send faxes, or send commands by phone, or process.credit cards, etc, just by installing the relevant hardware.  we.always looked for new ways to add features with hardware, not just.because it pleased users, but also as a way to distinguish ourselves.from competitors who (either because they sold desktop software,.or resold web-based applications through isps) didn't have direct.control over the hardware.because the software in a web-based application will be a collection.of programs rather than a single binary, it can be written in any.number of different languages.  when you're writing desktop software,.you're practically forced to write the application in the same.language as the underlying operating system-- meaning c and c++..and so these languages (especially among nontechnical people like.managers and vcs) got to be considered as the languages for "serious".software development.  but that was just an artifact of the way.desktop software had to be delivered.  for server-based software.you can use any language you want. [3]  today a lot of the top.hackers are using languages far removed from c and c++:  perl,.python, and even lisp.with server-based software, no one can tell you what language to.use, because you control the whole system, right down to the.hardware.  different languages are good for different tasks.  you.can use whichever is best for each.  and when you have competitors,."you can" means "you must" (we'll return to this later), because.if you don't take advantage of this possibility, your competitors.will.most of our competitors used c and c++, and this made their software.visibly inferior because (among other things), they had no way.around the statelessness of cgi scripts.  if you were going to.change something, all the changes had to happen on one page, with.an update button at the bottom.  as i've written elsewhere, by.using lisp, which many people still consider.a research language,.we could make the viaweb editor behave more like desktop software.releasesone of the most important changes in this new world is the way you.do releases. in the desktop software business, doing a release is.a huge trauma, in which the whole company sweats and strains to.push out a single, giant piece of code.  obvious comparisons suggest.themselves, both to the process and the resulting product.with server-based software, you can make changes almost as you.would in a program you were writing for yourself.  you release.software as a series of incremental changes instead of an occasional.big explosion. a typical desktop software company might do one or.two releases a year.  at viaweb we often did three to five releases.a day.when you switch to this new model, you realize how much software.development is affected by the way it is released.  many of the.nastiest problems you see in the desktop software business are due.to catastrophic nature of releases.when you release only one new version a year, you tend to deal with.bugs wholesale.  some time before the release date you assemble a.new version in which half the code has been torn out and replaced,.introducing countless bugs.  then a squad of qa people step in and.start counting them, and the programmers work down the list, fixing.them.  they do not generally get to the end of the list, and indeed,.no one is sure where the end is.  it's like fishing rubble out of.a pond.  you never really know what's happening inside the software..at best you end up with a statistical sort of correctness.with server-based software, most of the change is small and.incremental.  that in itself is less likely to introduce bugs.  it.also means you know what to test most carefully when you're about.to release software: the last thing you changed.  you end up with.a much firmer grip on the code.  as a general rule, you do know.what's happening inside it.  you don't have the source code memorized,.of course, but when you read the source you do it like a pilot.scanning the instrument panel, not like a detective trying to.unravel some mystery.desktop software breeds a certain fatalism about bugs.  you know.that you're shipping something loaded with bugs, and you've even.set up mechanisms to compensate for it (e.g. patch releases).  so.why worry about a few more?  soon you're releasing whole features.you know are broken..apple.did this earlier this year.  they felt.under pressure to release their new os, whose release date had.already slipped four times, but some of the software (support for.cds and dvds) wasn't ready. the solution?  they released the os.without the unfinished parts, and users will have to install them.later.with web-based software, you never have to release software before.it works, and you can release it as soon as it does work.the industry veteran may be thinking, it's a fine-sounding idea to.say that you never have to release software before it works, but.what happens when you've promised to deliver a new version of your.software by a certain date?  with web-based software, you wouldn't.make such a promise, because there are no versions.  your software.changes gradually and continuously.  some changes might be bigger.than others, but the idea of versions just doesn't naturally fit.onto web-based software.if anyone remembers viaweb this might sound odd, because we were.always announcing new versions.  this was done entirely for pr.purposes.  the trade press, we learned, thinks in version numbers..they will give you major coverage for a major release, meaning a.new first digit on the version number, and generally a paragraph.at most for a point release, meaning a new digit after the decimal.point.some of our competitors were offering desktop software and actually.had version numbers.  and for these releases, the mere fact of.which seemed to us evidence of their backwardness, they would get.all kinds of publicity.  we didn't want to miss out, so we started.giving version numbers to our software too.  when we wanted some.publicity, we'd make a list of all the features we'd added since.the last "release," stick a new version number on the software,.and issue a press release saying that the new version was available.immediately.  amazingly, no one ever called us on it.by the time we were bought, we had done this three times, so we.were on version 4.  version 4.1 if i remember correctly.  after.viaweb became yahoo store, there was no longer such a desperate.need for publicity, so although the software continued to evolve,.the whole idea of version numbers was quietly dropped.bugsthe other major technical advantage of web-based software is that.you can reproduce most bugs.  you have the users' data right there.on your disk.  if someone breaks your software, you don't have to.try to guess what's going on, as you would with desktop software:.you should be able to reproduce the error while they're on the.phone with you.  you might even know about it already, if you have.code for noticing errors built into your application.web-based software gets used round the clock, so everything you do.is immediately put through the wringer.  bugs turn up quickly.software companies are sometimes accused of letting the users debug.their software.  and that is just what i'm advocating.  for web-based.software it's actually a good plan, because the bugs are fewer and.transient.  when you release software gradually you get far fewer.bugs to start with.  and when you can reproduce errors and release.changes instantly, you can find and fix most bugs as soon as they.appear.  we never had enough bugs at any one time to bother with.a formal bug-tracking system.you should test changes before you release them, of course, so no.major bugs should get released.  those few that inevitably slip.through will involve borderline cases and will only affect the few.users that encounter them before someone calls in to complain.  as.long as you fix bugs right away, the net effect, for the average.user, is far fewer bugs.  i doubt the average viaweb user ever saw.a bug.fixing fresh bugs is easier than fixing old ones.  it's usually.fairly quick to find a bug in code you just wrote.  when it turns.up you often know what's wrong before you even look at the source,.because you were already worrying about it subconsciously. fixing.a bug in something you wrote six months ago (the average case if.you release once a year) is a lot more work.  and since you don't.understand the code as well, you're more likely to fix it in an.ugly way, or even introduce more bugs. [4]when you catch bugs early, you also get fewer compound bugs..compound bugs are two separate bugs that interact:  you trip going.downstairs, and when you reach for the handrail it comes off in.your hand.  in software this kind of bug is the hardest to find,.and also tends to have the worst consequences. [5]  the traditional."break everything and then filter out the bugs" approach inherently.yields a lot of compound bugs.  and software that's released in a.series of small changes inherently tends not to. the floors are.constantly being swept clean of any loose objects that might later.get stuck in something.it helps if you use a technique called functional programming..functional programming means avoiding side-effects.  it's something.you're more likely to see in research papers than commercial.software, but for web-based applications it turns out to be really.useful.  it's hard to write entire programs as purely functional.code, but you can write substantial chunks this way.  it makes.those parts of your software easier to test, because they have no.state, and that is very convenient in a situation where you are.constantly making and testing small modifications.  i wrote much.of viaweb's editor in this style, and we made our scripting language,.rtml,.a purely functional language.people from the desktop software business will find this hard to.credit, but at viaweb bugs became almost a game.  since most released.bugs involved borderline cases, the users who encountered them were.likely to be advanced users, pushing the envelope.  advanced users.are more forgiving about bugs, especially since you probably.introduced them in the course of adding some feature they were.asking for.  in fact, because bugs were rare and you had to be.doing sophisticated things to see them, advanced users were often.proud to catch one.  they would call support in a spirit more of.triumph than anger, as if they had scored points off us.supportwhen you can reproduce errors, it changes your approach to customer.support.  at most software companies, support is offered as a way.to make customers feel better.  they're either calling you about.a known bug, or they're just doing something wrong and you have to.figure out what.  in either case there's not much you can learn.from them.  and so you tend to view support calls as a pain in the.ass that you want to isolate from your developers as much as.possible.this was not how things worked at viaweb.  at viaweb, support was.free, because we wanted to hear from customers.  if someone had a.problem, we wanted to know about it right away so that we could.reproduce the error and release a fix.so at viaweb the developers were always in close contact with.support.  the customer support people were about thirty feet away.from the programmers, and knew that they could always interrupt.anything with a report of a genuine bug.  we would leave a board.meeting to fix a serious bug.our approach to support made everyone happier.  the customers were.delighted.  just imagine how it would feel to call a support line.and be treated as someone bringing important news.  the customer.support people liked it because it meant they could help the users,.instead of reading scripts to them.  and the programmers liked it.because they could reproduce bugs instead of just hearing vague.second-hand reports about them.our policy of fixing bugs on the fly changed the relationship.between customer support people and hackers.  at most software.companies, support people are underpaid human shields, and hackers.are little copies of god the father, creators of the world.  whatever.the procedure for reporting bugs, it is likely to be one-directional:.support people who hear about bugs fill out some form that eventually.gets passed on (possibly via qa) to programmers, who put it on.their list of things to do.  it was very different at viaweb..within a minute of hearing about a bug from a customer, the support.people could be standing next to a programmer hearing him say "shit,.you're right, it's a bug." it delighted the support people to hear.that "you're right" from the hackers.  they used to bring us bugs.with the same expectant air as a cat bringing you a mouse it has.just killed.   it also made them more careful in judging the.seriousness of a bug, because now their honor was on the line.after we were bought by yahoo, the customer support people were.moved far away from the programmers.  it was only then that we.realized that they were effectively qa and to some extent marketing.as well.  in addition to catching bugs, they were the keepers of.the knowledge of vaguer, buglike things, like features that confused.users. [6]  they were also a kind of proxy focus group; we could.ask them which of two new features users wanted more, and they were.always right.moralebeing able to release software immediately is a big motivator..often as i was walking to work i would think of some change i wanted.to make to the software, and do it that day.  this worked for bigger.features as well.  even if something was going to take two weeks.to write (few projects took longer), i knew i could see the effect.in the software as soon as it was done.if i'd had to wait a year for the next release, i would have shelved.most of these ideas, for a while at least.  the thing about ideas,.though, is that they lead to more ideas.  have you ever noticed.that when you sit down to write something, half the ideas that end.up in it are ones you thought of while writing it?  the same thing.happens with software.  working to implement one idea gives you.more ideas.  so shelving an idea costs you not only that delay in.implementing it, but also all the ideas that implementing it would.have led to.  in fact, shelving an idea probably even inhibits new.ideas: as you start to think of some new feature, you catch sight.of the shelf and think "but i already have a lot of new things i.want to do for the next release."what big companies do instead of implementing features is plan.them.  at viaweb we sometimes ran into trouble on this account..investors and analysts would ask us what we had planned for the.future.  the truthful answer would have been, we didn't have any.plans.  we had general ideas about things we wanted to improve,.but if we knew how we would have done it already.  what were we.going to do in the next six months? whatever looked like the biggest.win.  i don't know if i ever dared give this answer, but that was.the truth.  plans are just another word for ideas on the shelf..when we thought of good ideas, we implemented them.at viaweb, as at many software companies, most code had one definite.owner.  but when you owned something you really owned it: no one.except the owner of a piece of software had to approve (or even.know about) a release.  there was no protection against breakage.except the fear of looking like an idiot to one's peers, and that.was more than enough.  i may have given the impression that we just.blithely plowed forward writing code.  we did go fast, but we.thought very carefully before we released software onto those.servers.  and paying attention is more important to reliability.than moving slowly.  because he pays close attention, a navy pilot.can land a 40,000 lb. aircraft at 140 miles per hour on a pitching.carrier deck, at night, more safely than the average teenager can.cut a bagel.this way of writing software is a double-edged sword of course..it works a lot better for a small team of good, trusted programmers.than it would for a big company of mediocre ones, where bad ideas.are caught by committees instead of the people that had them.brooks in reversefortunately, web-based software does require fewer programmers..i once worked for a medium-sized desktop software company that had.over 100 people working in engineering as a whole.  only 13 of.these were in product development.  all the rest were working on.releases, ports, and so on.  with web-based software, all you need.(at most) are the 13 people, because there are no releases, ports,.and so on.viaweb was written by just three people. [7]  i was always under.pressure to hire more, because we wanted to get bought, and we knew.that buyers would have a hard time paying a high price for a company.with only three programmers.  (solution:  we hired more, but created.new projects for them.)when you can write software with fewer programmers, it saves you.more than money.  as fred brooks pointed out in the mythical.man-month, adding people to a project tends to slow it down.  the.number of possible connections between developers grows exponentially.with the size of the group.  the larger the group, the more time.they'll spend in meetings negotiating how their software will work.together, and the more bugs they'll get from unforeseen interactions..fortunately, this process also works in reverse: as groups get.smaller, software development gets exponentially more efficient..i can't remember the programmers at viaweb ever having an actual.meeting.  we never had more to say at any one time than we could.say as we were walking to lunch.if there is a downside here, it is that all the programmers have.to be to some degree system administrators as well.  when you're.hosting software, someone has to be watching the servers, and in.practice the only people who can do this properly are the ones who.wrote the software.  at viaweb our system had so many components.and changed so frequently that there was no definite border between.software and infrastructure.  arbitrarily declaring such a border.would have constrained our design choices.  and so although we were.constantly hoping that one day ("in a couple months") everything.would be stable enough that we could hire someone whose job was.just to worry about the servers, it never happened.i don't think it could be any other way, as long as you're still.actively developing the product.  web-based software is never going.to be something you write, check in, and go home.  it's a live.thing, running on your servers right now.  a bad bug might not just.crash one user's process; it could crash them all.  if a bug in.your code corrupts some data on disk, you have to fix it.  and so.on.  we found that you don't have to watch the servers every minute.(after the first year or so), but you definitely want to keep an.eye on things you've changed recently.  you don't release code late.at night and then go home.watching userswith server-based software, you're in closer touch with your code..you can also be in closer touch with your users.  intuit is famous.for introducing themselves to customers at retail stores and asking.to follow them home.  if you've ever watched someone use your.software for the first time, you know what surprises must have.awaited them.software should do what users think it will.  but you can't have.any idea what users will be thinking, believe me, until you watch.them.  and server-based software gives you unprecedented information.about their behavior.  you're not limited to small, artificial.focus groups.  you can see every click made by every user.  you.have to consider carefully what you're going to look at, because.you don't want to violate users' privacy, but even the most general.statistical sampling can be very useful.when you have the users on your server, you don't have to rely on.benchmarks, for example.  benchmarks are simulated users.  with.server-based software, you can watch actual users.  to decide what.to optimize, just log into a server and see what's consuming all.the cpu.  and you know when to stop optimizing too: we eventually.got the viaweb editor to the point where it was memory-bound rather.than cpu-bound, and since there was nothing we could do to decrease.the size of users' data (well, nothing easy), we knew we might as.well stop there.efficiency matters for server-based software, because you're paying.for the hardware.  the number of users you can support per server.is the divisor of your capital cost, so if you can make your software.very efficient you can undersell competitors and still make a.profit.  at viaweb we got the capital cost per user down to about.$5.  it would be less now, probably less than the cost of sending.them the first month's bill.  hardware is free now, if your software.is reasonably efficient.watching users can guide you in design as well as optimization..viaweb had a scripting language called rtml that let advanced users.define their own page styles.  we found that rtml became a kind of.suggestion box, because users only used it when the predefined page.styles couldn't do what they wanted.  originally the editor put.button bars across the page, for example, but after a number of.users used rtml to put buttons down the left.side,.we made that an.option (in fact the default) in the predefined page styles.finally, by watching users you can often tell when they're in.trouble.  and since the customer is always right, that's a sign of.something you need to fix.  at viaweb the key to getting users was.the online test drive.  it was not just a series of slides built.by marketing people.  in our test drive, users actually used the.software.  it took about five minutes, and at the end of it they.had built a real, working store..the test drive was the way we got nearly all our new users.  i.think it will be the same for most web-based applications.   if.users can get through a test drive successfully, they'll like the.product.  if they get confused or bored, they won't.  so anything.we could do to get more people through the test drive would increase.our growth rate.i studied click trails of people taking the test drive and found.that at a certain step they would get confused and click on the.browser's back button.  (if you try writing web-based applications,.you'll find that the back button becomes one of your most interesting.philosophical problems.) so i added a message at that point, telling.users that they were nearly finished, and reminding them not to.click on the back button.  another great thing about web-based.software is that you get instant feedback from changes:  the number.of people completing the test drive rose immediately from 60% to.90%.  and since the number of new users was a function of the number.of completed test drives, our revenue growth increased by 50%, just.from that change.moneyin the early 1990s i read an article in which someone said that.software was a subscription business.  at first this seemed a very.cynical statement.  but later i realized that it reflects reality:.software development is an ongoing process.  i think it's cleaner.if you openly charge subscription fees, instead of forcing people.to keep buying and installing new versions so that they'll keep.paying you.  and fortunately, subscriptions are the natural way to.bill for web-based applications.hosting applications is an area where companies will play a role.that is not likely to be filled by freeware.  hosting applications.is a lot of stress, and has real expenses.  no one is going to want.to do it for free.for companies, web-based applications are an ideal source of revenue..instead of starting each quarter with a blank slate, you have a.recurring revenue stream.  because your software evolves gradually,.you don't have to worry that a new model will flop; there never.need be a new model, per se, and if you do something to the software.that users hate, you'll know right away.  you have no trouble with.uncollectable bills; if someone won't pay you can just turn off.the service.  and there is no possibility of piracy.that last "advantage" may turn out to be a problem.  some amount.of piracy is to the advantage of software companies.  if some user.really would not have bought your software at any price, you haven't.lost anything if he uses a pirated copy.  in fact you gain, because.he is one more user helping to make your software the standard--.or who might buy a copy later, when he graduates from high school.when they can, companies like to do something called price.discrimination, which means charging each customer as much as they.can afford. [8] software is particularly suitable for price.discrimination, because the marginal cost is close to zero.  this.is why some software costs more to run on suns than on intel boxes:.a company that uses suns is not interested in saving money and can.safely be charged more.  piracy is effectively the lowest tier of.price discrimination.  i think that software companies understand.this and deliberately turn a blind eye to some kinds of piracy. [9].with server-based software they are going to have to come up with.some other solution.web-based software sells well, especially in comparison to desktop.software, because it's easy to buy.  you might think that people.decide to buy something, and then buy it, as two separate steps..that's what i thought before viaweb, to the extent i thought about.the question at all.  in fact the second step can propagate back.into the first: if something is hard to buy, people will change.their mind about whether they wanted it.  and vice versa: you'll.sell more of something when it's easy to buy.  i buy more books.because amazon exists.  web-based software is just about the easiest.thing in the world to buy, especially if you have just done an.online demo.  users should not have to do much more than enter a.credit card number.  (make them do more at your peril.).sometimes web-based software is offered through isps acting as.resellers.  this is a bad idea.  you have to be administering the.servers, because you need to be constantly improving both hardware.and software.  if you give up direct control of the servers, you.give up most of the advantages of developing web-based applications.several of our competitors shot themselves in the foot this way--.usually, i think, because they were overrun by suits who were.excited about this huge potential channel, and didn't realize that.it would ruin the product they hoped to sell through it.  selling.web-based software through isps is like selling sushi through.vending machines.customerswho will the customers be?  at viaweb they were initially individuals.and smaller companies, and i think this will be the rule with.web-based applications.  these are the users who are ready to try.new things, partly because they're more flexible, and partly because.they want the lower costs of new technology.web-based applications will often be the best thing for big companies.too (though they'll be slow to realize it).  the best intranet is.the internet.  if a company uses true web-based applications, the.software will work better, the servers will be better administered,.and employees will have access to the system from anywhere.the argument against this approach usually hinges on security: if.access is easier for employees, it will be for bad guys too.  some.larger merchants were reluctant to use viaweb because they thought.customers' credit card information would be safer on their own.servers.  it was not easy to make this point diplomatically, but.in fact the data was almost certainly safer in our hands than.theirs.  who can hire better people to manage security, a technology.startup whose whole business is running servers, or a clothing.retailer?  not only did we have better people worrying about.security, we worried more about it.  if someone broke into the.clothing retailer's servers, it would affect at most one merchant,.could probably be hushed up, and in the worst case might get one.person fired.  if someone broke into ours, it could affect thousands.of merchants, would probably end up as news on cnet, and could put.us out of business.if you want to keep your money safe, do you keep it under your.mattress at home, or put it in a bank? this argument applies to.every aspect of server administration:  not just security, but.uptime, bandwidth, load management, backups, etc.  our existence.depended on doing these things right.  server problems were the.big no-no for us, like a dangerous toy would be for a toy maker,.or a salmonella outbreak for a food processor.a big company that uses web-based applications is to that extent.outsourcing it.  drastic as it sounds, i think this is generally.a good idea.  companies are likely to get better service this way.than they would from in-house system administrators.  system.administrators can become cranky and unresponsive because they're.not directly exposed to competitive pressure:  a salesman has to.deal with customers, and a developer has to deal with competitors'.software, but a system administrator, like an old bachelor, has.few external forces to keep him in line. [10]  at viaweb we had.external forces in plenty to keep us in line. the people calling.us were customers, not just co-workers.  if a server got wedged,.we jumped; just thinking about it gives me a jolt of adrenaline,.years later.so web-based applications will ordinarily be the right answer for.big companies too.  they will be the last to realize it, however,.just as they were with desktop computers.  and partly for the same.reason: it will be worth a lot of money to convince big companies.that they need something more expensive.there is always a tendency for rich customers to buy expensive.solutions, even when cheap solutions are better, because the people.offering expensive solutions can spend more to sell them.  at viaweb.we were always up against this.  we lost several high-end merchants.to web consulting firms who convinced them they'd be better off if.they paid half a million dollars for a custom-made online store on.their own server.  they were, as a rule, not better off, as more.than one discovered when christmas shopping season came around and.loads rose on their server.  viaweb was a lot more sophisticated.than what most of these merchants got, but we couldn't afford to.tell them.  at $300 a month, we couldn't afford to send a team of.well-dressed and authoritative-sounding people to make presentations.to customers.a large part of what big companies pay extra for is the cost of.selling expensive things to them.  (if the defense department pays.a thousand dollars for toilet seats, it's partly because it costs.a lot to sell toilet seats for a thousand dollars.)  and this is.one reason intranet software will continue to thrive, even though.it is probably a bad idea.  it's simply more expensive.  there is.nothing you can do about this conundrum, so the best plan is to go.for the smaller customers first.  the rest will come in time.son of serverrunning software on the server is nothing new.  in fact it's the.old model: mainframe applications are all server-based.  if.server-based software is such a good idea, why did it lose last.time?  why did desktop computers eclipse mainframes?at first desktop computers didn't look like much of a threat.  the.first users were all hackers-- or hobbyists, as they were called.then.  they liked microcomputers because they were cheap.  for the.first time, you could have your own computer.  the phrase "personal.computer" is part of the language now, but when it was first used.it had a deliberately audacious sound, like the phrase "personal.satellite" would today.why did desktop computers take over? i think it was because they.had better software.  and i think the reason microcomputer software.was better was that it could be written by small companies.i don't think many people realize how fragile and tentative startups.are in the earliest stage.  many startups begin almost by accident--.as a couple guys, either with day jobs or in school, writing a.prototype of something that might, if it looks promising, turn into.a company. at this larval stage, any significant obstacle will stop.the startup dead in its tracks.  writing mainframe software required.too much commitment up front.  development machines were expensive,.and because the customers would be big companies, you'd need an.impressive-looking sales force to sell it to them.  starting a.startup to write mainframe software would be a much more serious.undertaking than just hacking something together on your apple ii.in the evenings.  and so you didn't get a lot of startups writing.mainframe applications.the arrival of desktop computers inspired a lot of new software,.because writing applications for them seemed an attainable goal to.larval startups.  development was cheap, and the customers would.be individual people that you could reach through computer stores.or even by mail-order.the application that pushed desktop computers out into the mainstream.was visicalc, the.first spreadsheet.  it was written by two guys.working in an attic, and yet did things no mainframe software could.do. [11]  visicalc was such an advance, in its time, that people.bought apple iis just to run it.  and this was the beginning of a.trend: desktop computers won because startups wrote software for.them.it looks as if server-based software will be good this time around,.because startups will write it.  computers are so cheap now that.you can get started, as we did, using a desktop computer as a.server.  inexpensive processors have eaten the workstation market.(you rarely even hear the word now) and are most of the way through.the server market; yahoo's servers, which deal with loads as high.as any on the internet, all have the same inexpensive intel processors.that you have in your desktop machine.  and once you've written.the software, all you need to sell it is a web site.  nearly all.our users came direct to our site through word of mouth and references.in the press. [12]viaweb was a typical larval startup.  we were terrified of starting.a company, and for the first few months comforted ourselves by.treating the whole thing as an experiment that we might call off.at any moment.  fortunately, there were few obstacles except.technical ones.  while we were writing the software, our web server.was the same desktop machine we used for development, connected to.the outside world by a dialup line.  our only expenses in that.phase were food and rent.there is all the more reason for startups to write web-based software.now, because writing desktop software has become a lot less fun..if you want to write desktop software now you do it on microsoft's.terms, calling their apis and working around their buggy os.  and.if you manage to write something that takes off, you may find that.you were merely doing market research for microsoft.if a company wants to make a platform that startups will build on,.they have to make it something that hackers themselves will want.to use.   that means it has to be inexpensive and well-designed..the mac was popular with hackers when it first came out, and a lot.of them wrote software for it. [13] you see this less with windows,.because hackers don't use it.  the kind of people who are good at.writing software tend to be running linux or freebsd now.i don't think we would have started a startup to write desktop.software, because desktop software has to run on windows, and before.we could write software for windows we'd have to use it.  the web.let us do an end-run around windows, and deliver software running.on unix direct to users through the browser.  that is a liberating.prospect, a lot like the arrival of pcs twenty-five years ago.microsoftback when desktop computers arrived, ibm was the giant that everyone.was afraid of.  it's hard to imagine now, but i remember the feeling.very well.  now the frightening giant is microsoft, and i don't.think they are as blind to the threat facing them as ibm was..after all, microsoft deliberately built their business in ibm's.blind spot.i mentioned earlier that my mother doesn't really need a desktop.computer.  most users probably don't.  that's a problem for microsoft,.and they know it.  if applications run on remote servers, no one.needs windows.  what will microsoft do?  will they be able to use.their control of the desktop to prevent, or constrain, this new.generation of software?my guess is that microsoft will develop some kind of server/desktop.hybrid, where the operating system works together with servers they.control.  at a minimum, files will be centrally available for users.who want that.  i don't expect microsoft to go all the way to the.extreme of doing the computations on the server, with only a browser.for a client, if they can avoid it. if you only need a browser for.a client, you don't need microsoft on the client, and if microsoft.doesn't control the client, they can't push users towards their.server-based applications.i think microsoft will have a hard time keeping the genie in the.bottle.  there will be too many different types of clients for them.to control them all.  and if microsoft's applications only work.with some clients, competitors will be able to trump them by offering.applications that work from any client. [14]in a world of web-based applications, there is no automatic place.for microsoft.  they may succeed in making themselves a place, but.i don't think they'll dominate this new world as they did the world.of desktop applications.it's not so much that a competitor will trip them up as that they.will trip over themselves.  with the rise of web-based software,.they will be facing not just technical problems but their own.wishful thinking.  what they need to do is cannibalize their existing.business, and i can't see them facing that.  the same single-mindedness.that has brought them this far will now be working against them..ibm was in exactly the same situation, and they could not master.it.  ibm made a late and half-hearted entry into the microcomputer.business because they were ambivalent about threatening their cash.cow, mainframe computing.  microsoft will likewise be hampered by.wanting to save the desktop.  a cash cow can be a damned heavy.monkey on your back.i'm not saying that no one will dominate server-based applications..someone probably will eventually.  but i think that there will be.a good long period of cheerful chaos, just as there was in the.early days of microcomputers.  that was a good time for startups..lots of small companies flourished, and did it by making cool.things.startups but more sothe classic startup is fast and informal, with few people and little.money.  those few people work very hard, and technology magnifies.the effect of the decisions they make.  if they win, they win big.in a startup writing web-based applications, everything you associate.with startups is taken to an extreme.  you can write and launch a.product with even fewer people and even less money.  you have to.be even faster, and you can get away with being more informal..you can literally launch your product as three guys sitting in the.living room of an apartment, and a server collocated at an isp..we did.over time the teams have gotten smaller, faster, and more informal..in 1960, software development meant a roomful of men with horn.rimmed glasses and narrow black neckties, industriously writing.ten lines of code a day on ibm coding forms.  in 1980, it was a.team of eight to ten people wearing jeans to the office and typing.into vt100s.  now it's a couple of guys sitting in a living room.with laptops.  (and jeans turn out not to be the last word in.informality.)startups are stressful, and this, unfortunately, is also taken to.an extreme with web-based applications..many software companies, especially at the beginning, have periods.where the developers slept under their desks and so on.  the alarming.thing about web-based software is that there is nothing to prevent.this becoming the default.  the stories about sleeping under desks.usually end:  then at last we shipped it and we all went home and.slept for a week.  web-based software never ships.  you can work.16-hour days for as long as you want to.  and because you can, and.your competitors can, you tend to be forced to.  you can, so you.must.  it's parkinson's law running in reverse.the worst thing is not the hours but the responsibility.  programmers.and system administrators traditionally each have their own separate.worries.  programmers have to worry about bugs, and system.administrators have to worry about infrastructure.  programmers.may spend a long day up to their elbows in source code, but at some.point they get to go home and forget about it.  system administrators.never quite leave the job behind, but when they do get paged at.4:00 am, they don't usually have to do anything very complicated..with web-based applications, these two kinds of stress get combined..the programmers become system administrators, but without the.sharply defined limits that ordinarily make the job bearable.at viaweb we spent the first six months just writing software.  we.worked the usual long hours of an early startup.  in a desktop.software company, this would have been the part where we were.working hard, but it felt like a vacation compared to the next.phase, when we took users onto our server.  the second biggest.benefit of selling viaweb to yahoo (after the money) was to be able.to dump ultimate responsibility for the whole thing onto the.shoulders of a big company.desktop software forces users to become system administrators..web-based software forces programmers to.  there is less stress in.total, but more for the programmers.  that's not necessarily bad.news.  if you're a startup competing with a big company, it's good.news. [15]  web-based applications offer a straightforward way to.outwork your competitors.  no startup asks for more.just good enoughone thing that might deter you from writing web-based applications.is the lameness of web pages as a ui.  that is a problem, i admit..there were a few things we would have really liked to add to.html and http.  what matters, though, is that web pages are just.good enough.there is a parallel here with the first microcomputers.  the.processors in those machines weren't actually intended to be the.cpus of computers.  they were designed to be used in things like.traffic lights.  but guys like ed roberts, who designed the.altair,.realized that they were just good enough.  you could combine one.of these chips with some memory (256 bytes in the first altair),.and front panel switches, and you'd have a working computer.  being.able to have your own computer was so exciting that there were.plenty of people who wanted to buy them, however limited.web pages weren't designed to be a ui for applications, but they're.just good enough.  and for a significant number of users, software.that you can use from any browser will be enough of a win in itself.to outweigh any awkwardness in the ui.  maybe you can't write the.best-looking spreadsheet using html, but you can write a spreadsheet.that several people can use simultaneously from different locations.without special client software, or that can incorporate live data.feeds, or that can page you when certain conditions are triggered..more importantly, you can write new kinds of applications that.don't even have names yet.  visicalc was not merely a microcomputer.version of a mainframe application, after all-- it was a new type.of application.of course, server-based applications don't have to be web-based..you could have some other kind of client.  but i'm pretty sure.that's a bad idea.  it would be very convenient if you could assume.that everyone would install your client-- so convenient that you.could easily convince yourself that they all would-- but if they.don't, you're hosed.  because web-based software assumes nothing.about the client, it will work anywhere the web works.  that's a.big advantage already, and the advantage will grow as new web.devices proliferate.  users will like you because your software.just works, and your life will be easier because you won't have to.tweak it for every new client.   [16]i feel like i've watched the evolution of the web as closely as.anyone, and i can't predict what's going to happen with clients..convergence is probably coming, but where?  i can't pick a winner..one thing i can predict is conflict between aol and microsoft..whatever microsoft's .net turns out to be, it will probably involve.connecting the desktop to servers.  unless aol fights back, they.will either be pushed aside or turned into a pipe between microsoft.client and server software.  if microsoft and aol get into a client.war, the only thing sure to work on both will be browsing the web,.meaning web-based applications will be the only kind that work.everywhere.how will it all play out?  i don't know.  and you don't have to.know if you bet on web-based applications.  no one can break that.without breaking browsing.  the web may not be the only way to.deliver software, but it's one that works now and will continue to.work for a long time.  web-based applications are cheap to develop,.and easy for even the smallest startup to deliver.  they're a lot.of work, and of a particularly stressful kind, but that only makes.the odds better for startups.why not?e. b. white was amused to learn from a farmer friend that many.electrified fences don't have any current running through them..the cows apparently learn to stay away from them, and after that.you don't need the current.  "rise up, cows!" he wrote, "take your.liberty while despots snore!"if you're a hacker who has thought of one day starting a startup,.there are probably two things keeping you from doing it.  one is.that you don't know anything about business.  the other is that.you're afraid of competition.  neither of these fences have any.current in them.there are only two things you have to know about business:  build.something users love, and make more than you spend.  if you get.these two right, you'll be ahead of most startups.  you can figure.out the rest as you go.you may not at first make more than you spend, but as long as the.gap is closing fast enough you'll be ok.  if you start out underfunded,.it will at least encourage a habit of frugality.  the less you.spend, the easier it is to make more than you spend.  fortunately,.it can be very cheap to launch a web-based application.  we launched.on under $10,000, and it would be even cheaper today.  we had to.spend thousands on a server, and thousands more to get ssl.  (the.only company selling ssl software at the time was netscape.)  now.you can rent a much more powerful server, with ssl included, for.less than we paid for bandwidth alone.  you could launch a web-based.application now for less than the cost of a fancy office chair.as for building something users love, here are some general tips..start by making something clean and simple that you would want to.use yourself.  get a version 1.0 out fast, then continue to improve.the software, listening closely to the users as you do.  the customer.is always right, but different customers are right about different.things; the least sophisticated users show you what you need to.simplify and clarify, and the most sophisticated tell you what.features you need to add. the best thing software can be is easy,.but the way to do this is to get the defaults right, not to limit.users' choices.  don't get complacent if your competitors' software.is lame; the standard to compare your software to is what it could.be, not what your current competitors happen to have.  use your.software yourself, all the time.  viaweb was supposed to be an.online store builder, but we used it to make our own site too..don't listen to marketing people or designers or product managers.just because of their job titles.  if they have good ideas, use.them, but it's up to you to decide; software has to be designed by.hackers who understand design, not designers who know a little.about software.  if you can't design software as well as implement.it, don't start a startup.now let's talk about competition.  what you're afraid of is not.presumably groups of hackers like you, but actual companies, with.offices and business plans and salesmen and so on, right?  well,.they are more afraid of you than you are of them, and they're right..it's a lot easier for a couple of hackers to figure out how to rent.office space or hire sales people than it is for a company of any.size to get software written.  i've been on both sides, and i know..when viaweb was bought by yahoo, i suddenly found myself working.for a big company, and it was like trying to run through waist-deep.water.i don't mean to disparage yahoo.  they had some good hackers, and.the top management were real butt-kickers.  for a big company, they.were exceptional.  but they were still only about a tenth as.productive as a small startup.  no big company can do much better.than that.  what's scary about microsoft is that a company so.big can develop software at all.  they're like a mountain that.can walk.don't be intimidated.  you can do as much that microsoft can't as.they can do that you can't.  and no one can stop you.  you don't.have to ask anyone's permission to develop web-based applications..you don't have to do licensing deals, or get shelf space in retail.stores, or grovel to have your application bundled with the os..you can deliver software right to the browser, and no one can get.between you and potential users without preventing them from browsing.the web.you may not believe it, but i promise you, microsoft is scared of.you.  the complacent middle managers may not be, but bill is,.because he was you once, back in 1975, the last time a new way of.delivering software appeared.notes[1] realizing that much of the money is in the services, companies.building lightweight clients have usually tried to combine the.hardware with an.online service..this approach has not worked.well, partly because you need two different kinds of companies to.build consumer electronics and to run an online service, and partly.because users hate the idea.  giving away the razor and making.money on the blades may work for gillette, but a razor is much.smaller commitment than a web terminal.  cell phone handset makers.are satisfied to sell hardware without trying to capture the service.revenue as well.  that should probably be the model for internet.clients too.  if someone just sold a nice-looking little box with.a web browser that you could use to connect through any isp, every.technophobe in the country would buy one.[2] security always depends more on not screwing up than any design.decision, but the nature of server-based software will make developers.pay more attention to not screwing up.  compromising a server could.cause such damage that asps (that want to stay in business) are.likely to be careful about security.[3] in 1995, when we started viaweb, java applets were supposed to.be the technology everyone was going to use to develop server-based.applications.  applets seemed to us an old-fashioned idea.  download.programs to run on the client? simpler just to go all the way and.run the programs on the server.  we wasted little time.on applets, but countless other startups must have been lured into.this tar pit.  few can have escaped alive, or microsoft could not.have gotten away with dropping java in the most recent version of.explorer.[4] this point is due to trevor blackwell, who adds "the cost of.writing software goes up more than linearly with its size.  perhaps.this is mainly due to fixing old bugs, and the cost can be more.linear if all bugs are found quickly."[5] the hardest kind of bug to find may be a variant of compound.bug where one bug happens to compensate for another.  when you fix.one bug, the other becomes visible.  but it will seem as if the.fix is at fault, since that was the last thing you changed.[6] within viaweb we once had a contest to describe the worst thing.about our software.  two customer support people tied for first.prize with entries i still shiver to recall.  we fixed both problems.immediately.[7] robert morris wrote the ordering system, which shoppers used.to place orders. trevor blackwell wrote the image generator and.the manager, which merchants used to retrieve orders, view statistics,.and configure domain names etc.  i wrote the editor, which merchants.used to build their sites.  the ordering system and image generator.were written in c and c++, the manager mostly in perl, and the editor.in lisp.[8] price discrimination is so pervasive (how often have you heard.a retailer claim that their buying power meant lower prices for.you?) that i was surprised to find it was outlawed in the u.s. by.the robinson-patman act of 1936.  this law does not appear to be.vigorously enforced.[9] in no logo, naomi klein says that clothing brands favored by."urban youth" do not try too hard to prevent shoplifting because.in their target market the shoplifters are also the fashion leaders.[10] companies often wonder what to outsource and what not to..one possible answer: outsource any job that's not directly exposed.to competitive pressure, because outsourcing it will thereby expose.it to competitive pressure.[11] the two guys were dan bricklin and bob frankston.  dan wrote.a prototype in basic in a couple days, then over the course of the.next year they worked together (mostly at night) to make a more.powerful version written in 6502 machine language.  dan was at.harvard business school at the time and bob nominally had a day.job writing software.  "there was no great risk in doing a business,".bob wrote, "if it failed it failed. no big deal."[12] it's not quite as easy as i make it sound.  it took a painfully.long time for word of mouth to get going, and we did not start to.get a lot of press coverage until we hired a.pr firm.(admittedly.the best in the business) for $16,000 per month.  however, it was.true that the only significant channel was our own web site.[13] if the mac was so great, why did it lose?  cost, again..microsoft concentrated on the software business, and unleashed a.swarm of cheap component suppliers on apple hardware.  it did not.help, either, that suits took over during a critical period.[14] one thing that would help web-based applications, and help.keep the next generation of software from being overshadowed by.microsoft, would be a good open-source browser.  mozilla is.open-source but seems to have suffered from having been corporate.software for so long.  a small, fast browser that was actively.maintained would be a great thing in itself, and would probably.also encourage companies to build little web appliances.among other things, a proper open-source browser would cause http.and html to continue to evolve (as e.g. perl has).  it would help.web-based applications greatly to be able to distinguish between.selecting a link and following it; all you'd need to do this would.be a trivial enhancement of http, to allow multiple urls in a.request.  cascading menus would also be good.if you want to change the world, write a new mosaic.  think it's.too late?  in 1998 a lot of people thought it was too late to launch.a new search engine, but google proved them wrong.  there is always.room for something new if the current options suck enough.  make.sure it works on all the free oses first-- new things start with.their users.[15] trevor blackwell, who probably knows more about this from.personal experience than anyone, writes:"i would go farther in saying that because server-based software.is so hard on the programmers, it causes a fundamental economic.shift away from large companies. it requires the kind of intensity.and dedication from programmers that they will only be willing to.provide when it's their own company.  software companies can hire.skilled people to work in a not-too-demanding environment, and can.hire unskilled people to endure hardships, but they can't hire.highly skilled people to bust their asses. since capital is no.longer needed, big companies have little to bring to the table."[16] in the original version of this essay, i advised avoiding.javascript.  that was a good plan in 2001, but javascript now works..thanks to sarah harlin, trevor blackwell, robert morris, eric raymond, ken anderson,.and dan giffin for reading drafts of this paper; to dan bricklin and.bob frankston for information about visicalc; and again to ken anderson.for inviting me to speak at bbn..you'll find this essay and 14 others in.hackers & painters..some technical detailsjapanese translationmicrosoft finally agreesgates email<eot><sot>the roots of lisp.may 2001
.(i wrote this article to help myself understand exactly.what mccarthy discovered.  you don't need to know this stuff.to program in lisp, but it should be helpful to.anyone who wants to.understand the essence of lisp  both in the sense of its.origins and its semantic core.  the fact that it has such a core.is one of lisp's distinguishing features, and the reason why,.unlike other languages, lisp has dialects.)in 1960, john.mccarthy published a remarkable paper in.which he did for programming something like what euclid did for.geometry. he showed how, given a handful of simple.operators and a notation for functions, you can.build a whole programming language..he called this language lisp, for "list processing,".because one of his key ideas was to use a simple.data structure called a list for both.code and data.it's worth understanding what mccarthy discovered, not.just as a landmark in the history of computers, but as.a model for what programming is tending to become in.our own time.  it seems to me that there have been.two really clean, consistent models of programming so.far: the c model and the lisp model..these two seem points of high ground, with swampy lowlands.between them.  as computers have grown more powerful,.the new languages being developed have been moving.steadily toward the lisp model.  a popular recipe.for new programming languages in the past 20 years.has been to take the c model of computing and add to.it, piecemeal, parts taken from the lisp model,.like runtime typing and garbage collection.in this article i'm going to try to explain in the.simplest possible terms what mccarthy discovered..the point is not just to learn about an interesting.theoretical result someone figured out forty years ago,.but to show where languages are heading..the unusual thing about lisp  in fact, the defining.quality of lisp  is that it can be written in.itself.  to understand what mccarthy meant by this,.we're going to retrace his steps, with his mathematical.notation translated into running common lisp code.complete article (postscript)what made lisp differentthe codechinese translationjapanese translationportuguese translationkorean translation<eot><sot>five questions about language design.may 2001
.(these are some notes i made.for a panel discussion on programming language design.at mit on may 10, 2001.)1. programming languages are for people.programming languages.are how people talk to computers.  the computer would be just as.happy speaking any language that was unambiguous.  the reason we.have high level languages is because people can't deal with.machine language.  the point of programming.languages is to prevent our poor frail human brains from being.overwhelmed by a mass of detail.architects know that some kinds of design problems are more personal.than others.  one of the cleanest, most abstract design problems.is designing bridges.  there your job is largely a matter of spanning.a given distance with the least material.  the other end of the.spectrum is designing chairs.  chair designers have to spend their.time thinking about human butts.software varies in the same way. designing algorithms for routing.data through a network is a nice, abstract problem, like designing.bridges.  whereas designing programming languages is like designing.chairs: it's all about dealing with human weaknesses.most of us hate to acknowledge this.  designing systems of great.mathematical elegance sounds a lot more appealing to most of us.than pandering to human weaknesses.  and there is a role for mathematical.elegance: some kinds of elegance make programs easier to understand..but elegance is not an end in itself.and when i say languages have to be designed to suit human weaknesses,.i don't mean that languages have to be designed for bad programmers..in fact i think you ought to design for the.best programmers, but.even the best programmers have limitations.  i don't think anyone.would like programming in a language where all the variables were.the letter x with integer subscripts.2. design for yourself and your friends.if you look at the history of programming languages, a lot of the best.ones were languages designed for their own authors to use, and a.lot of the worst ones were designed for other people to use.when languages are designed for other people, it's always a specific.group of other people: people not as smart as the language designer..so you get a language that talks down to you.  cobol is the most.extreme case, but a lot of languages are pervaded by this spirit.it has nothing to do with how abstract the language is.  c is pretty.low-level, but it was designed for its authors to use, and that's.why hackers like it.the argument for designing languages for bad programmers is that.there are more bad programmers than good programmers.  that may be.so.  but those few good programmers write a disproportionately.large percentage of the software.i'm interested in the question, how do you design a language that.the very best hackers will like?  i happen to think this is.identical to the question, how do you design a good programming.language?, but even if it isn't, it is at least an interesting.question.3. give the programmer as much control as possible.many languages.(especially the ones designed for other people) have the attitude.of a governess: they try to prevent you from.doing things that they think aren't good for you.  i like the.opposite approach: give the programmer as much.control as you can.when i first learned lisp, what i liked most about it was.that it considered me an equal partner.  in the other languages.i had learned up till then, there was the language and there was my.program, written in the language, and the two were very separate..but in lisp the functions and macros i wrote were just like those.that made up the language itself.  i could rewrite the language.if i wanted.  it had the same appeal as open-source software.4. aim for brevity.brevity is underestimated and even scorned..but if you look into the hearts of hackers, you'll see that they.really love it.  how many times have you heard hackers speak fondly.of how in, say, apl, they could do amazing things with just a couple.lines of code?  i think anything that really smart people really.love is worth paying attention to.i think almost anything.you can do to make programs shorter is good.  there should be lots.of library functions; anything that can be implicit should be;.the syntax should be terse to a fault; even the names of things.should be short.and it's not only programs that should be short.  the manual should.be thin as well.  a good part of manuals is taken up with clarifications.and reservations and warnings and special cases.  if you force.yourself to shorten the manual, in the best case you do it by fixing.the things in the language that required so much explanation.5. admit what hacking is.a lot of people wish that hacking was.mathematics, or at least something like a natural science.  i think.hacking is more like architecture.  architecture is.related to physics, in the sense that architects have to design.buildings that don't fall down, but the actual goal of architects.is to make great buildings, not to make discoveries about statics.what hackers like to do is make great programs..and i think, at least in our own minds, we have to remember that it's.an admirable thing to write great programs, even when this work.doesn't translate easily into the conventional intellectual.currency of research papers.  intellectually, it is just as.worthwhile to design a language programmers will love as it is to design a.horrible one that embodies some idea you can publish a paper.about.1. how to organize big libraries?libraries are becoming an.increasingly important component of programming languages.  they're.also getting bigger, and this can be dangerous.  if it takes longer.to find the library function that will do what you want than it.would take to write it yourself, then all that code is doing nothing.but make your manual thick.  (the symbolics manuals were a case in.point.)  so i think we will have to work on ways to organize.libraries.  the ideal would be to design them so that the programmer.could guess what library call would do the right thing.2. are people really scared of prefix syntax?this is an open.problem in the sense that i have wondered about it for years and.still don't know the answer.  prefix syntax seems perfectly natural.to me, except possibly for math.  but it could be that a lot of.lisp's unpopularity is simply due to having an unfamiliar syntax..whether to do anything about it, if it is true, is another question..3. what do you need for server-based software?.i think a lot of the most exciting new applications that get written.in the next twenty years will be web-based applications, meaning.programs that sit on the server and talk to you through a web.browser.  and to write these kinds of programs we may need some.new things.one thing we'll need is support for the new way that server-based.apps get released.  instead of having one or two big releases a.year, like desktop software, server-based apps get released as a.series of small changes.  you may have as many as five or ten.releases a day.  and as a rule everyone will always use the latest.version.you know how you can design programs to be debuggable?.well, server-based software likewise has to be designed to be.changeable.  you have to be able to change it easily, or at least.to know what is a small change and what is a momentous one.another thing that might turn out to be useful for server based.software, surprisingly, is continuations.  in web-based software.you can use something like continuation-passing style to get the.effect of subroutines in the inherently.stateless world of a web.session.  maybe it would be worthwhile having actual continuations,.if it was not too expensive.4. what new abstractions are left to discover?i'm not sure how.reasonable a hope this is, but one thing i would really love to.do, personally, is discover a new abstraction-- something that would.make as much of a difference as having first class functions or.recursion or even keyword parameters.  this may be an impossible.dream.  these things don't get discovered that often.  but i am always.looking.1. you can use whatever language you want.writing application.programs used to mean writing desktop software.  and in desktop.software there is a big bias toward writing the application in the.same language as the operating system.  and so ten years ago,.writing software pretty much meant writing software in c..eventually a tradition evolved:.application programs must not be written in unusual languages..and this tradition had so long to develop that nontechnical people.like managers and venture capitalists also learned it.server-based software blows away this whole model.  with server-based.software you can use any language you want.  almost nobody understands.this yet (especially not managers and venture capitalists)..a few hackers understand it, and that's why we even hear.about new, indy languages like perl and python.  we're not hearing.about perl and python because people are using them to write windows.apps.what this means for us, as people interested in designing programming.languages, is that there is now potentially an actual audience for.our work.2. speed comes from profilers.language designers, or at least.language implementors, like to write compilers that generate fast.code.  but i don't think this is what makes languages fast for users..knuth pointed out long ago that speed only matters in a few critical.bottlenecks.  and anyone who's tried it knows that you can't guess.where these bottlenecks are.  profilers are the answer.language designers are solving the wrong problem.  users don't need.benchmarks to run fast.  what they need is a language that can show.them what parts of their own programs need to be rewritten.  that's.where speed comes from in practice.  so maybe it would be a net.win if language implementors took half the time they would.have spent doing compiler optimizations and spent it writing a.good profiler instead.3. you need an application to drive the design of a language.this may not be an absolute rule, but it seems like the best languages.all evolved together with some application they were being used to.write.  c was written by people who needed it for systems programming..lisp was developed partly to do symbolic differentiation, and.mccarthy was so eager to get started that he was writing differentiation.programs even in the first paper on lisp, in 1960.it's especially good if your application solves some new problem..that will tend to drive your language to have new features that.programmers need.  i personally am interested in writing.a language that will be good for writing server-based applications.[during the panel, guy steele also made this point, with the.additional suggestion that the application should not consist of.writing the compiler for your language, unless your language.happens to be intended for writing compilers.]4. a language has to be good for writing throwaway programs.you know what a throwaway program is: something you write quickly for.some limited task.  i think if you looked around you'd find that.a lot of big, serious programs started as throwaway programs.  i.would not be surprised if most programs started as throwaway.programs.  and so if you want to make a language that's good for.writing software in general, it has to be good for writing throwaway.programs, because that is the larval stage of most software.5. syntax is connected to semantics.it's traditional to think of.syntax and semantics as being completely separate.  this will.sound shocking, but it may be that they aren't..i think that what you want in your language may be related.to how you express it.i was talking recently to robert morris, and he pointed out that.operator overloading is a bigger win in languages with infix.syntax.  in a language with prefix syntax, any function you define.is effectively an operator.  if you want to define a plus for a.new type of number you've made up, you can just define a new function.to add them.  if you do that in a language with infix syntax,.there's a big difference in appearance between the use of an.overloaded operator and a function call.1. new programming languages.back in the 1970s.it was fashionable to design new programming languages.  recently.it hasn't been.  but i think server-based software will make new.languages fashionable again.  with server-based software, you can.use any language you want, so if someone does design a language that.actually seems better than others that are available, there will be.people who take a risk and use it.2. time-sharing.richard kelsey gave this as an idea whose time.has come again in the last panel, and i completely agree with him..my guess (and microsoft's guess, it seems) is that much computing.will move from the desktop onto remote servers.  in other words,.time-sharing is back.  and i think there will need to be support.for it at the language level.  for example, i know that richard.and jonathan rees have done a lot of work implementing process.scheduling within scheme 48.3. efficiency.recently it was starting to seem that computers.were finally fast enough.  more and more we were starting to hear.about byte code, which implies to me at least that we feel we have.cycles to spare.  but i don't think we will, with server-based.software.   someone is going to have to pay for the servers that.the software runs on, and the number of users they can support per.machine will be the divisor of their capital cost.so i think efficiency will matter, at least in computational.bottlenecks.  it will be especially important to do i/o fast,.because server-based applications do a lot of i/o.it may turn out that byte code is not a win, in the end.  sun and.microsoft seem to be facing off in a kind of a battle of the byte.codes at the moment.  but they're doing it because byte code is a.convenient place to insert themselves into the process, not because.byte code is in itself a good idea.  it may turn out that this.whole battleground gets bypassed.  that would be kind of amusing.1. clients.this is just a guess, but my guess is that.the winning model for most applications will be purely server-based..designing software that works on the assumption that everyone will.have your client is like designing a society on the assumption that.everyone will just be honest.  it would certainly be convenient, but.you have to assume it will never happen.i think there will be a proliferation of devices that have some.kind of web access, and all you'll be able to assume about them is.that they can support simple html and forms.  will you have a.browser on your cell phone?  will there be a phone in your palm.pilot?  will your blackberry get a bigger screen? will you be able.to browse the web on your gameboy?  your watch?  i don't know..and i don't have to know if i bet on.everything just being on the server.  it's.just so much more robust to have all the.brains on the server.2. object-oriented programming.i realize this is a.controversial one, but i don't think object-oriented programming.is such a big deal.  i think it is a fine model for certain kinds.of applications that need that specific kind of data structure,.like window systems, simulations, and cad programs.  but i don't.see why it ought to be the model for all programming.i think part of the reason people in big companies like object-oriented.programming is because it yields a lot of what looks like work..something that might naturally be represented as, say, a list of.integers, can now be represented as a class with all kinds of.scaffolding and hustle and bustle.another attraction of.object-oriented programming is that methods give you some of the.effect of first class functions.  but this is old news to lisp.programmers.  when you have actual first class functions, you can.just use them in whatever way is appropriate to the task at hand,.instead of forcing everything into a mold of classes and methods.what this means for language design, i think, is that you shouldn't.build object-oriented programming in too deeply.  maybe the.answer is to offer more general, underlying stuff, and let people design.whatever object systems they want as libraries.3. design by committee.having your language designed by a committee is a big pitfall,.and not just for the reasons everyone knows about.  everyone.knows that committees tend to yield lumpy, inconsistent designs..but i think a greater danger is that they won't take risks..when one person is in charge he can take risks.that a committee would never agree on.is it necessary to take risks to design a good language though?.many people might suspect.that language design is something where you should stick fairly.close to the conventional wisdom.  i bet this isn't true..in everything else people do, reward is proportionate to risk..why should language design be any different?japanese translation<eot><sot>being popular.may 2001
(this article was written as a kind of business plan for a.new language..so it is missing (because it takes for granted) the most important.feature of a good programming language: very powerful abstractions.)a friend of mine once told an eminent operating systems.expert that he wanted to design a really good.programming language.  the expert told him that it would be a.waste of time, that programming languages don't become popular.or unpopular based on their merits, and so no matter how.good his language was, no one would use it.  at least, that.was what had happened to the language he had designed.what does make a language popular?  do popular.languages deserve their popularity?  is it worth trying to.define a good programming language?  how would you do it?i think the answers to these questions can be found by looking.at hackers, and learning what they want.  programming.languages are for hackers, and a programming language.is good as a programming language (rather than, say, an.exercise in denotational semantics or compiler design).if and only if hackers like it.1 the mechanics of popularityit's true, certainly, that most people don't choose programming.languages simply based on their merits.  most programmers are told.what language to use by someone else.  and yet i think the effect.of such external factors on the popularity of programming languages.is not as great as it's sometimes thought to be. i think a bigger.problem is that a hacker's idea of a good programming language is.not the same as most language designers'.between the two, the hacker's opinion is the one that matters..programming languages are not theorems. they're tools, designed.for people, and they have to be designed to suit human strengths.and weaknesses as much as shoes have to be designed for human feet..if a shoe pinches when you put it on, it's a bad shoe, however.elegant it may be as a piece of sculpture.it may be that the majority of programmers can't tell a good language.from a bad one. but that's no different with any other tool. it.doesn't mean that it's a waste of time to try designing a good.language. expert hackers.can tell a good language when they see.one, and they'll use it. expert hackers are a tiny minority,.admittedly, but that tiny minority write all the good software,.and their influence is such that the rest of the programmers will.tend to use whatever language they use. often, indeed, it is not.merely influence but command: often the expert hackers are the very.people who, as their bosses or faculty advisors, tell the other.programmers what language to use.the opinion of expert hackers is not the only force that determines.the relative popularity of programming languages — legacy software.(cobol) and hype (ada, java) also play a role — but i think it is.the most powerful force over the long term. given an initial critical.mass and enough time, a programming language probably becomes about.as popular as it deserves to be. and popularity further separates.good languages from bad ones, because feedback from real live users.always leads to improvements. look at how much any popular language.has changed during its life. perl and fortran are extreme cases,.but even lisp has changed a lot. lisp 1.5 didn't have macros, for.example; these evolved later, after hackers at mit had spent a.couple years using lisp to write real programs. [1]so whether or not a language has to be good to be popular, i think.a language has to be popular to be good. and it has to stay popular.to stay good. the state of the art in programming languages doesn't.stand still. and yet the lisps we have today are still pretty much.what they had at mit in the mid-1980s, because that's the last time.lisp had a sufficiently large and demanding user base.of course, hackers have to know about a language before they can.use it. how are they to hear? from other hackers. but there has to.be some initial group of hackers using the language for others even.to hear about it. i wonder how large this group has to be; how many.users make a critical mass? off the top of my head, i'd say twenty..if a language had twenty separate users, meaning twenty users who.decided on their own to use it, i'd consider it to be real.getting there can't be easy. i would not be surprised if it is.harder to get from zero to twenty than from twenty to a thousand..the best way to get those initial twenty users is probably to use.a trojan horse: to give people an application they want, which.happens to be written in the new language.2 external factorslet's start by acknowledging one external factor that does affect.the popularity of a programming language. to become popular, a.programming language has to be the scripting language of a popular.system. fortran and cobol were the scripting languages of early.ibm mainframes. c was the scripting language of unix, and so, later,.was perl. tcl is the scripting language of tk. java and javascript.are intended to be the scripting languages of web browsers.lisp is not a massively popular language because it is not the.scripting language of a massively popular system. what popularity.it retains dates back to the 1960s and 1970s, when it was the.scripting language of mit. a lot of the great programmers of the.day were associated with mit at some point. and in the early 1970s,.before c, mit's dialect of lisp, called maclisp, was one of the.only programming languages a serious hacker would want to use.today lisp is the scripting language of two moderately popular.systems, emacs and autocad, and for that reason i suspect that most.of the lisp programming done today is done in emacs lisp or autolisp.programming languages don't exist in isolation. to hack is a.transitive verb — hackers are usually hacking something — and in.practice languages are judged relative to whatever they're used to.hack. so if you want to design a popular language, you either have.to supply more than a language, or you have to design your language.to replace the scripting language of some existing system.common lisp is unpopular partly because it's an orphan. it did.originally come with a system to hack: the lisp machine. but lisp.machines (along with parallel computers) were steamrollered by the.increasing power of general purpose processors in the 1980s. common.lisp might have remained popular if it had been a good scripting.language for unix. it is, alas, an atrociously bad one.one way to describe this situation is to say that a language isn't.judged on its own merits. another view is that a programming language.really isn't a programming language unless it's also the scripting.language of something. this only seems unfair if it comes as a.surprise. i think it's no more unfair than expecting a programming.language to have, say, an implementation. it's just part of what.a programming language is.a programming language does need a good implementation, of course,.and this must be free. companies will pay for software, but individual.hackers won't, and it's the hackers you need to attract.a language also needs to have a book about it. the book should be.thin, well-written, and full of good examples. k&r is the ideal.here. at the moment i'd almost say that a language has to have a.book published by o'reilly. that's becoming the test of mattering.to hackers.there should be online documentation as well. in fact, the book.can start as online documentation. but i don't think that physical.books are outmoded yet. their format is convenient, and the de.facto censorship imposed by publishers is a useful if imperfect.filter. bookstores are one of the most important places for learning.about new languages.3 brevitygiven that you can supply the three things any language needs — a.free implementation, a book, and something to hack — how do you.make a language that hackers will like?one thing hackers like is brevity. hackers are lazy, in the same.way that mathematicians and modernist architects are lazy: they.hate anything extraneous. it would not be far from the truth to.say that a hacker about to write a program decides what language.to use, at least subconsciously, based on the total number of.characters he'll have to type. if this isn't precisely how hackers.think, a language designer would do well to act as if it were.it is a mistake to try to baby the user with long-winded expressions.that are meant to resemble english. cobol is notorious for this.flaw. a hacker would consider being asked to writeadd x to y giving zinstead ofz = x+yas something between an insult to his intelligence and a sin against.god.it has sometimes been said that lisp should use first and rest.instead of car and cdr, because it would make programs easier to.read. maybe for the first couple hours. but a hacker can learn.quickly enough that car means the first element of a list and cdr.means the rest. using first and rest means 50% more typing. and.they are also different lengths, meaning that the arguments won't.line up when they're called, as car and cdr often are, in successive.lines. i've found that it matters a lot how code lines up on the.page. i can barely read lisp code when it is set in a variable-width.font, and friends say this is true for other languages too.brevity is one place where strongly typed languages lose. all other.things being equal, no one wants to begin a program with a bunch.of declarations. anything that can be implicit, should be.the individual tokens should be short as well. perl and common lisp.occupy opposite poles on this question. perl programs can be almost.cryptically dense, while the names of built-in common lisp operators.are comically long. the designers of common lisp probably expected.users to have text editors that would type these long names for.them. but the cost of a long name is not just the cost of typing.it. there is also the cost of reading it, and the cost of the space.it takes up on your screen.4 hackabilitythere is one thing more important than brevity to a hacker: being.able to do what you want. in the history of programming languages.a surprising amount of effort has gone into preventing programmers.from doing things considered to be improper. this is a dangerously.presumptuous plan. how can the language designer know what the.programmer is going to need to do? i think language designers would.do better to consider their target user to be a genius who will.need to do things they never anticipated, rather than a bumbler.who needs to be protected from himself. the bumbler will shoot.himself in the foot anyway. you may save him from referring to.variables in another package, but you can't save him from writing.a badly designed program to solve the wrong problem, and taking.forever to do it.good programmers often want to do dangerous and unsavory things..by unsavory i mean things that go behind whatever semantic facade.the language is trying to present: getting hold of the internal.representation of some high-level abstraction, for example. hackers.like to hack, and hacking means getting inside things and second.guessing the original designer.let yourself be second guessed. when you make any tool, people use.it in ways you didn't intend, and this is especially true of a.highly articulated tool like a programming language. many a hacker.will want to tweak your semantic model in a way that you never.imagined. i say, let them; give the programmer access to as much.internal stuff as you can without endangering runtime systems like.the garbage collector.in common lisp i have often wanted to iterate through the fields.of a struct — to comb out references to a deleted object, for example,.or find fields that are uninitialized. i know the structs are just.vectors underneath. and yet i can't write a general purpose function.that i can call on any struct. i can only access the fields by.name, because that's what a struct is supposed to mean.a hacker may only want to subvert the intended model of things once.or twice in a big program. but what a difference it makes to be.able to. and it may be more than a question of just solving a.problem. there is a kind of pleasure here too. hackers share the.surgeon's secret pleasure in poking about in gross innards, the.teenager's secret pleasure in popping zits. [2] for boys, at least,.certain kinds of horrors are fascinating. maxim magazine publishes.an annual volume of photographs, containing a mix of pin-ups and.grisly accidents. they know their audience.historically, lisp has been good at letting hackers have their way..the political correctness of common lisp is an aberration. early.lisps let you get your hands on everything. a good deal of that.spirit is, fortunately, preserved in macros. what a wonderful thing,.to be able to make arbitrary transformations on the source code.classic macros are a real hacker's tool — simple, powerful, and.dangerous. it's so easy to understand what they do: you call a.function on the macro's arguments, and whatever it returns gets.inserted in place of the macro call. hygienic macros embody the.opposite principle. they try to protect you from understanding what.they're doing. i have never heard hygienic macros explained in one.sentence. and they are a classic example of the dangers of deciding.what programmers are allowed to want. hygienic macros are intended.to protect me from variable capture, among other things, but variable.capture is exactly what i want in some macros.a really good language should be both clean and dirty: cleanly.designed, with a small core of well understood and highly orthogonal.operators, but dirty in the sense that it lets hackers have their.way with it. c is like this. so were the early lisps. a real hacker's.language will always have a slightly raffish character.a good programming language should have features that make the kind.of people who use the phrase "software engineering" shake their.heads disapprovingly. at the other end of the continuum are languages.like ada and pascal, models of propriety that are good for teaching.and not much else.5 throwaway programsto be attractive to hackers, a language must be good for writing.the kinds of programs they want to write. and that means, perhaps.surprisingly, that it has to be good for writing throwaway programs.a throwaway program is a program you write quickly for some limited.task: a program to automate some system administration task, or.generate test data for a simulation, or convert data from one format.to another. the surprising thing about throwaway programs is that,.like the "temporary" buildings built at so many american universities.during world war ii, they often don't get thrown away. many evolve.into real programs, with real features and real users.i have a hunch that the best big programs begin life this way,.rather than being designed big from the start, like the hoover dam..it's terrifying to build something big from scratch. when people.take on a project that's too big, they become overwhelmed. the.project either gets bogged down, or the result is sterile and.wooden: a shopping mall rather than a real downtown, brasilia rather.than rome, ada rather than c.another way to get a big program is to start with a throwaway.program and keep improving it. this approach is less daunting, and.the design of the program benefits from evolution. i think, if one.looked, that this would turn out to be the way most big programs.were developed. and those that did evolve this way are probably.still written in whatever language they were first written in,.because it's rare for a program to be ported, except for political.reasons. and so, paradoxically, if you want to make a language that.is used for big systems, you have to make it good for writing.throwaway programs, because that's where big systems come from.perl is a striking example of this idea. it was not only designed.for writing throwaway programs, but was pretty much a throwaway.program itself. perl began life as a collection of utilities for.generating reports, and only evolved into a programming language.as the throwaway programs people wrote in it grew larger. it was.not until perl 5 (if then) that the language was suitable for.writing serious programs, and yet it was already massively popular.what makes a language good for throwaway programs? to start with,.it must be readily available. a throwaway program is something that.you expect to write in an hour. so the language probably must.already be installed on the computer you're using. it can't be.something you have to install before you use it. it has to be there..c was there because it came with the operating system. perl was.there because it was originally a tool for system administrators,.and yours had already installed it.being available means more than being installed, though. an.interactive language, with a command-line interface, is more.available than one that you have to compile and run separately. a.popular programming language should be interactive, and start up.fast.another thing you want in a throwaway program is brevity. brevity.is always attractive to hackers, and never more so than in a program.they expect to turn out in an hour.6 librariesof course the ultimate in brevity is to have the program already.written for you, and merely to call it. and this brings us to what.i think will be an increasingly important feature of programming.languages: library functions. perl wins because it has large.libraries for manipulating strings. this class of library functions.are especially important for throwaway programs, which are often.originally written for converting or extracting data.  many perl.programs probably begin as just a couple library calls stuck.together.i think a lot of the advances that happen in programming languages.in the next fifty years will have to do with library functions. i.think future programming languages will have libraries that are as.carefully designed as the core language. programming language design.will not be about whether to make your language strongly or weakly.typed, or object oriented, or functional, or whatever, but about.how to design great libraries. the kind of language designers who.like to think about how to design type systems may shudder at this..it's almost like writing applications! too bad. languages are for.programmers, and libraries are what programmers need.it's hard to design good libraries. it's not simply a matter of.writing a lot of code. once the libraries get too big, it can.sometimes take longer to find the function you need than to write.the code yourself. libraries need to be designed using a small set.of orthogonal operators, just like the core language. it ought to.be possible for the programmer to guess what library call will do.what he needs.libraries are one place common lisp falls short. there are only.rudimentary libraries for manipulating strings, and almost none.for talking to the operating system. for historical reasons, common.lisp tries to pretend that the os doesn't exist. and because you.can't talk to the os, you're unlikely to be able to write a serious.program using only the built-in operators in common lisp. you have.to use some implementation-specific hacks as well, and in practice.these tend not to give you everything you want. hackers would think.a lot more highly of lisp if common lisp had powerful string.libraries and good os support.7 syntaxcould a language with lisp's syntax, or more precisely, lack of.syntax, ever become popular? i don't know the answer to this.question. i do think that syntax is not the main reason lisp isn't.currently popular. common lisp has worse problems than unfamiliar.syntax. i know several programmers who are comfortable with prefix.syntax and yet use perl by default, because it has powerful string.libraries and can talk to the os.there are two possible problems with prefix notation: that it is.unfamiliar to programmers, and that it is not dense enough. the.conventional wisdom in the lisp world is that the first problem is.the real one. i'm not so sure. yes, prefix notation makes ordinary.programmers panic. but i don't think ordinary programmers' opinions.matter. languages become popular or unpopular based on what expert.hackers think of them, and i think expert hackers might be able to.deal with prefix notation. perl syntax can be pretty incomprehensible,.but that has not stood in the way of perl's popularity. if anything.it may have helped foster a perl cult.a more serious problem is the diffuseness of prefix notation. for.expert hackers, that really is a problem. no one wants to write.(aref a x y) when they could write a[x,y].in this particular case there is a way to finesse our way out of.the problem. if we treat data structures as if they were functions.on indexes, we could write (a x y) instead, which is even shorter.than the perl form. similar tricks may shorten other types of.expressions.we can get rid of (or make optional) a lot of parentheses by making.indentation significant. that's how programmers read code anyway:.when indentation says one thing and delimiters say another, we go.by the indentation. treating indentation as significant would.eliminate this common source of bugs as well as making programs.shorter.sometimes infix syntax is easier to read. this is especially true.for math expressions. i've used lisp my whole programming life and.i still don't find prefix math expressions natural. and yet it is.convenient, especially when you're generating code, to have operators.that take any number of arguments. so if we do have infix syntax,.it should probably be implemented as some kind of read-macro.i don't think we should be religiously opposed to introducing syntax.into lisp, as long as it translates in a well-understood way into.underlying s-expressions. there is already a good deal of syntax.in lisp. it's not necessarily bad to introduce more, as long as no.one is forced to use it. in common lisp, some delimiters are reserved.for the language, suggesting that at least some of the designers.intended to have more syntax in the future.one of the most egregiously unlispy pieces of syntax in common lisp.occurs in format strings; format is a language in its own right,.and that language is not lisp. if there were a plan for introducing.more syntax into lisp, format specifiers might be able to be included.in it. it would be a good thing if macros could generate format.specifiers the way they generate any other kind of code.an eminent lisp hacker told me that his copy of cltl falls open to.the section format. mine too. this probably indicates room for.improvement. it may also mean that programs do a lot of i/o.8 efficiencya good language, as everyone knows, should generate fast code. but.in practice i don't think fast code comes primarily from things.you do in the design of the language. as knuth pointed out long.ago, speed only matters in certain critical bottlenecks.  and as.many programmers have observed since, one is very often mistaken.about where these bottlenecks are.so, in practice, the way to get fast code is to have a very good.profiler, rather than by, say, making the language strongly typed..you don't need to know the type of every argument in every call in.the program. you do need to be able to declare the types of arguments.in the bottlenecks. and even more, you need to be able to find out.where the bottlenecks are.one complaint people have had with lisp is that it's hard to tell.what's expensive. this might be true. it might also be inevitable,.if you want to have a very abstract language. and in any case i.think good profiling would go a long way toward fixing the problem:.you'd soon learn what was expensive.part of the problem here is social. language designers like to.write fast compilers. that's how they measure their skill. they.think of the profiler as an add-on, at best. but in practice a good.profiler may do more to improve the speed of actual programs written.in the language than a compiler that generates fast code. here,.again, language designers are somewhat out of touch with their.users. they do a really good job of solving slightly the wrong.problem.it might be a good idea to have an active profiler — to push.performance data to the programmer instead of waiting for him to.come asking for it. for example, the editor could display bottlenecks.in red when the programmer edits the source code. another approach.would be to somehow represent what's happening in running programs..this would be an especially big win in server-based applications,.where you have lots of running programs to look at. an active.profiler could show graphically what's happening in memory as a.program's running, or even make sounds that tell what's happening.sound is a good cue to problems. in one place i worked, we had a.big board of dials showing what was happening to our web servers..the hands were moved by little servomotors that made a slight noise.when they turned. i couldn't see the board from my desk, but i.found that i could tell immediately, by the sound, when there was.a problem with a server.it might even be possible to write a profiler that would automatically.detect inefficient algorithms. i would not be surprised if certain.patterns of memory access turned out to be sure signs of bad.algorithms. if there were a little guy running around inside the.computer executing our programs, he would probably have as long.and plaintive a tale to tell about his job as a federal government.employee. i often have a feeling that i'm sending the processor on.a lot of wild goose chases, but i've never had a good way to look.at what it's doing.a number of lisps now compile into byte code, which is then executed.by an interpreter. this is usually done to make the implementation.easier to port, but it could be a useful language feature. it might.be a good idea to make the byte code an official part of the.language, and to allow programmers to use inline byte code in.bottlenecks. then such optimizations would be portable too.the nature of speed, as perceived by the end-user, may be changing..with the rise of server-based applications, more and more programs.may turn out to be i/o-bound. it will be worth making i/o fast..the language can help with straightforward measures like simple,.fast, formatted output functions, and also with deep structural.changes like caching and persistent objects.users are interested in response time. but another kind of efficiency.will be increasingly important: the number of simultaneous users.you can support per processor. many of the interesting applications.written in the near future will be server-based, and the number of.users per server is the critical question for anyone hosting such.applications. in the capital cost of a business offering a server-based.application, this is the divisor.for years, efficiency hasn't mattered much in most end-user.applications. developers have been able to assume that each user.would have an increasingly powerful processor sitting on their.desk. and by parkinson's law, software has expanded to use the.resources available. that will change with server-based applications..in that world, the hardware and software will be supplied together..for companies that offer server-based applications, it will make.a very big difference to the bottom line how many users they can.support per server.in some applications, the processor will be the limiting factor,.and execution speed will be the most important thing to optimize..but often memory will be the limit; the number of simultaneous.users will be determined by the amount of memory you need for each.user's data. the language can help here too. good support for.threads will enable all the users to share a single heap. it may.also help to have persistent objects and/or language level support.for lazy loading.9 timethe last ingredient a popular language needs is time. no one wants.to write programs in a language that might go away, as so many.programming languages do. so most hackers will tend to wait until.a language has been around for a couple years before even considering.using it.inventors of wonderful new things are often surprised to discover.this, but you need time to get any message through to people. a.friend of mine rarely does anything the first time someone asks.him. he knows that people sometimes ask for things that they turn.out not to want. to avoid wasting his time, he waits till the third.or fourth time he's asked to do something; by then, whoever's asking.him may be fairly annoyed, but at least they probably really do.want whatever they're asking for.most people have learned to do a similar sort of filtering on new.things they hear about. they don't even start paying attention.until they've heard about something ten times. they're perfectly.justified: the majority of hot new whatevers do turn out to be a.waste of time, and eventually go away. by delaying learning vrml,.i avoided having to learn it at all.so anyone who invents something new has to expect to keep repeating.their message for years before people will start to get it. we.wrote what was, as far as i know, the first web-server based.application, and it took us years to get it through to people that.it didn't have to be downloaded. it wasn't that they were stupid..they just had us tuned out.the good news is, simple repetition solves the problem. all you.have to do is keep telling your story, and eventually people will.start to hear. it's not when people notice you're there that they.pay attention; it's when they notice you're still there.it's just as well that it usually takes a while to gain momentum..most technologies evolve a good deal even after they're first.launched — programming languages especially. nothing could be better,.for a new techology, than a few years of being used only by a small.number of early adopters. early adopters are sophisticated and.demanding, and quickly flush out whatever flaws remain in your.technology. when you only have a few users you can be in close.contact with all of them. and early adopters are forgiving when.you improve your system, even if this causes some breakage.there are two ways new technology gets introduced: the organic.growth method, and the big bang method. the organic growth method.is exemplified by the classic seat-of-the-pants underfunded garage.startup. a couple guys, working in obscurity, develop some new.technology. they launch it with no marketing and initially have.only a few (fanatically devoted) users. they continue to improve.the technology, and meanwhile their user base grows by word of.mouth. before they know it, they're big.the other approach, the big bang method, is exemplified by the.vc-backed, heavily marketed startup. they rush to develop a product,.launch it with great publicity, and immediately (they hope) have.a large user base.generally, the garage guys envy the big bang guys. the big bang.guys are smooth and confident and respected by the vcs. they can.afford the best of everything, and the pr campaign surrounding the.launch has the side effect of making them celebrities. the organic.growth guys, sitting in their garage, feel poor and unloved. and.yet i think they are often mistaken to feel sorry for themselves..organic growth seems to yield better technology and richer founders.than the big bang method. if you look at the dominant technologies.today, you'll find that most of them grew organically.this pattern doesn't only apply to companies. you see it in sponsored.research too. multics and common lisp were big-bang projects, and.unix and maclisp were organic growth projects.10 redesign"the best writing is rewriting," wrote e. b. white.  every good.writer knows this, and it's true for software too. the most important.part of design is redesign. programming languages, especially,.don't get redesigned enough.to write good software you must simultaneously keep two opposing.ideas in your head. you need the young hacker's naive faith in.his abilities, and at the same time the veteran's skepticism. you.have to be able to think.how hard can it be? with one half of.your brain while thinking.it will never work with the other.the trick is to realize that there's no real contradiction here..you want to be optimistic and skeptical about two different things..you have to be optimistic about the possibility of solving the.problem, but skeptical about the value of whatever solution you've.got so far.people who do good work often think that whatever they're working.on is no good. others see what they've done and are full of wonder,.but the creator is full of worry. this pattern is no coincidence:.it is the worry that made the work good.if you can keep hope and worry balanced, they will drive a project.forward the same way your two legs drive a bicycle forward. in the.first phase of the two-cycle innovation engine, you work furiously.on some problem, inspired by your confidence that you'll be able.to solve it. in the second phase, you look at what you've done in.the cold light of morning, and see all its flaws very clearly. but.as long as your critical spirit doesn't outweigh your hope, you'll.be able to look at your admittedly incomplete system, and think,.how hard can it be to get the rest of the way?, thereby continuing.the cycle.it's tricky to keep the two forces balanced. in young hackers,.optimism predominates. they produce something, are convinced it's.great, and never improve it. in old hackers, skepticism predominates,.and they won't even dare to take on ambitious projects.anything you can do to keep the redesign cycle going is good. prose.can be rewritten over and over until you're happy with it. but.software, as a rule, doesn't get redesigned enough. prose has.readers, but software has users. if a writer rewrites an essay,.people who read the old version are unlikely to complain that their.thoughts have been broken by some newly introduced incompatibility.users are a double-edged sword. they can help you improve your.language, but they can also deter you from improving it. so choose.your users carefully, and be slow to grow their number. having.users is like optimization: the wise course is to delay it. also,.as a general rule, you can at any given time get away with changing.more than you think. introducing change is like pulling off a.bandage: the pain is a memory almost as soon as you feel it.everyone knows that it's not a good idea to have a language designed.by a committee. committees yield bad design. but i think the worst.danger of committees is that they interfere with redesign. it is.so much work to introduce changes that no one wants to bother..whatever a committee decides tends to stay that way, even if most.of the members don't like it.even a committee of two gets in the way of redesign. this happens.particularly in the interfaces between pieces of software written.by two different people. to change the interface both have to agree.to change it at once. and so interfaces tend not to change at all,.which is a problem because they tend to be one of the most ad hoc.parts of any system.one solution here might be to design systems so that interfaces.are horizontal instead of vertical — so that modules are always.vertically stacked strata of abstraction. then the interface will.tend to be owned by one of them. the lower of two levels will either.be a language in which the upper is written, in which case the.lower level will own the interface, or it will be a slave, in which.case the interface can be dictated by the upper level.11 lispwhat all this implies is that there is hope for a new lisp.  there.is hope for any language that gives hackers what they want, including.lisp. i think we may have made a mistake in thinking that hackers.are turned off by lisp's strangeness. this comforting illusion may.have prevented us from seeing the real problem with lisp, or at.least common lisp, which is that it sucks for doing what hackers.want to do. a hacker's language needs powerful libraries and.something to hack. common lisp has neither. a hacker's language is.terse and hackable. common lisp is not.the good news is, it's not lisp that sucks, but common lisp. if we.can develop a new lisp that is a real hacker's language, i think.hackers will use it. they will use whatever language does the job..all we have to do is make sure this new lisp does some important.job better than other languages.history offers some encouragement. over time, successive new.programming languages have taken more and more features from lisp..there is no longer much left to copy before the language you've.made is lisp. the latest hot language, python, is a watered-down.lisp with infix syntax and no macros. a new lisp would be a natural.step in this progression.i sometimes think that it would be a good marketing trick to call.it an improved version of python. that sounds hipper than lisp. to.many people, lisp is a slow ai language with a lot of parentheses..fritz kunze's official biography carefully avoids mentioning the.l-word.  but my guess is that we shouldn't be afraid to call the.new lisp lisp. lisp still has a lot of latent respect among the.very best hackers — the ones who took 6.001 and understood it, for.example. and those are the users you need to win.in "how to become a hacker," eric raymond describes lisp as something.like latin or greek — a language you should learn as an intellectual.exercise, even though you won't actually use it:.lisp is worth learning for the profound enlightenment experience.you will have when you finally get it; that experience will make.you a better programmer for the rest of your days, even if you.never actually use lisp itself a lot..if i didn't know lisp, reading this would set me asking questions..a language that would make me a better programmer, if it means.anything at all, means a language that would be better for programming..and that is in fact the implication of what eric is saying.as long as that idea is still floating around, i think hackers will.be receptive enough to a new lisp, even if it is called lisp. but.this lisp must be a hacker's language, like the classic lisps of.the 1970s. it must be terse, simple, and hackable. and it must have.powerful libraries for doing what hackers want to do now.in the matter of libraries i think there is room to beat languages.like perl and python at their own game. a lot of the new applications.that will need to be written in the coming years will be.server-based.applications. there's no reason a new lisp shouldn't have string.libraries as good as perl, and if this new lisp also had powerful.libraries for server-based applications, it could be very popular..real hackers won't turn up their noses at a new tool that will let.them solve hard problems with a few library calls. remember, hackers.are lazy.it could be an even bigger win to have core language support for.server-based applications. for example, explicit support for programs.with multiple users, or data ownership at the level of type tags.server-based applications also give us the answer to the question.of what this new lisp will be used to hack. it would not hurt to.make lisp better as a scripting language for unix. (it would be.hard to make it worse.) but i think there are areas where existing.languages would be easier to beat. i think it might be better to.follow the model of tcl, and supply the lisp together with a complete.system for supporting server-based applications. lisp is a natural.fit for server-based applications. lexical closures provide a way.to get the effect of subroutines when the ui is just a series of.web pages. s-expressions map nicely onto html, and macros are good.at generating it. there need to be better tools for writing.server-based applications, and there needs to be a new lisp, and.the two would work very well together.12 the dream languageby way of summary, let's try describing the hacker's dream language..the dream language is.beautiful, clean, and terse. it has an.interactive toplevel that starts up fast. you can write programs.to solve common problems with very little code.  nearly all the.code in any program you write is code that's specific to your.application. everything else has been done for you.the syntax of the language is brief to a fault. you never have to.type an unnecessary character, or even to use the shift key much.using big abstractions you can write the first version of a program.very quickly. later, when you want to optimize, there's a really.good profiler that tells you where to focus your attention. you.can make inner loops blindingly fast, even writing inline byte code.if you need to.there are lots of good examples to learn from, and the language is.intuitive enough that you can learn how to use it from examples in.a couple minutes. you don't need to look in the manual much. the.manual is thin, and has few warnings and qualifications.the language has a small core, and powerful, highly orthogonal.libraries that are as carefully designed as the core language. the.libraries all work well together; everything in the language fits.together like the parts in a fine camera. nothing is deprecated,.or retained for compatibility. the source code of all the libraries.is readily available. it's easy to talk to the operating system.and to applications written in other languages.the language is built in layers. the higher-level abstractions are.built in a very transparent way out of lower-level abstractions,.which you can get hold of if you want.nothing is hidden from you that doesn't absolutely have to be. the.language offers abstractions only as a way of saving you work,.rather than as a way of telling you what to do. in fact, the language.encourages you to be an equal participant in its design. you can.change everything about it, including even its syntax, and anything.you write has, as much as possible, the same status as what comes.predefined.notes[1]  macros very close to the modern idea were proposed by timothy.hart in 1964, two years after lisp 1.5 was released. what was.missing, initially, were ways to avoid variable capture and multiple.evaluation; hart's examples are subject to both.[2]  in when the air hits your brain, neurosurgeon frank vertosick.recounts a conversation in which his chief resident, gary, talks.about the difference between surgeons and internists ("fleas"):.gary and i ordered a large pizza and found an open booth. the.chief lit a cigarette. "look at those goddamn fleas, jabbering.about some disease they'll see once in their lifetimes. that's.the trouble with fleas, they only like the bizarre stuff. they.hate their bread and butter cases. that's the difference between.us and the fucking fleas. see, we love big juicy lumbar disc.herniations, but they hate hypertension....".it's hard to think of a lumbar disc herniation as juicy (except.literally). and yet i think i know what they mean. i've often had.a juicy bug to track down. someone who's not a programmer would.find it hard to imagine that there could be pleasure in a bug..surely it's better if everything just works. in one way, it is..and yet there is undeniably a grim satisfaction in hunting down.certain sorts of bugs.postscript versionarcfive questions about language designhow to become a hackerjapanese translation<eot><sot>java's cover.april 2001
this essay developed out of conversations i've had with.several other programmers about why java smelled suspicious.  it's not.a critique of java!  it is a case study of hacker's radar.over time, hackers develop a nose for good (and bad) technology..i thought it might be interesting to try and write down what.made java seem suspect to me.some people who've read this think it's an interesting attempt to write about.something that hasn't been written about before.  others say i.will get in trouble for appearing to be writing about.things i don't understand.  so, just in.case it does any good, let me clarify that i'm not writing here.about java (which i have never used) but about hacker's radar.(which i have thought about a lot).the aphorism "you can't tell a book by its cover" originated in.the times when books were sold in plain cardboard covers, to be.bound by each purchaser according to his own taste.  in those days,.you couldn't tell a book by its cover.  but publishing has advanced.since then: present-day publishers work hard to make the cover.something you can tell a book by.i spend a lot of time in bookshops and i feel as if i have by now.learned to understand everything publishers mean to tell me about.a book, and perhaps a bit more.  the time i haven't spent in.bookshops i've spent mostly in front of computers, and i feel as.if i've learned, to some degree, to judge technology by its cover.as well.  it may be just luck, but i've saved myself from a few.technologies that turned out to be real stinkers.so far, java seems like a stinker to me.  i've never written a java.program, never more than glanced over reference books about it,.but i have a hunch that it won't be a very successful language..i may turn out to be mistaken; making predictions about technology.is a dangerous business.  but for what it's worth, as a sort of.time capsule, here's why i don't like the look of java:.1. it has been so energetically hyped.  real standards don't have.to be promoted.  no one had to promote c, or unix, or html.  a real.standard tends to be already established by the time most people.hear about it.  on the hacker radar screen, perl is as big as java,.or bigger, just on the strength of its own merits.2. it's aimed low.  in the original java white paper, gosling.explicitly says java was designed not to be too difficult for.programmers used to c.  it was designed to be another c++: c plus.a few ideas taken from more advanced languages.  like the creators.of sitcoms or junk food or package tours, java's designers were.consciously designing a product for people not as smart as them..historically, languages designed for other people to use have been.bad:  cobol, pl/i, pascal, ada, c++.  the good languages have been.those that were designed for their own creators:  c, perl, smalltalk,.lisp.3. it has ulterior motives.  someone once said that the world would.be a better place if people only wrote books because they had.something to say, rather than because they wanted to write a book..likewise, the reason we hear about java all the time is not because.it has something to say about programming languages.  we hear about.java as part of a plan by sun to undermine microsoft.4. no one loves it.  c, perl, python, smalltalk, and lisp programmers.love their languages.  i've never heard anyone say that they loved.java.5. people are forced to use it.  a lot of the people i know using.java are using it because they feel they have to.  either it's.something they felt they had to do to get funded, or something they.thought customers would want, or something they were told to do by.management.  these are smart people; if the technology was good,.they'd have used it voluntarily.6. it has too many cooks.  the best programming languages have been.developed by small groups.  java seems to be run by a committee..if it turns out to be a good language, it will be the first time.in history that a committee has designed a good language.7. it's bureaucratic.  from what little i know about java, there.seem to be a lot of protocols for doing things.  really good.languages aren't like that.  they let you do what you want and get.out of the way.8. it's pseudo-hip.  sun now pretends that java is a grassroots,.open-source language effort like perl or python.  this one just.happens to be controlled by a giant company.  so the language is.likely to have the same drab clunkiness as anything else that comes.out of a big company.9. it's designed for large organizations.  large organizations have.different aims from hackers. they want languages that are (believed.to be) suitable for use by large teams of mediocre programmers--.languages with features that, like the speed limiters in u-haul.trucks, prevent fools from doing too much damage.  hackers don't.like a language that talks down to them.  hackers just want power..historically, languages designed for large organizations (pl/i,.ada) have lost, while hacker languages (c, perl) have won.  the.reason: today's teenage hacker is tomorrow's cto.10. the wrong people like it.  the programmers i admire most are.not, on the whole, captivated by java.  who does like java?  suits,.who don't know one language from another, but know that they keep.hearing about java in the press; programmers at big companies, who.are amazed to find that there is something even better than c++;.and plug-and-chug undergrads, who are ready to like anything that.might get them a job (will this be on the test?).  these people's.opinions change with every wind.11. its daddy is in a pinch.  sun's business model is being undermined.on two fronts.  cheap intel processors, of the same type used in.desktop machines, are now more than fast enough for servers.  and.freebsd seems to be at least as good an os for servers as solaris..sun's advertising implies that you need sun servers for industrial.strength applications.  if this were true, yahoo would be first in.line to buy suns;  but when i worked there, the servers were all.intel boxes running freebsd.  this bodes ill for sun's future.  if.sun runs into trouble, they could drag java down with them.12. the dod likes it.  the defense department is encouraging.developers to use java. this seems to me the most damning sign of.all.  the defense department does a fine (though expensive) job of.defending the country, but they love plans and procedures and.protocols.  their culture is the opposite of hacker culture; on.questions of software they will tend to bet wrong.  the last time.the dod really liked a programming language, it was ada..bear in mind, this is not a critique of java, but a critique of.its cover.  i don't know java well enough to like it or dislike.it.  this is just an explanation of why i don't find that i'm eager.to learn it.it may seem cavalier to dismiss a language before you've even tried.writing programs in it.  but this is something all programmers have.to do.  there are too many technologies out there to learn them.all.  you have to learn to judge by outward signs which will be.worth your time.  i have likewise cavalierly dismissed cobol, ada,.visual basic, the ibm as400, vrml, iso 9000, the set protocol, vms,.novell netware, and corba, among others.  they just smelled wrong.it could be that in java's case i'm mistaken.  it could be that a.language promoted by one big company to undermine another, designed.by a committee for a "mainstream" audience, hyped to the skies,.and beloved of the dod, happens nonetheless to be a clean, beautiful,.powerful language that i would love programming in.  it could be,.but it seems very unlikely.trevor re: java's coverberners-lee re: javabeing popularsun internal memo2005: businessweek agreesjapanese translation<eot><sot>beating the averages.want to start a startup?  get funded by.y combinator..april 2001
, rev. april 2003(this article is derived from a talk given at the 2001 franz.developer symposium.).in the summer of 1995, my friend robert morris and i.started a startup called.viaweb..our plan was to write.software that would let end users build online stores..what was novel about this software, at the time, was.that it ran on our server, using ordinary web pages.as the interface.a lot of people could have been having this idea at the.same time, of course, but as far as i know, viaweb was.the first web-based application.  it seemed such.a novel idea to us that we named the company after it:.viaweb, because our software worked via the web,.instead of running on your desktop computer.another unusual thing about this software was that it.was written primarily in a programming language called.lisp. it was one of the first big end-user.applications to be written in lisp, which up till then.had been used mostly in universities and research labs. [1]the secret weaponeric raymond has written an essay called "how to become a hacker,".and in it, among other things, he tells would-be hackers what.languages they should learn.  he suggests starting with python and.java, because they are easy to learn.  the serious hacker will also.want to learn c, in order to hack unix, and perl for system.administration and cgi scripts.  finally, the truly serious hacker.should consider learning lisp:.lisp is worth learning for the profound enlightenment experience.you will have when you finally get it; that experience will make.you a better programmer for the rest of your days, even if you.never actually use lisp itself a lot..this is the same argument you tend to hear for learning latin.  it.won't get you a job, except perhaps as a classics professor, but.it will improve your mind, and make you a better writer in languages.you do want to use, like english.but wait a minute.  this metaphor doesn't stretch that far.  the.reason latin won't get you a job is that no one speaks it.  if you.write in latin, no one can understand you.  but lisp is a computer.language, and computers speak whatever language you, the programmer,.tell them to.so if lisp makes you a better programmer, like he says, why wouldn't.you want to use it? if a painter were offered a brush that would.make him a better painter, it seems to me that he would want to.use it in all his paintings, wouldn't he? i'm not trying to make.fun of eric raymond here.  on the whole, his advice is good.  what.he says about lisp is pretty much the conventional wisdom.  but.there is a contradiction in the conventional wisdom:  lisp will.make you a better programmer, and yet you won't use it.why not?  programming languages are just tools, after all.  if lisp.really does yield better programs, you should use it.  and if it.doesn't, then who needs it?this is not just a theoretical question.  software is a very.competitive business, prone to natural monopolies.  a company that.gets software written faster and better will, all other things.being equal, put its competitors out of business.  and when you're.starting a startup, you feel this very keenly.  startups tend to.be an all or nothing proposition.  you either get rich, or you get.nothing.  in a startup, if you bet on the wrong technology, your.competitors will crush you.robert and i both knew lisp well, and we couldn't see any reason.not to trust our instincts and go with lisp.  we knew that everyone.else was writing their software in c++ or perl.  but we also knew.that that didn't mean anything.  if you chose technology that way,.you'd be running windows.  when you choose technology, you have to.ignore what other people are doing, and consider only what will.work the best.this is especially true in a startup.  in a big company, you can.do what all the other big companies are doing.  but a startup can't.do what all the other startups do.  i don't think a lot of people.realize this, even in startups.the average big company grows at about ten percent a year.  so if.you're running a big company and you do everything the way the.average big company does it, you can expect to do as well as the.average big company-- that is, to grow about ten percent a year.the same thing will happen if you're running a startup, of course..if you do everything the way the average startup does it, you should.expect average performance.  the problem here is, average performance.means that you'll go out of business.  the survival rate for startups.is way less than fifty percent.  so if you're running a startup,.you had better be doing something odd.  if not, you're in trouble.back in 1995, we knew something that i don't think our competitors.understood, and few understand even now:  when you're writing.software that only has to run on your own servers, you can use.any language you want.  when you're writing desktop software,.there's a strong bias toward writing applications in the same.language as the operating system.  ten years ago, writing applications.meant writing applications in c.  but with web-based software,.especially when you have the source code of both the language and.the operating system, you can use whatever language you want.this new freedom is a double-edged sword, however.  now that you.can use any language, you have to think about which one to use..companies that try to pretend nothing has changed risk finding that.their competitors do not.if you can use any language, which do you use?  we chose lisp..for one thing, it was obvious that rapid development would be.important in this market.  we were all starting from scratch, so.a company that could get new features done before its competitors.would have a big advantage.  we knew lisp was a really good language.for writing software quickly, and server-based applications magnify.the effect of rapid development, because you can release software.the minute it's done.if other companies didn't want to use lisp, so much the better..it might give us a technological edge, and we needed all the help.we could get.  when we started viaweb, we had no experience in.business.  we didn't know anything about marketing, or hiring.people, or raising money, or getting customers.  neither of us had.ever even had what you would call a real job.  the only thing we.were good at was writing software.  we hoped that would save us..any advantage we could get in the software department, we would.take.so you could say that using lisp was an experiment.  our hypothesis.was that if we wrote our software in lisp, we'd be able to get.features done faster than our competitors, and also to do things.in our software that they couldn't do.  and because lisp was so.high-level, we wouldn't need a big development team, so our costs.would be lower.  if this were so, we could offer a better product.for less money, and still make a profit.  we would end up getting.all the users, and our competitors would get none, and eventually.go out of business.  that was what we hoped would happen, anyway.what were the results of this experiment?  somewhat surprisingly,.it worked.  we eventually had many competitors, on the order of.twenty to thirty of them, but none of their software could compete.with ours.  we had a wysiwyg online store builder that ran on the.server and yet felt like a desktop application.  our competitors.had cgi scripts.  and we were always far ahead of them in features..sometimes, in desperation, competitors would try to introduce.features that we didn't have.  but with lisp our development cycle.was so fast that we could sometimes duplicate a new feature within.a day or two of a competitor announcing it in a press release.  by.the time journalists covering the press release got round to calling.us, we would have the new feature too.it must have seemed to our competitors that we had some kind of.secret weapon-- that we were decoding their enigma traffic or.something.  in fact we did have a secret weapon, but it was simpler.than they realized.  no one was leaking news of their features to.us.   we were just able to develop software faster than anyone.thought possible.when i was about nine i happened to get hold of a copy of the day.of the jackal, by frederick forsyth.  the main character is an.assassin who is hired to kill the president of france.  the assassin.has to get past the police to get up to an apartment that overlooks.the president's route.  he walks right by them, dressed up as an.old man on crutches, and they never suspect him.our secret weapon was similar.  we wrote our software in a weird.ai language, with a bizarre syntax full of parentheses.  for years.it had annoyed me to hear lisp described that way.  but now it.worked to our advantage.  in business, there is nothing more valuable.than a technical advantage your competitors don't understand.  in.business, as in war, surprise is worth as much as force.and so, i'm a little embarrassed to say, i never said anything.publicly about lisp while we were working on viaweb.  we never.mentioned it to the press, and if you searched for lisp on our web.site, all you'd find were the titles of two books in my bio.  this.was no accident.  a startup should give its competitors as little.information as possible.  if they didn't know what language our.software was written in, or didn't care, i wanted to keep it that.way.[2]the people who understood our technology best were the customers..they didn't care what language viaweb was written in either, but.they noticed that it worked really well.  it let them build great.looking online stores literally in minutes.  and so, by word of.mouth mostly, we got more and more users.  by the end of 1996 we.had about 70 stores online.  at the end of 1997 we had 500.  six.months later, when yahoo bought us, we had 1070 users.  today, as.yahoo store, this software continues to dominate its market.  it's.one of the more profitable pieces of yahoo, and the stores built.with it are the foundation of yahoo shopping.  i left yahoo in.1999, so i don't know exactly how many users they have now, but.the last i heard there were about 20,000..the blub paradoxwhat's so great about lisp?  and if lisp is so great, why doesn't.everyone use it?  these sound like rhetorical questions, but actually.they have straightforward answers.  lisp is so great not because.of some magic quality visible only to devotees, but because it is.simply the most powerful language available.  and the reason everyone.doesn't use it is that programming languages are not merely.technologies, but habits of mind as well, and nothing changes.slower.  of course, both these answers need explaining.i'll begin with a shockingly controversial statement:  programming.languages vary in power.few would dispute, at least, that high level languages are more.powerful than machine language.  most programmers today would agree.that you do not, ordinarily, want to program in machine language..instead, you should program in a high-level language, and have a.compiler translate it into machine language for you.  this idea is.even built into the hardware now: since the 1980s, instruction sets.have been designed for compilers rather than human programmers.everyone knows it's a mistake to write your whole program by hand.in machine language.  what's less often understood is that there.is a more general principle here: that if you have a choice of.several languages, it is, all other things being equal, a mistake.to program in anything but the most powerful one. [3]there are many exceptions to this rule.  if you're writing a program.that has to work very closely with a program written in a certain.language, it might be a good idea to write the new program in the.same language.  if you're writing a program that only has to do.something very simple, like number crunching or bit manipulation,.you may as well use a less abstract language, especially since it.may be slightly faster.  and if you're writing a short, throwaway.program, you may be better off just using whatever language has.the best library functions for the task.  but in general, for.application software, you want to be using the most powerful.(reasonably efficient) language you can get, and using anything.else is a mistake, of exactly the same kind, though possibly in a.lesser degree, as programming in machine language.you can see that machine language is very low level.  but, at least.as a kind of social convention, high-level languages are often all.treated as equivalent.  they're not.  technically the term "high-level.language" doesn't mean anything very definite.  there's no dividing.line with machine languages on one side and all the high-level.languages on the other.  languages fall along a continuum [4] of.abstractness, from the most powerful all the way down to machine.languages, which themselves vary in power.consider cobol.  cobol is a high-level language, in the sense that.it gets compiled into machine language.  would anyone seriously.argue that cobol is equivalent in power to, say, python?  it's.probably closer to machine language than python.or how about perl 4?  between perl 4 and perl 5, lexical closures.got added to the language.  most perl hackers would agree that perl.5 is more powerful than perl 4.  but once you've admitted that,.you've admitted that one high level language can be more powerful.than another.  and it follows inexorably that, except in special.cases, you ought to use the most powerful you can get.this idea is rarely followed to its conclusion, though.  after a.certain age, programmers rarely switch languages voluntarily..whatever language people happen to be used to, they tend to consider.just good enough.programmers get very attached to their favorite languages, and i.don't want to hurt anyone's feelings, so to explain this point i'm.going to use a hypothetical language called blub.  blub falls right.in the middle of the abstractness continuum.  it is not the most.powerful language, but it is more powerful than cobol or machine.language.and in fact, our hypothetical blub programmer wouldn't use either.of them.  of course he wouldn't program in machine language.  that's.what compilers are for.  and as for cobol, he doesn't know how.anyone can get anything done with it.  it doesn't even have x (blub.feature of your choice).as long as our hypothetical blub programmer is looking down the.power continuum, he knows he's looking down.  languages less powerful.than blub are obviously less powerful, because they're missing some.feature he's used to.  but when our hypothetical blub programmer.looks in the other direction, up the power continuum, he doesn't.realize he's looking up.  what he sees are merely weird languages..he probably considers them about equivalent in power to blub, but.with all this other hairy stuff thrown in as well.  blub is good.enough for him, because he thinks in blub.when we switch to the point of view of a programmer using any of.the languages higher up the power continuum, however, we find that.he in turn looks down upon blub.  how can you get anything done in.blub? it doesn't even have y.by induction, the only programmers in a position to see all the.differences in power between the various languages are those who.understand the most powerful one.  (this is probably what eric.raymond meant about lisp making you a better programmer.) you can't.trust the opinions of the others, because of the blub paradox:.they're satisfied with whatever language they happen to use, because.it dictates the way they think about programs.i know this from my own experience, as a high school kid writing.programs in basic.  that language didn't even support recursion..it's hard to imagine writing programs without using recursion, but.i didn't miss it at the time.  i thought in basic.  and i was a.whiz at it.  master of all i surveyed.the five languages that eric raymond recommends to hackers fall at.various points on the power continuum.  where they fall relative.to one another is a sensitive topic.  what i will say is that i.think lisp is at the top.  and to support this claim i'll tell you.about one of the things i find missing when i look at the other.four languages.  how can you get anything done in them, i think,.without macros? [5]many languages have something called a macro.  but lisp macros are.unique.  and believe it or not, what they do is related to the.parentheses.  the designers of lisp didn't put all those parentheses.in the language just to be different.  to the blub programmer, lisp.code looks weird.  but those parentheses are there for a reason..they are the outward evidence of a fundamental difference between.lisp and other languages.lisp code is made out of lisp data objects.  and not in the trivial.sense that the source files contain characters, and strings are.one of the data types supported by the language.  lisp code, after.it's read by the parser, is made of data structures that you can.traverse.if you understand how compilers work, what's really going on is.not so much that lisp has a strange syntax as that lisp has no.syntax.  you write programs in the parse trees that get generated.within the compiler when other languages are parsed.  but these.parse trees are fully accessible to your programs.  you can write.programs that manipulate them.  in lisp, these programs are called.macros.  they are programs that write programs.programs that write programs?  when would you ever want to do that?.not very often, if you think in cobol.  all the time, if you think.in lisp.  it would be convenient here if i could give an example.of a powerful macro, and say there! how about that?  but if i did,.it would just look like gibberish to someone who didn't know lisp;.there isn't room here to explain everything you'd need to know to.understand what it meant.  in.ansi common lisp i tried to move.things along as fast as i could, and even so i didn't get to macros.until page 160.but i think i can give a kind of argument that might be convincing..the source code of the viaweb editor was probably about 20-25%.macros.  macros are harder to write than ordinary lisp functions,.and it's considered to be bad style to use them when they're not.necessary.  so every macro in that code is there because it has to.be.  what that means is that at least 20-25% of the code in this.program is doing things that you can't easily do in any other.language.  however skeptical the blub programmer might be about my.claims for the mysterious powers of lisp, this ought to make him.curious.  we weren't writing this code for our own amusement.  we.were a tiny startup, programming as hard as we could in order to.put technical barriers between us and our competitors.a suspicious person might begin to wonder if there was some.correlation here.  a big chunk of our code was doing things that.are very hard to do in other languages.  the resulting software.did things our competitors' software couldn't do.  maybe there was.some kind of connection.  i encourage you to follow that thread..there may be more to that old man hobbling along on his crutches.than meets the eye.aikido for startupsbut i don't expect to convince anyone.(over 25).to go out and learn.lisp.  the purpose of this article is not to change anyone's mind,.but to reassure people already interested in using lisp-- people.who know that lisp is a powerful language, but worry because it.isn't widely used.  in a competitive situation, that's an advantage..lisp's power is multiplied by the fact that your competitors don't.get it.if you think of using lisp in a startup, you shouldn't worry that.it isn't widely understood.  you should hope that it stays that.way. and it's likely to.  it's the nature of programming languages.to make most people satisfied with whatever they currently use..computer hardware changes so much faster than personal habits that.programming practice is usually ten to twenty years behind the.processor.  at places like mit they were writing programs in.high-level languages in the early 1960s, but many companies continued.to write code in machine language well into the 1980s.  i bet a.lot of people continued to write machine language until the processor,.like a bartender eager to close up and go home, finally kicked them.out by switching to a risc instruction set.ordinarily technology changes fast.  but programming languages are.different: programming languages are not just technology, but what.programmers think in.  they're half technology and half religion.[6].and so the median language, meaning whatever language the median.programmer uses, moves as slow as an iceberg.  garbage collection,.introduced by lisp in about 1960, is now widely considered to be.a good thing.  runtime typing, ditto, is growing in popularity..lexical closures, introduced by lisp in the early 1970s, are now,.just barely, on the radar screen.  macros, introduced by lisp in the.mid 1960s, are still terra incognita.obviously, the median language has enormous momentum.  i'm not.proposing that you can fight this powerful force.  what i'm proposing.is exactly the opposite: that, like a practitioner of aikido, you.can use it against your opponents.if you work for a big company, this may not be easy.  you will have.a hard time convincing the pointy-haired boss to let you build.things in lisp, when he has just read in the paper that some other.language is poised, like ada was twenty years ago, to take over.the world.  but if you work for a startup that doesn't have.pointy-haired bosses yet, you can, like we did, turn the blub.paradox to your advantage:  you can use technology that your.competitors, glued immovably to the median language, will never be.able to match.if you ever do find yourself working for a startup, here's a handy.tip for evaluating competitors.  read their job listings.  everything.else on their site may be stock photos or the prose equivalent,.but the job listings have to be specific about what they want, or.they'll get the wrong candidates.during the years we worked on viaweb i read a lot of job descriptions..a new competitor seemed to emerge out of the woodwork every month.or so.  the first thing i would do, after checking to see if they.had a live online demo, was look at their job listings.  after a.couple years of this i could tell which companies to worry about.and which not to.  the more of an it flavor the job descriptions.had, the less dangerous the company was.  the safest kind were the.ones that wanted oracle experience.  you never had to worry about.those.  you were also safe if they said they wanted c++ or java.developers.  if they wanted perl or python programmers, that would.be a bit frightening-- that's starting to sound like a company.where the technical side, at least, is run by real hackers.  if i.had ever seen a job posting looking for lisp hackers, i would have.been really worried..notes[1] viaweb at first had two parts: the editor, written in lisp,.which people used to build their sites, and the ordering system,.written in c, which handled orders.  the first version was mostly.lisp, because the ordering system was small.  later we added two.more modules, an image generator written in c, and a back-office.manager written mostly in perl.in january 2003, yahoo released a new version of the editor.written in c++ and perl.  it's hard to say whether the program is no.longer written in lisp, though, because to translate this program.into c++ they literally had to write a lisp interpreter: the source.files of all the page-generating templates are still, as far as i.know,  lisp code.  (see greenspun's tenth rule.)[2] robert morris says that i didn't need to be secretive, because.even if our competitors had known we were using lisp, they wouldn't.have understood why:  "if they were that smart they'd already be.programming in lisp."[3] all languages are equally powerful in the sense of being turing.equivalent, but that's not the sense of the word programmers care.about. (no one wants to program a turing machine.)  the kind of.power programmers care about may not be formally definable, but.one way to explain it would be to say that it refers to features.you could only get in the less powerful language by writing an.interpreter for the more powerful language in it. if language a.has an operator for removing spaces from strings and language b.doesn't, that probably doesn't make a more powerful, because you.can probably write a subroutine to do it in b.  but if a supports,.say, recursion, and b doesn't, that's not likely to be something.you can fix by writing library functions.[4] note to nerds: or possibly a lattice, narrowing toward the top;.it's not the shape that matters here but the idea that there is at.least a partial order.[5] it is a bit misleading to treat macros as a separate feature..in practice their usefulness is greatly enhanced by other lisp.features like lexical closures and rest parameters.[6] as a result, comparisons of programming languages either take.the form of religious wars or undergraduate textbooks so determinedly.neutral that they're really works of anthropology.  people who.value their peace, or want tenure, avoid the topic.  but the question.is only half a religious one; there is something there worth.studying, especially if you want to design new languages.more technical detailsjapanese translationturkish translationuzbek translationorbitz uses lisp toohow to become a hackera scheme storyitalian translation.you'll find this essay and 14 others in.hackers & painters.<eot><sot>lisp for web-based applications.after a link to.beating the averages was posted on slashdot,.some readers wanted to hear in more detail.about the specific technical advantages we got from using.lisp in viaweb.  for those who are interested,.here are some excerpts from a talk i gave in april 2001
 at.bbn labs in cambridge, ma.bbn talk excerpts (ascii)<eot><sot>(this is the first chapter of ansi common lisp, by paul graham..copyright 1995, prentice-hall.).introduction.john mccarthy and his students began work on the first lisp.implementation in 1958.  after fortran, lisp is the oldest language.still in use. [1] what's more remarkable is that it is still in the.forefront of programming language technology.  programmers who know.lisp will tell you, there is something about this language that.sets it apart..part of what makes lisp distinctive is that it is designed to.evolve.  you can use lisp to define new lisp operators.  as new.abstractions become popular (object-oriented programming, for.example), it always turns out to be easy to implement them in lisp..like dna, such a language does not go out of style..new tools.why learn lisp? because it lets you do things that you can't do in.other languages.  if you just wanted to write a function to return.the sum of the numbers less than n, say, it would look much the.same in lisp and c:.; lisp                   /* c */.(defun sum (n)           int sum(int n){.(let ((s 0))             int i, s = 0;.(dotimes (i n s)       for(i = 0; i < n; i++).(incf s i))))          s += i;.return(s);.}.if you only need to do such simple things, it doesn't really matter.which language you use.  suppose instead you want to write a function.that takes a number n, and returns a function that adds n to its.argument:.; lisp.(defun addn (n).#'(lambda (x).(+ x n))).what does addn look like in c?  you just can't write it..you might be wondering, when does one ever want to do things like.this?  programming languages teach you not to want what they cannot.provide.  you have to think in a language to write programs in it,.and it's hard to want something you can't describe.  when i first.started writing programs-- in basic-- i didn't miss recursion,.because i didn't know there was such a thing.  i thought in basic..i could only conceive of iterative algorithms, so why should i miss.recursion?.if you don't miss lexical closures (which is what's being made in.the preceding example), take it on faith, for the time being, that.lisp programmers use them all the time.  it would be hard to find.a common lisp program of any length that did not take advantage of.closures.  by page 112 you will be using them yourself..and closures are only one of the abstractions we don't find in.other languages.  another unique feature of lisp, possibly even.more valuable, is that lisp programs are expressed as lisp data.structures.  this means that you can write programs that write.programs.  do people actually want to do this?  yes-- they're called.macros, and again, experienced programmers use them all the time..by page 173 you will be able to write your own..with macros, closures, and run-time typing, lisp transcends.object-oriented programming.  if you understood the preceding.sentence, you probably should not be reading this book.  you would.have to know lisp pretty well to see why it's true.  but it is not.just words.  it is an important point, and the proof of it is made.quite explicit, in code, in chapter 17.chapters 2--13 will gradually introduce all the concepts that you'll.need in order to understand the code in chapter 17.  the reward.for your efforts will be an equivocal one: you will feel as suffocated.programming in c++ as an experienced c++ programmer would feel.programming in basic.  it's more encouraging, perhaps, if we think.about where this feeling comes from.  basic is suffocating to.someone used to c++ because an experienced c++ programmer knows.techniques that are impossible to express in basic.  likewise,.learning lisp will teach you more than just a new language-- it.will teach you new and more powerful ways of thinking about programs..new techniques.as the preceding section explained, lisp gives you tools that other.languages don't provide.  but there is more to the story than this..taken separately, the new things that come with lisp-- automatic.memory management, manifest typing, closures, and so on-- each make.programming that much easier.  taken together, they form a critical.mass that makes possible a new way of programming..lisp is designed to be extensible: it lets you define new operators.yourself.  this is possible because the lisp language is made out.of the same functions and macros as your own programs.  so it's no.more difficult to extend lisp than to write a program in it.  in.fact, it's so easy (and so useful) that extending the language is.standard practice.  as you're writing your program down toward the.language, you build the language up toward your program.  you work.bottom-up, as well as top-down..almost any program can benefit from having the language tailored.to suit its needs, but the more complex the program, the more.valuable bottom-up programming becomes.  a bottom-up program can.be written as a series of layers, each one acting as a sort of.programming language for the one above.  tex was one of the earliest.programs to be written this way.  you can write programs bottom-up.in any language, but lisp is far the most natural vehicle for this.style..bottom-up programming leads naturally to extensible software.  if.you take the principle of bottom-up programming all the way to the.topmost layer of your program, then that layer becomes a programming.language for the user. because the idea of extensibility is so.deeply rooted in lisp, it makes the ideal language for writing.extensible software.  three of the most successful programs of the.1980s provide lisp as an extension language: gnu emacs, autocad,.and interleaf..working bottom-up is also the best way to get reusable software..the essence of writing reusable software is to separate the general.from the specific, and bottom-up programming inherently creates.such a separation.  instead of devoting all your effort to writing.a single, monolithic application, you devote part of your effort.to building a language, and part to writing a (proportionately.smaller) application on top of it.  what's specific to this.application will be concentrated in the topmost layer.  the layers.beneath will form a language for writing applications like this.one-- and what could be more reusable than a programming language?.lisp allows you not just to write more sophisticated programs, but.to write them faster.  lisp programs tend to be short-- the language.gives you bigger concepts, so you don't have to use as many.  as.frederick brooks has pointed out, the time it takes to write a.program depends mostly on its length.  so this fact alone means.that lisp programs take less time to write.  the effect is amplified.by lisp's dynamic character: in lisp the edit-compile-test cycle.is so short that programming is real-time..bigger abstractions and an interactive environment can change the.way organizations develop software.  the phrase "rapid prototyping".describes a kind of programming that began with lisp:  in lisp,.you can often write a prototype in less time than it would take to.write the spec for one.  what's more, such a prototype can be so.abstract that it makes a better spec than one written in english..and lisp allows you to make a smooth transition from prototype to.production software.  when common lisp programs are written with.an eye to speed and compiled by modern compilers, they run as fast.as programs written in any other high-level language..unless you already know lisp quite well, this introduction may seem.a collection of grand and possibly meaningless claims.  lisp.transcends object-oriented programming? you build the language up.toward your programs? lisp programming is real-time?  what can such.statements mean? at the moment, these claims are like empty lakes..as you learn more of the actual features of lisp, and see examples.of working programs, they will fill with real experience and take.on a definite shape..a new approach.one of the aims of this book is to explain not just the lisp.language, but the new approach to programming that lisp makes.possible.  this approach is one that you will see more of in the.future.  as programming environments grow in power, and languages.become more abstract, the lisp style of programming is gradually.replacing the old plan-and-implement model..in the old model, bugs are never supposed to happen.  thorough.specifications, painstakingly worked out in advance, are supposed.to ensure that programs work perfectly.  sounds good in theory..unfortunately, the specifications are both written and implemented.by humans.  the result, in practice, is that the plan-and-implement.method does not work very well..as manager of the os/360 project, frederick brooks was well acquainted.with the traditional approach. he was also acquainted with its.results:.any os/360 user is quickly aware of how much better it should.be...  furthermore, the product was late, it took more memory.than planned, the costs were several times the estimate, and it.did not perform very well until several releases after the.first. [2].and this is a description of one of the most successful systems of.its era..the problem with the old model was that it ignored human limitations..in the old model, you are betting that specifications won't contain.serious flaws, and that implementing them will be a simple matter.of translating them into code.  experience has shown this to be a.very bad bet indeed.  it would be safer to bet that specifications.will be misguided, and that code will be full of bugs..this is just what the new model of programming does assume.  instead.of hoping that people won't make mistakes, it tries to make the.cost of mistakes very low.  the cost of a mistake is the time.required to correct it.  with powerful languages and good programming.environments, this cost can be greatly reduced.  programming style.can then depend less on planning and more on exploration..planning is a necessary evil.  it is a response to risk:  the more.dangerous an undertaking, the more important it is to plan ahead..powerful tools decrease risk, and so decrease the need for planning..the design of your program can then benefit from what is probably.the most useful source of information available: the experience of.implementing it..lisp style has been evolving in this direction since the 1960s..you can write prototypes so quickly in lisp that you can go through.several iterations of design and implementation before you would,.in the old model, have even finished writing out the specifications..you don't have to worry so much about design flaws, because you.discover them a lot sooner.  nor do you have to worry so much about.bugs.  when you program in a functional style, bugs can only have.a local effect.  when you use a very abstract language, some bugs.(e.g. dangling pointers) are no longer possible, and what remain.are easy to find, because your programs are so much shorter.  and.when you have an interactive environment, you can correct bugs.instantly, instead of enduring a long cycle of editing, compiling,.and testing..lisp style has evolved this way because it yields results.  strange.as it sounds, less planning can mean better design.  the history.of technology is full of parallel cases.  a similar change took.place in painting during the fifteenth century.  before oil paint.became popular, painters used a medium, called tempera, that cannot.be blended or overpainted.  the cost of mistakes was high, and this.tended to make painters conservative.  then came oil paint, and with.it a great change in style.  oil "allows for second thoughts." [3].this proved a decisive advantage in dealing with difficult subjects.like the human figure..the new medium did not just make painters' lives easier.  it made.possible a new and more ambitious kind of painting.  janson writes:.without oil, the flemish masters' conquest of visible reality.would have been much more limited.  thus, from a technical point.of view, too, they deserve to be called the "fathers of modern.painting," for oil has been the painter's basic medium ever.since.  [4].as a material, tempera is no less beautiful than oil.  but the.flexibility of oil paint gives greater scope to the imagination--.that was the deciding factor..programming is now undergoing a similar change.  the new medium is.the "object-oriented dynamic language"-- in a word, lisp.  this is.not to say that all our software is going to be written in lisp.within a few years.  the transition from tempera to oil did not.happen overnight; at first, oil was only popular in the leading.art centers, and was often used in combination with tempera.  we.seem to be in this phase now.  lisp is used in universities, research.labs, and a few leading-edge companies.  meanwhile, ideas borrowed.from lisp increasingly turn up in the mainstream: interactive.programming environments, garbage collection, and run-time typing,.to name a few..more powerful tools are taking the risk out of exploration.  that's.good news for programmers, because it means that we will be able.to undertake more ambitious projects.  the use of oil paint certainly.had this effect.  the period immediately following its adoption.was a golden age for painting.  there are signs already that.something similar is happening in programming..-------------------------------------------------------------------.available at: http://www.amazon.com/exec/obidos/asin/0133708756.notes.[1] mccarthy, john. recursive functions of symbolic expressions.and their computation by machine, part i. cacm, 3:4 (april 1960
),.pp. 184-195..mccarthy, john. history of lisp. in wexelblat, richard l. (ed.).history of programming languages. academic press, new york, 1981,.pp. 173-197..both were available at http://www-formal.stanford.edu/jmc/ at the.time of printing..[2] brooks, frederick p. the mythical man-month.  addison-wesley,.reading (ma), 1975, p. 16..rapid prototyping is not just a way to write programs faster or.better.  it is a way to write programs that otherwise might not.get written at all..even the most ambitious people shrink from big undertakings.  it's.easier to start something if one can convince oneself (however.speciously) that it won't be too much work.  that's why so many.big things have begun as small things.  rapid prototyping lets us.start small..[3] murray, peter and linda.  the art of the renaissance.  thames.and hudson, london, 1963, p. 85..[4] janson, w. j.  history of art, 3rd edition. abrams, new york,.1986, p. 374..the analogy applies, of course, only to paintings done on panels.and later on canvases.  wall-paintings continued to be done in.fresco.  nor do i mean to suggest that painting styles were driven.by technological change; the opposite seems more nearly true.<eot><sot>(this is chapter 2 of ansi common lisp, by paul graham..copyright 1995, prentice-hall.).welcome to lisp.this chapter aims to get you programming as soon as possible..by the end of it you will know enough common lisp to begin writing.programs..2.1 form.it is particularly true of lisp that you learn it by using it,.because lisp is an interactive language.  any lisp system will.include an interactive front-end called the toplevel.  you type.lisp expressions into the toplevel, and the system displays their.values..lisp usually displays a prompt to tell you that it's waiting for.you to type something.  many implementations of common lisp use >.as the toplevel prompt.  that's what we'll use here..one of the simplest kinds of lisp expression is an integer.  if we.enter 1 after the prompt,.> 1.1.>.the system will print its value, followed by another prompt, to.say that it's ready for more..in this case, the value displayed is the same as what we typed..a number like 1 is said to evaluate to itself.  life gets more.interesting when we enter expressions that take some work to.evaluate.  for example, if we want to add two numbers together, we.type something like:.> (+ 2 3).5.in the expression (+ 2 3), the + is called the operator, and the.numbers 2 and 3 are called the arguments..in everyday life, we would write this expression as 2 + 3, but in.lisp we put the + operator first, followed by the arguments, with.the whole expression enclosed in a pair of parentheses: (+ 2 3)..this is called prefix notation, because the operator comes first..it may at first seem a strange way to write expressions, but in.fact this notation is one of the best things about lisp..for example, if we want to add three numbers together, in ordinary.notation we have to use + twice,.2 + 3 + 4.while in lisp we just add another argument:.(+ 2 3 4).the way we ordinarily use +, it must have exactly two arguments:.one on the left and one on the right.  the flexibility of prefix.notation means that, in lisp, + can take any number of arguments,.including none:.> (+).0.> (+ 2).2.> (+ 2 3).5.> (+ 2 3 4).9.> (+ 2 3 4 5).14.because operators can take varying numbers of arguments, we need.parentheses to show where an expression begins and ends..expressions can be nested.  that is, the arguments in an expression.may themselves be complex expressions:.> (/ (- 7 1) (- 4 2)).3.in english, this is seven minus one, divided by four minus two..another beauty of lisp notation is: this is all there is.  all lisp.expressions are either atoms, like 1, or lists, which consist of.zero or more expressions enclosed in parentheses.  these are valid.lisp expressions:.2   (+ 2 3)   (+ 2 3 4)   (/ (- 7 1) (- 4 2)).as we will see, all lisp code takes this form.  a language like c.has a more complicated syntax:  arithmetic expressions use infix.notation; function calls use a sort of prefix notation, with the.arguments delimited by commas; expressions are delimited by.semicolons; and blocks of code are delimited by curly brackets..in lisp, we use a single notation to express all these ideas..2.2 evaluation.in the previous section, we typed expressions into the toplevel,.and lisp displayed their values.  in this section we take a closer.look at how expressions are evaluated..in lisp, + is a function, and an expression like (+ 2 3) is a.function call.  when lisp evaluates a function call, it does so in.two steps:.1. first the arguments are evaluated, from left to right.  in.this case, each argument evaluates to itself, so the values.of the arguments are 2 and 3, respectively..2. the values of the arguments are passed to the function named.by the operator.  in this case, it is the + function, which.returns 5..if any of the arguments are themselves function calls, they are.evaluated according to the same rules.  so when (/ (- 7 1) (- 4 2)).is evaluated, this is what happens:.1. lisp evaluates (- 7 1): 7 evaluates to 7 and 1 evaluates to 1..these values are passed to the function -, which returns 6..2. lisp evaluates (- 4 2): 4 evaluates to 4 and 2 evaluates to 2..these values are passed to the function -, which returns 2..3. the values 6 and 2 are sent to the function /, which returns 3..not all the operators in common lisp are functions, but most are..and function calls are always evaluated this way.  the arguments.are evaluated left-to-right, and their values are passed to the.function, which returns the value of the expression as a whole..this is called the evaluation rule for common lisp..one operator that doesn't follow the common lisp evaluation rule.is quote.  the quote operator is a special operator, meaning that.it has a distinct evaluation rule of its own.  and the rule is: do.nothing.  the quote operator takes a single argument, and just.returns it verbatim:.> (quote (+ 3 5)).(+ 3 5).for convenience, common lisp defines ' as an abbreviation for quote..you can get the effect of calling quote by affixing a ' to the.front of any expression:.> '(+ 3 5).(+ 3 5).it is much more common to use the abbreviation than to write out.the whole quote expression..lisp provides the quote as a way of protecting expressions from.evaluation.  the next section will explain how such protection can.be useful..---------------------------------------------------------------------.getting out of trouble.if you type something that lisp can't understand, it will display.an error message and put you into a version of the toplevel called.a break loop.  the break loop gives experienced programmers a chance.to figure out what caused an error, but initially the only thing.you will want to do in a break loop is get out of it.  what you.have to type to get back to the toplevel depends on your implementation.of common lisp.  in this hypothetical implementation, :abort does.it:.> (/ 1 0).error: division by zero..options: :abort, :backtrace.>> :abort.>.appendix a shows how to debug lisp programs, and gives examples of.some of the most common errors..---------------------------------------------------------------------.2.3 data.lisp offers all the data types we find in most other languages,.along with several others that we don't.  one data type we have.used already is the integer, which is written as a series of digits:.256.  another data type lisp has in common with most other languages.is the string, which is represented as a series of characters.surrounded by double-quotes: "ora et labora".  integers and strings.both evaluate to themselves..two lisp data types that we don't commonly find in other languages.are symbols and lists.  symbols are words.  ordinarily they are.converted to uppercase, regardless of how you type them:.> 'artichoke.artichoke.symbols do not (usually) evaluate to themselves, so if you want to.refer to a symbol, you should quote it, as above..lists are represented as zero or more elements enclosed in parentheses..the elements can be of any type, including lists.  you have to.quote lists, or lisp would take them for function calls:.> '(my 3 "sons").(my 3 "sons").> '(the list (a b c) has 3 elements).(the list (a b c) has 3 elements).notice that one quote protects a whole expression, including.expressions within it..you can build lists by calling list.  since list is a function,.its arguments are evaluated.  here we see a call to + within a call.to list:.> (list 'my (+ 2 1) "sons").(my 3 "sons").we are now in a position to appreciate one of the most remarkable.features of lisp.  lisp programs are expressed as lists.  if the.arguments of flexibility and elegance did not convince you that.lisp notation is a valuable tool, this point should.  it means that.lisp programs can generate lisp code.  lisp programmers can (and.often do) write programs to write their programs for them..such programs are not considered till chapter 10, but it is important.even at this stage to understand the relation between expressions.and lists, if only to avoid being confused by it.  this is why we.need the quote.  if a list is quoted, evaluation returns the list.itself; if it is not quoted, the list is treated as code, and.evaluation returns its value:.> (list '(+ 2 1) (+ 2 1)).((+ 2 1) 3).here the first argument is quoted, and so yields a list.  the second.argument is not quoted, and is treated as a function call, yielding.a number..in common lisp, there are two ways of representing the empty list..you can represent it as a pair of parentheses with nothing between.them, or you can use the symbol nil.  it doesn't matter which way.you write the empty list, but it will be displayed as nil:.> ().nil.> nil.nil.you don't have to quote nil (though it wouldn't hurt) because nil.evaluates to itself..2.4 list operations.the function cons builds lists.  if its second argument is a list,.it returns a new list with the first argument added to the front:.> (cons 'a '(b c d)).(a b c d).we can build up lists by consing new elements onto an empty list..the list function that we saw in the previous section is just a.more convenient way of consing several things onto nil:.> (cons 'a (cons 'b nil)).(a b).> (list 'a 'b).(a b).the primitive functions for extracting the elements of lists are.car and cdr. [1] the car of a list is the first element, and the.cdr is everything after the first element:.> (car '(a b c)).a.> (cdr '(a b c)).(b c).you can use combinations of car and cdr to reach any element of a.list.  if you want to get the third element, you could say:.> (car (cdr (cdr '(a b c d)))).c.however, you can do the same thing more easily by calling third:.> (third '(a b c d)).c.2.5 truth.in common lisp, the symbol t is the default representation for.truth.  like nil, t evaluates to itself.  the function listp returns.true if its argument is a list:.> (listp '(a b c)).t.a function whose return value is intended to be interpreted as.truth or falsity is called a predicate.  common lisp predicates.often have names that end with p..falsity in common lisp is represented by nil, the empty list.  if.we give listp an argument that isn't a list, it returns nil:.> (listp 27).nil.because nil plays two roles in common lisp, the function null,.which returns true of the empty list,.> (null nil).t.and the function not, which returns true if its argument is false,.> (not nil).t.do exactly the same thing..the simplest conditional in common lisp is if.  it usually takes.three arguments: a test expression, a then expression, and an else.expression.  the test expression is evaluated.  if it returns true,.the then expression is evaluated and its value is returned.  if.the test expression returns false, the else expression is evaluated.and its value is returned:.> (if (listp '(a b c)).(+ 1 2).(+ 5 6)).3.> (if (listp 27).(+ 1 2).(+ 5 6)).11.like quote, if is a special operator.  it could not possibly be.implemented as a function, because the arguments in a function call.are always evaluated, and the whole point of if is that only one.of the last two arguments is evaluated..the last argument to if is optional.  if you omit it, it defaults.to nil:.> (if (listp 27).(+ 2 3)).nil.although t is the default representation for truth, everything.except nil also counts as true in a logical context:.> (if 27 1 2).1.the logical operators and and or resemble conditionals.  both take.any number of arguments, but only evaluate as many as they need to.in order to decide what to return.  if all its arguments are true.(that is, not nil), then and returns the value of the last one:.> (and t (+ 1 2)).3.but if one of the arguments turns out to be false, none of the.arguments after that get evaluated.  similarly for or, which stops.as soon as it finds an argument that is true...these two operators are macros.  like special operators, macros.can circumvent the usual evaluation rule.  chapter 10 explains how.to write macros of your own...2.6 functions.you can define new functions with defun.  it usually takes three.or more arguments: a name, a list of parameters, and one or more.expressions that will make up the body of the function.  here is.how we might define third:.> (defun our-third (x).(car (cdr (cdr x)))).our-third.the first argument says that the name of this function will be.our-third.  the second argument, the list (x), says that the function.will take exactly one argument: x.  a symbol used as a placeholder.in this way is called a variable.  when the variable represents an.argument to a function, as x does, it is also called a parameter..the rest of the definition, (car (cdr (cdr x))), is known as the.body of the function.  it tells lisp what it has to do to calculate.the return value of the function.  so a call to our-third returns.(car (cdr (cdr x))), for whatever x we give as the argument:.> (our-third '(a b c d)).c.now that we've seen variables, it's easier to understand what.symbols are.  they are variable names, existing as objects in their.own right.  and that's why symbols, like lists, have to be quoted..a list has to be quoted because otherwise it will be treated as.code; a symbol has to be quoted because otherwise it will be treated.as a variable..you can think of a function definition as a generalized version of.a lisp expression.  the following expression tests whether the sum.of 1 and 4 is greater than 3:.> (> (+ 1 4) 3).t.by replacing these particular numbers with variables, we can write.a function that will test whether the sum of any two numbers is.greater than a third:.> (defun sum-greater (x y z).(> (+ x y) z)).sum-greater.> (sum-greater 1 4 3).t.lisp makes no distinction between a program, a procedure, and a.function.  functions do for everything (and indeed, make up most.of the language itself).  if you want to consider one of your.functions as the main function, you can, but you will ordinarily.be able to call any function from the toplevel.  among other things,.this means that you will be able to test your programs piece by.piece as you write them..2.7 recursion.the functions we defined in the previous section called other.functions to do some of their work for them.  for example, sum-greater.called + and >.  a function can call any function, including itself..a function that calls itself is recursive.  the common lisp function.member tests whether something is an element of a list.  here is.a simplified version defined as a recursive function:.(defun our-member (obj lst).(if (null lst).nil.(if (eql (car lst) obj).lst.(our-member obj (cdr lst))))).the predicate eql tests whether its two arguments are identical;.aside from that, everything in this definition is something we have.seen before.  here it is in action:.> (our-member 'b '(a b c)).(b c).> (our-member 'z '(a b c)).nil.the definition of our-member corresponds to the following english.description.  to test whether an object obj is a member of a list.lst, we.1. first check whether lst is empty.  if it is, then obj is.clearly not a member of it, and we're done..2. otherwise, if obj is the first element of lst, it is a member..3. otherwise obj is only a member of lst if it is a member of.the rest of lst..when you want to understand how a recursive function works, it can.help to translate it into a description of this kind..many people find recursion difficult to understand at first.  a.lot of the difficulty comes from using a mistaken metaphor for.functions.  there is a tendency to think of a function as a sort.of machine.  raw materials arrive as parameters; some of the work.is farmed out to other functions; finally the finished product is.assembled and shipped out as the return value.  if we use this.metaphor for functions, recursion becomes a paradox.  how can a.machine farm out work to itself?  it is already busy..a better metaphor for a function would be to think of it as a.process one goes through.  recursion is natural in a process.  we.often see recursive processes in everyday life.  for example,.suppose a historian was interested in population changes in european.history.  the process of examining a document might be as follows:.1. get a copy of the document...2. look for information relating to population changes..3. if the document mentions any other documents that might be.useful, examine them..this process is easy enough to understand, yet it is recursive,.because the third step could entail one or more applications of.the same process..so don't think of our-member as a machine that tests whether.something is in a list.  think of it instead as the rules for.determining whether something is in a list.  if we think of functions.in this light, the paradox of recursion disappears. [2].2.8 reading lisp.the pseudo-member defined in the preceding section ends with five.parentheses.  more elaborate function definitions might end with.seven or eight.  people who are just learning lisp find the sight.of so many parentheses discouraging.  how is one to read, let alone.write, such code? how is one to see which parenthesis matches which?.the answer is, one doesn't have to.  lisp programmers read and.write code by indentation, not by parentheses.  when they're writing.code, they let the text editor show which parenthesis matches which..any good editor, particularly if it comes with a lisp system, should.be able to do paren-matching.  in such an editor, when you type a.parenthesis, the editor indicates the matching one.  if your editor.doesn't match parentheses, stop now and figure out how to make it,.because it is virtually impossible to write lisp code without it..[in vi, you can turn on paren-matching with :set sm.  in emacs,.m-x lisp-mode is a good way to get it.].with a good editor, matching parentheses ceases to be an issue when.you're writing code.  and because there are universal conventions.for lisp indentation, it's not an issue when you're reading code.either.  because everyone uses the same conventions, you can read.code by the indentation, and ignore the parentheses..any lisp hacker, however experienced, would find it difficult to.read the definition of our-member if it looked like this:.(defun our-member (obj lst) (if (null lst) nil (if.(eql (car lst) obj) lst (our-member obj (cdr lst))))).but when the code is properly indented, one has no trouble.  you.could omit most of the parentheses and still read it:.defun our-member (obj lst).if null lst.nil.if eql (car lst) obj.lst.our-member obj (cdr lst).indeed, this is a practical approach when you're writing code on.paper.  later, when you type it in, you can take advantage of.paren-matching in the editor..2.9 input and output.so far we have done i/o implicitly, by taking advantage of the.toplevel.  for real interactive programs this is not likely to be.enough.  in this section we look at a few functions for input and.output..the most general output function in common lisp is format.  it.takes two or more arguments: the first indicates where the output.is to be printed, the second is a string template, and the remaining.arguments are usually objects whose printed representations are to.be inserted into the template.  here is a typical example:.> (format t "~a plus ~a equals ~a.~%" 2 3 (+ 2 3)).2 plus 3 equals 5..nil.notice that two things get displayed here.  the first line is.displayed by format.  the second line is the value returned by the.call to format, displayed in the usual way by the toplevel..ordinarily a function like format is not called directly from the.toplevel, but used within programs, so the return value is never.seen..the first argument to format, t, indicates that the output is to.be sent to the default place.  ordinarily this will be the toplevel..the second argument is a string that serves as a template for.output.  within this string, each ~a indicates a position to be.filled, and the ~% indicates a newline.  the positions are filled.by the values of the remaining arguments, in order..the standard function for input is read.  when given no arguments,.it reads from the default place, which will usually be the toplevel..here is a function that prompts the user for input, and returns.whatever is entered:.(defun askem (string).(format t "~a" string).(read)).it behaves as follows:.> (askem "how old are you? ").how old are you? 29.29.bear in mind that read will sit waiting indefinitely until you type.something and (usually) hit return.  so it's unwise to call read.without printing an explicit prompt, or your program may give the.impression that it is stuck, while in fact it's just waiting for.input..the second thing to know about read is that it is very powerful:.read is a complete lisp parser.  it doesn't just read characters.and return them as a string.  it parses what it reads, and returns.the lisp object that results.  in the case above, it returned a.number..short as it is, the definition of askem shows something we haven't.seen before in a function.  its body contains more than one.expression.  the body of a function can have any number of expressions..when the function is called, they will be evaluated in order, and.the function will return the value of the last one..in all the sections before this, we kept to what is called "pure".lisp---that is, lisp without side-effects.  a side-effect is some.change to the state of the world that happens as a consequence of.evaluating an expression.  when we evaluate a pure lisp expression.like (+ 1 2), there are no side-effects; it just returns a value..but when we call format, as well as returning a value, it prints.something.  that's one kind of side-effect..when we are writing code without side-effects, there is no point.in defining functions with bodies of more than one expression..the value of the last expression is returned as the value of the.function, but the values of any preceding expressions are thrown.away.  if such expressions didn't have side-effects, you would have.no way of telling whether lisp bothered to evaluate them at all..2.10 variables.one of the most frequently used operators in common lisp is let,.which allows you to introduce new local variables:.> (let ((x 1) (y 2)).(+ x y)).3.a let expression has two parts.  first comes a list of instructions.for creating variables, each of the form (variable expression)..each variable will initially be set to the value of the corresponding.expression.  so in the example above, we create two new variables,.x and y, which are initially set to 1 and 2, respectively.  these.variables are valid within the body of the let..after the list of variables and values comes a body of expressions,.which are evaluated in order.  in this case there is only one, a.call to +.  the value of the last expression is returned as the.value of the let.  here is an example of a more selective version.of askem written using let:.(defun ask-number ().(format t "please enter a number. ").(let ((val (read))).(if (numberp val).val.(ask-number)))).this function creates a variable val to hold the object returned.by read.  because it has a handle on this object, the function can.look at what you entered before deciding whether or not to return.it.  as you probably guessed, numberp is a predicate that tests.whether its argument is a number..if the value entered by the user isn't a number, ask-number calls.itself.  the result is a function that insists on getting a number:.> (ask-number).please enter a number. a.please enter a number. (ho hum).please enter a number. 52.52.variables like those we have seen so far are called local variables..they are only valid within a certain context.  there is another.kind of variable, called a global variable, that can be visible.everywhere..[the real distinction here is between lexical and special variables,.but we will not need to consider this until chapter 6.].you can create a global variable by giving a symbol and a value to.defparameter:.> (defparameter *glob* 99).*glob*.such a variable will then be accessible everywhere, except in.expressions that create a new local variable with the same name..to avoid the possibility of this happening by accident, it's.conventional to give global variables names that begin and end with.asterisks.  the name of the variable we just created would be.pronounced "star-glob-star"..you can also define global constants, by calling defconstant:.(defconstant limit (+ *glob* 1)).there is no need to give constants distinctive names, because it.will cause an error if anyone uses the same name for a variable..if you want to check whether some symbol is the name of a global.variable or constant, use boundp:.> (boundp '*glob*).t.2.11 assignment.in common lisp the most general assignment operator is setf.  we.can use it to do assignments to either kind of variable:.> (setf *glob* 98).98.> (let ((n 10)).(setf n 2).n).2.when the first argument to setf is a symbol that is not the name.of a local variable, it is taken to be a global variable:.> (setf x (list 'a 'b 'c)).(a b c).that is, you can create global variables implicitly, just by.assigning them values.  in source files, at least, it is better.style to use explicit defparameters..you can do more than just assign values to variables.  the first.argument to setf can be an expression as well as a variable name..in such cases, the value of the second argument is inserted in the.place referred to by the first:.> (setf (car x) 'n).n.> x.(n b c).the first argument to setf can be almost any expression that refers.to a particular place.  all such operators are marked as "settable".in appendix d..you can give any (even) number of arguments to setf.  an expression.of the form.(setf a b.c d.e f).is equivalent to three separate calls to setf in sequence:.(setf a b).(setf c d).(setf e f).2.12 functional programming.functional programming means writing programs that work by returning.values, instead of by modifying things.  it is the dominant paradigm.in lisp.  most built-in lisp functions are meant to be called for.the values they return, not for side-effects..the function remove, for example, takes an object and a list and.returns a new list containing everything but that object:.> (setf lst '(c a r a t)).(c a r a t).> (remove 'a lst).(c r t).why not just say that remove removes an object from a list?  because.that's not what it does.  the original list is untouched afterwards:.> lst.(c a r a t).so what if you really do want to remove something from a list? in.lisp you generally do such things by passing the list as an argument.to some function, and using setf with the return value.  to remove.all the as from a list x, we say:.(setf x (remove 'a x)).functional programming means, essentially, avoiding setf and things.like it.  at first sight it may be difficult to imagine how this.is even possible, let alone desirable.  how can one build programs.just by returning values?.it would be inconvenient to do without side-effects entirely..however, as you read further, you may be surprised to discover how.few you really need.  and the more side-effects you do without,.the better off you'll be..one of the most important advantages of functional programming is.that it allows interactive testing.  in purely functional code,.you can test each function as you write it.  if it returns the.values you expect, you can be confident that it is correct.  the.added confidence, in the aggregate, makes a huge difference.  you.have instant turnaround when you make changes anywhere in a program..and this instant turnaround enables a whole new style of programming,.much as the telephone, as compared to letters, enabled a new style.of communication..2.13 iteration.when we want to do something repeatedly, it is sometimes more.natural to use iteration than recursion.  a typical case for.iteration is to generate some sort of table.  this function.(defun show-squares (start end).(do ((i start (+ i 1))).((> i end) 'done).(format t "~a ~a~%" i (* i i)))).prints out the squares of the integers from start to end:.> (show-squares 2 5).2 4.3 9.4 16.5 25.done.the do macro is the fundamental iteration operator in common lisp..like let, do can create variables, and the first argument is a list.of variable specifications.  each element of this list can be of.the form.(variable initial update).where variable is a symbol, and initial and update are expressions..initially each variable will be set to the value of the corresponding.initial; on each iteration it will be set to the value of the.corresponding update. the do in show-squares creates just one.variable, i.  on the first iteration i will be set to the value of.start, and on successive iterations its value will be incremented.by one..the second argument to do should be a list containing one or more.expressions.  the first expression is used to test whether iteration.should stop.  in the case above, the test expression is (> i end)..the remaining expressions in this list will be evaluated in order.when iteration stops, and the value of the last will be returned.as the value of the do.  so show-squares will always return done..the remaining arguments to do comprise the body of the loop.  they.will be evaluated, in order, on each iteration.  on each iteration.the variables are updated, then the termination test is evaluated,.and then (if the test failed) the body is evaluated..for comparison, here is a recursive version of show-squares:.(defun show-squares (i end).(if (> i end).'done.(progn.(format t "~a ~a~%" i (* i i)).(show-squares (+ i 1) end)))).the only thing new in this function is progn.  it takes any number.of expressions, evaluates them in order, and returns the value of.the last..common lisp has simpler iteration operators for special cases.  to.iterate through the elements of a list, for example, you would be.more likely to use dolist.  here is a function that returns the.length of a list:.(defun our-length (lst).(let ((len 0)).(dolist (obj lst).(setf len (+ len 1))).len)).here dolist takes an argument of the form (variable expression),.followed by a body of expressions. the body will be evaluated with.variable bound to successive elements of the list returned by.expression.  so the loop above says, for each obj in lst, increment.len..the obvious recursive version of this function would be:.(defun our-length (lst).(if (null lst).0.(+ (our-length (cdr lst)) 1))).or, if the list is empty, its length is zero; otherwise it is the.length of the cdr plus one.  this version of our-length is cleaner,.but because it's not tail-recursive (section 13.2), it won't be as.efficient..2.14 functions as objects.in lisp, functions are regular objects, like symbols or strings or.lists.  if we give the name of a function to function, it will.return the associated object.  like quote, function is a special.operator, so we don't have to quote the argument:.> (function +).#.this strange-looking return value is the way a function might be.displayed in a typical common lisp implementation..until now we have only dealt with objects that look the same when.lisp displays them as when we typed them in.  this convention does.not apply to functions.  internally, a built-in function like + is.likely to be a segment of machine language code.  a common lisp.implementation may choose whatever external representation it likes..just as we can use ' as an abbreviation for quote, we can use \#'.as an abbreviation for function:.> #'+.#.this abbreviation is known as sharp-quote..like any other kind of object, we can pass functions as arguments..one function that takes a function as an argument is apply. it.takes a function and a list of arguments for it, and returns the.result of applying the function to the arguments:.> (apply #'+ '(1 2 3)).6.> (+ 1 2 3).6.it can be given any number of arguments, so long as the last is a.list:.> (apply #'+ 1 2 '(3 4 5)).15.the function funcall does the same thing but does not need the.arguments to be packaged in a list:.> (funcall #'+ 1 2 3).6.the defun macro creates a function and gives it a name.  but.functions don't have to have names, and we don't need defun to.define them.  like most other kinds of lisp objects, we can refer.to functions literally..to refer literally to an integer, we use a series of digits; to.refer literally to a function, we use what's called a lambda.expression.  a lambda expression is a list containing the symbol.lambda, followed by a list of parameters, followed by a body of.zero or more expressions..here is a lambda expression representing a function that takes two.numbers and returns their sum:.(lambda (x y).(+ x y)).the list (x y) is the parameter list, and after it comes the body.of the function..a lambda expression can be considered as the name of a function..like an ordinary function name, a lambda expression can be the.first element of a function call,.> ((lambda (x) (+ x 100)) 1).101.and by affixing a sharp-quote to a lambda expression, we get the.corresponding function,.> (funcall #'(lambda (x) (+ x 100)).1).101.among other things, this notation  allows us to use functions.without naming them..-----------------------------------------------------------------.what is lambda?.the lambda in a lambda expression is not an operator.  it is just.a symbol. [3]  in earlier dialects of lisp it had a purpose:.functions were represented internally as lists, and the only way.to tell a function from an ordinary list was to check if the first.element was the symbol lambda..in common lisp, you can express functions as lists, but they are.represented internally as distinct function objects.  so lambda is.no longer really necessary.  there would be no inconsistency in.requiring that functions be denoted as.((x) (+ x 100)).instead of.(lambda (x) (+ x 100)).but lisp programmers were used to beginning functions with the.symbol lambda, so common lisp retained it for the sake of tradition..-----------------------------------------------------------------.2.15 types.lisp has an unusually flexible approach to types.  in many languages,.variables are what have types, and you can't use a variable without.specifying its type.  in common lisp, values have types, not.variables.  you could imagine that every object had a label attached.to it, identifying its type.  this approach is called manifest.typing.  you don't have to declare the types of variables, because.any variable can hold objects of any type..though type declarations are never required, you may want to make.them for reasons of efficiency.  type declarations are discussed.in section 13.3..the built-in common lisp types form a hierarchy of subtypes and.supertypes.  an object always has more than one type.  for example,.the number 27 is of type fixnum, integer, rational, real, number,.atom, and t, in order of increasing generality.  (numeric types.are discussed in chapter 9.) the type t is the supertype of all.types, so everything is of type t..the function typep takes an object and a type specifier, and returns.true if the object is of that type:.> (typep 27 'integer).t.we will mention the various built-in types as we encounter them..2.16 looking forward.in this chapter we have barely scratched the surface of lisp.  and.yet a portrait of a very unusual language is beginning to emerge..to start with, the language has a single syntax to express all.program structure.  this syntax is based on the list, which is a.kind of lisp object.  functions, which are lisp objects in their.own right, can be expressed as lists.  and lisp is itself a lisp.program, made almost entirely of lisp functions no different from.the ones you can define yourself..don't worry if the relations between all these ideas are not entirely.clear.  lisp introduces so many novel concepts that it takes some.time to get used to all the new things you can do with it.  one.thing should be clear at least: there are some startlingly elegant.ideas here..richard gabriel once half-jokingly described c as a language for.writing unix. [4]  we could likewise describe lisp as a language.for writing lisp.  but this is a different kind of statement.  a.language that can be written in itself is fundamentally different.from a language good for writing some particular class of applications..it opens up a new way of programming:  as well as writing your.program in the language, you can improve the language to suit your.program.  if you want to understand the essence of lisp programming,.this idea is a good place to begin..summary.1.  lisp is an interactive language.  if you type an expression.into the toplevel, lisp will display its value..2.  lisp programs consist of expressions. an expression can be an.atom, or a list of an operator followed by zero or more arguments..prefix syntax means that operators can take any number of.arguments..3.  the evaluation rule for common lisp function calls: evaluate.the arguments left to right, and pass them to the function.denoted by the operator.  the quote operator has its own.evaluation rule, which is to return the argument unchanged..4.  along with the usual data types, lisp has symbols and lists..because lisp programs are expressed as lists, it's easy to.write programs that write programs..5.  the three basic list functions are cons, which builds a list;.car, which returns the first element; and cdr, which returns.everything after the first element..6.  in common lisp, t represents true and nil represents false..in a logical context, anything except nil counts as true.  the.basic conditional is if.  the and and or operators resemble.conditionals..7.  lisp consists mainly of functions.  you can define new ones.with defun..8.  a function that calls itself is recursive.  a recursive function.should be considered as a process rather than a machine..9.  parentheses are not an issue, because programmers read and.write lisp by indentation..10. the basic i/o functions are read, which includes a complete.lisp parser, and format, which generates output based on.templates..11. you can create new local variables with let, and global variables.with defparameter..12. the assignment operator is setf.  its first argument can be an.expression..13. functional programming, which means avoiding side-effects, is.the dominant paradigm in lisp..14. the basic iteration operator is do..15. functions are regular lisp objects.  they can be passed as.arguments, and denoted by lambda expressions..16. in lisp, values have types, not variables..problems.1.  describe what happens when the following expressions are.evaluated:.a. (+ (- 5 1) (+ 3 7)).b. (list 1 (+ 2 3)).c. (if (listp 1) (+ 1 2) (+ 3 4)).d. (list (and (listp 3) t) (+ 1 2)).2.  give three distinct cons expressions that return (a b c)..3.  using car and cdr, define a function to return the fourth.element of a list..4.  define a function that takes two arguments and returns the.greater of the two..5.  what do these functions do?.a. (defun enigma (x).(and (not (null x)).(or (null (car x)).(enigma (cdr x))))).b. (defun mystery (x y).(if (null y).nil.(if (eql (car y) x).0.(let ((z (mystery x (cdr y)))).(and z (+ z 1)))))).6.  what could occur in place of the x in each of the following.exchanges?.a. > (car (x (cdr '(a (b c) d)))).b.b. > (x 13 (/ 1 0)).13.c. > (x #'list 1 nil).(1).7.  using only operators introduced in this chapter, define a.function that takes a list as an argument and returns true if.one of its elements is a list..8.  give iterative and recursive definitions of a function that.a. takes a positive integer and prints that many dots..b. takes a list and returns the number of times the symbol a.occurs in it..9.  a friend is trying to write a function that returns the sum of.all the non-nil elements in a list.  he has written two versions.of this function, and neither of them work.  explain what's.wrong with each, and give a correct version:.a. (defun summit (lst).(remove nil lst).(apply #'+ lst))..b. (defun summit (lst).(let ((x (car lst))).(if (null x).(summit (cdr lst)).(+ x (summit (cdr lst)))))).notes.[1] the names car and cdr derive from the internal representation.of lists in the first lisp implementation: car stood for "contents.of the address part of the register" and cdr stood for "contents.of the decrement part of the register.".[2] readers who have trouble with the concept of recursion may want.to consult either of the following:.touretzky, david s. common lisp: a gentle introduction to symbolic.computation. benjamin/cummings, redwood city (ca), 1990, chapter 8..friedman, daniel p., and matthias felleisen. the little lisper..mit press, cambridge, 1987..[3] in ansi common lisp there is also a lambda macro that allows.you to write (lambda (x) x) for #'(lambda (x) x).  since the use.of this macro obscures the symmetry between lambda expressions and.symbolic function names (where you still have to use sharp-quote),.it yields a specious sort of elegance at best..[4] gabriel, richard p.  lisp: good news, bad news, how to win big..ai expert, june 1991
, p. 34..-------------------------------------------------------------------.available at: http://www.amazon.com/exec/obidos/asin/0133708756<eot><sot>programming bottom-up.1993.(this essay is from the introduction to on lisp.).it's a long-standing principle of programming style that the functional.elements of a program should not be too large.  if some component of a.program grows beyond the stage where it's readily comprehensible,.it becomes a mass of complexity which conceals errors as easily.as a big city conceals fugitives.  such software will be.hard to read, hard to test, and hard to debug.in accordance with this principle, a large program must be divided.into pieces, and the larger the program, the more it must be divided..how do you divide a program?  the traditional approach is.called top-down design: you say "the purpose of the.program is to do these seven things, so i divide it into seven major.subroutines.  the first subroutine has to do these four things, so.it in turn will have four of its own subroutines," and so on..this process continues until the whole program has the right level.of granularity-- each part large enough to do something substantial,.but small enough to be understood as a single unit.experienced lisp programmers divide up their programs differently..as well as top-down design, they follow a principle which.could be called bottom-up design-- changing the language.to suit the problem..in lisp, you don't just write your program down toward the language,.you also build the language up toward your program.  as you're.writing a program you may think "i wish lisp had such-and-such an.operator." so you go and write it. afterward.you realize that using the new operator would simplify the design.of another part of the program, and so on..language and program evolve together..like the border between two warring states,.the boundary between language and program is drawn and redrawn,.until eventually it comes to rest along the mountains and rivers,.the natural frontiers of your problem..in the end your program will look as if the language had been.designed for it..and when language and.program fit one another well, you end up with code which is.clear, small, and efficient..it's worth emphasizing that bottom-up design doesn't mean.just writing the same program in a different order.  when you.work bottom-up, you usually end up with a different program..instead of a single, monolithic program,.you will get a larger language with more abstract operators,.and a smaller program written in it.  instead of a lintel,.you'll get an arch..in typical code, once you abstract out the parts which are.merely bookkeeping, what's left is much shorter;.the higher you build up the language, the less distance you.will have to travel from the top down to it..this brings several advantages:.by making the language do more of the work, bottom-up design.yields programs which are smaller and more agile.  a shorter.program doesn't have to be divided into so many components, and.fewer components means programs which are easier to read or.modify.  fewer components also means fewer connections between.components, and thus less chance for errors there.  as.industrial designers strive to reduce the number of moving parts.in a machine, experienced lisp programmers use bottom-up design.to reduce the size and complexity of their programs. bottom-up design promotes code re-use..when you write two.or more programs, many of the utilities you wrote for the first.program will also be useful in the succeeding ones.  once you've.acquired a large substrate of utilities, writing a new program can.take only a fraction of the effort it would require if you had to.start with raw lisp. bottom-up design makes programs easier to read..an instance of this type.of abstraction asks the reader to understand a general-purpose operator;.an instance of functional abstraction asks the reader to understand.a special-purpose subroutine. [1] because it causes you always to be on the lookout for patterns.in your code, working bottom-up helps to clarify your ideas about.the design of your program.  if two distant components of a program.are similar in form, you'll be led to notice the similarity and.perhaps to redesign the program in a simpler way..bottom-up design is possible to a certain degree in languages.other than lisp.  whenever you see library functions,.bottom-up design is happening.  however, lisp gives you much broader.powers in this department, and augmenting the language plays a.proportionately larger role in lisp style-- so much so that.lisp is not just a different language, but a whole different way.of programming.it's true that this style of development is better suited to.programs which can be written by small groups.  however, at the.same time, it extends the limits of what can be done by a small.group.  in the mythical man-month,.frederick brooks.proposed that the productivity of a group of programmers.does not grow linearly with its size.  as the size of the.group increases, the productivity of individual programmers.goes down.  the experience of lisp programming.suggests a more cheerful way.to phrase this law: as the size of the group decreases, the.productivity of individual programmers goes up..a small group wins, relatively speaking, simply because it's.smaller.  when a small group also takes advantage of the.techniques that lisp makes possible, it can.win outright.new: download on lisp for free..[1] "but no one can read.the program without understanding all your new utilities.".to see why such statements are usually mistaken,.see section 4.8.<eot><sot>this year we can end the death penalty in california.november 2016
if you're a california voter, there is an important proposition.on your ballot this year: proposition 62, which bans the death.penalty.when i was younger i used to think the debate about the death.penalty was about when it's ok to take a human life.  is it ok.to kill a killer?but that is not the issue here.the real world does not work like the version i was shown on tv growing up.  the police.often arrest the wrong person..defendants' lawyers are often incompetent.  and prosecutors.are often motivated more by publicity than justice.in the real world,.about 4% of people sentenced to death.are innocent..so this is not about whether it's ok to kill killers. this.is about whether it's ok to kill innocent people.a child could answer that one for you.this year, in california, you have a chance to end this, by.voting yes on proposition 62. but beware, because there is another.proposition, proposition 66, whose goal is to make it.easier to execute people. so yes on 62, no on 66.it's time.<eot><sot>rss.aaron swartz created a scraped.feed.of the essays page.